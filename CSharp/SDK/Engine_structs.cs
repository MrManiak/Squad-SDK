// Name: Sq, Version: b21

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace UFT
{
//---------------------------------------------------------------------------
// Enums
//---------------------------------------------------------------------------

// Enum Engine.ENetRole
public enum ENetRole : byte
{
	ROLE_None                      = 0,
	ROLE_SimulatedProxy            = 1,
	ROLE_AutonomousProxy           = 2,
	ROLE_Authority                 = 3,
	ROLE_MAX                       = 4
}

// Enum Engine.EAttachLocation
public enum EAttachLocation : byte
{
	EAttachLocation__KeepRelativeOffset = 0,
	EAttachLocation__KeepWorldPosition = 1,
	EAttachLocation__SnapToTarget  = 2,
	EAttachLocation__SnapToTargetIncludingScale = 3,
	EAttachLocation__EAttachLocation_MAX = 4
}

// Enum Engine.EAttachmentRule
public enum EAttachmentRule : byte
{
	EAttachmentRule__KeepRelative  = 0,
	EAttachmentRule__KeepWorld     = 1,
	EAttachmentRule__SnapToTarget  = 2,
	EAttachmentRule__EAttachmentRule_MAX = 3
}

// Enum Engine.EDetachmentRule
public enum EDetachmentRule : byte
{
	EDetachmentRule__KeepRelative  = 0,
	EDetachmentRule__KeepWorld     = 1,
	EDetachmentRule__EDetachmentRule_MAX = 2
}

// Enum Engine.ENetDormancy
public enum ENetDormancy : byte
{
	DORM_Never                     = 0,
	DORM_Awake                     = 1,
	DORM_DormantAll                = 2,
	DORM_DormantPartial            = 3,
	DORM_Initial                   = 4,
	DORM_MAX                       = 5
}

// Enum Engine.EAutoReceiveInput
public enum EAutoReceiveInput : byte
{
	EAutoReceiveInput__Disabled    = 0,
	EAutoReceiveInput__Player0     = 1,
	EAutoReceiveInput__Player1     = 2,
	EAutoReceiveInput__Player2     = 3,
	EAutoReceiveInput__Player3     = 4,
	EAutoReceiveInput__Player4     = 5,
	EAutoReceiveInput__Player5     = 6,
	EAutoReceiveInput__Player6     = 7,
	EAutoReceiveInput__Player7     = 8,
	EAutoReceiveInput__EAutoReceiveInput_MAX = 9
}

// Enum Engine.ESpawnActorCollisionHandlingMethod
public enum ESpawnActorCollisionHandlingMethod : byte
{
	ESpawnActorCollisionHandlingMethod__Undefined = 0,
	ESpawnActorCollisionHandlingMethod__AlwaysSpawn = 1,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButAlwaysSpawn = 2,
	ESpawnActorCollisionHandlingMethod__AdjustIfPossibleButDontSpawnIfColliding = 3,
	ESpawnActorCollisionHandlingMethod__DontSpawnIfColliding = 4,
	ESpawnActorCollisionHandlingMethod__ESpawnActorCollisionHandlingMethod_MAX = 5
}

// Enum Engine.ERotatorQuantization
public enum ERotatorQuantization : byte
{
	ERotatorQuantization__ByteComponents = 0,
	ERotatorQuantization__ShortComponents = 1,
	ERotatorQuantization__ERotatorQuantization_MAX = 2
}

// Enum Engine.EVectorQuantization
public enum EVectorQuantization : byte
{
	EVectorQuantization__RoundWholeNumber = 0,
	EVectorQuantization__RoundOneDecimal = 1,
	EVectorQuantization__RoundTwoDecimals = 2,
	EVectorQuantization__EVectorQuantization_MAX = 3
}

// Enum Engine.EAutoPossessAI
public enum EAutoPossessAI : byte
{
	EAutoPossessAI__Disabled       = 0,
	EAutoPossessAI__PlacedInWorld  = 1,
	EAutoPossessAI__Spawned        = 2,
	EAutoPossessAI__PlacedInWorldOrSpawned = 3,
	EAutoPossessAI__EAutoPossessAI_MAX = 4
}

// Enum Engine.EReflectedAndRefractedRayTracedShadows
public enum EReflectedAndRefractedRayTracedShadows : byte
{
	EReflectedAndRefractedRayTracedShadows__Disabled = 0,
	EReflectedAndRefractedRayTracedShadows__Hard_shadows = 1,
	EReflectedAndRefractedRayTracedShadows__Area_shadows = 2,
	EReflectedAndRefractedRayTracedShadows__EReflectedAndRefractedRayTracedShadows_MAX = 3
}

// Enum Engine.ETranslucencyType
public enum ETranslucencyType : byte
{
	ETranslucencyType__Raster      = 0,
	ETranslucencyType__RayTracing  = 1,
	ETranslucencyType__ETranslucencyType_MAX = 2
}

// Enum Engine.EReflectionsType
public enum EReflectionsType : byte
{
	EReflectionsType__ScreenSpace  = 0,
	EReflectionsType__RayTracing   = 1,
	EReflectionsType__EReflectionsType_MAX = 2
}

// Enum Engine.EAutoExposureMethod
public enum EAutoExposureMethod : byte
{
	AEM_Histogram                  = 0,
	AEM_Basic                      = 1,
	AEM_Manual                     = 2,
	AEM_MAX                        = 3
}

// Enum Engine.EBloomMethod
public enum EBloomMethod : byte
{
	BM_SOG                         = 0,
	BM_FFT                         = 1,
	BM_MAX                         = 2
}

// Enum Engine.EBlendMode
public enum EBlendMode : byte
{
	BLEND_Opaque                   = 0,
	BLEND_Masked                   = 1,
	BLEND_Translucent              = 2,
	BLEND_Additive                 = 3,
	BLEND_Modulate                 = 4,
	BLEND_AlphaComposite           = 5,
	BLEND_AlphaHoldout             = 6,
	BLEND_MAX                      = 7
}

// Enum Engine.EMouseLockMode
public enum EMouseLockMode : byte
{
	EMouseLockMode__DoNotLock      = 0,
	EMouseLockMode__LockOnCapture  = 1,
	EMouseLockMode__LockAlways     = 2,
	EMouseLockMode__LockInFullscreen = 3,
	EMouseLockMode__EMouseLockMode_MAX = 4
}

// Enum Engine.EWindowTitleBarMode
public enum EWindowTitleBarMode : byte
{
	EWindowTitleBarMode__Overlay   = 0,
	EWindowTitleBarMode__VerticalBox = 1,
	EWindowTitleBarMode__EWindowTitleBarMode_MAX = 2
}

// Enum Engine.EInputEvent
public enum EInputEvent : byte
{
	IE_Pressed                     = 0,
	IE_Released                    = 1,
	IE_Repeat                      = 2,
	IE_DoubleClick                 = 3,
	IE_Axis                        = 4,
	IE_MAX                         = 5
}

// Enum Engine.ERelativeTransformSpace
public enum ERelativeTransformSpace : byte
{
	RTS_World                      = 0,
	RTS_Actor                      = 1,
	RTS_Component                  = 2,
	RTS_ParentBoneSpace            = 3,
	RTS_MAX                        = 4
}

// Enum Engine.EComponentMobility
public enum EComponentMobility : byte
{
	EComponentMobility__Static     = 0,
	EComponentMobility__Stationary = 1,
	EComponentMobility__Movable    = 2,
	EComponentMobility__EComponentMobility_MAX = 3
}

// Enum Engine.EDetailMode
public enum EDetailMode : byte
{
	DM_Low                         = 0,
	DM_Medium                      = 1,
	DM_High                        = 2,
	DM_MAX                         = 3
}

// Enum Engine.ERadialImpulseFalloff
public enum ERadialImpulseFalloff : byte
{
	RIF_Constant                   = 0,
	RIF_Linear                     = 1,
	RIF_MAX                        = 2
}

// Enum Engine.ECollisionEnabled
public enum ECollisionEnabled : byte
{
	ECollisionEnabled__NoCollision = 0,
	ECollisionEnabled__QueryOnly   = 1,
	ECollisionEnabled__PhysicsOnly = 2,
	ECollisionEnabled__QueryAndPhysics = 3,
	ECollisionEnabled__ECollisionEnabled_MAX = 4
}

// Enum Engine.ECollisionChannel
public enum ECollisionChannel : byte
{
	ECC_WorldStatic                = 0,
	ECC_WorldDynamic               = 1,
	ECC_Pawn                       = 2,
	ECC_Visibility                 = 3,
	ECC_Camera                     = 4,
	ECC_PhysicsBody                = 5,
	ECC_Vehicle                    = 6,
	ECC_Destructible               = 7,
	ECC_EngineTraceChannel1        = 8,
	ECC_EngineTraceChannel2        = 9,
	ECC_EngineTraceChannel3        = 10,
	ECC_EngineTraceChannel4        = 11,
	ECC_EngineTraceChannel5        = 12,
	ECC_EngineTraceChannel6        = 13,
	ECC_GameTraceChannel1          = 14,
	ECC_GameTraceChannel2          = 15,
	ECC_GameTraceChannel3          = 16,
	ECC_GameTraceChannel4          = 17,
	ECC_GameTraceChannel5          = 18,
	ECC_GameTraceChannel6          = 19,
	ECC_GameTraceChannel7          = 20,
	ECC_GameTraceChannel8          = 21,
	ECC_GameTraceChannel9          = 22,
	ECC_GameTraceChannel10         = 23,
	ECC_GameTraceChannel11         = 24,
	ECC_GameTraceChannel12         = 25,
	ECC_GameTraceChannel13         = 26,
	ECC_GameTraceChannel14         = 27,
	ECC_GameTraceChannel15         = 28,
	ECC_GameTraceChannel16         = 29,
	ECC_GameTraceChannel17         = 30,
	ECC_GameTraceChannel18         = 31,
	ECC_OverlapAll_Deprecated      = 32,
	ECC_MAX                        = 33
}

// Enum Engine.ECollisionResponse
public enum ECollisionResponse : byte
{
	ECR_Ignore                     = 0,
	ECR_Overlap                    = 1,
	ECR_Block                      = 2,
	ECR_MAX                        = 3
}

// Enum Engine.EWalkableSlopeBehavior
public enum EWalkableSlopeBehavior : byte
{
	WalkableSlope_Default          = 0,
	WalkableSlope_Increase         = 1,
	WalkableSlope_Decrease         = 2,
	WalkableSlope_Unwalkable       = 3,
	WalkableSlope_Max              = 4
}

// Enum Engine.EDOFMode
public enum EDOFMode : byte
{
	EDOFMode__Default              = 0,
	EDOFMode__SixDOF               = 1,
	EDOFMode__YZPlane              = 2,
	EDOFMode__XZPlane              = 3,
	EDOFMode__XYPlane              = 4,
	EDOFMode__CustomPlane          = 5,
	EDOFMode__None                 = 6,
	EDOFMode__EDOFMode_MAX         = 7
}

// Enum Engine.ERendererStencilMask
public enum ERendererStencilMask : byte
{
	ERendererStencilMask__ERSM_Default = 0,
	ERendererStencilMask__ERSM     = 1,
	ERendererStencilMask__ERSM01   = 2,
	ERendererStencilMask__ERSM02   = 3,
	ERendererStencilMask__ERSM03   = 4,
	ERendererStencilMask__ERSM04   = 5,
	ERendererStencilMask__ERSM05   = 6,
	ERendererStencilMask__ERSM06   = 7,
	ERendererStencilMask__ERSM07   = 8,
	ERendererStencilMask__ERSM08   = 9,
	ERendererStencilMask__ERSM_MAX = 10
}

// Enum Engine.ESleepFamily
public enum ESleepFamily : byte
{
	ESleepFamily__Normal           = 0,
	ESleepFamily__Sensitive        = 1,
	ESleepFamily__Custom           = 2,
	ESleepFamily__ESleepFamily_MAX = 3
}

// Enum Engine.ERuntimeVirtualTextureMainPassType
public enum ERuntimeVirtualTextureMainPassType : byte
{
	ERuntimeVirtualTextureMainPassType__Never = 0,
	ERuntimeVirtualTextureMainPassType__Exclusive = 1,
	ERuntimeVirtualTextureMainPassType__Always = 2,
	ERuntimeVirtualTextureMainPassType__ERuntimeVirtualTextureMainPassType_MAX = 3
}

// Enum Engine.ECanBeCharacterBase
public enum ECanBeCharacterBase : byte
{
	ECB_No                         = 0,
	ECB_Yes                        = 1,
	ECB_Owner                      = 2,
	ECB_MAX                        = 3
}

// Enum Engine.EHasCustomNavigableGeometry
public enum EHasCustomNavigableGeometry : byte
{
	EHasCustomNavigableGeometry__No = 0,
	EHasCustomNavigableGeometry__Yes = 1,
	EHasCustomNavigableGeometry__EvenIfNotCollidable = 2,
	EHasCustomNavigableGeometry__DontExport = 3,
	EHasCustomNavigableGeometry__EHasCustomNavigableGeometry_MAX = 4
}

// Enum Engine.ELightmapType
public enum ELightmapType : byte
{
	ELightmapType__Default         = 0,
	ELightmapType__ForceSurface    = 1,
	ELightmapType__ForceVolumetric = 2,
	ELightmapType__ELightmapType_MAX = 3
}

// Enum Engine.EIndirectLightingCacheQuality
public enum EIndirectLightingCacheQuality : byte
{
	ILCQ_Off                       = 0,
	ILCQ_Point                     = 1,
	ILCQ_Volume                    = 2,
	ILCQ_MAX                       = 3
}

// Enum Engine.ESceneDepthPriorityGroup
public enum ESceneDepthPriorityGroup : byte
{
	SDPG_World                     = 0,
	SDPG_Foreground                = 1,
	SDPG_MAX                       = 2
}

// Enum Engine.EAlphaBlendOption
public enum EAlphaBlendOption : byte
{
	EAlphaBlendOption__Linear      = 0,
	EAlphaBlendOption__Cubic       = 1,
	EAlphaBlendOption__HermiteCubic = 2,
	EAlphaBlendOption__Sinusoidal  = 3,
	EAlphaBlendOption__QuadraticInOut = 4,
	EAlphaBlendOption__CubicInOut  = 5,
	EAlphaBlendOption__QuarticInOut = 6,
	EAlphaBlendOption__QuinticInOut = 7,
	EAlphaBlendOption__CircularIn  = 8,
	EAlphaBlendOption__CircularOut = 9,
	EAlphaBlendOption__CircularInOut = 10,
	EAlphaBlendOption__ExpIn       = 11,
	EAlphaBlendOption__ExpOut      = 12,
	EAlphaBlendOption__ExpInOut    = 13,
	EAlphaBlendOption__Custom      = 14,
	EAlphaBlendOption__EAlphaBlendOption_MAX = 15
}

// Enum Engine.EAnimGroupRole
public enum EAnimGroupRole : byte
{
	EAnimGroupRole__CanBeLeader    = 0,
	EAnimGroupRole__AlwaysFollower = 1,
	EAnimGroupRole__AlwaysLeader   = 2,
	EAnimGroupRole__TransitionLeader = 3,
	EAnimGroupRole__TransitionFollower = 4,
	EAnimGroupRole__EAnimGroupRole_MAX = 5
}

// Enum Engine.AnimationKeyFormat
public enum EAnimationKeyFormat : byte
{
	AKF_ConstantKeyLerp            = 0,
	AKF_VariableKeyLerp            = 1,
	AKF_PerTrackCompression        = 2,
	AKF_MAX                        = 3
}

// Enum Engine.ERawCurveTrackTypes
public enum ERawCurveTrackTypes : byte
{
	ERawCurveTrackTypes__RCT_Float = 0,
	ERawCurveTrackTypes__RCT_Vector = 1,
	ERawCurveTrackTypes__RCT_Transform = 2,
	ERawCurveTrackTypes__RCT_MAX   = 3
}

// Enum Engine.EAnimAssetCurveFlags
public enum EAnimAssetCurveFlags : byte
{
	AACF_DriveMorphTarget_DEPRECATED = 0,
	AACF_DriveAttribute_DEPRECATED = 1,
	AACF_Editable                  = 2,
	AACF_DriveMaterial_DEPRECATED  = 3,
	AACF_Metadata                  = 4,
	AACF_DriveTrack                = 5,
	AACF_Disabled                  = 6,
	AACF_MAX                       = 7
}

// Enum Engine.AnimationCompressionFormat
public enum EAnimationCompressionFormat : byte
{
	ACF_None                       = 0,
	ACF_Float96NoW                 = 1,
	ACF_Fixed48NoW                 = 2,
	ACF_IntervalFixed32NoW         = 3,
	ACF_Fixed32NoW                 = 4,
	ACF_Float32NoW                 = 5,
	ACF_Identity                   = 6,
	ACF_MAX                        = 7
}

// Enum Engine.EAdditiveBasePoseType
public enum EAdditiveBasePoseType : byte
{
	ABPT_None                      = 0,
	ABPT_RefPose                   = 1,
	ABPT_AnimScaled                = 2,
	ABPT_AnimFrame                 = 3,
	ABPT_MAX                       = 4
}

// Enum Engine.ERootMotionMode
public enum ERootMotionMode : byte
{
	ERootMotionMode__NoRootMotionExtraction = 0,
	ERootMotionMode__IgnoreRootMotion = 1,
	ERootMotionMode__RootMotionFromEverything = 2,
	ERootMotionMode__RootMotionFromMontagesOnly = 3,
	ERootMotionMode__ERootMotionMode_MAX = 4
}

// Enum Engine.ERootMotionRootLock
public enum ERootMotionRootLock : byte
{
	ERootMotionRootLock__RefPose   = 0,
	ERootMotionRootLock__AnimFirstFrame = 1,
	ERootMotionRootLock__Zero      = 2,
	ERootMotionRootLock__ERootMotionRootLock_MAX = 3
}

// Enum Engine.EMontagePlayReturnType
public enum EMontagePlayReturnType : byte
{
	EMontagePlayReturnType__MontageLength = 0,
	EMontagePlayReturnType__Duration = 1,
	EMontagePlayReturnType__EMontagePlayReturnType_MAX = 2
}

// Enum Engine.EDrawDebugItemType
public enum EDrawDebugItemType : byte
{
	EDrawDebugItemType__DirectionalArrow = 0,
	EDrawDebugItemType__Sphere     = 1,
	EDrawDebugItemType__Line       = 2,
	EDrawDebugItemType__OnScreenMessage = 3,
	EDrawDebugItemType__CoordinateSystem = 4,
	EDrawDebugItemType__EDrawDebugItemType_MAX = 5
}

// Enum Engine.EAnimLinkMethod
public enum EAnimLinkMethod : byte
{
	EAnimLinkMethod__Absolute      = 0,
	EAnimLinkMethod__Relative      = 1,
	EAnimLinkMethod__Proportional  = 2,
	EAnimLinkMethod__EAnimLinkMethod_MAX = 3
}

// Enum Engine.EMontageSubStepResult
public enum EMontageSubStepResult : byte
{
	EMontageSubStepResult__Moved   = 0,
	EMontageSubStepResult__NotMoved = 1,
	EMontageSubStepResult__InvalidSection = 2,
	EMontageSubStepResult__InvalidMontage = 3,
	EMontageSubStepResult__EMontageSubStepResult_MAX = 4
}

// Enum Engine.EAnimNotifyEventType
public enum EAnimNotifyEventType : byte
{
	EAnimNotifyEventType__Begin    = 0,
	EAnimNotifyEventType__End      = 1,
	EAnimNotifyEventType__EAnimNotifyEventType_MAX = 2
}

// Enum Engine.EEvaluatorMode
public enum EEvaluatorMode : byte
{
	EEvaluatorMode__EM_Standard    = 0,
	EEvaluatorMode__EM_Freeze      = 1,
	EEvaluatorMode__EM_DelayedFreeze = 2,
	EEvaluatorMode__EM_MAX         = 3
}

// Enum Engine.EEvaluatorDataSource
public enum EEvaluatorDataSource : byte
{
	EEvaluatorDataSource__EDS_SourcePose = 0,
	EEvaluatorDataSource__EDS_DestinationPose = 1,
	EEvaluatorDataSource__EDS_MAX  = 2
}

// Enum Engine.ECopyType
public enum ECopyType : byte
{
	ECopyType__MemCopy             = 0,
	ECopyType__BoolProperty        = 1,
	ECopyType__StructProperty      = 2,
	ECopyType__ObjectProperty      = 3,
	ECopyType__ECopyType_MAX       = 4
}

// Enum Engine.EPostCopyOperation
public enum EPostCopyOperation : byte
{
	EPostCopyOperation__None       = 0,
	EPostCopyOperation__LogicalNegateBool = 1,
	EPostCopyOperation__EPostCopyOperation_MAX = 2
}

// Enum Engine.EPinHidingMode
public enum EPinHidingMode : byte
{
	EPinHidingMode__NeverAsPin     = 0,
	EPinHidingMode__PinHiddenByDefault = 1,
	EPinHidingMode__PinShownByDefault = 2,
	EPinHidingMode__AlwaysAsPin    = 3,
	EPinHidingMode__EPinHidingMode_MAX = 4
}

// Enum Engine.AnimPhysCollisionType
public enum EAnimPhysCollisionType : byte
{
	AnimPhysCollisionType__CoM     = 0,
	AnimPhysCollisionType__CustomSphere = 1,
	AnimPhysCollisionType__InnerSphere = 2,
	AnimPhysCollisionType__OuterSphere = 3,
	AnimPhysCollisionType__AnimPhysCollisionType_MAX = 4
}

// Enum Engine.AnimPhysTwistAxis
public enum EAnimPhysTwistAxis : byte
{
	AnimPhysTwistAxis__AxisX       = 0,
	AnimPhysTwistAxis__AxisY       = 1,
	AnimPhysTwistAxis__AxisZ       = 2,
	AnimPhysTwistAxis__AnimPhysTwistAxis_MAX = 3
}

// Enum Engine.ETypeAdvanceAnim
public enum ETypeAdvanceAnim : byte
{
	ETAA_Default                   = 0,
	ETAA_Finished                  = 1,
	ETAA_Looped                    = 2,
	ETAA_MAX                       = 3
}

// Enum Engine.ETransitionLogicType
public enum ETransitionLogicType : byte
{
	ETransitionLogicType__TLT_StandardBlend = 0,
	ETransitionLogicType__TLT_Custom = 1,
	ETransitionLogicType__TLT_MAX  = 2
}

// Enum Engine.ETransitionBlendMode
public enum ETransitionBlendMode : byte
{
	ETransitionBlendMode__TBM_Linear = 0,
	ETransitionBlendMode__TBM_Cubic = 1,
	ETransitionBlendMode__TBM_MAX  = 2
}

// Enum Engine.EComponentType
public enum EComponentType : byte
{
	EComponentType__None           = 0,
	EComponentType__TranslationX   = 1,
	EComponentType__TranslationY   = 2,
	EComponentType__TranslationZ   = 3,
	EComponentType__RotationX      = 4,
	EComponentType__RotationY      = 5,
	EComponentType__RotationZ      = 6,
	EComponentType__Scale          = 7,
	EComponentType__ScaleX         = 8,
	EComponentType__ScaleY         = 9,
	EComponentType__ScaleZ         = 10,
	EComponentType__EComponentType_MAX = 11
}

// Enum Engine.EAxisOption
public enum EAxisOption : byte
{
	EAxisOption__X                 = 0,
	EAxisOption__Y                 = 1,
	EAxisOption__Z                 = 2,
	EAxisOption__X_Neg             = 3,
	EAxisOption__Y_Neg             = 4,
	EAxisOption__Z_Neg             = 5,
	EAxisOption__Custom            = 6,
	EAxisOption__EAxisOption_MAX   = 7
}

// Enum Engine.EAnimInterpolationType
public enum EAnimInterpolationType : byte
{
	EAnimInterpolationType__Linear = 0,
	EAnimInterpolationType__Step   = 1,
	EAnimInterpolationType__EAnimInterpolationType_MAX = 2
}

// Enum Engine.ECurveBlendOption
public enum ECurveBlendOption : byte
{
	ECurveBlendOption__MaxWeight   = 0,
	ECurveBlendOption__NormalizeByWeight = 1,
	ECurveBlendOption__BlendByWeight = 2,
	ECurveBlendOption__ECurveBlendOption_MAX = 3
}

// Enum Engine.EAdditiveAnimationType
public enum EAdditiveAnimationType : byte
{
	AAT_None                       = 0,
	AAT_LocalSpaceBase             = 1,
	AAT_RotationOffsetMeshSpace    = 2,
	AAT_MAX                        = 3
}

// Enum Engine.ENotifyFilterType
public enum ENotifyFilterType : byte
{
	ENotifyFilterType__NoFiltering = 0,
	ENotifyFilterType__LOD         = 1,
	ENotifyFilterType__ENotifyFilterType_MAX = 2
}

// Enum Engine.EMontageNotifyTickType
public enum EMontageNotifyTickType : byte
{
	EMontageNotifyTickType__Queued = 0,
	EMontageNotifyTickType__BranchingPoint = 1,
	EMontageNotifyTickType__EMontageNotifyTickType_MAX = 2
}

// Enum Engine.EBoneRotationSource
public enum EBoneRotationSource : byte
{
	BRS_KeepComponentSpaceRotation = 0,
	BRS_KeepLocalSpaceRotation     = 1,
	BRS_CopyFromTarget             = 2,
	BRS_MAX                        = 3
}

// Enum Engine.EBoneControlSpace
public enum EBoneControlSpace : byte
{
	BCS_WorldSpace                 = 0,
	BCS_ComponentSpace             = 1,
	BCS_ParentBoneSpace            = 2,
	BCS_BoneSpace                  = 3,
	BCS_MAX                        = 4
}

// Enum Engine.EBoneAxis
public enum EBoneAxis : byte
{
	BA_X                           = 0,
	BA_Y                           = 1,
	BA_Z                           = 2,
	BA_MAX                         = 3
}

// Enum Engine.EPrimaryAssetCookRule
public enum EPrimaryAssetCookRule : byte
{
	EPrimaryAssetCookRule__Unknown = 0,
	EPrimaryAssetCookRule__NeverCook = 1,
	EPrimaryAssetCookRule__DevelopmentCook = 2,
	EPrimaryAssetCookRule__DevelopmentAlwaysCook = 3,
	EPrimaryAssetCookRule__AlwaysCook = 4,
	EPrimaryAssetCookRule__EPrimaryAssetCookRule_MAX = 5
}

// Enum Engine.EAttenuationShape
public enum EAttenuationShape : byte
{
	EAttenuationShape__Sphere      = 0,
	EAttenuationShape__Capsule     = 1,
	EAttenuationShape__Box         = 2,
	EAttenuationShape__Cone        = 3,
	EAttenuationShape__EAttenuationShape_MAX = 4
}

// Enum Engine.EAttenuationDistanceModel
public enum EAttenuationDistanceModel : byte
{
	EAttenuationDistanceModel__Linear = 0,
	EAttenuationDistanceModel__Logarithmic = 1,
	EAttenuationDistanceModel__Inverse = 2,
	EAttenuationDistanceModel__LogReverse = 3,
	EAttenuationDistanceModel__NaturalSound = 4,
	EAttenuationDistanceModel__Custom = 5,
	EAttenuationDistanceModel__EAttenuationDistanceModel_MAX = 6
}

// Enum Engine.EMonoChannelUpmixMethod
public enum EMonoChannelUpmixMethod : byte
{
	EMonoChannelUpmixMethod__Linear = 0,
	EMonoChannelUpmixMethod__EqualPower = 1,
	EMonoChannelUpmixMethod__FullVolume = 2,
	EMonoChannelUpmixMethod__EMonoChannelUpmixMethod_MAX = 3
}

// Enum Engine.EPanningMethod
public enum EPanningMethod : byte
{
	EPanningMethod__Linear         = 0,
	EPanningMethod__EqualPower     = 1,
	EPanningMethod__EPanningMethod_MAX = 2
}

// Enum Engine.EVoiceSampleRate
public enum EVoiceSampleRate : byte
{
	EVoiceSampleRate__Low16000Hz   = 0,
	EVoiceSampleRate__Normal24000Hz = 1,
	EVoiceSampleRate__EVoiceSampleRate_MAX = 2
}

// Enum Engine.ReverbPreset
public enum EReverbPreset : byte
{
	REVERB_Default                 = 0,
	REVERB_Bathroom                = 1,
	REVERB_StoneRoom               = 2,
	REVERB_Auditorium              = 3,
	REVERB_ConcertHall             = 4,
	REVERB_Cave                    = 5,
	REVERB_Hallway                 = 6,
	REVERB_StoneCorridor           = 7,
	REVERB_Alley                   = 8,
	REVERB_Forest                  = 9,
	REVERB_City                    = 10,
	REVERB_Mountains               = 11,
	REVERB_Quarry                  = 12,
	REVERB_Plain                   = 13,
	REVERB_ParkingLot              = 14,
	REVERB_SewerPipe               = 15,
	REVERB_Underwater              = 16,
	REVERB_SmallRoom               = 17,
	REVERB_MediumRoom              = 18,
	REVERB_LargeRoom               = 19,
	REVERB_MediumHall              = 20,
	REVERB_LargeHall               = 21,
	REVERB_Plate                   = 22,
	REVERB_MAX                     = 23
}

// Enum Engine.EBlendableLocation
public enum EBlendableLocation : byte
{
	BL_AfterTonemapping            = 0,
	BL_BeforeTonemapping           = 1,
	BL_BeforeTranslucency          = 2,
	BL_ReplacingTonemapper         = 3,
	BL_SSRInput                    = 4,
	BL_MAX                         = 5
}

// Enum Engine.ENotifyTriggerMode
public enum ENotifyTriggerMode : byte
{
	ENotifyTriggerMode__AllAnimations = 0,
	ENotifyTriggerMode__HighestWeightedAnimation = 1,
	ENotifyTriggerMode__None       = 2,
	ENotifyTriggerMode__ENotifyTriggerMode_MAX = 3
}

// Enum Engine.EBlendSpaceAxis
public enum EBlendSpaceAxis : byte
{
	BSA_None                       = 0,
	BSA_X                          = 1,
	BSA_Y                          = 2,
	BSA_Max                        = 3
}

// Enum Engine.EBlueprintNativizationFlag
public enum EBlueprintNativizationFlag : byte
{
	EBlueprintNativizationFlag__Disabled = 0,
	EBlueprintNativizationFlag__Dependency = 1,
	EBlueprintNativizationFlag__ExplicitlyEnabled = 2,
	EBlueprintNativizationFlag__EBlueprintNativizationFlag_MAX = 3
}

// Enum Engine.EBlueprintCompileMode
public enum EBlueprintCompileMode : byte
{
	EBlueprintCompileMode__Default = 0,
	EBlueprintCompileMode__Development = 1,
	EBlueprintCompileMode__FinalRelease = 2,
	EBlueprintCompileMode__EBlueprintCompileMode_MAX = 3
}

// Enum Engine.EBlueprintType
public enum EBlueprintType : byte
{
	BPTYPE_Normal                  = 0,
	BPTYPE_Const                   = 1,
	BPTYPE_MacroLibrary            = 2,
	BPTYPE_Interface               = 3,
	BPTYPE_LevelScript             = 4,
	BPTYPE_FunctionLibrary         = 5,
	BPTYPE_MAX                     = 6
}

// Enum Engine.EBlueprintStatus
public enum EBlueprintStatus : byte
{
	BS_Unknown                     = 0,
	BS_Dirty                       = 1,
	BS_Error                       = 2,
	BS_UpToDate                    = 3,
	BS_BeingCreated                = 4,
	BS_UpToDateWithWarnings        = 5,
	BS_MAX                         = 6
}

// Enum Engine.EBodyCollisionResponse
public enum EBodyCollisionResponse : byte
{
	EBodyCollisionResponse__BodyCollision_Enabled = 0,
	EBodyCollisionResponse__BodyCollision_Disabled = 1,
	EBodyCollisionResponse__BodyCollision_MAX = 2
}

// Enum Engine.EPhysicsType
public enum EPhysicsType : byte
{
	PhysType_Default               = 0,
	PhysType_Kinematic             = 1,
	PhysType_Simulated             = 2,
	PhysType_MAX                   = 3
}

// Enum Engine.ECollisionTraceFlag
public enum ECollisionTraceFlag : byte
{
	CTF_UseDefault                 = 0,
	CTF_UseSimpleAndComplex        = 1,
	CTF_UseSimpleAsComplex         = 2,
	CTF_UseComplexAsSimple         = 3,
	CTF_MAX                        = 4
}

// Enum Engine.EBrushType
public enum EBrushType : byte
{
	Brush_Default                  = 0,
	Brush_Add                      = 1,
	Brush_Subtract                 = 2,
	Brush_MAX                      = 3
}

// Enum Engine.ECsgOper
public enum ECsgOper : byte
{
	CSG_Active                     = 0,
	CSG_Add                        = 1,
	CSG_Subtract                   = 2,
	CSG_Intersect                  = 3,
	CSG_Deintersect                = 4,
	CSG_None                       = 5,
	CSG_MAX                        = 6
}

// Enum Engine.EInitialOscillatorOffset
public enum EInitialOscillatorOffset : byte
{
	EOO_OffsetRandom               = 0,
	EOO_OffsetZero                 = 1,
	EOO_MAX                        = 2
}

// Enum Engine.EOscillatorWaveform
public enum EOscillatorWaveform : byte
{
	EOscillatorWaveform__SineWave  = 0,
	EOscillatorWaveform__PerlinNoise = 1,
	EOscillatorWaveform__EOscillatorWaveform_MAX = 2
}

// Enum Engine.ECameraAlphaBlendMode
public enum ECameraAlphaBlendMode : byte
{
	ECameraAlphaBlendMode__CABM_Linear = 0,
	ECameraAlphaBlendMode__CABM_Cubic = 1,
	ECameraAlphaBlendMode__CABM_MAX = 2
}

// Enum Engine.ECameraAnimPlaySpace
public enum ECameraAnimPlaySpace : byte
{
	ECameraAnimPlaySpace__CameraLocal = 0,
	ECameraAnimPlaySpace__World    = 1,
	ECameraAnimPlaySpace__UserDefined = 2,
	ECameraAnimPlaySpace__ECameraAnimPlaySpace_MAX = 3
}

// Enum Engine.ECameraProjectionMode
public enum ECameraProjectionMode : byte
{
	ECameraProjectionMode__Perspective = 0,
	ECameraProjectionMode__Orthographic = 1,
	ECameraProjectionMode__ECameraProjectionMode_MAX = 2
}

// Enum Engine.ECloudStorageDelegate
public enum ECloudStorageDelegate : byte
{
	CSD_KeyValueReadComplete       = 0,
	CSD_KeyValueWriteComplete      = 1,
	CSD_ValueChanged               = 2,
	CSD_DocumentQueryComplete      = 3,
	CSD_DocumentReadComplete       = 4,
	CSD_DocumentWriteComplete      = 5,
	CSD_DocumentConflictDetected   = 6,
	CSD_MAX                        = 7
}

// Enum Engine.EAngularDriveMode
public enum EAngularDriveMode : byte
{
	EAngularDriveMode__SLERP       = 0,
	EAngularDriveMode__TwistAndSwing = 1,
	EAngularDriveMode__EAngularDriveMode_MAX = 2
}

// Enum Engine.ELinearConstraintMotion
public enum ELinearConstraintMotion : byte
{
	LCM_Free                       = 0,
	LCM_Limited                    = 1,
	LCM_Locked                     = 2,
	LCM_MAX                        = 3
}

// Enum Engine.ECurveTableMode
public enum ECurveTableMode : byte
{
	ECurveTableMode__Empty         = 0,
	ECurveTableMode__SimpleCurves  = 1,
	ECurveTableMode__RichCurves    = 2,
	ECurveTableMode__ECurveTableMode_MAX = 3
}

// Enum Engine.EEvaluateCurveTableResult
public enum EEvaluateCurveTableResult : byte
{
	EEvaluateCurveTableResult__RowFound = 0,
	EEvaluateCurveTableResult__RowNotFound = 1,
	EEvaluateCurveTableResult__EEvaluateCurveTableResult_MAX = 2
}

// Enum Engine.EGrammaticalNumber
public enum EGrammaticalNumber : byte
{
	EGrammaticalNumber__Singular   = 0,
	EGrammaticalNumber__Plural     = 1,
	EGrammaticalNumber__EGrammaticalNumber_MAX = 2
}

// Enum Engine.EGrammaticalGender
public enum EGrammaticalGender : byte
{
	EGrammaticalGender__Neuter     = 0,
	EGrammaticalGender__Masculine  = 1,
	EGrammaticalGender__Feminine   = 2,
	EGrammaticalGender__Mixed      = 3,
	EGrammaticalGender__EGrammaticalGender_MAX = 4
}

// Enum Engine.DistributionParamMode
public enum EDistributionParamMode : byte
{
	DPM_Normal                     = 0,
	DPM_Abs                        = 1,
	DPM_Direct                     = 2,
	DPM_MAX                        = 3
}

// Enum Engine.EDistributionVectorMirrorFlags
public enum EDistributionVectorMirrorFlags : byte
{
	EDVMF_Same                     = 0,
	EDVMF_Different                = 1,
	EDVMF_Mirror                   = 2,
	EDVMF_MAX                      = 3
}

// Enum Engine.EDistributionVectorLockFlags
public enum EDistributionVectorLockFlags : byte
{
	EDVLF_None                     = 0,
	EDVLF_XY                       = 1,
	EDVLF_XZ                       = 2,
	EDVLF_YZ                       = 3,
	EDVLF_XYZ                      = 4,
	EDVLF_MAX                      = 5
}

// Enum Engine.ENodeEnabledState
public enum ENodeEnabledState : byte
{
	ENodeEnabledState__Enabled     = 0,
	ENodeEnabledState__Disabled    = 1,
	ENodeEnabledState__DevelopmentOnly = 2,
	ENodeEnabledState__ENodeEnabledState_MAX = 3
}

// Enum Engine.ENodeAdvancedPins
public enum ENodeAdvancedPins : byte
{
	ENodeAdvancedPins__NoPins      = 0,
	ENodeAdvancedPins__Shown       = 1,
	ENodeAdvancedPins__Hidden      = 2,
	ENodeAdvancedPins__ENodeAdvancedPins_MAX = 3
}

// Enum Engine.ENodeTitleType
public enum ENodeTitleType : byte
{
	ENodeTitleType__FullTitle      = 0,
	ENodeTitleType__ListView       = 1,
	ENodeTitleType__EditableTitle  = 2,
	ENodeTitleType__MenuTitle      = 3,
	ENodeTitleType__MAX_TitleTypes = 4,
	ENodeTitleType__ENodeTitleType_MAX = 5
}

// Enum Engine.EPinContainerType
public enum EPinContainerType : byte
{
	EPinContainerType__None        = 0,
	EPinContainerType__Array       = 1,
	EPinContainerType__Set         = 2,
	EPinContainerType__Map         = 3,
	EPinContainerType__EPinContainerType_MAX = 4
}

// Enum Engine.EEdGraphPinDirection
public enum EEdGraphPinDirection : byte
{
	EGPD_Input                     = 0,
	EGPD_Output                    = 1,
	EGPD_MAX                       = 2
}

// Enum Engine.EBlueprintPinStyleType
public enum EBlueprintPinStyleType : byte
{
	BPST_Original                  = 0,
	BPST_VariantA                  = 1,
	BPST_MAX                       = 2
}

// Enum Engine.ECanCreateConnectionResponse
public enum ECanCreateConnectionResponse : byte
{
	CONNECT_RESPONSE_MAKE          = 0,
	CONNECT_RESPONSE_DISALLOW      = 1,
	CONNECT_RESPONSE_BREAK_OTHERS_A = 2,
	CONNECT_RESPONSE_BREAK_OTHERS_B = 3,
	CONNECT_RESPONSE_BREAK_OTHERS_AB = 4,
	CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE = 5,
	CONNECT_RESPONSE_MAX           = 6
}

// Enum Engine.EGraphType
public enum EGraphType : byte
{
	GT_Function                    = 0,
	GT_Ubergraph                   = 1,
	GT_Macro                       = 2,
	GT_Animation                   = 3,
	GT_StateMachine                = 4,
	GT_MAX                         = 5
}

// Enum Engine.EConsoleType
public enum EConsoleType : byte
{
	EConsoleType__Any              = 0,
	EConsoleType__Mobile           = 1,
	EConsoleType__MAX              = 2
}

// Enum Engine.ETransitionType
public enum ETransitionType : byte
{
	ETransitionType__None          = 0,
	ETransitionType__Paused        = 1,
	ETransitionType__Loading       = 2,
	ETransitionType__Saving        = 3,
	ETransitionType__Connecting    = 4,
	ETransitionType__Precaching    = 5,
	ETransitionType__WaitingToConnect = 6,
	ETransitionType__MAX           = 7
}

// Enum Engine.EFullyLoadPackageType
public enum EFullyLoadPackageType : byte
{
	FULLYLOAD_Map                  = 0,
	FULLYLOAD_Game_PreLoadClass    = 1,
	FULLYLOAD_Game_PostLoadClass   = 2,
	FULLYLOAD_Always               = 3,
	FULLYLOAD_Mutator              = 4,
	FULLYLOAD_MAX                  = 5
}

// Enum Engine.EViewModeIndex
public enum EViewModeIndex : byte
{
	VMI_BrushWireframe             = 0,
	VMI_Wireframe                  = 1,
	VMI_Unlit                      = 2,
	VMI_Lit                        = 3,
	VMI_Lit_DetailLighting         = 4,
	VMI_LightingOnly               = 5,
	VMI_LightComplexity            = 6,
	VMI_ShaderComplexity           = 7,
	VMI_LightmapDensity            = 8,
	VMI_LitLightmapDensity         = 9,
	VMI_ReflectionOverride         = 10,
	VMI_VisualizeBuffer            = 11,
	VMI_StationaryLightOverlap     = 12,
	VMI_CollisionPawn              = 13,
	VMI_CollisionVisibility        = 14,
	VMI_LODColoration              = 15,
	VMI_QuadOverdraw               = 16,
	VMI_PrimitiveDistanceAccuracy  = 17,
	VMI_MeshUVDensityAccuracy      = 18,
	VMI_ShaderComplexityWithQuadOverdraw = 19,
	VMI_HLODColoration             = 20,
	VMI_GroupLODColoration         = 21,
	VMI_MaterialTextureScaleAccuracy = 22,
	VMI_RequiredTextureResolution  = 23,
	VMI_PathTracing                = 24,
	VMI_RayTracingDebug            = 25,
	VMI_Max                        = 26,
	VMI_Unknown                    = 27
}

// Enum Engine.EDemoPlayFailure
public enum EDemoPlayFailure : byte
{
	EDemoPlayFailure__Generic      = 0,
	EDemoPlayFailure__DemoNotFound = 1,
	EDemoPlayFailure__Corrupt      = 2,
	EDemoPlayFailure__InvalidVersion = 3,
	EDemoPlayFailure__InitBase     = 4,
	EDemoPlayFailure__GameSpecificHeader = 5,
	EDemoPlayFailure__ReplayStreamerInternal = 6,
	EDemoPlayFailure__LoadMap      = 7,
	EDemoPlayFailure__Serialization = 8,
	EDemoPlayFailure__EDemoPlayFailure_MAX = 9
}

// Enum Engine.ETravelType
public enum ETravelType : byte
{
	TRAVEL_Absolute                = 0,
	TRAVEL_Partial                 = 1,
	TRAVEL_Relative                = 2,
	TRAVEL_MAX                     = 3
}

// Enum Engine.ENetworkLagState
public enum ENetworkLagState : byte
{
	ENetworkLagState__NotLagging   = 0,
	ENetworkLagState__Lagging      = 1,
	ENetworkLagState__ENetworkLagState_MAX = 2
}

// Enum Engine.EMouseCaptureMode
public enum EMouseCaptureMode : byte
{
	EMouseCaptureMode__NoCapture   = 0,
	EMouseCaptureMode__CapturePermanently = 1,
	EMouseCaptureMode__CapturePermanently_IncludingInitialMouseDown = 2,
	EMouseCaptureMode__CaptureDuringMouseDown = 3,
	EMouseCaptureMode__CaptureDuringRightMouseDown = 4,
	EMouseCaptureMode__EMouseCaptureMode_MAX = 5
}

// Enum Engine.ECustomTimeStepSynchronizationState
public enum ECustomTimeStepSynchronizationState : byte
{
	ECustomTimeStepSynchronizationState__Closed = 0,
	ECustomTimeStepSynchronizationState__Error = 1,
	ECustomTimeStepSynchronizationState__Synchronized = 2,
	ECustomTimeStepSynchronizationState__Synchronizing = 3,
	ECustomTimeStepSynchronizationState__ECustomTimeStepSynchronizationState_MAX = 4
}

// Enum Engine.EMeshBufferAccess
public enum EMeshBufferAccess : byte
{
	EMeshBufferAccess__Default     = 0,
	EMeshBufferAccess__ForceCPUAndGPU = 1,
	EMeshBufferAccess__EMeshBufferAccess_MAX = 2
}

// Enum Engine.EConstraintFrame
public enum EConstraintFrame : byte
{
	EConstraintFrame__Frame1       = 0,
	EConstraintFrame__Frame2       = 1,
	EConstraintFrame__EConstraintFrame_MAX = 2
}

// Enum Engine.EAngularConstraintMotion
public enum EAngularConstraintMotion : byte
{
	ACM_Free                       = 0,
	ACM_Limited                    = 1,
	ACM_Locked                     = 2,
	ACM_MAX                        = 3
}

// Enum Engine.EComponentSocketType
public enum EComponentSocketType : byte
{
	EComponentSocketType__Invalid  = 0,
	EComponentSocketType__Bone     = 1,
	EComponentSocketType__Socket   = 2,
	EComponentSocketType__EComponentSocketType_MAX = 3
}

// Enum Engine.EPhysicalSurface
public enum EPhysicalSurface : byte
{
	SurfaceType_Default            = 0,
	SurfaceType1                   = 1,
	SurfaceType2                   = 2,
	SurfaceType3                   = 3,
	SurfaceType4                   = 4,
	SurfaceType5                   = 5,
	SurfaceType6                   = 6,
	SurfaceType7                   = 7,
	SurfaceType8                   = 8,
	SurfaceType9                   = 9,
	SurfaceType10                  = 10,
	SurfaceType11                  = 11,
	SurfaceType12                  = 12,
	SurfaceType13                  = 13,
	SurfaceType14                  = 14,
	SurfaceType15                  = 15,
	SurfaceType16                  = 16,
	SurfaceType17                  = 17,
	SurfaceType18                  = 18,
	SurfaceType19                  = 19,
	SurfaceType20                  = 20,
	SurfaceType21                  = 21,
	SurfaceType22                  = 22,
	SurfaceType23                  = 23,
	SurfaceType24                  = 24,
	SurfaceType25                  = 25,
	SurfaceType26                  = 26,
	SurfaceType27                  = 27,
	SurfaceType28                  = 28,
	SurfaceType29                  = 29,
	SurfaceType30                  = 30,
	SurfaceType31                  = 31,
	SurfaceType32                  = 32,
	SurfaceType33                  = 33,
	SurfaceType34                  = 34,
	SurfaceType35                  = 35,
	SurfaceType36                  = 36,
	SurfaceType37                  = 37,
	SurfaceType38                  = 38,
	SurfaceType39                  = 39,
	SurfaceType40                  = 40,
	SurfaceType41                  = 41,
	SurfaceType42                  = 42,
	SurfaceType43                  = 43,
	SurfaceType44                  = 44,
	SurfaceType45                  = 45,
	SurfaceType46                  = 46,
	SurfaceType47                  = 47,
	SurfaceType48                  = 48,
	SurfaceType49                  = 49,
	SurfaceType50                  = 50,
	SurfaceType51                  = 51,
	SurfaceType52                  = 52,
	SurfaceType53                  = 53,
	SurfaceType54                  = 54,
	SurfaceType55                  = 55,
	SurfaceType56                  = 56,
	SurfaceType57                  = 57,
	SurfaceType58                  = 58,
	SurfaceType59                  = 59,
	SurfaceType60                  = 60,
	SurfaceType61                  = 61,
	SurfaceType62                  = 62,
	SurfaceType_Max                = 63,
	EPhysicalSurface_MAX           = 64
}

// Enum Engine.EUpdateRateShiftBucket
public enum EUpdateRateShiftBucket : byte
{
	EUpdateRateShiftBucket__ShiftBucket0 = 0,
	EUpdateRateShiftBucket__ShiftBucket1 = 1,
	EUpdateRateShiftBucket__ShiftBucket2 = 2,
	EUpdateRateShiftBucket__ShiftBucket3 = 3,
	EUpdateRateShiftBucket__ShiftBucket4 = 4,
	EUpdateRateShiftBucket__ShiftBucket5 = 5,
	EUpdateRateShiftBucket__ShiftBucketMax = 6,
	EUpdateRateShiftBucket__EUpdateRateShiftBucket_MAX = 7
}

// Enum Engine.EShadowMapFlags
public enum EShadowMapFlags : byte
{
	SMF_None                       = 0,
	SMF_Streamed                   = 1,
	SMF_MAX                        = 2
}

// Enum Engine.ELightMapPaddingType
public enum ELightMapPaddingType : byte
{
	LMPT_NormalPadding             = 0,
	LMPT_PrePadding                = 1,
	LMPT_NoPadding                 = 2,
	LMPT_MAX                       = 3
}

// Enum Engine.ETimelineSigType
public enum ETimelineSigType : byte
{
	ETS_EventSignature             = 0,
	ETS_FloatSignature             = 1,
	ETS_VectorSignature            = 2,
	ETS_LinearColorSignature       = 3,
	ETS_InvalidSignature           = 4,
	ETS_MAX                        = 5
}

// Enum Engine.EFilterInterpolationType
public enum EFilterInterpolationType : byte
{
	BSIT_Average                   = 0,
	BSIT_Linear                    = 1,
	BSIT_Cubic                     = 2,
	BSIT_MAX                       = 3
}

// Enum Engine.EOverlapFilterOption
public enum EOverlapFilterOption : byte
{
	OverlapFilter_All              = 0,
	OverlapFilter_DynamicOnly      = 1,
	OverlapFilter_StaticOnly       = 2,
	OverlapFilter_MAX              = 3
}

// Enum Engine.ENetworkSmoothingMode
public enum ENetworkSmoothingMode : byte
{
	ENetworkSmoothingMode__Disabled = 0,
	ENetworkSmoothingMode__Linear  = 1,
	ENetworkSmoothingMode__Exponential = 2,
	ENetworkSmoothingMode__Replay  = 3,
	ENetworkSmoothingMode__ENetworkSmoothingMode_MAX = 4
}

// Enum Engine.ELightingBuildQuality
public enum ELightingBuildQuality : byte
{
	Quality_Preview                = 0,
	Quality_Medium                 = 1,
	Quality_High                   = 2,
	Quality_Production             = 3,
	Quality_MAX                    = 4
}

// Enum Engine.EMaterialStencilCompare
public enum EMaterialStencilCompare : byte
{
	MSC_Less                       = 0,
	MSC_LessEqual                  = 1,
	MSC_Greater                    = 2,
	MSC_GreaterEqual               = 3,
	MSC_Equal                      = 4,
	MSC_NotEqual                   = 5,
	MSC_Never                      = 6,
	MSC_Always                     = 7,
	MSC_Count                      = 8,
	MSC_MAX                        = 9
}

// Enum Engine.EMaterialSamplerType
public enum EMaterialSamplerType : byte
{
	SAMPLERTYPE_Color              = 0,
	SAMPLERTYPE_Grayscale          = 1,
	SAMPLERTYPE_Alpha              = 2,
	SAMPLERTYPE_Normal             = 3,
	SAMPLERTYPE_Masks              = 4,
	SAMPLERTYPE_DistanceFieldFont  = 5,
	SAMPLERTYPE_LinearColor        = 6,
	SAMPLERTYPE_LinearGrayscale    = 7,
	SAMPLERTYPE_Data               = 8,
	SAMPLERTYPE_External           = 9,
	SAMPLERTYPE_VirtualColor       = 10,
	SAMPLERTYPE_VirtualGrayscale   = 11,
	SAMPLERTYPE_VirtualAlpha       = 12,
	SAMPLERTYPE_VirtualNormal      = 13,
	SAMPLERTYPE_VirtualMasks       = 14,
	SAMPLERTYPE_VirtualLinearColor = 15,
	SAMPLERTYPE_VirtualLinearGrayscale = 16,
	SAMPLERTYPE_MAX                = 17
}

// Enum Engine.EMaterialTessellationMode
public enum EMaterialTessellationMode : byte
{
	MTM_NoTessellation             = 0,
	MTM_FlatTessellation           = 1,
	MTM_PNTriangles                = 2,
	MTM_MAX                        = 3
}

// Enum Engine.EMaterialShadingModel
public enum EMaterialShadingModel : byte
{
	MSM_Unlit                      = 0,
	MSM_DefaultLit                 = 1,
	MSM_Subsurface                 = 2,
	MSM_PreintegratedSkin          = 3,
	MSM_ClearCoat                  = 4,
	MSM_SubsurfaceProfile          = 5,
	MSM_TwoSidedFoliage            = 6,
	MSM_Hair                       = 7,
	MSM_Cloth                      = 8,
	MSM_Eye                        = 9,
	MSM_NUM                        = 10,
	MSM_FromMaterialExpression     = 11,
	MSM_MAX                        = 12
}

// Enum Engine.EParticleCollisionMode
public enum EParticleCollisionMode : byte
{
	EParticleCollisionMode__SceneDepth = 0,
	EParticleCollisionMode__DistanceField = 1,
	EParticleCollisionMode__EParticleCollisionMode_MAX = 2
}

// Enum Engine.ETrailWidthMode
public enum ETrailWidthMode : byte
{
	ETrailWidthMode_FromCentre     = 0,
	ETrailWidthMode_FromFirst      = 1,
	ETrailWidthMode_FromSecond     = 2,
	ETrailWidthMode_MAX            = 3
}

// Enum Engine.EGBufferFormat
public enum EGBufferFormat : byte
{
	EGBufferFormat__Force8BitsPerChannel = 0,
	EGBufferFormat__Default        = 1,
	EGBufferFormat__HighPrecisionNormals = 2,
	EGBufferFormat__Force16BitsPerChannel = 3,
	EGBufferFormat__EGBufferFormat_MAX = 4
}

// Enum Engine.ESceneCaptureCompositeMode
public enum ESceneCaptureCompositeMode : byte
{
	SCCM_Overwrite                 = 0,
	SCCM_Additive                  = 1,
	SCCM_Composite                 = 2,
	SCCM_MAX                       = 3
}

// Enum Engine.ESceneCaptureSource
public enum ESceneCaptureSource : byte
{
	SCS_SceneColorHDR              = 0,
	SCS_SceneColorHDRNoAlpha       = 1,
	SCS_FinalColorLDR              = 2,
	SCS_SceneColorSceneDepth       = 3,
	SCS_SceneDepth                 = 4,
	SCS_DeviceDepth                = 5,
	SCS_Normal                     = 6,
	SCS_BaseColor                  = 7,
	SCS_FinalColorHDR              = 8,
	SCS_MAX                        = 9
}

// Enum Engine.ETranslucentSortPolicy
public enum ETranslucentSortPolicy : byte
{
	ETranslucentSortPolicy__SortByDistance = 0,
	ETranslucentSortPolicy__SortByProjectedZ = 1,
	ETranslucentSortPolicy__SortAlongAxis = 2,
	ETranslucentSortPolicy__ETranslucentSortPolicy_MAX = 3
}

// Enum Engine.ERefractionMode
public enum ERefractionMode : byte
{
	RM_IndexOfRefraction           = 0,
	RM_PixelNormalOffset           = 1,
	RM_MAX                         = 2
}

// Enum Engine.ETranslucencyLightingMode
public enum ETranslucencyLightingMode : byte
{
	TLM_VolumetricNonDirectional   = 0,
	TLM_VolumetricDirectional      = 1,
	TLM_VolumetricPerVertexNonDirectional = 2,
	TLM_VolumetricPerVertexDirectional = 3,
	TLM_Surface                    = 4,
	TLM_SurfacePerPixelLighting    = 5,
	TLM_MAX                        = 6
}

// Enum Engine.ESamplerSourceMode
public enum ESamplerSourceMode : byte
{
	SSM_FromTextureAsset           = 0,
	SSM_Wrap_WorldGroupSettings    = 1,
	SSM_Clamp_WorldGroupSettings   = 2,
	SSM_MAX                        = 3
}

// Enum Engine.EOcclusionCombineMode
public enum EOcclusionCombineMode : byte
{
	OCM_Minimum                    = 0,
	OCM_Multiply                   = 1,
	OCM_MAX                        = 2
}

// Enum Engine.EAspectRatioAxisConstraint
public enum EAspectRatioAxisConstraint : byte
{
	AspectRatio_MaintainYFOV       = 0,
	AspectRatio_MaintainXFOV       = 1,
	AspectRatio_MajorAxisFOV       = 2,
	AspectRatio_MAX                = 3
}

// Enum Engine.EFontCacheType
public enum EFontCacheType : byte
{
	EFontCacheType__Offline        = 0,
	EFontCacheType__Runtime        = 1,
	EFontCacheType__EFontCacheType_MAX = 2
}

// Enum Engine.EFontImportCharacterSet
public enum EFontImportCharacterSet : byte
{
	FontICS_Default                = 0,
	FontICS_Ansi                   = 1,
	FontICS_Symbol                 = 2,
	FontICS_MAX                    = 3
}

// Enum Engine.EStandbyType
public enum EStandbyType : byte
{
	STDBY_Rx                       = 0,
	STDBY_Tx                       = 1,
	STDBY_BadPing                  = 2,
	STDBY_MAX                      = 3
}

// Enum Engine.ESuggestProjVelocityTraceOption
public enum ESuggestProjVelocityTraceOption : byte
{
	ESuggestProjVelocityTraceOption__DoNotTrace = 0,
	ESuggestProjVelocityTraceOption__TraceFullPath = 1,
	ESuggestProjVelocityTraceOption__OnlyTraceWhileAscending = 2,
	ESuggestProjVelocityTraceOption__ESuggestProjVelocityTraceOption_MAX = 3
}

// Enum Engine.EWindowMode
public enum EWindowMode : byte
{
	EWindowMode__Fullscreen        = 0,
	EWindowMode__WindowedFullscreen = 1,
	EWindowMode__Windowed          = 2,
	EWindowMode__EWindowMode_MAX   = 3
}

// Enum Engine.EImportanceWeight
public enum EImportanceWeight : byte
{
	EImportanceWeight__Luminance   = 0,
	EImportanceWeight__Red         = 1,
	EImportanceWeight__Green       = 2,
	EImportanceWeight__Blue        = 3,
	EImportanceWeight__Alpha       = 4,
	EImportanceWeight__EImportanceWeight_MAX = 5
}

// Enum Engine.EAdManagerDelegate
public enum EAdManagerDelegate : byte
{
	AMD_ClickedBanner              = 0,
	AMD_UserClosedAd               = 1,
	AMD_MAX                        = 2
}

// Enum Engine.EControllerAnalogStick
public enum EControllerAnalogStick : byte
{
	EControllerAnalogStick__CAS_LeftStick = 0,
	EControllerAnalogStick__CAS_RightStick = 1,
	EControllerAnalogStick__CAS_MAX = 2
}

// Enum Engine.EAnimAlphaInputType
public enum EAnimAlphaInputType : byte
{
	EAnimAlphaInputType__Float     = 0,
	EAnimAlphaInputType__Bool      = 1,
	EAnimAlphaInputType__Curve     = 2,
	EAnimAlphaInputType__EAnimAlphaInputType_MAX = 3
}

// Enum Engine.ETrackActiveCondition
public enum ETrackActiveCondition : byte
{
	ETAC_Always                    = 0,
	ETAC_GoreEnabled               = 1,
	ETAC_GoreDisabled              = 2,
	ETAC_MAX                       = 3
}

// Enum Engine.EInterpTrackMoveRotMode
public enum EInterpTrackMoveRotMode : byte
{
	IMR_Keyframed                  = 0,
	IMR_LookAtGroup                = 1,
	IMR_Ignore                     = 2,
	IMR_MAX                        = 3
}

// Enum Engine.EInterpMoveAxis
public enum EInterpMoveAxis : byte
{
	AXIS_TranslationX              = 0,
	AXIS_TranslationY              = 1,
	AXIS_TranslationZ              = 2,
	AXIS_RotationX                 = 3,
	AXIS_RotationY                 = 4,
	AXIS_RotationZ                 = 5,
	AXIS_MAX                       = 6
}

// Enum Engine.ETrackToggleAction
public enum ETrackToggleAction : byte
{
	ETTA_Off                       = 0,
	ETTA_On                        = 1,
	ETTA_Toggle                    = 2,
	ETTA_Trigger                   = 3,
	ETTA_MAX                       = 4
}

// Enum Engine.EVisibilityTrackCondition
public enum EVisibilityTrackCondition : byte
{
	EVTC_Always                    = 0,
	EVTC_GoreEnabled               = 1,
	EVTC_GoreDisabled              = 2,
	EVTC_MAX                       = 3
}

// Enum Engine.EVisibilityTrackAction
public enum EVisibilityTrackAction : byte
{
	EVTA_Hide                      = 0,
	EVTA_Show                      = 1,
	EVTA_Toggle                    = 2,
	EVTA_MAX                       = 3
}

// Enum Engine.ESlateGesture
public enum ESlateGesture : byte
{
	ESlateGesture__None            = 0,
	ESlateGesture__Scroll          = 1,
	ESlateGesture__Magnify         = 2,
	ESlateGesture__Swipe           = 3,
	ESlateGesture__Rotate          = 4,
	ESlateGesture__LongPress       = 5,
	ESlateGesture__ESlateGesture_MAX = 6
}

// Enum Engine.ELerpInterpolationMode
public enum ELerpInterpolationMode : byte
{
	ELerpInterpolationMode__QuatInterp = 0,
	ELerpInterpolationMode__EulerInterp = 1,
	ELerpInterpolationMode__DualQuatInterp = 2,
	ELerpInterpolationMode__ELerpInterpolationMode_MAX = 3
}

// Enum Engine.EEasingFunc
public enum EEasingFunc : byte
{
	EEasingFunc__Linear            = 0,
	EEasingFunc__Step              = 1,
	EEasingFunc__SinusoidalIn      = 2,
	EEasingFunc__SinusoidalOut     = 3,
	EEasingFunc__SinusoidalInOut   = 4,
	EEasingFunc__EaseIn            = 5,
	EEasingFunc__EaseOut           = 6,
	EEasingFunc__EaseInOut         = 7,
	EEasingFunc__ExpoIn            = 8,
	EEasingFunc__ExpoOut           = 9,
	EEasingFunc__ExpoInOut         = 10,
	EEasingFunc__CircularIn        = 11,
	EEasingFunc__CircularOut       = 12,
	EEasingFunc__CircularInOut     = 13,
	EEasingFunc__EEasingFunc_MAX   = 14
}

// Enum Engine.ERoundingMode
public enum ERoundingMode : byte
{
	HalfToEven                     = 0,
	HalfFromZero                   = 1,
	HalfToZero                     = 2,
	FromZero                       = 3,
	ToZero                         = 4,
	ToNegativeInfinity             = 5,
	ToPositiveInfinity             = 6,
	ERoundingMode_MAX              = 7
}

// Enum Engine.EStreamingVolumeUsage
public enum EStreamingVolumeUsage : byte
{
	SVB_Loading                    = 0,
	SVB_LoadingAndVisibility       = 1,
	SVB_VisibilityBlockingOnLoad   = 2,
	SVB_BlockingOnLoad             = 3,
	SVB_LoadingNotVisible          = 4,
	SVB_MAX                        = 5
}

// Enum Engine.EMaterialDecalResponse
public enum EMaterialDecalResponse : byte
{
	MDR_None                       = 0,
	MDR_ColorNormalRoughness       = 1,
	MDR_Color                      = 2,
	MDR_ColorNormal                = 3,
	MDR_ColorRoughness             = 4,
	MDR_Normal                     = 5,
	MDR_NormalRoughness            = 6,
	MDR_Roughness                  = 7,
	MDR_MAX                        = 8
}

// Enum Engine.EDecalBlendMode
public enum EDecalBlendMode : byte
{
	DBM_Translucent                = 0,
	DBM_Stain                      = 1,
	DBM_Normal                     = 2,
	DBM_Emissive                   = 3,
	DBM_DBuffer_ColorNormalRoughness = 4,
	DBM_DBuffer_Color              = 5,
	DBM_DBuffer_ColorNormal        = 6,
	DBM_DBuffer_ColorRoughness     = 7,
	DBM_DBuffer_Normal             = 8,
	DBM_DBuffer_NormalRoughness    = 9,
	DBM_DBuffer_Roughness          = 10,
	DBM_DBuffer_Emissive           = 11,
	DBM_DBuffer_AlphaComposite     = 12,
	DBM_DBuffer_EmissiveAlphaComposite = 13,
	DBM_Volumetric_DistanceFunction = 14,
	DBM_AlphaComposite             = 15,
	DBM_AmbientOcclusion           = 16,
	DBM_MAX                        = 17
}

// Enum Engine.ETextureColorChannel
public enum ETextureColorChannel : byte
{
	TCC_Red                        = 0,
	TCC_Green                      = 1,
	TCC_Blue                       = 2,
	TCC_Alpha                      = 3,
	TCC_MAX                        = 4
}

// Enum Engine.EMaterialAttributeBlend
public enum EMaterialAttributeBlend : byte
{
	EMaterialAttributeBlend__Blend = 0,
	EMaterialAttributeBlend__UseA  = 1,
	EMaterialAttributeBlend__UseB  = 2,
	EMaterialAttributeBlend__EMaterialAttributeBlend_MAX = 3
}

// Enum Engine.EChannelMaskParameterColor
public enum EChannelMaskParameterColor : byte
{
	EChannelMaskParameterColor__Red = 0,
	EChannelMaskParameterColor__Green = 1,
	EChannelMaskParameterColor__Blue = 2,
	EChannelMaskParameterColor__Alpha = 3,
	EChannelMaskParameterColor__EChannelMaskParameterColor_MAX = 4
}

// Enum Engine.EClampMode
public enum EClampMode : byte
{
	CMODE_Clamp                    = 0,
	CMODE_ClampMin                 = 1,
	CMODE_ClampMax                 = 2,
	CMODE_MAX                      = 3
}

// Enum Engine.ECustomMaterialOutputType
public enum ECustomMaterialOutputType : byte
{
	CMOT_Float1                    = 0,
	CMOT_Float2                    = 1,
	CMOT_Float3                    = 2,
	CMOT_Float4                    = 3,
	CMOT_MAX                       = 4
}

// Enum Engine.EDepthOfFieldFunctionValue
public enum EDepthOfFieldFunctionValue : byte
{
	TDOF_NearAndFarMask            = 0,
	TDOF_NearMask                  = 1,
	TDOF_FarMask                   = 2,
	TDOF_CircleOfConfusionRadius   = 3,
	TDOF_MAX                       = 4
}

// Enum Engine.EFunctionInputType
public enum EFunctionInputType : byte
{
	FunctionInput_Scalar           = 0,
	FunctionInput_Vector2          = 1,
	FunctionInput_Vector3          = 2,
	FunctionInput_Vector4          = 3,
	FunctionInput_Texture2D        = 4,
	FunctionInput_TextureCube      = 5,
	FunctionInput_VolumeTexture    = 6,
	FunctionInput_StaticBool       = 7,
	FunctionInput_MaterialAttributes = 8,
	FunctionInput_TextureExternal  = 9,
	FunctionInput_MAX              = 10
}

// Enum Engine.ENoiseFunction
public enum ENoiseFunction : byte
{
	NOISEFUNCTION_SimplexTex       = 0,
	NOISEFUNCTION_GradientTex      = 1,
	NOISEFUNCTION_GradientTex3D    = 2,
	NOISEFUNCTION_GradientALU      = 3,
	NOISEFUNCTION_ValueALU         = 4,
	NOISEFUNCTION_VoronoiALU       = 5,
	NOISEFUNCTION_MAX              = 6
}

// Enum Engine.EMaterialSceneAttributeInputMode
public enum EMaterialSceneAttributeInputMode : byte
{
	EMaterialSceneAttributeInputMode__Coordinates = 0,
	EMaterialSceneAttributeInputMode__OffsetFraction = 1,
	EMaterialSceneAttributeInputMode__EMaterialSceneAttributeInputMode_MAX = 2
}

// Enum Engine.ESpeedTreeLODType
public enum ESpeedTreeLODType : byte
{
	STLOD_Pop                      = 0,
	STLOD_Smooth                   = 1,
	STLOD_MAX                      = 2
}

// Enum Engine.ESpeedTreeWindType
public enum ESpeedTreeWindType : byte
{
	STW_None                       = 0,
	STW_Fastest                    = 1,
	STW_Fast                       = 2,
	STW_Better                     = 3,
	STW_Best                       = 4,
	STW_Palm                       = 5,
	STW_BestPlus                   = 6,
	STW_MAX                        = 7
}

// Enum Engine.ESpeedTreeGeometryType
public enum ESpeedTreeGeometryType : byte
{
	STG_Branch                     = 0,
	STG_Frond                      = 1,
	STG_Leaf                       = 2,
	STG_FacingLeaf                 = 3,
	STG_Billboard                  = 4,
	STG_MAX                        = 5
}

// Enum Engine.EMaterialExposedTextureProperty
public enum EMaterialExposedTextureProperty : byte
{
	TMTM_TextureSize               = 0,
	TMTM_TexelSize                 = 1,
	TMTM_MAX                       = 2
}

// Enum Engine.ETextureMipValueMode
public enum ETextureMipValueMode : byte
{
	TMVM_None                      = 0,
	TMVM_MipLevel                  = 1,
	TMVM_MipBias                   = 2,
	TMVM_Derivative                = 3,
	TMVM_MAX                       = 4
}

// Enum Engine.EMaterialVectorCoordTransform
public enum EMaterialVectorCoordTransform : byte
{
	TRANSFORM_Tangent              = 0,
	TRANSFORM_Local                = 1,
	TRANSFORM_World                = 2,
	TRANSFORM_View                 = 3,
	TRANSFORM_Camera               = 4,
	TRANSFORM_ParticleWorld        = 5,
	TRANSFORM_MAX                  = 6
}

// Enum Engine.EMaterialVectorCoordTransformSource
public enum EMaterialVectorCoordTransformSource : byte
{
	TRANSFORMSOURCE_Tangent        = 0,
	TRANSFORMSOURCE_Local          = 1,
	TRANSFORMSOURCE_World          = 2,
	TRANSFORMSOURCE_View           = 3,
	TRANSFORMSOURCE_Camera         = 4,
	TRANSFORMSOURCE_ParticleWorld  = 5,
	TRANSFORMSOURCE_MAX            = 6
}

// Enum Engine.EMaterialPositionTransformSource
public enum EMaterialPositionTransformSource : byte
{
	TRANSFORMPOSSOURCE_Local       = 0,
	TRANSFORMPOSSOURCE_World       = 1,
	TRANSFORMPOSSOURCE_TranslatedWorld = 2,
	TRANSFORMPOSSOURCE_View        = 3,
	TRANSFORMPOSSOURCE_Camera      = 4,
	TRANSFORMPOSSOURCE_Particle    = 5,
	TRANSFORMPOSSOURCE_MAX         = 6
}

// Enum Engine.EVectorNoiseFunction
public enum EVectorNoiseFunction : byte
{
	VNF_CellnoiseALU               = 0,
	VNF_VectorALU                  = 1,
	VNF_GradientALU                = 2,
	VNF_CurlALU                    = 3,
	VNF_VoronoiALU                 = 4,
	VNF_MAX                        = 5
}

// Enum Engine.EMaterialExposedViewProperty
public enum EMaterialExposedViewProperty : byte
{
	MEVP_BufferSize                = 0,
	MEVP_FieldOfView               = 1,
	MEVP_TanHalfFieldOfView        = 2,
	MEVP_ViewSize                  = 3,
	MEVP_WorldSpaceViewPosition    = 4,
	MEVP_WorldSpaceCameraPosition  = 5,
	MEVP_ViewportOffset            = 6,
	MEVP_TemporalSampleCount       = 7,
	MEVP_TemporalSampleIndex       = 8,
	MEVP_TemporalSampleOffset      = 9,
	MEVP_RuntimeVirtualTextureOutputLevel = 10,
	MEVP_RuntimeVirtualTextureOutputDerivative = 11,
	MEVP_MAX                       = 12
}

// Enum Engine.EWorldPositionIncludedOffsets
public enum EWorldPositionIncludedOffsets : byte
{
	WPT_Default                    = 0,
	WPT_ExcludeAllShaderOffsets    = 1,
	WPT_CameraRelative             = 2,
	WPT_CameraRelativeNoOffsets    = 3,
	WPT_MAX                        = 4
}

// Enum Engine.EMaterialFunctionUsage
public enum EMaterialFunctionUsage : byte
{
	EMaterialFunctionUsage__Default = 0,
	EMaterialFunctionUsage__MaterialLayer = 1,
	EMaterialFunctionUsage__MaterialLayerBlend = 2,
	EMaterialFunctionUsage__EMaterialFunctionUsage_MAX = 3
}

// Enum Engine.EMaterialUsage
public enum EMaterialUsage : byte
{
	MATUSAGE_SkeletalMesh          = 0,
	MATUSAGE_ParticleSprites       = 1,
	MATUSAGE_BeamTrails            = 2,
	MATUSAGE_MeshParticles         = 3,
	MATUSAGE_StaticLighting        = 4,
	MATUSAGE_MorphTargets          = 5,
	MATUSAGE_SplineMesh            = 6,
	MATUSAGE_InstancedStaticMeshes = 7,
	MATUSAGE_GeometryCollections   = 8,
	MATUSAGE_Clothing              = 9,
	MATUSAGE_NiagaraSprites        = 10,
	MATUSAGE_NiagaraRibbons        = 11,
	MATUSAGE_NiagaraMeshParticles  = 12,
	MATUSAGE_GeometryCache         = 13,
	MATUSAGE_MAX                   = 14
}

// Enum Engine.EMaterialParameterAssociation
public enum EMaterialParameterAssociation : byte
{
	LayerParameter                 = 0,
	BlendParameter                 = 1,
	GlobalParameter                = 2,
	EMaterialParameterAssociation_MAX = 3
}

// Enum Engine.EMaterialMergeType
public enum EMaterialMergeType : byte
{
	MaterialMergeType_Default      = 0,
	MaterialMergeType_Simplygon    = 1,
	MaterialMergeType_MAX          = 2
}

// Enum Engine.ETextureSizingType
public enum ETextureSizingType : byte
{
	TextureSizingType_UseSingleTextureSize = 0,
	TextureSizingType_UseAutomaticBiasedSizes = 1,
	TextureSizingType_UseManualOverrideTextureSize = 2,
	TextureSizingType_UseSimplygonAutomaticSizing = 3,
	TextureSizingType_MAX          = 4
}

// Enum Engine.ESceneTextureId
public enum ESceneTextureId : byte
{
	PPI_SceneColor                 = 0,
	PPI_SceneDepth                 = 1,
	PPI_DiffuseColor               = 2,
	PPI_SpecularColor              = 3,
	PPI_SubsurfaceColor            = 4,
	PPI_BaseColor                  = 5,
	PPI_Specular                   = 6,
	PPI_Metallic                   = 7,
	PPI_WorldNormal                = 8,
	PPI_SeparateTranslucency       = 9,
	PPI_Opacity                    = 10,
	PPI_Roughness                  = 11,
	PPI_MaterialAO                 = 12,
	PPI_CustomDepth                = 13,
	PPI_PostProcessInput0          = 14,
	PPI_PostProcessInput1          = 15,
	PPI_PostProcessInput2          = 16,
	PPI_PostProcessInput3          = 17,
	PPI_PostProcessInput4          = 18,
	PPI_PostProcessInput5          = 19,
	PPI_PostProcessInput6          = 20,
	PPI_DecalMask                  = 21,
	PPI_ShadingModelColor          = 22,
	PPI_ShadingModelID             = 23,
	PPI_AmbientOcclusion           = 24,
	PPI_CustomStencil              = 25,
	PPI_StoredBaseColor            = 26,
	PPI_StoredSpecular             = 27,
	PPI_Velocity                   = 28,
	PPI_MAX                        = 29
}

// Enum Engine.EMaterialDomain
public enum EMaterialDomain : byte
{
	MD_Surface                     = 0,
	MD_DeferredDecal               = 1,
	MD_LightFunction               = 2,
	MD_Volume                      = 3,
	MD_PostProcess                 = 4,
	MD_UI                          = 5,
	MD_RuntimeVirtualTexture       = 6,
	MD_MAX                         = 7
}

// Enum Engine.EMeshInstancingReplacementMethod
public enum EMeshInstancingReplacementMethod : byte
{
	EMeshInstancingReplacementMethod__RemoveOriginalActors = 0,
	EMeshInstancingReplacementMethod__KeepOriginalActorsAsEditorOnly = 1,
	EMeshInstancingReplacementMethod__EMeshInstancingReplacementMethod_MAX = 2
}

// Enum Engine.EUVOutput
public enum EUVOutput : byte
{
	EUVOutput__DoNotOutputChannel  = 0,
	EUVOutput__OutputChannel       = 1,
	EUVOutput__EUVOutput_MAX       = 2
}

// Enum Engine.EMeshMergeType
public enum EMeshMergeType : byte
{
	EMeshMergeType__MeshMergeType_Default = 0,
	EMeshMergeType__MeshMergeType_MergeActor = 1,
	EMeshMergeType__MeshMergeType_MAX = 2
}

// Enum Engine.EMeshLODSelectionType
public enum EMeshLODSelectionType : byte
{
	EMeshLODSelectionType__AllLODs = 0,
	EMeshLODSelectionType__SpecificLOD = 1,
	EMeshLODSelectionType__CalculateLOD = 2,
	EMeshLODSelectionType__LowestDetailLOD = 3,
	EMeshLODSelectionType__EMeshLODSelectionType_MAX = 4
}

// Enum Engine.EProxyNormalComputationMethod
public enum EProxyNormalComputationMethod : byte
{
	EProxyNormalComputationMethod__AngleWeighted = 0,
	EProxyNormalComputationMethod__AreaWeighted = 1,
	EProxyNormalComputationMethod__EqualWeighted = 2,
	EProxyNormalComputationMethod__EProxyNormalComputationMethod_MAX = 3
}

// Enum Engine.ELandscapeCullingPrecision
public enum ELandscapeCullingPrecision : byte
{
	ELandscapeCullingPrecision__High = 0,
	ELandscapeCullingPrecision__Medium = 1,
	ELandscapeCullingPrecision__Low = 2,
	ELandscapeCullingPrecision__ELandscapeCullingPrecision_MAX = 3
}

// Enum Engine.EStaticMeshReductionTerimationCriterion
public enum EStaticMeshReductionTerimationCriterion : byte
{
	EStaticMeshReductionTerimationCriterion__Triangles = 0,
	EStaticMeshReductionTerimationCriterion__Vertices = 1,
	EStaticMeshReductionTerimationCriterion__Any = 2,
	EStaticMeshReductionTerimationCriterion__EStaticMeshReductionTerimationCriterion_MAX = 3
}

// Enum Engine.EMeshFeatureImportance
public enum EMeshFeatureImportance : byte
{
	EMeshFeatureImportance__Off    = 0,
	EMeshFeatureImportance__Lowest = 1,
	EMeshFeatureImportance__Low    = 2,
	EMeshFeatureImportance__Normal = 3,
	EMeshFeatureImportance__High   = 4,
	EMeshFeatureImportance__Highest = 5,
	EMeshFeatureImportance__EMeshFeatureImportance_MAX = 6
}

// Enum Engine.EVertexPaintAxis
public enum EVertexPaintAxis : byte
{
	EVertexPaintAxis__X            = 0,
	EVertexPaintAxis__Y            = 1,
	EVertexPaintAxis__Z            = 2,
	EVertexPaintAxis__EVertexPaintAxis_MAX = 3
}

// Enum Engine.EMicroTransactionResult
public enum EMicroTransactionResult : byte
{
	MTR_Succeeded                  = 0,
	MTR_Failed                     = 1,
	MTR_Canceled                   = 2,
	MTR_RestoredFromServer         = 3,
	MTR_MAX                        = 4
}

// Enum Engine.EMicroTransactionDelegate
public enum EMicroTransactionDelegate : byte
{
	MTD_PurchaseQueryComplete      = 0,
	MTD_PurchaseComplete           = 1,
	MTD_MAX                        = 2
}

// Enum Engine.FNavigationSystemRunMode
public enum EFNavigationSystemRunMode : byte
{
	FNavigationSystemRunMode__InvalidMode = 0,
	FNavigationSystemRunMode__GameMode = 1,
	FNavigationSystemRunMode__EditorMode = 2,
	FNavigationSystemRunMode__SimulationMode = 3,
	FNavigationSystemRunMode__PIEMode = 4,
	FNavigationSystemRunMode__FNavigationSystemRunMode_MAX = 5
}

// Enum Engine.ENavigationQueryResult
public enum ENavigationQueryResult : byte
{
	ENavigationQueryResult__Invalid = 0,
	ENavigationQueryResult__Error  = 1,
	ENavigationQueryResult__Fail   = 2,
	ENavigationQueryResult__Success = 3,
	ENavigationQueryResult__ENavigationQueryResult_MAX = 4
}

// Enum Engine.ENavPathEvent
public enum ENavPathEvent : byte
{
	ENavPathEvent__Cleared         = 0,
	ENavPathEvent__NewPath         = 1,
	ENavPathEvent__UpdatedDueToGoalMoved = 2,
	ENavPathEvent__UpdatedDueToNavigationChanged = 3,
	ENavPathEvent__Invalidated     = 4,
	ENavPathEvent__RePathFailed    = 5,
	ENavPathEvent__MetaPathUpdate  = 6,
	ENavPathEvent__Custom          = 7,
	ENavPathEvent__ENavPathEvent_MAX = 8
}

// Enum Engine.ENavDataGatheringModeConfig
public enum ENavDataGatheringModeConfig : byte
{
	ENavDataGatheringModeConfig__Invalid = 0,
	ENavDataGatheringModeConfig__Instant = 1,
	ENavDataGatheringModeConfig__Lazy = 2,
	ENavDataGatheringModeConfig__ENavDataGatheringModeConfig_MAX = 3
}

// Enum Engine.ENavDataGatheringMode
public enum ENavDataGatheringMode : byte
{
	ENavDataGatheringMode__Default = 0,
	ENavDataGatheringMode__Instant = 1,
	ENavDataGatheringMode__Lazy    = 2,
	ENavDataGatheringMode__ENavDataGatheringMode_MAX = 3
}

// Enum Engine.ENavigationOptionFlag
public enum ENavigationOptionFlag : byte
{
	ENavigationOptionFlag__Default = 0,
	ENavigationOptionFlag__Enable  = 1,
	ENavigationOptionFlag__Disable = 2,
	ENavigationOptionFlag__MAX     = 3
}

// Enum Engine.ENavLinkDirection
public enum ENavLinkDirection : byte
{
	ENavLinkDirection__BothWays    = 0,
	ENavLinkDirection__LeftToRight = 1,
	ENavLinkDirection__RightToLeft = 2,
	ENavLinkDirection__ENavLinkDirection_MAX = 3
}

// Enum Engine.EFastArraySerializerDeltaFlags
public enum EFastArraySerializerDeltaFlags : byte
{
	EFastArraySerializerDeltaFlags__None = 0,
	EFastArraySerializerDeltaFlags__HasBeenSerialized = 1,
	EFastArraySerializerDeltaFlags__HasDeltaBeenRequested = 2,
	EFastArraySerializerDeltaFlags__IsUsingDeltaSerialization = 3,
	EFastArraySerializerDeltaFlags__EFastArraySerializerDeltaFlags_MAX = 4
}

// Enum Engine.EEmitterRenderMode
public enum EEmitterRenderMode : byte
{
	ERM_Normal                     = 0,
	ERM_Point                      = 1,
	ERM_Cross                      = 2,
	ERM_LightsOnly                 = 3,
	ERM_None                       = 4,
	ERM_MAX                        = 5
}

// Enum Engine.EParticleSubUVInterpMethod
public enum EParticleSubUVInterpMethod : byte
{
	PSUVIM_None                    = 0,
	PSUVIM_Linear                  = 1,
	PSUVIM_Linear_Blend            = 2,
	PSUVIM_Random                  = 3,
	PSUVIM_Random_Blend            = 4,
	PSUVIM_MAX                     = 5
}

// Enum Engine.EParticleBurstMethod
public enum EParticleBurstMethod : byte
{
	EPBM_Instant                   = 0,
	EPBM_Interpolated              = 1,
	EPBM_MAX                       = 2
}

// Enum Engine.EParticleSystemInsignificanceReaction
public enum EParticleSystemInsignificanceReaction : byte
{
	EParticleSystemInsignificanceReaction__Auto = 0,
	EParticleSystemInsignificanceReaction__Complete = 1,
	EParticleSystemInsignificanceReaction__DisableTick = 2,
	EParticleSystemInsignificanceReaction__DisableTickAndKill = 3,
	EParticleSystemInsignificanceReaction__Num = 4,
	EParticleSystemInsignificanceReaction__EParticleSystemInsignificanceReaction_MAX = 5
}

// Enum Engine.EParticleSignificanceLevel
public enum EParticleSignificanceLevel : byte
{
	EParticleSignificanceLevel__Low = 0,
	EParticleSignificanceLevel__Medium = 1,
	EParticleSignificanceLevel__High = 2,
	EParticleSignificanceLevel__Critical = 3,
	EParticleSignificanceLevel__Num = 4,
	EParticleSignificanceLevel__EParticleSignificanceLevel_MAX = 5
}

// Enum Engine.EParticleDetailMode
public enum EParticleDetailMode : byte
{
	PDM_Low                        = 0,
	PDM_Medium                     = 1,
	PDM_High                       = 2,
	PDM_MAX                        = 3
}

// Enum Engine.EParticleSourceSelectionMethod
public enum EParticleSourceSelectionMethod : byte
{
	EPSSM_Random                   = 0,
	EPSSM_Sequential               = 1,
	EPSSM_MAX                      = 2
}

// Enum Engine.EModuleType
public enum EModuleType : byte
{
	EPMT_General                   = 0,
	EPMT_TypeData                  = 1,
	EPMT_Beam                      = 2,
	EPMT_Trail                     = 3,
	EPMT_Spawn                     = 4,
	EPMT_Required                  = 5,
	EPMT_Event                     = 6,
	EPMT_Light                     = 7,
	EPMT_SubUV                     = 8,
	EPMT_MAX                       = 9
}

// Enum Engine.EAttractorParticleSelectionMethod
public enum EAttractorParticleSelectionMethod : byte
{
	EAPSM_Random                   = 0,
	EAPSM_Sequential               = 1,
	EAPSM_MAX                      = 2
}

// Enum Engine.Beam2SourceTargetTangentMethod
public enum EBeam2SourceTargetTangentMethod : byte
{
	PEB2STTM_Direct                = 0,
	PEB2STTM_UserSet               = 1,
	PEB2STTM_Distribution          = 2,
	PEB2STTM_Emitter               = 3,
	PEB2STTM_MAX                   = 4
}

// Enum Engine.Beam2SourceTargetMethod
public enum EBeam2SourceTargetMethod : byte
{
	PEB2STM_Default                = 0,
	PEB2STM_UserSet                = 1,
	PEB2STM_Emitter                = 2,
	PEB2STM_Particle               = 3,
	PEB2STM_Actor                  = 4,
	PEB2STM_MAX                    = 5
}

// Enum Engine.BeamModifierType
public enum EBeamModifierType : byte
{
	PEB2MT_Source                  = 0,
	PEB2MT_Target                  = 1,
	PEB2MT_MAX                     = 2
}

// Enum Engine.EParticleCameraOffsetUpdateMethod
public enum EParticleCameraOffsetUpdateMethod : byte
{
	EPCOUM_DirectSet               = 0,
	EPCOUM_Additive                = 1,
	EPCOUM_Scalar                  = 2,
	EPCOUM_MAX                     = 3
}

// Enum Engine.EParticleCollisionComplete
public enum EParticleCollisionComplete : byte
{
	EPCC_Kill                      = 0,
	EPCC_Freeze                    = 1,
	EPCC_HaltCollisions            = 2,
	EPCC_FreezeTranslation         = 3,
	EPCC_FreezeRotation            = 4,
	EPCC_FreezeMovement            = 5,
	EPCC_MAX                       = 6
}

// Enum Engine.EParticleCollisionResponse
public enum EParticleCollisionResponse : byte
{
	EParticleCollisionResponse__Bounce = 0,
	EParticleCollisionResponse__Stop = 1,
	EParticleCollisionResponse__Kill = 2,
	EParticleCollisionResponse__EParticleCollisionResponse_MAX = 3
}

// Enum Engine.ELocationBoneSocketSelectionMethod
public enum ELocationBoneSocketSelectionMethod : byte
{
	BONESOCKETSEL_Sequential       = 0,
	BONESOCKETSEL_Random           = 1,
	BONESOCKETSEL_MAX              = 2
}

// Enum Engine.ELocationBoneSocketSource
public enum ELocationBoneSocketSource : byte
{
	BONESOCKETSOURCE_Bones         = 0,
	BONESOCKETSOURCE_Sockets       = 1,
	BONESOCKETSOURCE_MAX           = 2
}

// Enum Engine.ELocationEmitterSelectionMethod
public enum ELocationEmitterSelectionMethod : byte
{
	ELESM_Random                   = 0,
	ELESM_Sequential               = 1,
	ELESM_MAX                      = 2
}

// Enum Engine.CylinderHeightAxis
public enum ECylinderHeightAxis : byte
{
	PMLPC_HEIGHTAXIS_X             = 0,
	PMLPC_HEIGHTAXIS_Y             = 1,
	PMLPC_HEIGHTAXIS_Z             = 2,
	PMLPC_HEIGHTAXIS_MAX           = 3
}

// Enum Engine.ELocationSkelVertSurfaceSource
public enum ELocationSkelVertSurfaceSource : byte
{
	VERTSURFACESOURCE_Vert         = 0,
	VERTSURFACESOURCE_Surface      = 1,
	VERTSURFACESOURCE_MAX          = 2
}

// Enum Engine.EOrbitChainMode
public enum EOrbitChainMode : byte
{
	EOChainMode_Add                = 0,
	EOChainMode_Scale              = 1,
	EOChainMode_Link               = 2,
	EOChainMode_MAX                = 3
}

// Enum Engine.EParticleAxisLock
public enum EParticleAxisLock : byte
{
	EPAL_NONE                      = 0,
	EPAL_X                         = 1,
	EPAL_Y                         = 2,
	EPAL_Z                         = 3,
	EPAL_NEGATIVE_X                = 4,
	EPAL_NEGATIVE_Y                = 5,
	EPAL_NEGATIVE_Z                = 6,
	EPAL_ROTATE_X                  = 7,
	EPAL_ROTATE_Y                  = 8,
	EPAL_ROTATE_Z                  = 9,
	EPAL_MAX                       = 10
}

// Enum Engine.EEmitterDynamicParameterValue
public enum EEmitterDynamicParameterValue : byte
{
	EDPV_UserSet                   = 0,
	EDPV_AutoSet                   = 1,
	EDPV_VelocityX                 = 2,
	EDPV_VelocityY                 = 3,
	EDPV_VelocityZ                 = 4,
	EDPV_VelocityMag               = 5,
	EDPV_MAX                       = 6
}

// Enum Engine.EEmitterNormalsMode
public enum EEmitterNormalsMode : byte
{
	ENM_CameraFacing               = 0,
	ENM_Spherical                  = 1,
	ENM_Cylindrical                = 2,
	ENM_MAX                        = 3
}

// Enum Engine.EParticleSortMode
public enum EParticleSortMode : byte
{
	PSORTMODE_None                 = 0,
	PSORTMODE_ViewProjDepth        = 1,
	PSORTMODE_DistanceToView       = 2,
	PSORTMODE_Age_OldestFirst      = 3,
	PSORTMODE_Age_NewestFirst      = 4,
	PSORTMODE_MAX                  = 5
}

// Enum Engine.EParticleUVFlipMode
public enum EParticleUVFlipMode : byte
{
	EParticleUVFlipMode__None      = 0,
	EParticleUVFlipMode__FlipUV    = 1,
	EParticleUVFlipMode__FlipUOnly = 2,
	EParticleUVFlipMode__FlipVOnly = 3,
	EParticleUVFlipMode__RandomFlipUV = 4,
	EParticleUVFlipMode__RandomFlipUOnly = 5,
	EParticleUVFlipMode__RandomFlipVOnly = 6,
	EParticleUVFlipMode__RandomFlipUVIndependent = 7,
	EParticleUVFlipMode__EParticleUVFlipMode_MAX = 8
}

// Enum Engine.ETrail2SourceMethod
public enum ETrail2SourceMethod : byte
{
	PET2SRCM_Default               = 0,
	PET2SRCM_Particle              = 1,
	PET2SRCM_Actor                 = 2,
	PET2SRCM_MAX                   = 3
}

// Enum Engine.EBeamTaperMethod
public enum EBeamTaperMethod : byte
{
	PEBTM_None                     = 0,
	PEBTM_Full                     = 1,
	PEBTM_Partial                  = 2,
	PEBTM_MAX                      = 3
}

// Enum Engine.EBeam2Method
public enum EBeam2Method : byte
{
	PEB2M_Distance                 = 0,
	PEB2M_Target                   = 1,
	PEB2M_Branch                   = 2,
	PEB2M_MAX                      = 3
}

// Enum Engine.EMeshCameraFacingOptions
public enum EMeshCameraFacingOptions : byte
{
	XAxisFacing_NoUp               = 0,
	XAxisFacing_ZUp                = 1,
	XAxisFacing_NegativeZUp        = 2,
	XAxisFacing_YUp                = 3,
	XAxisFacing_NegativeYUp        = 4,
	LockedAxis_ZAxisFacing         = 5,
	LockedAxis_NegativeZAxisFacing = 6,
	LockedAxis_YAxisFacing         = 7,
	LockedAxis_NegativeYAxisFacing = 8,
	VelocityAligned_ZAxisFacing    = 9,
	VelocityAligned_NegativeZAxisFacing = 10,
	VelocityAligned_YAxisFacing    = 11,
	VelocityAligned_NegativeYAxisFacing = 12,
	EMeshCameraFacingOptions_MAX   = 13
}

// Enum Engine.EMeshCameraFacingUpAxis
public enum EMeshCameraFacingUpAxis : byte
{
	CameraFacing_NoneUP            = 0,
	CameraFacing_ZUp               = 1,
	CameraFacing_NegativeZUp       = 2,
	CameraFacing_YUp               = 3,
	CameraFacing_NegativeYUp       = 4,
	CameraFacing_MAX               = 5
}

// Enum Engine.EMeshScreenAlignment
public enum EMeshScreenAlignment : byte
{
	PSMA_MeshFaceCameraWithRoll    = 0,
	PSMA_MeshFaceCameraWithSpin    = 1,
	PSMA_MeshFaceCameraWithLockedAxis = 2,
	PSMA_MAX                       = 3
}

// Enum Engine.ETrailsRenderAxisOption
public enum ETrailsRenderAxisOption : byte
{
	Trails_CameraUp                = 0,
	Trails_SourceUp                = 1,
	Trails_WorldUp                 = 2,
	Trails_MAX                     = 3
}

// Enum Engine.EParticleScreenAlignment
public enum EParticleScreenAlignment : byte
{
	PSA_FacingCameraPosition       = 0,
	PSA_Square                     = 1,
	PSA_Rectangle                  = 2,
	PSA_Velocity                   = 3,
	PSA_AwayFromCenter             = 4,
	PSA_TypeSpecific               = 5,
	PSA_FacingCameraDistanceBlend  = 6,
	PSA_MAX                        = 7
}

// Enum Engine.EParticleSystemOcclusionBoundsMethod
public enum EParticleSystemOcclusionBoundsMethod : byte
{
	EPSOBM_None                    = 0,
	EPSOBM_ParticleBounds          = 1,
	EPSOBM_CustomBounds            = 2,
	EPSOBM_MAX                     = 3
}

// Enum Engine.ParticleSystemLODMethod
public enum EParticleSystemLODMethod : byte
{
	PARTICLESYSTEMLODMETHOD_Automatic = 0,
	PARTICLESYSTEMLODMETHOD_DirectSet = 1,
	PARTICLESYSTEMLODMETHOD_ActivateAutomatic = 2,
	PARTICLESYSTEMLODMETHOD_MAX    = 3
}

// Enum Engine.EParticleSystemUpdateMode
public enum EParticleSystemUpdateMode : byte
{
	EPSUM_RealTime                 = 0,
	EPSUM_FixedTime                = 1,
	EPSUM_MAX                      = 2
}

// Enum Engine.EParticleEventType
public enum EParticleEventType : byte
{
	EPET_Any                       = 0,
	EPET_Spawn                     = 1,
	EPET_Death                     = 2,
	EPET_Collision                 = 3,
	EPET_Burst                     = 4,
	EPET_Blueprint                 = 5,
	EPET_MAX                       = 6
}

// Enum Engine.ParticleReplayState
public enum EParticleReplayState : byte
{
	PRS_Disabled                   = 0,
	PRS_Capturing                  = 1,
	PRS_Replaying                  = 2,
	PRS_MAX                        = 3
}

// Enum Engine.EParticleSysParamType
public enum EParticleSysParamType : byte
{
	PSPT_None                      = 0,
	PSPT_Scalar                    = 1,
	PSPT_ScalarRand                = 2,
	PSPT_Vector                    = 3,
	PSPT_VectorRand                = 4,
	PSPT_Color                     = 5,
	PSPT_Actor                     = 6,
	PSPT_Material                  = 7,
	PSPT_MAX                       = 8
}

// Enum Engine.ESettingsLockedAxis
public enum ESettingsLockedAxis : byte
{
	ESettingsLockedAxis__None      = 0,
	ESettingsLockedAxis__X         = 1,
	ESettingsLockedAxis__Y         = 2,
	ESettingsLockedAxis__Z         = 3,
	ESettingsLockedAxis__Invalid   = 4,
	ESettingsLockedAxis__ESettingsLockedAxis_MAX = 5
}

// Enum Engine.ESettingsDOF
public enum ESettingsDOF : byte
{
	ESettingsDOF__Full3D           = 0,
	ESettingsDOF__YZPlane          = 1,
	ESettingsDOF__XZPlane          = 2,
	ESettingsDOF__XYPlane          = 3,
	ESettingsDOF__ESettingsDOF_MAX = 4
}

// Enum Engine.EFrictionCombineMode
public enum EFrictionCombineMode : byte
{
	EFrictionCombineMode__Average  = 0,
	EFrictionCombineMode__Min      = 1,
	EFrictionCombineMode__Multiply = 2,
	EFrictionCombineMode__Max      = 3
}

// Enum Engine.EViewTargetBlendFunction
public enum EViewTargetBlendFunction : byte
{
	VTBlend_Linear                 = 0,
	VTBlend_Cubic                  = 1,
	VTBlend_EaseIn                 = 2,
	VTBlend_EaseOut                = 3,
	VTBlend_EaseInOut              = 4,
	VTBlend_MAX                    = 5
}

// Enum Engine.EDynamicForceFeedbackAction
public enum EDynamicForceFeedbackAction : byte
{
	EDynamicForceFeedbackAction__Start = 0,
	EDynamicForceFeedbackAction__Update = 1,
	EDynamicForceFeedbackAction__Stop = 2,
	EDynamicForceFeedbackAction__EDynamicForceFeedbackAction_MAX = 3
}

// Enum Engine.ERichCurveExtrapolation
public enum ERichCurveExtrapolation : byte
{
	RCCE_Cycle                     = 0,
	RCCE_CycleWithOffset           = 1,
	RCCE_Oscillate                 = 2,
	RCCE_Linear                    = 3,
	RCCE_Constant                  = 4,
	RCCE_None                      = 5,
	RCCE_MAX                       = 6
}

// Enum Engine.ERichCurveInterpMode
public enum ERichCurveInterpMode : byte
{
	RCIM_Linear                    = 0,
	RCIM_Constant                  = 1,
	RCIM_Cubic                     = 2,
	RCIM_None                      = 3,
	RCIM_MAX                       = 4
}

// Enum Engine.EReflectionSourceType
public enum EReflectionSourceType : byte
{
	EReflectionSourceType__CapturedScene = 0,
	EReflectionSourceType__SpecifiedCubemap = 1,
	EReflectionSourceType__EReflectionSourceType_MAX = 2
}

// Enum Engine.EDefaultBackBufferPixelFormat
public enum EDefaultBackBufferPixelFormat : byte
{
	EDefaultBackBufferPixelFormat__DBBPF_B8G8R8A8 = 0,
	EDefaultBackBufferPixelFormat__DBBPF_A16B16G16R16_DEPRECATED = 1,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGB_DEPRECATED = 2,
	EDefaultBackBufferPixelFormat__DBBPF_FloatRGBA = 3,
	EDefaultBackBufferPixelFormat__DBBPF_A2B10G10R10 = 4,
	EDefaultBackBufferPixelFormat__DBBPF_MAX = 5
}

// Enum Engine.EAutoExposureMethodUI
public enum EAutoExposureMethodUI : byte
{
	EAutoExposureMethodUI__AEM_Histogram = 0,
	EAutoExposureMethodUI__AEM_Basic = 1,
	EAutoExposureMethodUI__AEM_Manual = 2,
	EAutoExposureMethodUI__AEM_MAX = 3
}

// Enum Engine.EAlphaChannelMode
public enum EAlphaChannelMode : byte
{
	EAlphaChannelMode__Disabled    = 0,
	EAlphaChannelMode__LinearColorSpaceOnly = 1,
	EAlphaChannelMode__AllowThroughTonemapper = 2,
	EAlphaChannelMode__EAlphaChannelMode_MAX = 3
}

// Enum Engine.EEarlyZPass
public enum EEarlyZPass : byte
{
	EEarlyZPass__None              = 0,
	EEarlyZPass__OpaqueOnly        = 1,
	EEarlyZPass__OpaqueAndMasked   = 2,
	EEarlyZPass__Auto              = 3,
	EEarlyZPass__EEarlyZPass_MAX   = 4
}

// Enum Engine.ECustomDepthStencil
public enum ECustomDepthStencil : byte
{
	ECustomDepthStencil__Disabled  = 0,
	ECustomDepthStencil__Enabled   = 1,
	ECustomDepthStencil__EnabledOnDemand = 2,
	ECustomDepthStencil__EnabledWithStencil = 3,
	ECustomDepthStencil__ECustomDepthStencil_MAX = 4
}

// Enum Engine.EMobileMSAASampleCount
public enum EMobileMSAASampleCount : byte
{
	EMobileMSAASampleCount__One    = 0,
	EMobileMSAASampleCount__Two    = 1,
	EMobileMSAASampleCount__Four   = 2,
	EMobileMSAASampleCount__Eight  = 3,
	EMobileMSAASampleCount__EMobileMSAASampleCount_MAX = 4
}

// Enum Engine.ECompositingSampleCount
public enum ECompositingSampleCount : byte
{
	ECompositingSampleCount__One   = 0,
	ECompositingSampleCount__Two   = 1,
	ECompositingSampleCount__Four  = 2,
	ECompositingSampleCount__Eight = 3,
	ECompositingSampleCount__ECompositingSampleCount_MAX = 4
}

// Enum Engine.EClearSceneOptions
public enum EClearSceneOptions : byte
{
	EClearSceneOptions__NoClear    = 0,
	EClearSceneOptions__HardwareClear = 1,
	EClearSceneOptions__QuadAtMaxZ = 2,
	EClearSceneOptions__EClearSceneOptions_MAX = 3
}

// Enum Engine.EReporterLineStyle
public enum EReporterLineStyle : byte
{
	EReporterLineStyle__Line       = 0,
	EReporterLineStyle__Dash       = 1,
	EReporterLineStyle__EReporterLineStyle_MAX = 2
}

// Enum Engine.ELegendPosition
public enum ELegendPosition : byte
{
	ELegendPosition__Outside       = 0,
	ELegendPosition__Inside        = 1,
	ELegendPosition__ELegendPosition_MAX = 2
}

// Enum Engine.EGraphDataStyle
public enum EGraphDataStyle : byte
{
	EGraphDataStyle__Lines         = 0,
	EGraphDataStyle__Filled        = 1,
	EGraphDataStyle__EGraphDataStyle_MAX = 2
}

// Enum Engine.EGraphAxisStyle
public enum EGraphAxisStyle : byte
{
	EGraphAxisStyle__Lines         = 0,
	EGraphAxisStyle__Notches       = 1,
	EGraphAxisStyle__Grid          = 2,
	EGraphAxisStyle__EGraphAxisStyle_MAX = 3
}

// Enum Engine.ERichCurveKeyTimeCompressionFormat
public enum ERichCurveKeyTimeCompressionFormat : byte
{
	RCKTCF_uint16                  = 0,
	RCKTCF_float32                 = 1,
	RCKTCF_MAX                     = 2
}

// Enum Engine.ERichCurveCompressionFormat
public enum ERichCurveCompressionFormat : byte
{
	RCCF_Empty                     = 0,
	RCCF_Constant                  = 1,
	RCCF_Linear                    = 2,
	RCCF_Cubic                     = 3,
	RCCF_Mixed                     = 4,
	RCCF_MAX                       = 5
}

// Enum Engine.ERichCurveTangentWeightMode
public enum ERichCurveTangentWeightMode : byte
{
	RCTWM_WeightedNone             = 0,
	RCTWM_WeightedArrive           = 1,
	RCTWM_WeightedLeave            = 2,
	RCTWM_WeightedBoth             = 3,
	RCTWM_MAX                      = 4
}

// Enum Engine.ERichCurveTangentMode
public enum ERichCurveTangentMode : byte
{
	RCTM_Auto                      = 0,
	RCTM_User                      = 1,
	RCTM_Break                     = 2,
	RCTM_None                      = 3,
	RCTM_MAX                       = 4
}

// Enum Engine.EConstraintTransform
public enum EConstraintTransform : byte
{
	EConstraintTransform__Absolute = 0,
	EConstraintTransform__Relative = 1,
	EConstraintTransform__EConstraintTransform_MAX = 2
}

// Enum Engine.EControlConstraint
public enum EControlConstraint : byte
{
	EControlConstraint__Orientation = 0,
	EControlConstraint__Translation = 1,
	EControlConstraint__MAX        = 2
}

// Enum Engine.ERootMotionFinishVelocityMode
public enum ERootMotionFinishVelocityMode : byte
{
	ERootMotionFinishVelocityMode__MaintainLastRootMotionVelocity = 0,
	ERootMotionFinishVelocityMode__SetVelocity = 1,
	ERootMotionFinishVelocityMode__ClampVelocity = 2,
	ERootMotionFinishVelocityMode__ERootMotionFinishVelocityMode_MAX = 3
}

// Enum Engine.ERootMotionSourceSettingsFlags
public enum ERootMotionSourceSettingsFlags : byte
{
	ERootMotionSourceSettingsFlags__UseSensitiveLiftoffCheck = 0,
	ERootMotionSourceSettingsFlags__DisablePartialEndTick = 1,
	ERootMotionSourceSettingsFlags__ERootMotionSourceSettingsFlags_MAX = 2
}

// Enum Engine.ERootMotionSourceStatusFlags
public enum ERootMotionSourceStatusFlags : byte
{
	ERootMotionSourceStatusFlags__Prepared = 0,
	ERootMotionSourceStatusFlags__Finished = 1,
	ERootMotionSourceStatusFlags__MarkedForRemoval = 2,
	ERootMotionSourceStatusFlags__ERootMotionSourceStatusFlags_MAX = 3
}

// Enum Engine.ERootMotionAccumulateMode
public enum ERootMotionAccumulateMode : byte
{
	ERootMotionAccumulateMode__Override = 0,
	ERootMotionAccumulateMode__Additive = 1,
	ERootMotionAccumulateMode__ERootMotionAccumulateMode_MAX = 2
}

// Enum Engine.ERuntimeVirtualTextureMaterialType
public enum ERuntimeVirtualTextureMaterialType : byte
{
	ERuntimeVirtualTextureMaterialType__BaseColor = 0,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal = 1,
	ERuntimeVirtualTextureMaterialType__BaseColor_Normal_Specular = 2,
	ERuntimeVirtualTextureMaterialType__Count = 3,
	ERuntimeVirtualTextureMaterialType__ERuntimeVirtualTextureMaterialType_MAX = 4
}

// Enum Engine.ELightUnits
public enum ELightUnits : byte
{
	ELightUnits__Unitless          = 0,
	ELightUnits__Candelas          = 1,
	ELightUnits__Lumens            = 2,
	ELightUnits__ELightUnits_MAX   = 3
}

// Enum Engine.EAntiAliasingMethod
public enum EAntiAliasingMethod : byte
{
	AAM_None                       = 0,
	AAM_FXAA                       = 1,
	AAM_TemporalAA                 = 2,
	AAM_MSAA                       = 3,
	AAM_MAX                        = 4
}

// Enum Engine.EDepthOfFieldMethod
public enum EDepthOfFieldMethod : byte
{
	DOFM_BokehDOF                  = 0,
	DOFM_Gaussian                  = 1,
	DOFM_CircleDOF                 = 2,
	DOFM_MAX                       = 3
}

// Enum Engine.ESceneCapturePrimitiveRenderMode
public enum ESceneCapturePrimitiveRenderMode : byte
{
	ESceneCapturePrimitiveRenderMode__PRM_LegacySceneCapture = 0,
	ESceneCapturePrimitiveRenderMode__PRM_RenderScenePrimitives = 1,
	ESceneCapturePrimitiveRenderMode__PRM_UseShowOnlyList = 2,
	ESceneCapturePrimitiveRenderMode__PRM_MAX = 3
}

// Enum Engine.EMaterialProperty
public enum EMaterialProperty : byte
{
	MP_EmissiveColor               = 0,
	MP_Opacity                     = 1,
	MP_OpacityMask                 = 2,
	MP_DiffuseColor                = 3,
	MP_SpecularColor               = 4,
	MP_BaseColor                   = 5,
	MP_Metallic                    = 6,
	MP_Specular                    = 7,
	MP_Roughness                   = 8,
	MP_Normal                      = 9,
	MP_WorldPositionOffset         = 10,
	MP_WorldDisplacement           = 11,
	MP_TessellationMultiplier      = 12,
	MP_SubsurfaceColor             = 13,
	MP_CustomData0                 = 14,
	MP_CustomData1                 = 15,
	MP_AmbientOcclusion            = 16,
	MP_Refraction                  = 17,
	MP_CustomizedUVs0              = 18,
	MP_CustomizedUVs1              = 19,
	MP_CustomizedUVs2              = 20,
	MP_CustomizedUVs3              = 21,
	MP_CustomizedUVs4              = 22,
	MP_CustomizedUVs5              = 23,
	MP_CustomizedUVs6              = 24,
	MP_CustomizedUVs7              = 25,
	MP_PixelDepthOffset            = 26,
	MP_ShadingModel                = 27,
	MP_MaterialAttributes          = 28,
	MP_CustomOutput                = 29,
	MP_MAX                         = 30
}

// Enum Engine.EPhysicsTransformUpdateMode
public enum EPhysicsTransformUpdateMode : byte
{
	EPhysicsTransformUpdateMode__SimulationUpatesComponentTransform = 0,
	EPhysicsTransformUpdateMode__ComponentTransformIsKinematic = 1,
	EPhysicsTransformUpdateMode__EPhysicsTransformUpdateMode_MAX = 2
}

// Enum Engine.EAnimationMode
public enum EAnimationMode : byte
{
	EAnimationMode__AnimationBlueprint = 0,
	EAnimationMode__AnimationSingleNode = 1,
	EAnimationMode__AnimationCustomMode = 2,
	EAnimationMode__EAnimationMode_MAX = 3
}

// Enum Engine.EKinematicBonesUpdateToPhysics
public enum EKinematicBonesUpdateToPhysics : byte
{
	EKinematicBonesUpdateToPhysics__SkipSimulatingBones = 0,
	EKinematicBonesUpdateToPhysics__SkipAllBones = 1,
	EKinematicBonesUpdateToPhysics__EKinematicBonesUpdateToPhysics_MAX = 2
}

// Enum Engine.EAnimCurveType
public enum EAnimCurveType : byte
{
	EAnimCurveType__AttributeCurve = 0,
	EAnimCurveType__MaterialCurve  = 1,
	EAnimCurveType__MorphTargetCurve = 2,
	EAnimCurveType__MaxAnimCurveType = 3,
	EAnimCurveType__EAnimCurveType_MAX = 4
}

// Enum Engine.EBoneFilterActionOption
public enum EBoneFilterActionOption : byte
{
	EBoneFilterActionOption__Remove = 0,
	EBoneFilterActionOption__Keep  = 1,
	EBoneFilterActionOption__Invalid = 2,
	EBoneFilterActionOption__EBoneFilterActionOption_MAX = 3
}

// Enum Engine.SkeletalMeshOptimizationImportance
public enum ESkeletalMeshOptimizationImportance : byte
{
	SMOI_Off                       = 0,
	SMOI_Lowest                    = 1,
	SMOI_Low                       = 2,
	SMOI_Normal                    = 3,
	SMOI_High                      = 4,
	SMOI_Highest                   = 5,
	SMOI_MAX                       = 6
}

// Enum Engine.SkeletalMeshOptimizationType
public enum ESkeletalMeshOptimizationType : byte
{
	SMOT_NumOfTriangles            = 0,
	SMOT_MaxDeviation              = 1,
	SMOT_TriangleOrDeviation       = 2,
	SMOT_MAX                       = 3
}

// Enum Engine.SkeletalMeshTerminationCriterion
public enum ESkeletalMeshTerminationCriterion : byte
{
	SMTC_NumOfTriangles            = 0,
	SMTC_NumOfVerts                = 1,
	SMTC_TriangleOrVert            = 2,
	SMTC_AbsNumOfTriangles         = 3,
	SMTC_AbsNumOfVerts             = 4,
	SMTC_AbsTriangleOrVert         = 5,
	SMTC_MAX                       = 6
}

// Enum Engine.EBoneTranslationRetargetingMode
public enum EBoneTranslationRetargetingMode : byte
{
	EBoneTranslationRetargetingMode__Animation = 0,
	EBoneTranslationRetargetingMode__Skeleton = 1,
	EBoneTranslationRetargetingMode__AnimationScaled = 2,
	EBoneTranslationRetargetingMode__AnimationRelative = 3,
	EBoneTranslationRetargetingMode__OrientAndScale = 4,
	EBoneTranslationRetargetingMode__EBoneTranslationRetargetingMode_MAX = 5
}

// Enum Engine.EBoneSpaces
public enum EBoneSpaces : byte
{
	EBoneSpaces__WorldSpace        = 0,
	EBoneSpaces__ComponentSpace    = 1,
	EBoneSpaces__EBoneSpaces_MAX   = 2
}

// Enum Engine.EVisibilityBasedAnimTickOption
public enum EVisibilityBasedAnimTickOption : byte
{
	EVisibilityBasedAnimTickOption__AlwaysTickPoseAndRefreshBones = 0,
	EVisibilityBasedAnimTickOption__AlwaysTickPose = 1,
	EVisibilityBasedAnimTickOption__OnlyTickMontagesWhenNotRendered = 2,
	EVisibilityBasedAnimTickOption__OnlyTickPoseWhenRendered = 3,
	EVisibilityBasedAnimTickOption__EVisibilityBasedAnimTickOption_MAX = 4
}

// Enum Engine.EPhysBodyOp
public enum EPhysBodyOp : byte
{
	PBO_None                       = 0,
	PBO_Term                       = 1,
	PBO_MAX                        = 2
}

// Enum Engine.EBoneVisibilityStatus
public enum EBoneVisibilityStatus : byte
{
	BVS_HiddenByParent             = 0,
	BVS_Visible                    = 1,
	BVS_ExplicitlyHidden           = 2,
	BVS_MAX                        = 3
}

// Enum Engine.ESkyLightSourceType
public enum ESkyLightSourceType : byte
{
	SLS_CapturedScene              = 0,
	SLS_SpecifiedCubemap           = 1,
	SLS_MAX                        = 2
}

// Enum Engine.EReverbSendMethod
public enum EReverbSendMethod : byte
{
	EReverbSendMethod__Linear      = 0,
	EReverbSendMethod__CustomCurve = 1,
	EReverbSendMethod__Manual      = 2,
	EReverbSendMethod__EReverbSendMethod_MAX = 3
}

// Enum Engine.EAirAbsorptionMethod
public enum EAirAbsorptionMethod : byte
{
	EAirAbsorptionMethod__Linear   = 0,
	EAirAbsorptionMethod__CustomCurve = 1,
	EAirAbsorptionMethod__EAirAbsorptionMethod_MAX = 2
}

// Enum Engine.ESoundSpatializationAlgorithm
public enum ESoundSpatializationAlgorithm : byte
{
	SPATIALIZATION_Default         = 0,
	SPATIALIZATION_HRTF            = 1,
	SPATIALIZATION_MAX             = 2
}

// Enum Engine.ESoundDistanceCalc
public enum ESoundDistanceCalc : byte
{
	SOUNDDISTANCE_Normal           = 0,
	SOUNDDISTANCE_InfiniteXYPlane  = 1,
	SOUNDDISTANCE_InfiniteXZPlane  = 2,
	SOUNDDISTANCE_InfiniteYZPlane  = 3,
	SOUNDDISTANCE_MAX              = 4
}

// Enum Engine.EVirtualizationMode
public enum EVirtualizationMode : byte
{
	EVirtualizationMode__Disabled  = 0,
	EVirtualizationMode__PlayWhenSilent = 1,
	EVirtualizationMode__Restart   = 2,
	EVirtualizationMode__EVirtualizationMode_MAX = 3
}

// Enum Engine.EAudioOutputTarget
public enum EAudioOutputTarget : byte
{
	EAudioOutputTarget__Speaker    = 0,
	EAudioOutputTarget__Controller = 1,
	EAudioOutputTarget__ControllerFallbackToSpeaker = 2,
	EAudioOutputTarget__EAudioOutputTarget_MAX = 3
}

// Enum Engine.EMaxConcurrentResolutionRule
public enum EMaxConcurrentResolutionRule : byte
{
	EMaxConcurrentResolutionRule__PreventNew = 0,
	EMaxConcurrentResolutionRule__StopOldest = 1,
	EMaxConcurrentResolutionRule__StopFarthestThenPreventNew = 2,
	EMaxConcurrentResolutionRule__StopFarthestThenOldest = 3,
	EMaxConcurrentResolutionRule__StopLowestPriority = 4,
	EMaxConcurrentResolutionRule__StopQuietest = 5,
	EMaxConcurrentResolutionRule__StopLowestPriorityThenPreventNew = 6,
	EMaxConcurrentResolutionRule__EMaxConcurrentResolutionRule_MAX = 7
}

// Enum Engine.ESoundGroup
public enum ESoundGroup : byte
{
	SOUNDGROUP_Default             = 0,
	SOUNDGROUP_Effects             = 1,
	SOUNDGROUP_UI                  = 2,
	SOUNDGROUP_Music               = 3,
	SOUNDGROUP_Voice               = 4,
	SOUNDGROUP_GameSoundGroup1     = 5,
	SOUNDGROUP_GameSoundGroup2     = 6,
	SOUNDGROUP_GameSoundGroup3     = 7,
	SOUNDGROUP_GameSoundGroup4     = 8,
	SOUNDGROUP_GameSoundGroup5     = 9,
	SOUNDGROUP_GameSoundGroup6     = 10,
	SOUNDGROUP_GameSoundGroup7     = 11,
	SOUNDGROUP_GameSoundGroup8     = 12,
	SOUNDGROUP_GameSoundGroup9     = 13,
	SOUNDGROUP_GameSoundGroup10    = 14,
	SOUNDGROUP_GameSoundGroup11    = 15,
	SOUNDGROUP_GameSoundGroup12    = 16,
	SOUNDGROUP_GameSoundGroup13    = 17,
	SOUNDGROUP_GameSoundGroup14    = 18,
	SOUNDGROUP_GameSoundGroup15    = 19,
	SOUNDGROUP_GameSoundGroup16    = 20,
	SOUNDGROUP_GameSoundGroup17    = 21,
	SOUNDGROUP_GameSoundGroup18    = 22,
	SOUNDGROUP_GameSoundGroup19    = 23,
	SOUNDGROUP_GameSoundGroup20    = 24,
	SOUNDGROUP_MAX                 = 25
}

// Enum Engine.ModulationParamMode
public enum EModulationParamMode : byte
{
	MPM_Normal                     = 0,
	MPM_Abs                        = 1,
	MPM_Direct                     = 2,
	MPM_MAX                        = 3
}

// Enum Engine.ESourceBusChannels
public enum ESourceBusChannels : byte
{
	ESourceBusChannels__Mono       = 0,
	ESourceBusChannels__Stereo     = 1,
	ESourceBusChannels__ESourceBusChannels_MAX = 2
}

// Enum Engine.ESourceBusSendLevelControlMethod
public enum ESourceBusSendLevelControlMethod : byte
{
	ESourceBusSendLevelControlMethod__Linear = 0,
	ESourceBusSendLevelControlMethod__CustomCurve = 1,
	ESourceBusSendLevelControlMethod__Manual = 2,
	ESourceBusSendLevelControlMethod__ESourceBusSendLevelControlMethod_MAX = 3
}

// Enum Engine.ESendLevelControlMethod
public enum ESendLevelControlMethod : byte
{
	ESendLevelControlMethod__Linear = 0,
	ESendLevelControlMethod__CustomCurve = 1,
	ESendLevelControlMethod__Manual = 2,
	ESendLevelControlMethod__ESendLevelControlMethod_MAX = 3
}

// Enum Engine.EAudioRecordingExportType
public enum EAudioRecordingExportType : byte
{
	EAudioRecordingExportType__SoundWave = 0,
	EAudioRecordingExportType__WavFile = 1,
	EAudioRecordingExportType__EAudioRecordingExportType_MAX = 2
}

// Enum Engine.ESubmixChannelFormat
public enum ESubmixChannelFormat : byte
{
	ESubmixChannelFormat__Device   = 0,
	ESubmixChannelFormat__Stereo   = 1,
	ESubmixChannelFormat__Quad     = 2,
	ESubmixChannelFormat__FiveDotOne = 3,
	ESubmixChannelFormat__SevenDotOne = 4,
	ESubmixChannelFormat__Ambisonics = 5,
	ESubmixChannelFormat__Count    = 6,
	ESubmixChannelFormat__ESubmixChannelFormat_MAX = 7
}

// Enum Engine.ESoundWaveFFTSize
public enum ESoundWaveFFTSize : byte
{
	ESoundWaveFFTSize__VerySmall   = 0,
	ESoundWaveFFTSize__Small       = 1,
	ESoundWaveFFTSize__Medium      = 2,
	ESoundWaveFFTSize__Large       = 3,
	ESoundWaveFFTSize__VeryLarge   = 4,
	ESoundWaveFFTSize__ESoundWaveFFTSize_MAX = 5
}

// Enum Engine.EDecompressionType
public enum EDecompressionType : byte
{
	DTYPE_Setup                    = 0,
	DTYPE_Invalid                  = 1,
	DTYPE_Preview                  = 2,
	DTYPE_Native                   = 3,
	DTYPE_RealTime                 = 4,
	DTYPE_Procedural               = 5,
	DTYPE_Xenon                    = 6,
	DTYPE_Streaming                = 7,
	DTYPE_MAX                      = 8
}

// Enum Engine.ESplineCoordinateSpace
public enum ESplineCoordinateSpace : byte
{
	ESplineCoordinateSpace__Local  = 0,
	ESplineCoordinateSpace__World  = 1,
	ESplineCoordinateSpace__ESplineCoordinateSpace_MAX = 2
}

// Enum Engine.ESplinePointType
public enum ESplinePointType : byte
{
	ESplinePointType__Linear       = 0,
	ESplinePointType__Curve        = 1,
	ESplinePointType__Constant     = 2,
	ESplinePointType__CurveClamped = 3,
	ESplinePointType__CurveCustomTangent = 4,
	ESplinePointType__ESplinePointType_MAX = 5
}

// Enum Engine.ESplineMeshAxis
public enum ESplineMeshAxis : byte
{
	ESplineMeshAxis__X             = 0,
	ESplineMeshAxis__Y             = 1,
	ESplineMeshAxis__Z             = 2,
	ESplineMeshAxis__ESplineMeshAxis_MAX = 3
}

// Enum Engine.EOptimizationType
public enum EOptimizationType : byte
{
	OT_NumOfTriangles              = 0,
	OT_MaxDeviation                = 1,
	OT_MAX                         = 2
}

// Enum Engine.EImportanceLevel
public enum EImportanceLevel : byte
{
	IL_Off                         = 0,
	IL_Lowest                      = 1,
	IL_Low                         = 2,
	IL_Normal                      = 3,
	IL_High                        = 4,
	IL_Highest                     = 5,
	TEMP_BROKEN2                   = 6,
	EImportanceLevel_MAX           = 7
}

// Enum Engine.ENormalMode
public enum ENormalMode : byte
{
	NM_PreserveSmoothingGroups     = 0,
	NM_RecalculateNormals          = 1,
	NM_RecalculateNormalsSmooth    = 2,
	NM_RecalculateNormalsHard      = 3,
	TEMP_BROKEN                    = 4,
	ENormalMode_MAX                = 5
}

// Enum Engine.EStereoLayerShape
public enum EStereoLayerShape : byte
{
	SLSH_QuadLayer                 = 0,
	SLSH_CylinderLayer             = 1,
	SLSH_CubemapLayer              = 2,
	SLSH_MAX                       = 3
}

// Enum Engine.EStereoLayerType
public enum EStereoLayerType : byte
{
	SLT_WorldLocked                = 0,
	SLT_TrackerLocked              = 1,
	SLT_FaceLocked                 = 2,
	SLT_MAX                        = 3
}

// Enum Engine.EOpacitySourceMode
public enum EOpacitySourceMode : byte
{
	OSM_Alpha                      = 0,
	OSM_ColorBrightness            = 1,
	OSM_RedChannel                 = 2,
	OSM_GreenChannel               = 3,
	OSM_BlueChannel                = 4,
	OSM_MAX                        = 5
}

// Enum Engine.ESubUVBoundingVertexCount
public enum ESubUVBoundingVertexCount : byte
{
	BVC_FourVertices               = 0,
	BVC_EightVertices              = 1,
	BVC_MAX                        = 2
}

// Enum Engine.EVerticalTextAligment
public enum EVerticalTextAligment : byte
{
	EVRTA_TextTop                  = 0,
	EVRTA_TextCenter               = 1,
	EVRTA_TextBottom               = 2,
	EVRTA_QuadTop                  = 3,
	EVRTA_MAX                      = 4
}

// Enum Engine.EHorizTextAligment
public enum EHorizTextAligment : byte
{
	EHTA_Left                      = 0,
	EHTA_Center                    = 1,
	EHTA_Right                     = 2,
	EHTA_MAX                       = 3
}

// Enum Engine.ETextureLossyCompressionAmount
public enum ETextureLossyCompressionAmount : byte
{
	TLCA_Default                   = 0,
	TLCA_None                      = 1,
	TLCA_Lowest                    = 2,
	TLCA_Low                       = 3,
	TLCA_Medium                    = 4,
	TLCA_High                      = 5,
	TLCA_Highest                   = 6,
	TLCA_MAX                       = 7
}

// Enum Engine.ETextureCompressionQuality
public enum ETextureCompressionQuality : byte
{
	TCQ_Default                    = 0,
	TCQ_Lowest                     = 1,
	TCQ_Low                        = 2,
	TCQ_Medium                     = 3,
	TCQ_High                       = 4,
	TCQ_Highest                    = 5,
	TCQ_MAX                        = 6
}

// Enum Engine.ETextureSourceFormat
public enum ETextureSourceFormat : byte
{
	TSF_Invalid                    = 0,
	TSF_G8                         = 1,
	TSF_BGRA8                      = 2,
	TSF_BGRE8                      = 3,
	TSF_RGBA16                     = 4,
	TSF_RGBA16F                    = 5,
	TSF_RGBA8                      = 6,
	TSF_RGBE8                      = 7,
	TSF_MAX                        = 8
}

// Enum Engine.ETextureSourceArtType
public enum ETextureSourceArtType : byte
{
	TSAT_Uncompressed              = 0,
	TSAT_PNGCompressed             = 1,
	TSAT_DDSFile                   = 2,
	TSAT_MAX                       = 3
}

// Enum Engine.ETextureMipCount
public enum ETextureMipCount : byte
{
	TMC_ResidentMips               = 0,
	TMC_AllMips                    = 1,
	TMC_AllMipsBiased              = 2,
	TMC_MAX                        = 3
}

// Enum Engine.ECompositeTextureMode
public enum ECompositeTextureMode : byte
{
	CTM_Disabled                   = 0,
	CTM_NormalRoughnessToRed       = 1,
	CTM_NormalRoughnessToGreen     = 2,
	CTM_NormalRoughnessToBlue      = 3,
	CTM_NormalRoughnessToAlpha     = 4,
	CTM_MAX                        = 5
}

// Enum Engine.TextureAddress
public enum ETextureAddress : byte
{
	TA_Wrap                        = 0,
	TA_Clamp                       = 1,
	TA_Mirror                      = 2,
	TA_MAX                         = 3
}

// Enum Engine.TextureFilter
public enum ETextureFilter : byte
{
	TF_Nearest                     = 0,
	TF_Bilinear                    = 1,
	TF_Trilinear                   = 2,
	TF_Default                     = 3,
	TF_MAX                         = 4
}

// Enum Engine.TextureCompressionSettings
public enum ETextureCompressionSettings : byte
{
	TC_Default                     = 0,
	TC_Normalmap                   = 1,
	TC_Masks                       = 2,
	TC_Grayscale                   = 3,
	TC_Displacementmap             = 4,
	TC_VectorDisplacementmap       = 5,
	TC_HDR                         = 6,
	TC_EditorIcon                  = 7,
	TC_Alpha                       = 8,
	TC_DistanceFieldFont           = 9,
	TC_HDR_Compressed              = 10,
	TC_BC7                         = 11,
	TC_MAX                         = 12
}

// Enum Engine.ETextureMipLoadOptions
public enum ETextureMipLoadOptions : byte
{
	ETextureMipLoadOptions__Default = 0,
	ETextureMipLoadOptions__AllMips = 1,
	ETextureMipLoadOptions__OnlyFirstMip = 2,
	ETextureMipLoadOptions__ETextureMipLoadOptions_MAX = 3
}

// Enum Engine.ETextureSamplerFilter
public enum ETextureSamplerFilter : byte
{
	ETextureSamplerFilter__Point   = 0,
	ETextureSamplerFilter__Bilinear = 1,
	ETextureSamplerFilter__Trilinear = 2,
	ETextureSamplerFilter__AnisotropicPoint = 3,
	ETextureSamplerFilter__AnisotropicLinear = 4,
	ETextureSamplerFilter__ETextureSamplerFilter_MAX = 5
}

// Enum Engine.ETexturePowerOfTwoSetting
public enum ETexturePowerOfTwoSetting : byte
{
	ETexturePowerOfTwoSetting__None = 0,
	ETexturePowerOfTwoSetting__PadToPowerOfTwo = 1,
	ETexturePowerOfTwoSetting__PadToSquarePowerOfTwo = 2,
	ETexturePowerOfTwoSetting__ETexturePowerOfTwoSetting_MAX = 3
}

// Enum Engine.TextureMipGenSettings
public enum ETextureMipGenSettings : byte
{
	TMGS_FromTextureGroup          = 0,
	TMGS_SimpleAverage             = 1,
	TMGS_Sharpen0                  = 2,
	TMGS_Sharpen1                  = 3,
	TMGS_Sharpen2                  = 4,
	TMGS_Sharpen3                  = 5,
	TMGS_Sharpen4                  = 6,
	TMGS_Sharpen5                  = 7,
	TMGS_Sharpen6                  = 8,
	TMGS_Sharpen7                  = 9,
	TMGS_Sharpen8                  = 10,
	TMGS_Sharpen9                  = 11,
	TMGS_Sharpen10                 = 12,
	TMGS_NoMipmaps                 = 13,
	TMGS_LeaveExistingMips         = 14,
	TMGS_Blur1                     = 15,
	TMGS_Blur2                     = 16,
	TMGS_Blur3                     = 17,
	TMGS_Blur4                     = 18,
	TMGS_Blur5                     = 19,
	TMGS_Unfiltered                = 20,
	TMGS_MAX                       = 21
}

// Enum Engine.TextureGroup
public enum ETextureGroup : byte
{
	TEXTUREGROUP_World             = 0,
	TEXTUREGROUP_WorldNormalMap    = 1,
	TEXTUREGROUP_WorldSpecular     = 2,
	TEXTUREGROUP_Character         = 3,
	TEXTUREGROUP_CharacterNormalMap = 4,
	TEXTUREGROUP_CharacterSpecular = 5,
	TEXTUREGROUP_Weapon            = 6,
	TEXTUREGROUP_WeaponNormalMap   = 7,
	TEXTUREGROUP_WeaponSpecular    = 8,
	TEXTUREGROUP_Vehicle           = 9,
	TEXTUREGROUP_VehicleNormalMap  = 10,
	TEXTUREGROUP_VehicleSpecular   = 11,
	TEXTUREGROUP_Cinematic         = 12,
	TEXTUREGROUP_Effects           = 13,
	TEXTUREGROUP_EffectsNotFiltered = 14,
	TEXTUREGROUP_Skybox            = 15,
	TEXTUREGROUP_UI                = 16,
	TEXTUREGROUP_Lightmap          = 17,
	TEXTUREGROUP_RenderTarget      = 18,
	TEXTUREGROUP_MobileFlattened   = 19,
	TEXTUREGROUP_ProcBuilding_Face = 20,
	TEXTUREGROUP_ProcBuilding_LightMap = 21,
	TEXTUREGROUP_Shadowmap         = 22,
	TEXTUREGROUP_ColorLookupTable  = 23,
	TEXTUREGROUP_Terrain_Heightmap = 24,
	TEXTUREGROUP_Terrain_Weightmap = 25,
	TEXTUREGROUP_Bokeh             = 26,
	TEXTUREGROUP_IESLightProfile   = 27,
	TEXTUREGROUP_Pixels2D          = 28,
	TEXTUREGROUP_HierarchicalLOD   = 29,
	TEXTUREGROUP_Impostor          = 30,
	TEXTUREGROUP_ImpostorNormalDepth = 31,
	TEXTUREGROUP_8BitData          = 32,
	TEXTUREGROUP_16BitData         = 33,
	TEXTUREGROUP_Project01         = 34,
	TEXTUREGROUP_Project02         = 35,
	TEXTUREGROUP_Project03         = 36,
	TEXTUREGROUP_Project04         = 37,
	TEXTUREGROUP_Project05         = 38,
	TEXTUREGROUP_Project06         = 39,
	TEXTUREGROUP_Project07         = 40,
	TEXTUREGROUP_Project08         = 41,
	TEXTUREGROUP_Project09         = 42,
	TEXTUREGROUP_Project10         = 43,
	TEXTUREGROUP_MAX               = 44
}

// Enum Engine.ETextureRenderTargetFormat
public enum ETextureRenderTargetFormat : byte
{
	RTF_R8                         = 0,
	RTF_RG8                        = 1,
	RTF_RGBA8                      = 2,
	RTF_R16f                       = 3,
	RTF_RG16f                      = 4,
	RTF_RGBA16f                    = 5,
	RTF_R32f                       = 6,
	RTF_RG32f                      = 7,
	RTF_RGBA32f                    = 8,
	RTF_RGB10A2                    = 9,
	RTF_MAX                        = 10
}

// Enum Engine.ETimecodeProviderSynchronizationState
public enum ETimecodeProviderSynchronizationState : byte
{
	ETimecodeProviderSynchronizationState__Closed = 0,
	ETimecodeProviderSynchronizationState__Error = 1,
	ETimecodeProviderSynchronizationState__Synchronized = 2,
	ETimecodeProviderSynchronizationState__Synchronizing = 3,
	ETimecodeProviderSynchronizationState__ETimecodeProviderSynchronizationState_MAX = 4
}

// Enum Engine.ETimelineDirection
public enum ETimelineDirection : byte
{
	ETimelineDirection__Forward    = 0,
	ETimelineDirection__Backward   = 1,
	ETimelineDirection__ETimelineDirection_MAX = 2
}

// Enum Engine.ETimelineLengthMode
public enum ETimelineLengthMode : byte
{
	TL_TimelineLength              = 0,
	TL_LastKeyFrame                = 1,
	TL_MAX                         = 2
}

// Enum Engine.ETimeStretchCurveMapping
public enum ETimeStretchCurveMapping : byte
{
	ETimeStretchCurveMapping__T_Original = 0,
	ETimeStretchCurveMapping__T_TargetMin = 1,
	ETimeStretchCurveMapping__T_TargetMax = 2,
	ETimeStretchCurveMapping__MAX  = 3
}

// Enum Engine.ETwitterIntegrationDelegate
public enum ETwitterIntegrationDelegate : byte
{
	TID_AuthorizeComplete          = 0,
	TID_TweetUIComplete            = 1,
	TID_RequestComplete            = 2,
	TID_MAX                        = 3
}

// Enum Engine.ETwitterRequestMethod
public enum ETwitterRequestMethod : byte
{
	TRM_Get                        = 0,
	TRM_Post                       = 1,
	TRM_Delete                     = 2,
	TRM_MAX                        = 3
}

// Enum Engine.EUserDefinedStructureStatus
public enum EUserDefinedStructureStatus : byte
{
	UDSS_UpToDate                  = 0,
	UDSS_Dirty                     = 1,
	UDSS_Error                     = 2,
	UDSS_Duplicate                 = 3,
	UDSS_MAX                       = 4
}

// Enum Engine.EUIScalingRule
public enum EUIScalingRule : byte
{
	EUIScalingRule__ShortestSide   = 0,
	EUIScalingRule__LongestSide    = 1,
	EUIScalingRule__Horizontal     = 2,
	EUIScalingRule__Vertical       = 3,
	EUIScalingRule__Custom         = 4,
	EUIScalingRule__EUIScalingRule_MAX = 5
}

// Enum Engine.ERenderFocusRule
public enum ERenderFocusRule : byte
{
	ERenderFocusRule__Always       = 0,
	ERenderFocusRule__NonPointer   = 1,
	ERenderFocusRule__NavigationOnly = 2,
	ERenderFocusRule__Never        = 3,
	ERenderFocusRule__ERenderFocusRule_MAX = 4
}

// Enum Engine.EVectorFieldConstructionOp
public enum EVectorFieldConstructionOp : byte
{
	VFCO_Extrude                   = 0,
	VFCO_Revolve                   = 1,
	VFCO_MAX                       = 2
}

// Enum Engine.EWindSourceType
public enum EWindSourceType : byte
{
	EWindSourceType__Directional   = 0,
	EWindSourceType__Point         = 1,
	EWindSourceType__EWindSourceType_MAX = 2
}

// Enum Engine.EPSCPoolMethod
public enum EPSCPoolMethod : byte
{
	EPSCPoolMethod__None           = 0,
	EPSCPoolMethod__AutoRelease    = 1,
	EPSCPoolMethod__ManualRelease  = 2,
	EPSCPoolMethod__ManualRelease_OnComplete = 3,
	EPSCPoolMethod__FreeInPool     = 4,
	EPSCPoolMethod__EPSCPoolMethod_MAX = 5
}

// Enum Engine.EVolumeLightingMethod
public enum EVolumeLightingMethod : byte
{
	VLM_VolumetricLightmap         = 0,
	VLM_SparseVolumeLightingSamples = 1,
	VLM_MAX                        = 2
}

// Enum Engine.EVisibilityAggressiveness
public enum EVisibilityAggressiveness : byte
{
	VIS_LeastAggressive            = 0,
	VIS_ModeratelyAggressive       = 1,
	VIS_MostAggressive             = 2,
	VIS_Max                        = 3
}

// Enum Engine.ETextGender
public enum ETextGender : byte
{
	ETextGender__Masculine         = 0,
	ETextGender__Feminine          = 1,
	ETextGender__Neuter            = 2,
	ETextGender__ETextGender_MAX   = 3
}

// Enum Engine.EFormatArgumentType
public enum EFormatArgumentType : byte
{
	EFormatArgumentType__Int       = 0,
	EFormatArgumentType__UInt      = 1,
	EFormatArgumentType__Float     = 2,
	EFormatArgumentType__Double    = 3,
	EFormatArgumentType__Text      = 4,
	EFormatArgumentType__Gender    = 5,
	EFormatArgumentType__EFormatArgumentType_MAX = 6
}

// Enum Engine.EEndPlayReason
public enum EEndPlayReason : byte
{
	EEndPlayReason__Destroyed      = 0,
	EEndPlayReason__LevelTransition = 1,
	EEndPlayReason__EndPlayInEditor = 2,
	EEndPlayReason__RemovedFromWorld = 3,
	EEndPlayReason__Quit           = 4,
	EEndPlayReason__EEndPlayReason_MAX = 5
}

// Enum Engine.ETickingGroup
public enum ETickingGroup : byte
{
	TG_PrePhysics                  = 0,
	TG_StartPhysics                = 1,
	TG_DuringPhysics               = 2,
	TG_EndPhysics                  = 3,
	TG_PostPhysics                 = 4,
	TG_PostUpdateWork              = 5,
	TG_LastDemotable               = 6,
	TG_NewlySpawned                = 7,
	TG_MAX                         = 8
}

// Enum Engine.EComponentCreationMethod
public enum EComponentCreationMethod : byte
{
	EComponentCreationMethod__Native = 0,
	EComponentCreationMethod__SimpleConstructionScript = 1,
	EComponentCreationMethod__UserConstructionScript = 2,
	EComponentCreationMethod__Instance = 3,
	EComponentCreationMethod__EComponentCreationMethod_MAX = 4
}

// Enum Engine.ETemperatureSeverityType
public enum ETemperatureSeverityType : byte
{
	ETemperatureSeverityType__Unknown = 0,
	ETemperatureSeverityType__Good = 1,
	ETemperatureSeverityType__Bad  = 2,
	ETemperatureSeverityType__Serious = 3,
	ETemperatureSeverityType__Critical = 4,
	ETemperatureSeverityType__NumSeverities = 5,
	ETemperatureSeverityType__ETemperatureSeverityType_MAX = 6
}

// Enum Engine.EPlaneConstraintAxisSetting
public enum EPlaneConstraintAxisSetting : byte
{
	EPlaneConstraintAxisSetting__Custom = 0,
	EPlaneConstraintAxisSetting__X = 1,
	EPlaneConstraintAxisSetting__Y = 2,
	EPlaneConstraintAxisSetting__Z = 3,
	EPlaneConstraintAxisSetting__UseGlobalPhysicsSetting = 4,
	EPlaneConstraintAxisSetting__EPlaneConstraintAxisSetting_MAX = 5
}

// Enum Engine.EInterpToBehaviourType
public enum EInterpToBehaviourType : byte
{
	EInterpToBehaviourType__OneShot = 0,
	EInterpToBehaviourType__OneShot_Reverse = 1,
	EInterpToBehaviourType__Loop_Reset = 2,
	EInterpToBehaviourType__PingPong = 3,
	EInterpToBehaviourType__EInterpToBehaviourType_MAX = 4
}

// Enum Engine.ETeleportType
public enum ETeleportType : byte
{
	ETeleportType__None            = 0,
	ETeleportType__TeleportPhysics = 1,
	ETeleportType__ResetPhysics    = 2,
	ETeleportType__ETeleportType_MAX = 3
}

// Enum Engine.EPlatformInterfaceDataType
public enum EPlatformInterfaceDataType : byte
{
	PIDT_None                      = 0,
	PIDT_Int                       = 1,
	PIDT_Float                     = 2,
	PIDT_String                    = 3,
	PIDT_Object                    = 4,
	PIDT_Custom                    = 5,
	PIDT_MAX                       = 6
}

// Enum Engine.EMovementMode
public enum EMovementMode : byte
{
	MOVE_None                      = 0,
	MOVE_Walking                   = 1,
	MOVE_NavWalking                = 2,
	MOVE_Falling                   = 3,
	MOVE_Swimming                  = 4,
	MOVE_Flying                    = 5,
	MOVE_Custom                    = 6,
	MOVE_MAX                       = 7
}

// Enum Engine.ENetworkFailure
public enum ENetworkFailure : byte
{
	ENetworkFailure__NetDriverAlreadyExists = 0,
	ENetworkFailure__NetDriverCreateFailure = 1,
	ENetworkFailure__NetDriverListenFailure = 2,
	ENetworkFailure__ConnectionLost = 3,
	ENetworkFailure__ConnectionTimeout = 4,
	ENetworkFailure__FailureReceived = 5,
	ENetworkFailure__OutdatedClient = 6,
	ENetworkFailure__OutdatedServer = 7,
	ENetworkFailure__PendingConnectionFailure = 8,
	ENetworkFailure__NetGuidMismatch = 9,
	ENetworkFailure__NetChecksumMismatch = 10,
	ENetworkFailure__ENetworkFailure_MAX = 11
}

// Enum Engine.ETravelFailure
public enum ETravelFailure : byte
{
	ETravelFailure__NoLevel        = 0,
	ETravelFailure__LoadMapFailure = 1,
	ETravelFailure__InvalidURL     = 2,
	ETravelFailure__PackageMissing = 3,
	ETravelFailure__PackageVersion = 4,
	ETravelFailure__NoDownload     = 5,
	ETravelFailure__TravelFailure  = 6,
	ETravelFailure__CheatCommands  = 7,
	ETravelFailure__PendingNetGameCreateFailure = 8,
	ETravelFailure__CloudSaveFailure = 9,
	ETravelFailure__ServerTravelFailure = 10,
	ETravelFailure__ClientTravelFailure = 11,
	ETravelFailure__ETravelFailure_MAX = 12
}

// Enum Engine.EScreenOrientation
public enum EScreenOrientation : byte
{
	EScreenOrientation__Unknown    = 0,
	EScreenOrientation__Portrait   = 1,
	EScreenOrientation__PortraitUpsideDown = 2,
	EScreenOrientation__LandscapeLeft = 3,
	EScreenOrientation__LandscapeRight = 4,
	EScreenOrientation__FaceUp     = 5,
	EScreenOrientation__FaceDown   = 6,
	EScreenOrientation__EScreenOrientation_MAX = 7
}

// Enum Engine.EApplicationState
public enum EApplicationState : byte
{
	EApplicationState__Unknown     = 0,
	EApplicationState__Inactive    = 1,
	EApplicationState__Background  = 2,
	EApplicationState__Active      = 3,
	EApplicationState__EApplicationState_MAX = 4
}

// Enum Engine.EObjectTypeQuery
public enum EObjectTypeQuery : byte
{
	ObjectTypeQuery1               = 0,
	ObjectTypeQuery2               = 1,
	ObjectTypeQuery3               = 2,
	ObjectTypeQuery4               = 3,
	ObjectTypeQuery5               = 4,
	ObjectTypeQuery6               = 5,
	ObjectTypeQuery7               = 6,
	ObjectTypeQuery8               = 7,
	ObjectTypeQuery9               = 8,
	ObjectTypeQuery10              = 9,
	ObjectTypeQuery11              = 10,
	ObjectTypeQuery12              = 11,
	ObjectTypeQuery13              = 12,
	ObjectTypeQuery14              = 13,
	ObjectTypeQuery15              = 14,
	ObjectTypeQuery16              = 15,
	ObjectTypeQuery17              = 16,
	ObjectTypeQuery18              = 17,
	ObjectTypeQuery19              = 18,
	ObjectTypeQuery20              = 19,
	ObjectTypeQuery21              = 20,
	ObjectTypeQuery22              = 21,
	ObjectTypeQuery23              = 22,
	ObjectTypeQuery24              = 23,
	ObjectTypeQuery25              = 24,
	ObjectTypeQuery26              = 25,
	ObjectTypeQuery27              = 26,
	ObjectTypeQuery28              = 27,
	ObjectTypeQuery29              = 28,
	ObjectTypeQuery30              = 29,
	ObjectTypeQuery31              = 30,
	ObjectTypeQuery32              = 31,
	ObjectTypeQuery_MAX            = 32,
	EObjectTypeQuery_MAX           = 33
}

// Enum Engine.EDrawDebugTrace
public enum EDrawDebugTrace : byte
{
	EDrawDebugTrace__None          = 0,
	EDrawDebugTrace__ForOneFrame   = 1,
	EDrawDebugTrace__ForDuration   = 2,
	EDrawDebugTrace__Persistent    = 3,
	EDrawDebugTrace__EDrawDebugTrace_MAX = 4
}

// Enum Engine.ETraceTypeQuery
public enum ETraceTypeQuery : byte
{
	TraceTypeQuery1                = 0,
	TraceTypeQuery2                = 1,
	TraceTypeQuery3                = 2,
	TraceTypeQuery4                = 3,
	TraceTypeQuery5                = 4,
	TraceTypeQuery6                = 5,
	TraceTypeQuery7                = 6,
	TraceTypeQuery8                = 7,
	TraceTypeQuery9                = 8,
	TraceTypeQuery10               = 9,
	TraceTypeQuery11               = 10,
	TraceTypeQuery12               = 11,
	TraceTypeQuery13               = 12,
	TraceTypeQuery14               = 13,
	TraceTypeQuery15               = 14,
	TraceTypeQuery16               = 15,
	TraceTypeQuery17               = 16,
	TraceTypeQuery18               = 17,
	TraceTypeQuery19               = 18,
	TraceTypeQuery20               = 19,
	TraceTypeQuery21               = 20,
	TraceTypeQuery22               = 21,
	TraceTypeQuery23               = 22,
	TraceTypeQuery24               = 23,
	TraceTypeQuery25               = 24,
	TraceTypeQuery26               = 25,
	TraceTypeQuery27               = 26,
	TraceTypeQuery28               = 27,
	TraceTypeQuery29               = 28,
	TraceTypeQuery30               = 29,
	TraceTypeQuery31               = 30,
	TraceTypeQuery32               = 31,
	TraceTypeQuery_MAX             = 32,
	ETraceTypeQuery_MAX            = 33
}

// Enum Engine.EMoveComponentAction
public enum EMoveComponentAction : byte
{
	EMoveComponentAction__Move     = 0,
	EMoveComponentAction__Stop     = 1,
	EMoveComponentAction__Return   = 2,
	EMoveComponentAction__EMoveComponentAction_MAX = 3
}

// Enum Engine.EQuitPreference
public enum EQuitPreference : byte
{
	EQuitPreference__Quit          = 0,
	EQuitPreference__Background    = 1,
	EQuitPreference__EQuitPreference_MAX = 2
}

//---------------------------------------------------------------------------
// Script Structs
//---------------------------------------------------------------------------

// ScriptStruct Engine.ComponentSpacePose
// 0x0020
public class FComponentSpacePose : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FTransform>>                 _offTransforms                                                 = new ExternalOffset<TArray<FTransform>>(0x0000, false);       // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offNames                                                      = new ExternalOffset<TArray<FName>>(0x0010, false);            // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FTransform>                                  Transforms                                                     => _offTransforms.GetValue();
	public TArray<FName>                                       Names                                                          => _offNames.GetValue();
	#endregion

	public FComponentSpacePose(TArray<FTransform> c_Transforms, TArray<FName> c_Names) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTransforms.SetValue(c_Transforms);
		_offNames.SetValue(c_Names);
	}
}
// ScriptStruct Engine.TimelineFloatTrack
// 0x0040
public class FTimelineFloatTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<UCurveFloat>                        _offFloatCurve                                                 = new ExternalOffset<UCurveFloat>(0x0000, true);               // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptDelegate>                    _offInterpFunc                                                 = new ExternalOffset<FScriptDelegate>(0x0008, false);          // 0x0008(0x0010) (ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offTrackName                                                  = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offFloatPropertyName                                          = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UFloatProperty>                     _offFloatProperty                                              = new ExternalOffset<UFloatProperty>(0x0028, true);            // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCurveFloat                                         FloatCurve                                                     => _offFloatCurve.GetValue();
	public FScriptDelegate                                     InterpFunc                                                     => _offInterpFunc.GetValue();
	public FName                                               TrackName                                                      => _offTrackName.GetValue();
	public FName                                               FloatPropertyName                                              => _offFloatPropertyName.GetValue();
	public UFloatProperty                                      FloatProperty                                                  => _offFloatProperty.GetValue();
	#endregion

	public FTimelineFloatTrack(UCurveFloat c_FloatCurve, FScriptDelegate c_InterpFunc, FName c_TrackName, FName c_FloatPropertyName, UFloatProperty c_FloatProperty) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFloatCurve.SetValue(c_FloatCurve);
		_offInterpFunc.SetValue(c_InterpFunc);
		_offTrackName.SetValue(c_TrackName);
		_offFloatPropertyName.SetValue(c_FloatPropertyName);
		_offFloatProperty.SetValue(c_FloatProperty);
	}
}
// ScriptStruct Engine.LocalSpacePose
// 0x0020
public class FLocalSpacePose : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FTransform>>                 _offTransforms                                                 = new ExternalOffset<TArray<FTransform>>(0x0000, false);       // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offNames                                                      = new ExternalOffset<TArray<FName>>(0x0010, false);            // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FTransform>                                  Transforms                                                     => _offTransforms.GetValue();
	public TArray<FName>                                       Names                                                          => _offNames.GetValue();
	#endregion

	public FLocalSpacePose(TArray<FTransform> c_Transforms, TArray<FName> c_Names) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTransforms.SetValue(c_Transforms);
		_offNames.SetValue(c_Names);
	}
}
// ScriptStruct Engine.TimelineVectorTrack
// 0x0040
public class FTimelineVectorTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<UCurveVector>                       _offVectorCurve                                                = new ExternalOffset<UCurveVector>(0x0000, true);              // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptDelegate>                    _offInterpFunc                                                 = new ExternalOffset<FScriptDelegate>(0x0008, false);          // 0x0008(0x0010) (ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offTrackName                                                  = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offVectorPropertyName                                         = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UStructProperty>                    _offVectorProperty                                             = new ExternalOffset<UStructProperty>(0x0028, true);           // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCurveVector                                        VectorCurve                                                    => _offVectorCurve.GetValue();
	public FScriptDelegate                                     InterpFunc                                                     => _offInterpFunc.GetValue();
	public FName                                               TrackName                                                      => _offTrackName.GetValue();
	public FName                                               VectorPropertyName                                             => _offVectorPropertyName.GetValue();
	public UStructProperty                                     VectorProperty                                                 => _offVectorProperty.GetValue();
	#endregion

	public FTimelineVectorTrack(UCurveVector c_VectorCurve, FScriptDelegate c_InterpFunc, FName c_TrackName, FName c_VectorPropertyName, UStructProperty c_VectorProperty) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVectorCurve.SetValue(c_VectorCurve);
		_offInterpFunc.SetValue(c_InterpFunc);
		_offTrackName.SetValue(c_TrackName);
		_offVectorPropertyName.SetValue(c_VectorPropertyName);
		_offVectorProperty.SetValue(c_VectorProperty);
	}
}
// ScriptStruct Engine.NamedTransform
// 0x0040
public class FNamedTransform : ExternalClass
{
	#region Offsets
	private ExternalOffset<FTransform>                         _offValue                                                      = new ExternalOffset<FTransform>(0x0000, false);               // 0x0000(0x0030) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FTransform                                          Value                                                          => _offValue.GetValue();
	public FName                                               Name                                                           => _offName.GetValue();
	#endregion

	public FNamedTransform(FTransform c_Value, FName c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offValue.SetValue(c_Value);
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct Engine.TimelineEventEntry
// 0x0014
public class FTimelineEventEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptDelegate>                    _offEventFunc                                                  = new ExternalOffset<FScriptDelegate>(0x0004, false);          // 0x0004(0x0010) (ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public FScriptDelegate                                     EventFunc                                                      => _offEventFunc.GetValue();
	#endregion

	public FTimelineEventEntry(float c_Time, FScriptDelegate c_EventFunc) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offEventFunc.SetValue(c_EventFunc);
	}
}
// ScriptStruct Engine.TickFunction
// 0x0050
public class FTickFunction : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ETickingGroup>>         _offTickGroup                                                  = new ExternalOffset<TEnumAsByte<ETickingGroup>>(0x0008, false); // 0x0008(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETickingGroup>>         _offEndTickGroup                                               = new ExternalOffset<TEnumAsByte<ETickingGroup>>(0x0009, false); // 0x0009(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbTickEvenWhenPaused                                        = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCanEverTick                                               = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbStartWithTickEnabled                                      = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAllowTickOnDedicatedServer                                = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTickInterval                                               = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ETickingGroup>                          TickGroup                                                      => _offTickGroup.GetValue();
	public TEnumAsByte<ETickingGroup>                          EndTickGroup                                                   => _offEndTickGroup.GetValue();
	public float                                               TickInterval                                                   => _offTickInterval.GetValue();
	#endregion

	public FTickFunction(TEnumAsByte<ETickingGroup> c_TickGroup, TEnumAsByte<ETickingGroup> c_EndTickGroup, float c_TickInterval) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTickGroup.SetValue(c_TickGroup);
		_offEndTickGroup.SetValue(c_EndTickGroup);
		_offTickInterval.SetValue(c_TickInterval);
	}
}
// ScriptStruct Engine.ActorTickFunction
// 0x0008 (0x0058 - 0x0050)
public class FActorTickFunction : FTickFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FActorTickFunction() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.TTTrackBase
// 0x0018
public class FTTTrackBase : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offTrackName                                                  = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                     _offbIsExternalCurve                                           = new ExternalOffset<byte/*(bool)*/>(0x0010);                  // 0x0010(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               TrackName                                                      => _offTrackName.GetValue();
	public byte/*(bool)*/                                      bIsExternalCurve                                               => _offbIsExternalCurve.GetValue();
	#endregion

	public FTTTrackBase(FName c_TrackName, byte/*(bool)*/ c_bIsExternalCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTrackName.SetValue(c_TrackName);
		_offbIsExternalCurve.SetValue(c_bIsExternalCurve);
	}
}
// ScriptStruct Engine.NamedColor
// 0x000C
public class FNamedColor : ExternalClass
{
	#region Offsets
	private ExternalOffset<FColor>                             _offValue                                                      = new ExternalOffset<FColor>(0x0000, false);                   // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FColor                                              Value                                                          => _offValue.GetValue();
	public FName                                               Name                                                           => _offName.GetValue();
	#endregion

	public FNamedColor(FColor c_Value, FName c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offValue.SetValue(c_Value);
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct Engine.TTPropertyTrack
// 0x0008 (0x0020 - 0x0018)
public class FTTPropertyTrack : FTTTrackBase
{
	#region Offsets
	private ExternalOffset<FName>                              _offPropertyName                                               = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FName                                               PropertyName                                                   => _offPropertyName.GetValue();
	#endregion

	public FTTPropertyTrack(FName c_PropertyName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPropertyName.SetValue(c_PropertyName);
	}
}
// ScriptStruct Engine.TTLinearColorTrack
// 0x0008 (0x0028 - 0x0020)
public class FTTLinearColorTrack : FTTPropertyTrack
{
	#region Offsets
	private ExternalOffset<UCurveLinearColor>                  _offCurveLinearColor                                           = new ExternalOffset<UCurveLinearColor>(0x0020, true);         // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCurveLinearColor                                   CurveLinearColor                                               => _offCurveLinearColor.GetValue();
	#endregion

	public FTTLinearColorTrack(UCurveLinearColor c_CurveLinearColor) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCurveLinearColor.SetValue(c_CurveLinearColor);
	}
}
// ScriptStruct Engine.NamedVector
// 0x0014
public class FNamedVector : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offValue                                                      = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x000C, false);                    // 0x000C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Value                                                          => _offValue.GetValue();
	public FName                                               Name                                                           => _offName.GetValue();
	#endregion

	public FNamedVector(FVector c_Value, FName c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offValue.SetValue(c_Value);
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct Engine.TTVectorTrack
// 0x0008 (0x0028 - 0x0020)
public class FTTVectorTrack : FTTPropertyTrack
{
	#region Offsets
	private ExternalOffset<UCurveVector>                       _offCurveVector                                                = new ExternalOffset<UCurveVector>(0x0020, true);              // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCurveVector                                        CurveVector                                                    => _offCurveVector.GetValue();
	#endregion

	public FTTVectorTrack(UCurveVector c_CurveVector) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCurveVector.SetValue(c_CurveVector);
	}
}
// ScriptStruct Engine.NamedFloat
// 0x000C
public class FNamedFloat : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offValue                                                      = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Value                                                          => _offValue.GetValue();
	public FName                                               Name                                                           => _offName.GetValue();
	#endregion

	public FNamedFloat(float c_Value, FName c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offValue.SetValue(c_Value);
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct Engine.TTFloatTrack
// 0x0008 (0x0028 - 0x0020)
public class FTTFloatTrack : FTTPropertyTrack
{
	#region Offsets
	private ExternalOffset<UCurveFloat>                        _offCurveFloat                                                 = new ExternalOffset<UCurveFloat>(0x0020, true);               // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCurveFloat                                         CurveFloat                                                     => _offCurveFloat.GetValue();
	#endregion

	public FTTFloatTrack(UCurveFloat c_CurveFloat) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCurveFloat.SetValue(c_CurveFloat);
	}
}
// ScriptStruct Engine.AnimParentNodeAssetOverride
// 0x0018
public class FAnimParentNodeAssetOverride : ExternalClass
{
	#region Offsets
	private ExternalOffset<UAnimationAsset>                    _offNewAsset                                                   = new ExternalOffset<UAnimationAsset>(0x0000, true);           // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offParentNodeGuid                                             = new ExternalOffset<FGuid>(0x0008, false);                    // 0x0008(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimationAsset                                     NewAsset                                                       => _offNewAsset.GetValue();
	public FGuid                                               ParentNodeGuid                                                 => _offParentNodeGuid.GetValue();
	#endregion

	public FAnimParentNodeAssetOverride(UAnimationAsset c_NewAsset, FGuid c_ParentNodeGuid) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNewAsset.SetValue(c_NewAsset);
		_offParentNodeGuid.SetValue(c_ParentNodeGuid);
	}
}
// ScriptStruct Engine.TTEventTrack
// 0x0010 (0x0028 - 0x0018)
public class FTTEventTrack : FTTTrackBase
{
	#region Offsets
	private ExternalOffset<FName>                              _offFunctionName                                               = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UCurveFloat>                        _offCurveKeys                                                  = new ExternalOffset<UCurveFloat>(0x0020, true);               // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               FunctionName                                                   => _offFunctionName.GetValue();
	public UCurveFloat                                         CurveKeys                                                      => _offCurveKeys.GetValue();
	#endregion

	public FTTEventTrack(FName c_FunctionName, UCurveFloat c_CurveKeys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFunctionName.SetValue(c_FunctionName);
		_offCurveKeys.SetValue(c_CurveKeys);
	}
}
// ScriptStruct Engine.AnimGroupInfo
// 0x0018
public class FAnimGroupInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offColor                                                      = new ExternalOffset<FLinearColor>(0x0008, false);             // 0x0008(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public FLinearColor                                        Color                                                          => _offColor.GetValue();
	#endregion

	public FAnimGroupInfo(FName c_Name, FLinearColor c_Color) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offColor.SetValue(c_Color);
	}
}
// ScriptStruct Engine.AnimBlueprintDebugData
// 0x0001
public class FAnimBlueprintDebugData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAnimBlueprintDebugData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.TimeStretchCurveInstance
// 0x0030
public class FTimeStretchCurveInstance : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbHasValidData                                              = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bHasValidData                                                  => _offbHasValidData.GetValue();
	#endregion

	public FTimeStretchCurveInstance(byte/*(bool)*/ c_bHasValidData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbHasValidData.SetValue(c_bHasValidData);
	}
}
// ScriptStruct Engine.AnimationFrameSnapshot
// 0x0001
public class FAnimationFrameSnapshot : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAnimationFrameSnapshot() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.RepMovement
// 0x0034
public class FRepMovement : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offLinearVelocity                                             = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offAngularVelocity                                            = new ExternalOffset<FVector>(0x000C, false);                  // 0x000C(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offLocation                                                   = new ExternalOffset<FVector>(0x0018, false);                  // 0x0018(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x0024, false);                 // 0x0024(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSimulatedPhysicSleep                                      = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRepPhysics                                                = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EVectorQuantization>                _offLocationQuantizationLevel                                  = new ExternalOffset<EVectorQuantization>(0x0031, false);      // 0x0031(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EVectorQuantization>                _offVelocityQuantizationLevel                                  = new ExternalOffset<EVectorQuantization>(0x0032, false);      // 0x0032(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERotatorQuantization>               _offRotationQuantizationLevel                                  = new ExternalOffset<ERotatorQuantization>(0x0033, false);     // 0x0033(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             LinearVelocity                                                 => _offLinearVelocity.GetValue();
	public FVector                                             AngularVelocity                                                => _offAngularVelocity.GetValue();
	public FVector                                             Location                                                       => _offLocation.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public EVectorQuantization                                 LocationQuantizationLevel                                      => _offLocationQuantizationLevel.GetValue();
	public EVectorQuantization                                 VelocityQuantizationLevel                                      => _offVelocityQuantizationLevel.GetValue();
	public ERotatorQuantization                                RotationQuantizationLevel                                      => _offRotationQuantizationLevel.GetValue();
	#endregion

	public FRepMovement(FVector c_LinearVelocity, FVector c_AngularVelocity, FVector c_Location, FRotator c_Rotation, EVectorQuantization c_LocationQuantizationLevel, EVectorQuantization c_VelocityQuantizationLevel, ERotatorQuantization c_RotationQuantizationLevel) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLinearVelocity.SetValue(c_LinearVelocity);
		_offAngularVelocity.SetValue(c_AngularVelocity);
		_offLocation.SetValue(c_Location);
		_offRotation.SetValue(c_Rotation);
		_offLocationQuantizationLevel.SetValue(c_LocationQuantizationLevel);
		_offVelocityQuantizationLevel.SetValue(c_VelocityQuantizationLevel);
		_offRotationQuantizationLevel.SetValue(c_RotationQuantizationLevel);
	}
}
// ScriptStruct Engine.StateMachineDebugData
// 0x00B0
public class FStateMachineDebugData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FStateMachineDebugData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.Vector_NetQuantize100
// 0x0000 (0x000C - 0x000C)
public class FVector_NetQuantize100 : FVector
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FVector_NetQuantize100() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.TimeStretchCurveMarker
// 0x0010
public class FTimeStretchCurveMarker : ExternalClass
{
	#region Offsets
//	private ExternalOffset<float>                              _offTime[0x3]                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAlpha                                                      = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Alpha                                                          => _offAlpha.GetValue();
	#endregion

	public FTimeStretchCurveMarker(float c_Alpha) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAlpha.SetValue(c_Alpha);
	}
}
// ScriptStruct Engine.CachedPoseIndices
// 0x0010
public class FCachedPoseIndices : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<int>>                        _offOrderedSavedPoseNodeIndices                                = new ExternalOffset<TArray<int>>(0x0000, false);              // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<int>                                         OrderedSavedPoseNodeIndices                                    => _offOrderedSavedPoseNodeIndices.GetValue();
	#endregion

	public FCachedPoseIndices(TArray<int> c_OrderedSavedPoseNodeIndices) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOrderedSavedPoseNodeIndices.SetValue(c_OrderedSavedPoseNodeIndices);
	}
}
// ScriptStruct Engine.TimeStretchCurve
// 0x0028
public class FTimeStretchCurve : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offSamplingRate                                               = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offCurveValueMinPrecision                                     = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FTimeStretchCurveMarker>>    _offMarkers                                                    = new ExternalOffset<TArray<FTimeStretchCurveMarker>>(0x0008, false); // 0x0008(0x0010) (Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
//	private ExternalOffset<float>                              _offSum_dT_i_by_C_i[0x3]                                       = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public float                                               SamplingRate                                                   => _offSamplingRate.GetValue();
	public float                                               CurveValueMinPrecision                                         => _offCurveValueMinPrecision.GetValue();
	public TArray<FTimeStretchCurveMarker>                     Markers                                                        => _offMarkers.GetValue();
	#endregion

	public FTimeStretchCurve(float c_SamplingRate, float c_CurveValueMinPrecision, TArray<FTimeStretchCurveMarker> c_Markers) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSamplingRate.SetValue(c_SamplingRate);
		_offCurveValueMinPrecision.SetValue(c_CurveValueMinPrecision);
		_offMarkers.SetValue(c_Markers);
	}
}
// ScriptStruct Engine.RepAttachment
// 0x0040
public class FRepAttachment : ExternalClass
{
	#region Offsets
	private ExternalOffset<AActor>                             _offAttachParent                                               = new ExternalOffset<AActor>(0x0000, true);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize100>             _offLocationOffset                                             = new ExternalOffset<FVector_NetQuantize100>(0x0008, false);   // 0x0008(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize100>             _offRelativeScale3D                                            = new ExternalOffset<FVector_NetQuantize100>(0x0014, false);   // 0x0014(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotationOffset                                             = new ExternalOffset<FRotator>(0x0020, false);                 // 0x0020(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offAttachSocket                                               = new ExternalOffset<FName>(0x002C, false);                    // 0x002C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USceneComponent>                    _offAttachComponent                                            = new ExternalOffset<USceneComponent>(0x0038, true);           // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public AActor                                              AttachParent                                                   => _offAttachParent.GetValue();
	public FVector_NetQuantize100                              LocationOffset                                                 => _offLocationOffset.GetValue();
	public FVector_NetQuantize100                              RelativeScale3D                                                => _offRelativeScale3D.GetValue();
	public FRotator                                            RotationOffset                                                 => _offRotationOffset.GetValue();
	public FName                                               AttachSocket                                                   => _offAttachSocket.GetValue();
	public USceneComponent                                     AttachComponent                                                => _offAttachComponent.GetValue();
	#endregion

	public FRepAttachment(AActor c_AttachParent, FVector_NetQuantize100 c_LocationOffset, FVector_NetQuantize100 c_RelativeScale3D, FRotator c_RotationOffset, FName c_AttachSocket, USceneComponent c_AttachComponent) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAttachParent.SetValue(c_AttachParent);
		_offLocationOffset.SetValue(c_LocationOffset);
		_offRelativeScale3D.SetValue(c_RelativeScale3D);
		_offRotationOffset.SetValue(c_RotationOffset);
		_offAttachSocket.SetValue(c_AttachSocket);
		_offAttachComponent.SetValue(c_AttachComponent);
	}
}
// ScriptStruct Engine.AnimBlueprintFunction
// 0x0068
public class FAnimBlueprintFunction : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offGroup                                                      = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offOutputPoseNodeIndex                                        = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offInputPoseNames                                             = new ExternalOffset<TArray<FName>>(0x0018, false);            // 0x0018(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offInputPoseNodeIndices                                       = new ExternalOffset<TArray<int>>(0x0028, false);              // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UStructProperty>                    _offOutputPoseNodeProperty                                     = new ExternalOffset<UStructProperty>(0x0038, true);           // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UStructProperty>>            _offInputPoseNodeProperties                                    = new ExternalOffset<TArray<UStructProperty>>(0x0040, false);  // 0x0040(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UProperty>>                  _offInputProperties                                            = new ExternalOffset<TArray<UProperty>>(0x0050, false);        // 0x0050(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbImplemented                                               = new ExternalOffset<byte/*(bool)*/>(0x0060);                  // 0x0060(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public FName                                               Group                                                          => _offGroup.GetValue();
	public int                                                 OutputPoseNodeIndex                                            => _offOutputPoseNodeIndex.GetValue();
	public TArray<FName>                                       InputPoseNames                                                 => _offInputPoseNames.GetValue();
	public TArray<int>                                         InputPoseNodeIndices                                           => _offInputPoseNodeIndices.GetValue();
	public UStructProperty                                     OutputPoseNodeProperty                                         => _offOutputPoseNodeProperty.GetValue();
	public TArray<UStructProperty>                             InputPoseNodeProperties                                        => _offInputPoseNodeProperties.GetValue();
	public TArray<UProperty>                                   InputProperties                                                => _offInputProperties.GetValue();
	public byte/*(bool)*/                                      bImplemented                                                   => _offbImplemented.GetValue();
	#endregion

	public FAnimBlueprintFunction(FName c_Name, FName c_Group, int c_OutputPoseNodeIndex, TArray<FName> c_InputPoseNames, TArray<int> c_InputPoseNodeIndices, UStructProperty c_OutputPoseNodeProperty, TArray<UStructProperty> c_InputPoseNodeProperties, TArray<UProperty> c_InputProperties, byte/*(bool)*/ c_bImplemented) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offGroup.SetValue(c_Group);
		_offOutputPoseNodeIndex.SetValue(c_OutputPoseNodeIndex);
		_offInputPoseNames.SetValue(c_InputPoseNames);
		_offInputPoseNodeIndices.SetValue(c_InputPoseNodeIndices);
		_offOutputPoseNodeProperty.SetValue(c_OutputPoseNodeProperty);
		_offInputPoseNodeProperties.SetValue(c_InputPoseNodeProperties);
		_offInputProperties.SetValue(c_InputProperties);
		_offbImplemented.SetValue(c_bImplemented);
	}
}
// ScriptStruct Engine.TouchInputControl
// 0x0068
public class FTouchInputControl : ExternalClass
{
	#region Offsets
	private ExternalOffset<UTexture2D>                         _offImage1                                                     = new ExternalOffset<UTexture2D>(0x0000, true);                // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                         _offImage2                                                     = new ExternalOffset<UTexture2D>(0x0008, true);                // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offCenter                                                     = new ExternalOffset<FVector2D>(0x0010, false);                // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offVisualSize                                                 = new ExternalOffset<FVector2D>(0x0018, false);                // 0x0018(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offThumbSize                                                  = new ExternalOffset<FVector2D>(0x0020, false);                // 0x0020(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offInteractionSize                                            = new ExternalOffset<FVector2D>(0x0028, false);                // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offInputScale                                                 = new ExternalOffset<FVector2D>(0x0030, false);                // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FKey>                               _offMainInputKey                                               = new ExternalOffset<FKey>(0x0038, false);                     // 0x0038(0x0018) (Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FKey>                               _offAltInputKey                                                = new ExternalOffset<FKey>(0x0050, false);                     // 0x0050(0x0018) (Edit, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTexture2D                                          Image1                                                         => _offImage1.GetValue();
	public UTexture2D                                          Image2                                                         => _offImage2.GetValue();
	public FVector2D                                           Center                                                         => _offCenter.GetValue();
	public FVector2D                                           VisualSize                                                     => _offVisualSize.GetValue();
	public FVector2D                                           ThumbSize                                                      => _offThumbSize.GetValue();
	public FVector2D                                           InteractionSize                                                => _offInteractionSize.GetValue();
	public FVector2D                                           InputScale                                                     => _offInputScale.GetValue();
	public FKey                                                MainInputKey                                                   => _offMainInputKey.GetValue();
	public FKey                                                AltInputKey                                                    => _offAltInputKey.GetValue();
	#endregion

	public FTouchInputControl(UTexture2D c_Image1, UTexture2D c_Image2, FVector2D c_Center, FVector2D c_VisualSize, FVector2D c_ThumbSize, FVector2D c_InteractionSize, FVector2D c_InputScale, FKey c_MainInputKey, FKey c_AltInputKey) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offImage1.SetValue(c_Image1);
		_offImage2.SetValue(c_Image2);
		_offCenter.SetValue(c_Center);
		_offVisualSize.SetValue(c_VisualSize);
		_offThumbSize.SetValue(c_ThumbSize);
		_offInteractionSize.SetValue(c_InteractionSize);
		_offInputScale.SetValue(c_InputScale);
		_offMainInputKey.SetValue(c_MainInputKey);
		_offAltInputKey.SetValue(c_AltInputKey);
	}
}
// ScriptStruct Engine.RootMotionSourceSettings
// 0x0001
public class FRootMotionSourceSettings : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offFlags                                                      = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FRootMotionSourceSettings() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.HardwareCursorReference
// 0x0010
public class FHardwareCursorReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offCursorPath                                                 = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offHotSpot                                                    = new ExternalOffset<FVector2D>(0x0008, false);                // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               CursorPath                                                     => _offCursorPath.GetValue();
	public FVector2D                                           HotSpot                                                        => _offHotSpot.GetValue();
	#endregion

	public FHardwareCursorReference(FName c_CursorPath, FVector2D c_HotSpot) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCursorPath.SetValue(c_CursorPath);
		_offHotSpot.SetValue(c_HotSpot);
	}
}
// ScriptStruct Engine.AnimSegment
// 0x0020
public class FAnimSegment : ExternalClass
{
	#region Offsets
	private ExternalOffset<UAnimSequenceBase>                  _offAnimReference                                              = new ExternalOffset<UAnimSequenceBase>(0x0000, true);         // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStartPos                                                   = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAnimStartTime                                              = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAnimEndTime                                                = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAnimPlayRate                                               = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLoopingCount                                               = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimSequenceBase                                   AnimReference                                                  => _offAnimReference.GetValue();
	public float                                               StartPos                                                       => _offStartPos.GetValue();
	public float                                               AnimStartTime                                                  => _offAnimStartTime.GetValue();
	public float                                               AnimEndTime                                                    => _offAnimEndTime.GetValue();
	public float                                               AnimPlayRate                                                   => _offAnimPlayRate.GetValue();
	public int                                                 LoopingCount                                                   => _offLoopingCount.GetValue();
	#endregion

	public FAnimSegment(UAnimSequenceBase c_AnimReference, float c_StartPos, float c_AnimStartTime, float c_AnimEndTime, float c_AnimPlayRate, int c_LoopingCount) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAnimReference.SetValue(c_AnimReference);
		_offStartPos.SetValue(c_StartPos);
		_offAnimStartTime.SetValue(c_AnimStartTime);
		_offAnimEndTime.SetValue(c_AnimEndTime);
		_offAnimPlayRate.SetValue(c_AnimPlayRate);
		_offLoopingCount.SetValue(c_LoopingCount);
	}
}
// ScriptStruct Engine.Vector_NetQuantize10
// 0x0000 (0x000C - 0x000C)
public class FVector_NetQuantize10 : FVector
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FVector_NetQuantize10() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.Vector_NetQuantize
// 0x0000 (0x000C - 0x000C)
public class FVector_NetQuantize : FVector
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FVector_NetQuantize() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.AnimTrack
// 0x0010
public class FAnimTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FAnimSegment>>               _offAnimSegments                                               = new ExternalOffset<TArray<FAnimSegment>>(0x0000, false);     // 0x0000(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FAnimSegment>                                AnimSegments                                                   => _offAnimSegments.GetValue();
	#endregion

	public FAnimTrack(TArray<FAnimSegment> c_AnimSegments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAnimSegments.SetValue(c_AnimSegments);
	}
}
// ScriptStruct Engine.Vector_NetQuantizeNormal
// 0x0000 (0x000C - 0x000C)
public class FVector_NetQuantizeNormal : FVector
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FVector_NetQuantizeNormal() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.VirtualTextureSpacePoolConfig
// 0x000C
public class FVirtualTextureSpacePoolConfig : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offSizeInMegabyte                                             = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTileSize                                                   = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EPixelFormat>>          _offFormat                                                     = new ExternalOffset<TEnumAsByte<EPixelFormat>>(0x0008, false); // 0x0008(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 SizeInMegabyte                                                 => _offSizeInMegabyte.GetValue();
	public int                                                 TileSize                                                       => _offTileSize.GetValue();
	public TEnumAsByte<EPixelFormat>                           Format                                                         => _offFormat.GetValue();
	#endregion

	public FVirtualTextureSpacePoolConfig(int c_SizeInMegabyte, int c_TileSize, TEnumAsByte<EPixelFormat> c_Format) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSizeInMegabyte.SetValue(c_SizeInMegabyte);
		_offTileSize.SetValue(c_TileSize);
		_offFormat.SetValue(c_Format);
	}
}
// ScriptStruct Engine.RootMotionSourceGroup
// 0x00F8
public class FRootMotionSourceGroup : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbHasAdditiveSources                                        = new ExternalOffset<char>(0x00E8, false);                     // 0x00E8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbHasOverrideSources                                        = new ExternalOffset<char>(0x00E8, false);                     // 0x00E8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsAdditiveVelocityApplied                                 = new ExternalOffset<char>(0x00E8, false);                     // 0x00E8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionSourceSettings>          _offLastAccumulatedSettings                                    = new ExternalOffset<FRootMotionSourceSettings>(0x00E9, false); // 0x00E9(0x0001) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize10>              _offLastPreAdditiveVelocity                                    = new ExternalOffset<FVector_NetQuantize10>(0x00EC, false);    // 0x00EC(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRootMotionSourceSettings                           LastAccumulatedSettings                                        => _offLastAccumulatedSettings.GetValue();
	public FVector_NetQuantize10                               LastPreAdditiveVelocity                                        => _offLastPreAdditiveVelocity.GetValue();
	#endregion

	public FRootMotionSourceGroup(FRootMotionSourceSettings c_LastAccumulatedSettings, FVector_NetQuantize10 c_LastPreAdditiveVelocity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLastAccumulatedSettings.SetValue(c_LastAccumulatedSettings);
		_offLastPreAdditiveVelocity.SetValue(c_LastPreAdditiveVelocity);
	}
}
// ScriptStruct Engine.RootMotionExtractionStep
// 0x0010
public class FRootMotionExtractionStep : ExternalClass
{
	#region Offsets
	private ExternalOffset<UAnimSequence>                      _offAnimSequence                                               = new ExternalOffset<UAnimSequence>(0x0000, true);             // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStartPosition                                              = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offEndPosition                                                = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimSequence                                       AnimSequence                                                   => _offAnimSequence.GetValue();
	public float                                               StartPosition                                                  => _offStartPosition.GetValue();
	public float                                               EndPosition                                                    => _offEndPosition.GetValue();
	#endregion

	public FRootMotionExtractionStep(UAnimSequence c_AnimSequence, float c_StartPosition, float c_EndPosition) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAnimSequence.SetValue(c_AnimSequence);
		_offStartPosition.SetValue(c_StartPosition);
		_offEndPosition.SetValue(c_EndPosition);
	}
}
// ScriptStruct Engine.CompressedSegment
// 0x0010
public class FCompressedSegment : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FCompressedSegment() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.VoiceSettings
// 0x0018
public class FVoiceSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<USceneComponent>                    _offComponentToAttachTo                                        = new ExternalOffset<USceneComponent>(0x0000, true);           // 0x0000(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundAttenuation>                  _offAttenuationSettings                                        = new ExternalOffset<USoundAttenuation>(0x0008, true);         // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundEffectSourcePresetChain>      _offSourceEffectChain                                          = new ExternalOffset<USoundEffectSourcePresetChain>(0x0010, true); // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USceneComponent                                     ComponentToAttachTo                                            => _offComponentToAttachTo.GetValue();
	public USoundAttenuation                                   AttenuationSettings                                            => _offAttenuationSettings.GetValue();
	public USoundEffectSourcePresetChain                       SourceEffectChain                                              => _offSourceEffectChain.GetValue();
	#endregion

	public FVoiceSettings(USceneComponent c_ComponentToAttachTo, USoundAttenuation c_AttenuationSettings, USoundEffectSourcePresetChain c_SourceEffectChain) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offComponentToAttachTo.SetValue(c_ComponentToAttachTo);
		_offAttenuationSettings.SetValue(c_AttenuationSettings);
		_offSourceEffectChain.SetValue(c_SourceEffectChain);
	}
}
// ScriptStruct Engine.SmartName
// 0x000C
public class FSmartName : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offDisplayName                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               DisplayName                                                    => _offDisplayName.GetValue();
	#endregion

	public FSmartName(FName c_DisplayName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisplayName.SetValue(c_DisplayName);
	}
}
// ScriptStruct Engine.LevelStreamingWrapper
// 0x0008
public class FLevelStreamingWrapper : ExternalClass
{
	#region Offsets
	private ExternalOffset<ULevelStreaming>                    _offStreamingLevel                                             = new ExternalOffset<ULevelStreaming>(0x0000, true);           // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public ULevelStreaming                                     StreamingLevel                                                 => _offStreamingLevel.GetValue();
	#endregion

	public FLevelStreamingWrapper(ULevelStreaming c_StreamingLevel) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStreamingLevel.SetValue(c_StreamingLevel);
	}
}
// ScriptStruct Engine.AnimCurveBase
// 0x0018
public class FAnimCurveBase : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offLastObservedName                                           = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSmartName>                         _offName                                                       = new ExternalOffset<FSmartName>(0x0008, false);               // 0x0008(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offCurveTypeFlags                                             = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FName                                               LastObservedName                                               => _offLastObservedName.GetValue();
	public FSmartName                                          Name                                                           => _offName.GetValue();
	public int                                                 CurveTypeFlags                                                 => _offCurveTypeFlags.GetValue();
	#endregion

	public FAnimCurveBase(FName c_LastObservedName, FSmartName c_Name, int c_CurveTypeFlags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLastObservedName.SetValue(c_LastObservedName);
		_offName.SetValue(c_Name);
		_offCurveTypeFlags.SetValue(c_CurveTypeFlags);
	}
}
// ScriptStruct Engine.StreamingLevelsToConsider
// 0x0028
public class FStreamingLevelsToConsider : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FLevelStreamingWrapper>>     _offStreamingLevels                                            = new ExternalOffset<TArray<FLevelStreamingWrapper>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FLevelStreamingWrapper>                      StreamingLevels                                                => _offStreamingLevels.GetValue();
	#endregion

	public FStreamingLevelsToConsider(TArray<FLevelStreamingWrapper> c_StreamingLevels) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStreamingLevels.SetValue(c_StreamingLevels);
	}
}
// ScriptStruct Engine.HitResult
// 0x0088
public class FHitResult : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbBlockingHit                                               = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbStartPenetrating                                          = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offFaceIndex                                                  = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offdistance                                                   = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize>                _offLocation                                                   = new ExternalOffset<FVector_NetQuantize>(0x0010, false);      // 0x0010(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize>                _offImpactPoint                                                = new ExternalOffset<FVector_NetQuantize>(0x001C, false);      // 0x001C(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantizeNormal>          _offNormal                                                     = new ExternalOffset<FVector_NetQuantizeNormal>(0x0028, false); // 0x0028(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantizeNormal>          _offImpactNormal                                               = new ExternalOffset<FVector_NetQuantizeNormal>(0x0034, false); // 0x0034(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize>                _offTraceStart                                                 = new ExternalOffset<FVector_NetQuantize>(0x0040, false);      // 0x0040(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize>                _offTraceEnd                                                   = new ExternalOffset<FVector_NetQuantize>(0x004C, false);      // 0x004C(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPenetrationDepth                                           = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offItem                                                       = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<UPhysicalMaterial>>  _offPhysMaterial                                               = new ExternalOffset<TWeakObjectPtr<UPhysicalMaterial>>(0x0060, false); // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<AActor>>             _offActor                                                      = new ExternalOffset<TWeakObjectPtr<AActor>>(0x0068, false);   // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<UPrimitiveComponent>> _offComponent                                                  = new ExternalOffset<TWeakObjectPtr<UPrimitiveComponent>>(0x0070, false); // 0x0070(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offBoneName                                                   = new ExternalOffset<FName>(0x0078, false);                    // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offMyBoneName                                                 = new ExternalOffset<FName>(0x0080, false);                    // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 FaceIndex                                                      => _offFaceIndex.GetValue();
	public float                                               Time                                                           => _offTime.GetValue();
	public float                                               distance                                                       => _offdistance.GetValue();
	public FVector_NetQuantize                                 Location                                                       => _offLocation.GetValue();
	public FVector_NetQuantize                                 ImpactPoint                                                    => _offImpactPoint.GetValue();
	public FVector_NetQuantizeNormal                           Normal                                                         => _offNormal.GetValue();
	public FVector_NetQuantizeNormal                           ImpactNormal                                                   => _offImpactNormal.GetValue();
	public FVector_NetQuantize                                 TraceStart                                                     => _offTraceStart.GetValue();
	public FVector_NetQuantize                                 TraceEnd                                                       => _offTraceEnd.GetValue();
	public float                                               PenetrationDepth                                               => _offPenetrationDepth.GetValue();
	public int                                                 Item                                                           => _offItem.GetValue();
	public TWeakObjectPtr<UPhysicalMaterial>                   PhysMaterial                                                   => _offPhysMaterial.GetValue();
	public TWeakObjectPtr<AActor>                              Actor                                                          => _offActor.GetValue();
	public TWeakObjectPtr<UPrimitiveComponent>                 Component                                                      => _offComponent.GetValue();
	public FName                                               BoneName                                                       => _offBoneName.GetValue();
	public FName                                               MyBoneName                                                     => _offMyBoneName.GetValue();
	#endregion

	public FHitResult(int c_FaceIndex, float c_Time, float c_distance, FVector_NetQuantize c_Location, FVector_NetQuantize c_ImpactPoint, FVector_NetQuantizeNormal c_Normal, FVector_NetQuantizeNormal c_ImpactNormal, FVector_NetQuantize c_TraceStart, FVector_NetQuantize c_TraceEnd, float c_PenetrationDepth, int c_Item, TWeakObjectPtr<UPhysicalMaterial> c_PhysMaterial, TWeakObjectPtr<AActor> c_Actor, TWeakObjectPtr<UPrimitiveComponent> c_Component, FName c_BoneName, FName c_MyBoneName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFaceIndex.SetValue(c_FaceIndex);
		_offTime.SetValue(c_Time);
		_offdistance.SetValue(c_distance);
		_offLocation.SetValue(c_Location);
		_offImpactPoint.SetValue(c_ImpactPoint);
		_offNormal.SetValue(c_Normal);
		_offImpactNormal.SetValue(c_ImpactNormal);
		_offTraceStart.SetValue(c_TraceStart);
		_offTraceEnd.SetValue(c_TraceEnd);
		_offPenetrationDepth.SetValue(c_PenetrationDepth);
		_offItem.SetValue(c_Item);
		_offPhysMaterial.SetValue(c_PhysMaterial);
		_offActor.SetValue(c_Actor);
		_offComponent.SetValue(c_Component);
		_offBoneName.SetValue(c_BoneName);
		_offMyBoneName.SetValue(c_MyBoneName);
	}
}
// ScriptStruct Engine.KeyHandleMap
// 0x0060
public class FKeyHandleMap : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FKeyHandleMap() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.RepRootMotionMontage
// 0x0158
public class FRepRootMotionMontage : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbIsActive                                                  = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimMontage>                       _offAnimMontage                                                = new ExternalOffset<UAnimMontage>(0x0008, true);              // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPosition                                                   = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize100>             _offLocation                                                   = new ExternalOffset<FVector_NetQuantize100>(0x0014, false);   // 0x0014(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x0020, false);                 // 0x0020(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPrimitiveComponent>                _offMovementBase                                               = new ExternalOffset<UPrimitiveComponent>(0x0030, true);       // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offMovementBaseBoneName                                       = new ExternalOffset<FName>(0x0038, false);                    // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbRelativePosition                                          = new ExternalOffset<byte/*(bool)*/>(0x0040);                  // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbRelativeRotation                                          = new ExternalOffset<byte/*(bool)*/>(0x0041);                  // 0x0041(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionSourceGroup>             _offAuthoritativeRootMotion                                    = new ExternalOffset<FRootMotionSourceGroup>(0x0048, false);   // 0x0048(0x00F8) (NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize10>              _offAcceleration                                               = new ExternalOffset<FVector_NetQuantize10>(0x0140, false);    // 0x0140(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize10>              _offLinearVelocity                                             = new ExternalOffset<FVector_NetQuantize10>(0x014C, false);    // 0x014C(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bIsActive                                                      => _offbIsActive.GetValue();
	public UAnimMontage                                        AnimMontage                                                    => _offAnimMontage.GetValue();
	public float                                               Position                                                       => _offPosition.GetValue();
	public FVector_NetQuantize100                              Location                                                       => _offLocation.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public UPrimitiveComponent                                 MovementBase                                                   => _offMovementBase.GetValue();
	public FName                                               MovementBaseBoneName                                           => _offMovementBaseBoneName.GetValue();
	public byte/*(bool)*/                                      bRelativePosition                                              => _offbRelativePosition.GetValue();
	public byte/*(bool)*/                                      bRelativeRotation                                              => _offbRelativeRotation.GetValue();
	public FRootMotionSourceGroup                              AuthoritativeRootMotion                                        => _offAuthoritativeRootMotion.GetValue();
	public FVector_NetQuantize10                               Acceleration                                                   => _offAcceleration.GetValue();
	public FVector_NetQuantize10                               LinearVelocity                                                 => _offLinearVelocity.GetValue();
	#endregion

	public FRepRootMotionMontage(byte/*(bool)*/ c_bIsActive, UAnimMontage c_AnimMontage, float c_Position, FVector_NetQuantize100 c_Location, FRotator c_Rotation, UPrimitiveComponent c_MovementBase, FName c_MovementBaseBoneName, byte/*(bool)*/ c_bRelativePosition, byte/*(bool)*/ c_bRelativeRotation, FRootMotionSourceGroup c_AuthoritativeRootMotion, FVector_NetQuantize10 c_Acceleration, FVector_NetQuantize10 c_LinearVelocity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbIsActive.SetValue(c_bIsActive);
		_offAnimMontage.SetValue(c_AnimMontage);
		_offPosition.SetValue(c_Position);
		_offLocation.SetValue(c_Location);
		_offRotation.SetValue(c_Rotation);
		_offMovementBase.SetValue(c_MovementBase);
		_offMovementBaseBoneName.SetValue(c_MovementBaseBoneName);
		_offbRelativePosition.SetValue(c_bRelativePosition);
		_offbRelativeRotation.SetValue(c_bRelativeRotation);
		_offAuthoritativeRootMotion.SetValue(c_AuthoritativeRootMotion);
		_offAcceleration.SetValue(c_Acceleration);
		_offLinearVelocity.SetValue(c_LinearVelocity);
	}
}
// ScriptStruct Engine.IndexedCurve
// 0x0068
public class FIndexedCurve : ExternalClass
{
	#region Offsets
	private ExternalOffset<FKeyHandleMap>                      _offKeyHandlesToIndices                                        = new ExternalOffset<FKeyHandleMap>(0x0008, false);            // 0x0008(0x0060) (Transient, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FKeyHandleMap                                       KeyHandlesToIndices                                            => _offKeyHandlesToIndices.GetValue();
	#endregion

	public FIndexedCurve(FKeyHandleMap c_KeyHandlesToIndices) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeyHandlesToIndices.SetValue(c_KeyHandlesToIndices);
	}
}
// ScriptStruct Engine.LevelCollection
// 0x0078
public class FLevelCollection : ExternalClass
{
	#region Offsets
	private ExternalOffset<AGameStateBase>                     _offGameState                                                  = new ExternalOffset<AGameStateBase>(0x0008, true);            // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UNetDriver>                         _offNetDriver                                                  = new ExternalOffset<UNetDriver>(0x0010, true);                // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UDemoNetDriver>                     _offDemoNetDriver                                              = new ExternalOffset<UDemoNetDriver>(0x0018, true);            // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<ULevel>                             _offPersistentLevel                                            = new ExternalOffset<ULevel>(0x0020, true);                    // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public AGameStateBase                                      GameState                                                      => _offGameState.GetValue();
	public UNetDriver                                          NetDriver                                                      => _offNetDriver.GetValue();
	public UDemoNetDriver                                      DemoNetDriver                                                  => _offDemoNetDriver.GetValue();
	public ULevel                                              PersistentLevel                                                => _offPersistentLevel.GetValue();
	#endregion

	public FLevelCollection(AGameStateBase c_GameState, UNetDriver c_NetDriver, UDemoNetDriver c_DemoNetDriver, ULevel c_PersistentLevel) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGameState.SetValue(c_GameState);
		_offNetDriver.SetValue(c_NetDriver);
		_offDemoNetDriver.SetValue(c_DemoNetDriver);
		_offPersistentLevel.SetValue(c_PersistentLevel);
	}
}
// ScriptStruct Engine.SimulatedRootMotionReplicatedMove
// 0x0160
public class FSimulatedRootMotionReplicatedMove : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRepRootMotionMontage>              _offRootMotion                                                 = new ExternalOffset<FRepRootMotionMontage>(0x0008, false);    // 0x0008(0x0158) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public FRepRootMotionMontage                               RootMotion                                                     => _offRootMotion.GetValue();
	#endregion

	public FSimulatedRootMotionReplicatedMove(float c_Time, FRepRootMotionMontage c_RootMotion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offRootMotion.SetValue(c_RootMotion);
	}
}
// ScriptStruct Engine.EndPhysicsTickFunction
// 0x0008 (0x0058 - 0x0050)
public class FEndPhysicsTickFunction : FTickFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FEndPhysicsTickFunction() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.StartPhysicsTickFunction
// 0x0008 (0x0058 - 0x0050)
public class FStartPhysicsTickFunction : FTickFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FStartPhysicsTickFunction() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.RootMotionMovementParams
// 0x0040
public class FRootMotionMovementParams : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbHasRootMotion                                             = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBlendWeight                                                = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FTransform>                         _offRootMotionTransform                                        = new ExternalOffset<FTransform>(0x0010, false);               // 0x0010(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bHasRootMotion                                                 => _offbHasRootMotion.GetValue();
	public float                                               BlendWeight                                                    => _offBlendWeight.GetValue();
	public FTransform                                          RootMotionTransform                                            => _offRootMotionTransform.GetValue();
	#endregion

	public FRootMotionMovementParams(byte/*(bool)*/ c_bHasRootMotion, float c_BlendWeight, FTransform c_RootMotionTransform) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbHasRootMotion.SetValue(c_bHasRootMotion);
		_offBlendWeight.SetValue(c_BlendWeight);
		_offRootMotionTransform.SetValue(c_RootMotionTransform);
	}
}
// ScriptStruct Engine.RealCurve
// 0x0008 (0x0070 - 0x0068)
public class FRealCurve : FIndexedCurve
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ERichCurveExtrapolation>> _offPreInfinityExtrap                                          = new ExternalOffset<TEnumAsByte<ERichCurveExtrapolation>>(0x0068, false); // 0x0068(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERichCurveExtrapolation>> _offPostInfinityExtrap                                         = new ExternalOffset<TEnumAsByte<ERichCurveExtrapolation>>(0x0069, false); // 0x0069(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDefaultValue                                               = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ERichCurveExtrapolation>                PreInfinityExtrap                                              => _offPreInfinityExtrap.GetValue();
	public TEnumAsByte<ERichCurveExtrapolation>                PostInfinityExtrap                                             => _offPostInfinityExtrap.GetValue();
	public float                                               DefaultValue                                                   => _offDefaultValue.GetValue();
	#endregion

	public FRealCurve(TEnumAsByte<ERichCurveExtrapolation> c_PreInfinityExtrap, TEnumAsByte<ERichCurveExtrapolation> c_PostInfinityExtrap, float c_DefaultValue) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPreInfinityExtrap.SetValue(c_PreInfinityExtrap);
		_offPostInfinityExtrap.SetValue(c_PostInfinityExtrap);
		_offDefaultValue.SetValue(c_DefaultValue);
	}
}
// ScriptStruct Engine.LevelViewportInfo
// 0x0020
public class FLevelViewportInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offCamPosition                                                = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offCamRotation                                                = new ExternalOffset<FRotator>(0x000C, false);                 // 0x000C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCamOrthoZoom                                               = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offCamUpdated                                                 = new ExternalOffset<byte/*(bool)*/>(0x001C);                  // 0x001C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             CamPosition                                                    => _offCamPosition.GetValue();
	public FRotator                                            CamRotation                                                    => _offCamRotation.GetValue();
	public float                                               CamOrthoZoom                                                   => _offCamOrthoZoom.GetValue();
	public byte/*(bool)*/                                      CamUpdated                                                     => _offCamUpdated.GetValue();
	#endregion

	public FLevelViewportInfo(FVector c_CamPosition, FRotator c_CamRotation, float c_CamOrthoZoom, byte/*(bool)*/ c_CamUpdated) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCamPosition.SetValue(c_CamPosition);
		_offCamRotation.SetValue(c_CamRotation);
		_offCamOrthoZoom.SetValue(c_CamOrthoZoom);
		_offCamUpdated.SetValue(c_CamUpdated);
	}
}
// ScriptStruct Engine.BasedMovementInfo
// 0x0030
public class FBasedMovementInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<UPrimitiveComponent>                _offMovementBase                                               = new ExternalOffset<UPrimitiveComponent>(0x0000, true);       // 0x0000(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offBoneName                                                   = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize100>             _offLocation                                                   = new ExternalOffset<FVector_NetQuantize100>(0x0010, false);   // 0x0010(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x001C, false);                 // 0x001C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbServerHasBaseComponent                                    = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbRelativeRotation                                          = new ExternalOffset<byte/*(bool)*/>(0x0029);                  // 0x0029(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbServerHasVelocity                                         = new ExternalOffset<byte/*(bool)*/>(0x002A);                  // 0x002A(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPrimitiveComponent                                 MovementBase                                                   => _offMovementBase.GetValue();
	public FName                                               BoneName                                                       => _offBoneName.GetValue();
	public FVector_NetQuantize100                              Location                                                       => _offLocation.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public byte/*(bool)*/                                      bServerHasBaseComponent                                        => _offbServerHasBaseComponent.GetValue();
	public byte/*(bool)*/                                      bRelativeRotation                                              => _offbRelativeRotation.GetValue();
	public byte/*(bool)*/                                      bServerHasVelocity                                             => _offbServerHasVelocity.GetValue();
	#endregion

	public FBasedMovementInfo(UPrimitiveComponent c_MovementBase, FName c_BoneName, FVector_NetQuantize100 c_Location, FRotator c_Rotation, byte/*(bool)*/ c_bServerHasBaseComponent, byte/*(bool)*/ c_bRelativeRotation, byte/*(bool)*/ c_bServerHasVelocity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMovementBase.SetValue(c_MovementBase);
		_offBoneName.SetValue(c_BoneName);
		_offLocation.SetValue(c_Location);
		_offRotation.SetValue(c_Rotation);
		_offbServerHasBaseComponent.SetValue(c_bServerHasBaseComponent);
		_offbRelativeRotation.SetValue(c_bRelativeRotation);
		_offbServerHasVelocity.SetValue(c_bServerHasVelocity);
	}
}
// ScriptStruct Engine.DamageEvent
// 0x0010
public class FDamageEvent : ExternalClass
{
	#region Offsets
	private ExternalOffset<UClass>                             _offDamageTypeClass                                            = new ExternalOffset<UClass>(0x0008, true);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                              DamageTypeClass                                                => _offDamageTypeClass.GetValue();
	#endregion

	public FDamageEvent(UClass c_DamageTypeClass) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDamageTypeClass.SetValue(c_DamageTypeClass);
	}
}
// ScriptStruct Engine.PSCPoolElem
// 0x0010
public class FPSCPoolElem : ExternalClass
{
	#region Offsets
	private ExternalOffset<UParticleSystemComponent>           _offPSC                                                        = new ExternalOffset<UParticleSystemComponent>(0x0000, true);  // 0x0000(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UParticleSystemComponent                            PSC                                                            => _offPSC.GetValue();
	#endregion

	public FPSCPoolElem(UParticleSystemComponent c_PSC) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPSC.SetValue(c_PSC);
	}
}
// ScriptStruct Engine.RadialDamageParams
// 0x0014
public class FRadialDamageParams : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offBaseDamage                                                 = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinimumDamage                                              = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInnerRadius                                                = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOuterRadius                                                = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDamageFalloff                                              = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               BaseDamage                                                     => _offBaseDamage.GetValue();
	public float                                               MinimumDamage                                                  => _offMinimumDamage.GetValue();
	public float                                               InnerRadius                                                    => _offInnerRadius.GetValue();
	public float                                               OuterRadius                                                    => _offOuterRadius.GetValue();
	public float                                               DamageFalloff                                                  => _offDamageFalloff.GetValue();
	#endregion

	public FRadialDamageParams(float c_BaseDamage, float c_MinimumDamage, float c_InnerRadius, float c_OuterRadius, float c_DamageFalloff) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBaseDamage.SetValue(c_BaseDamage);
		_offMinimumDamage.SetValue(c_MinimumDamage);
		_offInnerRadius.SetValue(c_InnerRadius);
		_offOuterRadius.SetValue(c_OuterRadius);
		_offDamageFalloff.SetValue(c_DamageFalloff);
	}
}
// ScriptStruct Engine.PSCPool
// 0x0038
public class FPSCPool : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FPSCPoolElem>>               _offFreeElements                                               = new ExternalOffset<TArray<FPSCPoolElem>>(0x0000, false);     // 0x0000(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleSystemComponent>>   _offInUseComponents_Auto                                       = new ExternalOffset<TArray<UParticleSystemComponent>>(0x0010, false); // 0x0010(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleSystemComponent>>   _offInUseComponents_Manual                                     = new ExternalOffset<TArray<UParticleSystemComponent>>(0x0020, false); // 0x0020(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FPSCPoolElem>                                FreeElements                                                   => _offFreeElements.GetValue();
	public TArray<UParticleSystemComponent>                    InUseComponents_Auto                                           => _offInUseComponents_Auto.GetValue();
	public TArray<UParticleSystemComponent>                    InUseComponents_Manual                                         => _offInUseComponents_Manual.GetValue();
	#endregion

	public FPSCPool(TArray<FPSCPoolElem> c_FreeElements, TArray<UParticleSystemComponent> c_InUseComponents_Auto, TArray<UParticleSystemComponent> c_InUseComponents_Manual) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFreeElements.SetValue(c_FreeElements);
		_offInUseComponents_Auto.SetValue(c_InUseComponents_Auto);
		_offInUseComponents_Manual.SetValue(c_InUseComponents_Manual);
	}
}
// ScriptStruct Engine.RichCurveKey
// 0x001C
public class FRichCurveKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ERichCurveInterpMode>>  _offInterpMode                                                 = new ExternalOffset<TEnumAsByte<ERichCurveInterpMode>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERichCurveTangentMode>> _offTangentMode                                                = new ExternalOffset<TEnumAsByte<ERichCurveTangentMode>>(0x0001, false); // 0x0001(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERichCurveTangentWeightMode>> _offTangentWeightMode                                          = new ExternalOffset<TEnumAsByte<ERichCurveTangentWeightMode>>(0x0002, false); // 0x0002(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offValue                                                      = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offArriveTangent                                              = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offArriveTangentWeight                                        = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLeaveTangent                                               = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLeaveTangentWeight                                         = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ERichCurveInterpMode>                   InterpMode                                                     => _offInterpMode.GetValue();
	public TEnumAsByte<ERichCurveTangentMode>                  TangentMode                                                    => _offTangentMode.GetValue();
	public TEnumAsByte<ERichCurveTangentWeightMode>            TangentWeightMode                                              => _offTangentWeightMode.GetValue();
	public float                                               Time                                                           => _offTime.GetValue();
	public float                                               Value                                                          => _offValue.GetValue();
	public float                                               ArriveTangent                                                  => _offArriveTangent.GetValue();
	public float                                               ArriveTangentWeight                                            => _offArriveTangentWeight.GetValue();
	public float                                               LeaveTangent                                                   => _offLeaveTangent.GetValue();
	public float                                               LeaveTangentWeight                                             => _offLeaveTangentWeight.GetValue();
	#endregion

	public FRichCurveKey(TEnumAsByte<ERichCurveInterpMode> c_InterpMode, TEnumAsByte<ERichCurveTangentMode> c_TangentMode, TEnumAsByte<ERichCurveTangentWeightMode> c_TangentWeightMode, float c_Time, float c_Value, float c_ArriveTangent, float c_ArriveTangentWeight, float c_LeaveTangent, float c_LeaveTangentWeight) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInterpMode.SetValue(c_InterpMode);
		_offTangentMode.SetValue(c_TangentMode);
		_offTangentWeightMode.SetValue(c_TangentWeightMode);
		_offTime.SetValue(c_Time);
		_offValue.SetValue(c_Value);
		_offArriveTangent.SetValue(c_ArriveTangent);
		_offArriveTangentWeight.SetValue(c_ArriveTangentWeight);
		_offLeaveTangent.SetValue(c_LeaveTangent);
		_offLeaveTangentWeight.SetValue(c_LeaveTangentWeight);
	}
}
// ScriptStruct Engine.RadialDamageEvent
// 0x0030 (0x0040 - 0x0010)
public class FRadialDamageEvent : FDamageEvent
{
	#region Offsets
	private ExternalOffset<FRadialDamageParams>                _offParams                                                     = new ExternalOffset<FRadialDamageParams>(0x0010, false);      // 0x0010(0x0014) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrigin                                                     = new ExternalOffset<FVector>(0x0024, false);                  // 0x0024(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FHitResult>>                 _offComponentHits                                              = new ExternalOffset<TArray<FHitResult>>(0x0030, false);       // 0x0030(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRadialDamageParams                                 Params                                                         => _offParams.GetValue();
	public FVector                                             Origin                                                         => _offOrigin.GetValue();
	public TArray<FHitResult>                                  ComponentHits                                                  => _offComponentHits.GetValue();
	#endregion

	public FRadialDamageEvent(FRadialDamageParams c_Params, FVector c_Origin, TArray<FHitResult> c_ComponentHits) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParams.SetValue(c_Params);
		_offOrigin.SetValue(c_Origin);
		_offComponentHits.SetValue(c_ComponentHits);
	}
}
// ScriptStruct Engine.RichCurve
// 0x0010 (0x0080 - 0x0070)
public class FRichCurve : FRealCurve
{
	#region Offsets
	private ExternalOffset<TArray<FRichCurveKey>>              _offKeys                                                       = new ExternalOffset<TArray<FRichCurveKey>>(0x0070, false);    // 0x0070(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FRichCurveKey>                               Keys                                                           => _offKeys.GetValue();
	#endregion

	public FRichCurve(TArray<FRichCurveKey> c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct Engine.WorldPSCPool
// 0x0058
public class FWorldPSCPool : ExternalClass
{
	#region Offsets
//	private TMap<class UParticleSystem*, struct FPSCPool>      _offWorldParticleSystemPools                                   = new ExternalOffset<TMap<FPSCPool>>(0x0000, false);           // 0x0000(0x0050) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	#endregion

	public FWorldPSCPool() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.FloatCurve
// 0x0080 (0x0098 - 0x0018)
public class FFloatCurve : FAnimCurveBase
{
	#region Offsets
	private ExternalOffset<FRichCurve>                         _offFloatCurve                                                 = new ExternalOffset<FRichCurve>(0x0018, false);               // 0x0018(0x0080) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRichCurve                                          FloatCurve                                                     => _offFloatCurve.GetValue();
	#endregion

	public FFloatCurve(FRichCurve c_FloatCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFloatCurve.SetValue(c_FloatCurve);
	}
}
// ScriptStruct Engine.RawCurveTracks
// 0x0010
public class FRawCurveTracks : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FFloatCurve>>                _offFloatCurves                                                = new ExternalOffset<TArray<FFloatCurve>>(0x0000, false);      // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FFloatCurve>                                 FloatCurves                                                    => _offFloatCurves.GetValue();
	#endregion

	public FRawCurveTracks(TArray<FFloatCurve> c_FloatCurves) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFloatCurves.SetValue(c_FloatCurves);
	}
}
// ScriptStruct Engine.PointDamageEvent
// 0x0098 (0x00A8 - 0x0010)
public class FPointDamageEvent : FDamageEvent
{
	#region Offsets
	private ExternalOffset<float>                              _offdamage                                                     = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantizeNormal>          _offShotDirection                                              = new ExternalOffset<FVector_NetQuantizeNormal>(0x0014, false); // 0x0014(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FHitResult>                         _offHitInfo                                                    = new ExternalOffset<FHitResult>(0x0020, false);               // 0x0020(0x0088) (IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               damage                                                         => _offdamage.GetValue();
	public FVector_NetQuantizeNormal                           ShotDirection                                                  => _offShotDirection.GetValue();
	public FHitResult                                          HitInfo                                                        => _offHitInfo.GetValue();
	#endregion

	public FPointDamageEvent(float c_damage, FVector_NetQuantizeNormal c_ShotDirection, FHitResult c_HitInfo) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offdamage.SetValue(c_damage);
		_offShotDirection.SetValue(c_ShotDirection);
		_offHitInfo.SetValue(c_HitInfo);
	}
}
// ScriptStruct Engine.VectorCurve
// 0x0180 (0x0198 - 0x0018)
public class FVectorCurve : FAnimCurveBase
{
	#region Offsets
//	private ExternalOffset<FRichCurve>                         _offFloatCurves[0x3]                                           = new ExternalOffset<FRichCurve>(0x0018, false);               // 0x0018(0x0080) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FVectorCurve() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.BroadphaseSettings
// 0x0040
public class FBroadphaseSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbUseMBPOnClient                                            = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbUseMBPOnServer                                            = new ExternalOffset<byte/*(bool)*/>(0x0001);                  // 0x0001(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbUseMBPOuterBounds                                         = new ExternalOffset<byte/*(bool)*/>(0x0002);                  // 0x0002(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBox>                               _offMBPBounds                                                  = new ExternalOffset<FBox>(0x0004, false);                     // 0x0004(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FBox>                               _offMBPOuterBounds                                             = new ExternalOffset<FBox>(0x0020, false);                     // 0x0020(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                               _offMBPNumSubdivs                                              = new ExternalOffset<uint>(0x003C);                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bUseMBPOnClient                                                => _offbUseMBPOnClient.GetValue();
	public byte/*(bool)*/                                      bUseMBPOnServer                                                => _offbUseMBPOnServer.GetValue();
	public byte/*(bool)*/                                      bUseMBPOuterBounds                                             => _offbUseMBPOuterBounds.GetValue();
	public FBox                                                MBPBounds                                                      => _offMBPBounds.GetValue();
	public FBox                                                MBPOuterBounds                                                 => _offMBPOuterBounds.GetValue();
	public uint                                                MBPNumSubdivs                                                  => _offMBPNumSubdivs.GetValue();
	#endregion

	public FBroadphaseSettings(byte/*(bool)*/ c_bUseMBPOnClient, byte/*(bool)*/ c_bUseMBPOnServer, byte/*(bool)*/ c_bUseMBPOuterBounds, FBox c_MBPBounds, FBox c_MBPOuterBounds, uint c_MBPNumSubdivs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbUseMBPOnClient.SetValue(c_bUseMBPOnClient);
		_offbUseMBPOnServer.SetValue(c_bUseMBPOnServer);
		_offbUseMBPOuterBounds.SetValue(c_bUseMBPOuterBounds);
		_offMBPBounds.SetValue(c_MBPBounds);
		_offMBPOuterBounds.SetValue(c_MBPOuterBounds);
		_offMBPNumSubdivs.SetValue(c_MBPNumSubdivs);
	}
}
// ScriptStruct Engine.TransformCurve
// 0x04C8 (0x04E0 - 0x0018)
public class FTransformCurve : FAnimCurveBase
{
	#region Offsets
	private ExternalOffset<FVectorCurve>                       _offTranslationCurve                                           = new ExternalOffset<FVectorCurve>(0x0018, false);             // 0x0018(0x0198) (NativeAccessSpecifierPublic)
	private ExternalOffset<FVectorCurve>                       _offRotationCurve                                              = new ExternalOffset<FVectorCurve>(0x01B0, false);             // 0x01B0(0x0198) (NativeAccessSpecifierPublic)
	private ExternalOffset<FVectorCurve>                       _offScaleCurve                                                 = new ExternalOffset<FVectorCurve>(0x0348, false);             // 0x0348(0x0198) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVectorCurve                                        TranslationCurve                                               => _offTranslationCurve.GetValue();
	public FVectorCurve                                        RotationCurve                                                  => _offRotationCurve.GetValue();
	public FVectorCurve                                        ScaleCurve                                                     => _offScaleCurve.GetValue();
	#endregion

	public FTransformCurve(FVectorCurve c_TranslationCurve, FVectorCurve c_RotationCurve, FVectorCurve c_ScaleCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTranslationCurve.SetValue(c_TranslationCurve);
		_offRotationCurve.SetValue(c_RotationCurve);
		_offScaleCurve.SetValue(c_ScaleCurve);
	}
}
// ScriptStruct Engine.SlotEvaluationPose
// 0x0040
public class FSlotEvaluationPose : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EAdditiveAnimationType>> _offAdditiveType                                               = new ExternalOffset<TEnumAsByte<EAdditiveAnimationType>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWeight                                                     = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EAdditiveAnimationType>                 AdditiveType                                                   => _offAdditiveType.GetValue();
	public float                                               Weight                                                         => _offWeight.GetValue();
	#endregion

	public FSlotEvaluationPose(TEnumAsByte<EAdditiveAnimationType> c_AdditiveType, float c_Weight) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAdditiveType.SetValue(c_AdditiveType);
		_offWeight.SetValue(c_Weight);
	}
}
// ScriptStruct Engine.A2Pose
// 0x0010
public class FA2Pose : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FTransform>>                 _offBones                                                      = new ExternalOffset<TArray<FTransform>>(0x0000, false);       // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FTransform>                                  Bones                                                          => _offBones.GetValue();
	#endregion

	public FA2Pose(TArray<FTransform> c_Bones) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBones.SetValue(c_Bones);
	}
}
// ScriptStruct Engine.A2CSPose
// 0x0018 (0x0028 - 0x0010)
public class FA2CSPose : FA2Pose
{
	#region Offsets
	private ExternalOffset<TArray<char>>                       _offComponentSpaceFlags                                        = new ExternalOffset<TArray<char>>(0x0018, false);             // 0x0018(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<char>                                        ComponentSpaceFlags                                            => _offComponentSpaceFlags.GetValue();
	#endregion

	public FA2CSPose(TArray<char> c_ComponentSpaceFlags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offComponentSpaceFlags.SetValue(c_ComponentSpaceFlags);
	}
}
// ScriptStruct Engine.QueuedDrawDebugItem
// 0x0068
public class FQueuedDrawDebugItem : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EDrawDebugItemType>>    _offItemType                                                   = new ExternalOffset<TEnumAsByte<EDrawDebugItemType>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offStartLoc                                                   = new ExternalOffset<FVector>(0x0004, false);                  // 0x0004(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offEndLoc                                                     = new ExternalOffset<FVector>(0x0010, false);                  // 0x0010(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offCenter                                                     = new ExternalOffset<FVector>(0x001C, false);                  // 0x001C(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x0028, false);                 // 0x0028(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRadius                                                     = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSize                                                       = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSegments                                                   = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offColor                                                      = new ExternalOffset<FColor>(0x0040, false);                   // 0x0040(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbPersistentLines                                           = new ExternalOffset<byte/*(bool)*/>(0x0044);                  // 0x0044(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLifetime                                                   = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offThickness                                                  = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMessage                                                    = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offTextScale                                                  = new ExternalOffset<FVector2D>(0x0060, false);                // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EDrawDebugItemType>                     ItemType                                                       => _offItemType.GetValue();
	public FVector                                             StartLoc                                                       => _offStartLoc.GetValue();
	public FVector                                             EndLoc                                                         => _offEndLoc.GetValue();
	public FVector                                             Center                                                         => _offCenter.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public float                                               Radius                                                         => _offRadius.GetValue();
	public float                                               Size                                                           => _offSize.GetValue();
	public int                                                 Segments                                                       => _offSegments.GetValue();
	public FColor                                              Color                                                          => _offColor.GetValue();
	public byte/*(bool)*/                                      bPersistentLines                                               => _offbPersistentLines.GetValue();
	public float                                               Lifetime                                                       => _offLifetime.GetValue();
	public float                                               Thickness                                                      => _offThickness.GetValue();
	public FString                                             Message                                                        => _offMessage.GetValue();
	public FVector2D                                           TextScale                                                      => _offTextScale.GetValue();
	#endregion

	public FQueuedDrawDebugItem(TEnumAsByte<EDrawDebugItemType> c_ItemType, FVector c_StartLoc, FVector c_EndLoc, FVector c_Center, FRotator c_Rotation, float c_Radius, float c_Size, int c_Segments, FColor c_Color, byte/*(bool)*/ c_bPersistentLines, float c_Lifetime, float c_Thickness, FString c_Message, FVector2D c_TextScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemType.SetValue(c_ItemType);
		_offStartLoc.SetValue(c_StartLoc);
		_offEndLoc.SetValue(c_EndLoc);
		_offCenter.SetValue(c_Center);
		_offRotation.SetValue(c_Rotation);
		_offRadius.SetValue(c_Radius);
		_offSize.SetValue(c_Size);
		_offSegments.SetValue(c_Segments);
		_offColor.SetValue(c_Color);
		_offbPersistentLines.SetValue(c_bPersistentLines);
		_offLifetime.SetValue(c_Lifetime);
		_offThickness.SetValue(c_Thickness);
		_offMessage.SetValue(c_Message);
		_offTextScale.SetValue(c_TextScale);
	}
}
// ScriptStruct Engine.MaterialProxySettings
// 0x0074
public class FMaterialProxySettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FIntPoint>                          _offTextureSize                                                = new ExternalOffset<FIntPoint>(0x0000, false);                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGutterSpace                                                = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMetallicConstant                                           = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRoughnessConstant                                          = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSpecularConstant                                           = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOpacityConstant                                            = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOpacityMaskConstant                                        = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionConstant                                   = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureSizingType>>    _offTextureSizingType                                          = new ExternalOffset<TEnumAsByte<ETextureSizingType>>(0x0024, false); // 0x0024(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialMergeType>>    _offMaterialMergeType                                          = new ExternalOffset<TEnumAsByte<EMaterialMergeType>>(0x0025, false); // 0x0025(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBlendMode>>            _offBlendMode                                                  = new ExternalOffset<TEnumAsByte<EBlendMode>>(0x0026, false);  // 0x0026(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAllowTwoSidedMaterial                                     = new ExternalOffset<char>(0x0027, false);                     // 0x0027(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbNormalMap                                                 = new ExternalOffset<char>(0x0027, false);                     // 0x0027(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbMetallicMap                                               = new ExternalOffset<char>(0x0027, false);                     // 0x0027(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRoughnessMap                                              = new ExternalOffset<char>(0x0027, false);                     // 0x0027(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSpecularMap                                               = new ExternalOffset<char>(0x0027, false);                     // 0x0027(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEmissiveMap                                               = new ExternalOffset<char>(0x0027, false);                     // 0x0027(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOpacityMap                                                = new ExternalOffset<char>(0x0027, false);                     // 0x0027(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOpacityMaskMap                                            = new ExternalOffset<char>(0x0027, false);                     // 0x0027(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAmbientOcclusionMap                                       = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                          _offDiffuseTextureSize                                         = new ExternalOffset<FIntPoint>(0x002C, false);                // 0x002C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                          _offNormalTextureSize                                          = new ExternalOffset<FIntPoint>(0x0034, false);                // 0x0034(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                          _offMetallicTextureSize                                        = new ExternalOffset<FIntPoint>(0x003C, false);                // 0x003C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                          _offRoughnessTextureSize                                       = new ExternalOffset<FIntPoint>(0x0044, false);                // 0x0044(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                          _offSpecularTextureSize                                        = new ExternalOffset<FIntPoint>(0x004C, false);                // 0x004C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                          _offEmissiveTextureSize                                        = new ExternalOffset<FIntPoint>(0x0054, false);                // 0x0054(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                          _offOpacityTextureSize                                         = new ExternalOffset<FIntPoint>(0x005C, false);                // 0x005C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                          _offOpacityMaskTextureSize                                     = new ExternalOffset<FIntPoint>(0x0064, false);                // 0x0064(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                          _offAmbientOcclusionTextureSize                                = new ExternalOffset<FIntPoint>(0x006C, false);                // 0x006C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FIntPoint                                           TextureSize                                                    => _offTextureSize.GetValue();
	public float                                               GutterSpace                                                    => _offGutterSpace.GetValue();
	public float                                               MetallicConstant                                               => _offMetallicConstant.GetValue();
	public float                                               RoughnessConstant                                              => _offRoughnessConstant.GetValue();
	public float                                               SpecularConstant                                               => _offSpecularConstant.GetValue();
	public float                                               OpacityConstant                                                => _offOpacityConstant.GetValue();
	public float                                               OpacityMaskConstant                                            => _offOpacityMaskConstant.GetValue();
	public float                                               AmbientOcclusionConstant                                       => _offAmbientOcclusionConstant.GetValue();
	public TEnumAsByte<ETextureSizingType>                     TextureSizingType                                              => _offTextureSizingType.GetValue();
	public TEnumAsByte<EMaterialMergeType>                     MaterialMergeType                                              => _offMaterialMergeType.GetValue();
	public TEnumAsByte<EBlendMode>                             BlendMode                                                      => _offBlendMode.GetValue();
	public FIntPoint                                           DiffuseTextureSize                                             => _offDiffuseTextureSize.GetValue();
	public FIntPoint                                           NormalTextureSize                                              => _offNormalTextureSize.GetValue();
	public FIntPoint                                           MetallicTextureSize                                            => _offMetallicTextureSize.GetValue();
	public FIntPoint                                           RoughnessTextureSize                                           => _offRoughnessTextureSize.GetValue();
	public FIntPoint                                           SpecularTextureSize                                            => _offSpecularTextureSize.GetValue();
	public FIntPoint                                           EmissiveTextureSize                                            => _offEmissiveTextureSize.GetValue();
	public FIntPoint                                           OpacityTextureSize                                             => _offOpacityTextureSize.GetValue();
	public FIntPoint                                           OpacityMaskTextureSize                                         => _offOpacityMaskTextureSize.GetValue();
	public FIntPoint                                           AmbientOcclusionTextureSize                                    => _offAmbientOcclusionTextureSize.GetValue();
	#endregion

	public FMaterialProxySettings(FIntPoint c_TextureSize, float c_GutterSpace, float c_MetallicConstant, float c_RoughnessConstant, float c_SpecularConstant, float c_OpacityConstant, float c_OpacityMaskConstant, float c_AmbientOcclusionConstant, TEnumAsByte<ETextureSizingType> c_TextureSizingType, TEnumAsByte<EMaterialMergeType> c_MaterialMergeType, TEnumAsByte<EBlendMode> c_BlendMode, FIntPoint c_DiffuseTextureSize, FIntPoint c_NormalTextureSize, FIntPoint c_MetallicTextureSize, FIntPoint c_RoughnessTextureSize, FIntPoint c_SpecularTextureSize, FIntPoint c_EmissiveTextureSize, FIntPoint c_OpacityTextureSize, FIntPoint c_OpacityMaskTextureSize, FIntPoint c_AmbientOcclusionTextureSize) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTextureSize.SetValue(c_TextureSize);
		_offGutterSpace.SetValue(c_GutterSpace);
		_offMetallicConstant.SetValue(c_MetallicConstant);
		_offRoughnessConstant.SetValue(c_RoughnessConstant);
		_offSpecularConstant.SetValue(c_SpecularConstant);
		_offOpacityConstant.SetValue(c_OpacityConstant);
		_offOpacityMaskConstant.SetValue(c_OpacityMaskConstant);
		_offAmbientOcclusionConstant.SetValue(c_AmbientOcclusionConstant);
		_offTextureSizingType.SetValue(c_TextureSizingType);
		_offMaterialMergeType.SetValue(c_MaterialMergeType);
		_offBlendMode.SetValue(c_BlendMode);
		_offDiffuseTextureSize.SetValue(c_DiffuseTextureSize);
		_offNormalTextureSize.SetValue(c_NormalTextureSize);
		_offMetallicTextureSize.SetValue(c_MetallicTextureSize);
		_offRoughnessTextureSize.SetValue(c_RoughnessTextureSize);
		_offSpecularTextureSize.SetValue(c_SpecularTextureSize);
		_offEmissiveTextureSize.SetValue(c_EmissiveTextureSize);
		_offOpacityTextureSize.SetValue(c_OpacityTextureSize);
		_offOpacityMaskTextureSize.SetValue(c_OpacityMaskTextureSize);
		_offAmbientOcclusionTextureSize.SetValue(c_AmbientOcclusionTextureSize);
	}
}
// ScriptStruct Engine.WeightedBlendable
// 0x0010
public class FWeightedBlendable : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offWeight                                                     = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                            _offObject                                                     = new ExternalOffset<UObject>(0x0008, true);                   // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Weight                                                         => _offWeight.GetValue();
	public UObject                                             Object                                                         => _offObject.GetValue();
	#endregion

	public FWeightedBlendable(float c_Weight, UObject c_Object) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offWeight.SetValue(c_Weight);
		_offObject.SetValue(c_Object);
	}
}
// ScriptStruct Engine.WeightedBlendables
// 0x0010
public class FWeightedBlendables : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FWeightedBlendable>>         _offArray                                                      = new ExternalOffset<TArray<FWeightedBlendable>>(0x0000, false); // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FWeightedBlendable>                          Array                                                          => _offArray.GetValue();
	#endregion

	public FWeightedBlendables(TArray<FWeightedBlendable> c_Array) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offArray.SetValue(c_Array);
	}
}
// ScriptStruct Engine.AnimLinkableElement
// 0x0030
public class FAnimLinkableElement : ExternalClass
{
	#region Offsets
	private ExternalOffset<UAnimMontage>                       _offLinkedMontage                                              = new ExternalOffset<UAnimMontage>(0x0008, true);              // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                                _offSlotIndex                                                  = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                                _offSegmentIndex                                               = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TEnumAsByte<EAnimLinkMethod>>       _offLinkMethod                                                 = new ExternalOffset<TEnumAsByte<EAnimLinkMethod>>(0x0018, false); // 0x0018(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TEnumAsByte<EAnimLinkMethod>>       _offCachedLinkMethod                                           = new ExternalOffset<TEnumAsByte<EAnimLinkMethod>>(0x0019, false); // 0x0019(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                              _offSegmentBeginTime                                           = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                              _offSegmentLength                                              = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                              _offLinkValue                                                  = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<UAnimSequenceBase>                  _offLinkedSequence                                             = new ExternalOffset<UAnimSequenceBase>(0x0028, true);         // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UAnimMontage                                        LinkedMontage                                                  => _offLinkedMontage.GetValue();
	public int                                                 SlotIndex                                                      => _offSlotIndex.GetValue();
	public int                                                 SegmentIndex                                                   => _offSegmentIndex.GetValue();
	public TEnumAsByte<EAnimLinkMethod>                        LinkMethod                                                     => _offLinkMethod.GetValue();
	public TEnumAsByte<EAnimLinkMethod>                        CachedLinkMethod                                               => _offCachedLinkMethod.GetValue();
	public float                                               SegmentBeginTime                                               => _offSegmentBeginTime.GetValue();
	public float                                               SegmentLength                                                  => _offSegmentLength.GetValue();
	public float                                               LinkValue                                                      => _offLinkValue.GetValue();
	public UAnimSequenceBase                                   LinkedSequence                                                 => _offLinkedSequence.GetValue();
	#endregion

	public FAnimLinkableElement(UAnimMontage c_LinkedMontage, int c_SlotIndex, int c_SegmentIndex, TEnumAsByte<EAnimLinkMethod> c_LinkMethod, TEnumAsByte<EAnimLinkMethod> c_CachedLinkMethod, float c_SegmentBeginTime, float c_SegmentLength, float c_LinkValue, UAnimSequenceBase c_LinkedSequence) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLinkedMontage.SetValue(c_LinkedMontage);
		_offSlotIndex.SetValue(c_SlotIndex);
		_offSegmentIndex.SetValue(c_SegmentIndex);
		_offLinkMethod.SetValue(c_LinkMethod);
		_offCachedLinkMethod.SetValue(c_CachedLinkMethod);
		_offSegmentBeginTime.SetValue(c_SegmentBeginTime);
		_offSegmentLength.SetValue(c_SegmentLength);
		_offLinkValue.SetValue(c_LinkValue);
		_offLinkedSequence.SetValue(c_LinkedSequence);
	}
}
// ScriptStruct Engine.MeshProxySettings
// 0x0094
public class FMeshProxySettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offScreenSize                                                 = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVoxelSize                                                  = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialProxySettings>             _offMaterialSettings                                           = new ExternalOffset<FMaterialProxySettings>(0x0008, false);   // 0x0008(0x0074) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMergeDistance                                              = new ExternalOffset<float>(0x007C);                           // 0x007C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offUnresolvedGeometryColor                                    = new ExternalOffset<FColor>(0x0080, false);                   // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxRayCastDist                                             = new ExternalOffset<float>(0x0084);                           // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHardAngleThreshold                                         = new ExternalOffset<float>(0x0088);                           // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLightMapResolution                                         = new ExternalOffset<int>(0x008C);                             // 0x008C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EProxyNormalComputationMethod>> _offNormalCalculationMethod                                    = new ExternalOffset<TEnumAsByte<EProxyNormalComputationMethod>>(0x0090, false); // 0x0090(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ELandscapeCullingPrecision>> _offLandscapeCullingPrecision                                  = new ExternalOffset<TEnumAsByte<ELandscapeCullingPrecision>>(0x0091, false); // 0x0091(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCalculateCorrectLODModel                                  = new ExternalOffset<char>(0x0092, false);                     // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideVoxelSize                                         = new ExternalOffset<char>(0x0092, false);                     // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideTransferDistance                                  = new ExternalOffset<char>(0x0092, false);                     // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseHardAngleThreshold                                     = new ExternalOffset<char>(0x0092, false);                     // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbComputeLightMapResolution                                 = new ExternalOffset<char>(0x0092, false);                     // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRecalculateNormals                                        = new ExternalOffset<char>(0x0092, false);                     // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseLandscapeCulling                                       = new ExternalOffset<char>(0x0092, false);                     // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAllowAdjacency                                            = new ExternalOffset<char>(0x0092, false);                     // 0x0092(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAllowDistanceField                                        = new ExternalOffset<char>(0x0093, false);                     // 0x0093(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbReuseMeshLightmapUVs                                      = new ExternalOffset<char>(0x0093, false);                     // 0x0093(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCreateCollision                                           = new ExternalOffset<char>(0x0093, false);                     // 0x0093(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAllowVertexColors                                         = new ExternalOffset<char>(0x0093, false);                     // 0x0093(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGenerateLightmapUVs                                       = new ExternalOffset<char>(0x0093, false);                     // 0x0093(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 ScreenSize                                                     => _offScreenSize.GetValue();
	public float                                               VoxelSize                                                      => _offVoxelSize.GetValue();
	public FMaterialProxySettings                              MaterialSettings                                               => _offMaterialSettings.GetValue();
	public float                                               MergeDistance                                                  => _offMergeDistance.GetValue();
	public FColor                                              UnresolvedGeometryColor                                        => _offUnresolvedGeometryColor.GetValue();
	public float                                               MaxRayCastDist                                                 => _offMaxRayCastDist.GetValue();
	public float                                               HardAngleThreshold                                             => _offHardAngleThreshold.GetValue();
	public int                                                 LightMapResolution                                             => _offLightMapResolution.GetValue();
	public TEnumAsByte<EProxyNormalComputationMethod>          NormalCalculationMethod                                        => _offNormalCalculationMethod.GetValue();
	public TEnumAsByte<ELandscapeCullingPrecision>             LandscapeCullingPrecision                                      => _offLandscapeCullingPrecision.GetValue();
	#endregion

	public FMeshProxySettings(int c_ScreenSize, float c_VoxelSize, FMaterialProxySettings c_MaterialSettings, float c_MergeDistance, FColor c_UnresolvedGeometryColor, float c_MaxRayCastDist, float c_HardAngleThreshold, int c_LightMapResolution, TEnumAsByte<EProxyNormalComputationMethod> c_NormalCalculationMethod, TEnumAsByte<ELandscapeCullingPrecision> c_LandscapeCullingPrecision) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offScreenSize.SetValue(c_ScreenSize);
		_offVoxelSize.SetValue(c_VoxelSize);
		_offMaterialSettings.SetValue(c_MaterialSettings);
		_offMergeDistance.SetValue(c_MergeDistance);
		_offUnresolvedGeometryColor.SetValue(c_UnresolvedGeometryColor);
		_offMaxRayCastDist.SetValue(c_MaxRayCastDist);
		_offHardAngleThreshold.SetValue(c_HardAngleThreshold);
		_offLightMapResolution.SetValue(c_LightMapResolution);
		_offNormalCalculationMethod.SetValue(c_NormalCalculationMethod);
		_offLandscapeCullingPrecision.SetValue(c_LandscapeCullingPrecision);
	}
}
// ScriptStruct Engine.AnimNotifyEvent
// 0x0088 (0x00B8 - 0x0030)
public class FAnimNotifyEvent : FAnimLinkableElement
{
	#region Offsets
	private ExternalOffset<float>                              _offDisplayTime                                                = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTriggerTimeOffset                                          = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offEndTriggerTimeOffset                                       = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTriggerWeightThreshold                                     = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNotifyName                                                 = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimNotify>                        _offNotify                                                     = new ExternalOffset<UAnimNotify>(0x0048, true);               // 0x0048(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimNotifyState>                   _offNotifyStateClass                                           = new ExternalOffset<UAnimNotifyState>(0x0050, true);          // 0x0050(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDuration                                                   = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FAnimLinkableElement>               _offEndLink                                                    = new ExternalOffset<FAnimLinkableElement>(0x0060, false);     // 0x0060(0x0030) (NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbConvertedFromBranchingPoint                               = new ExternalOffset<byte/*(bool)*/>(0x0090);                  // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMontageNotifyTickType>> _offMontageTickType                                            = new ExternalOffset<TEnumAsByte<EMontageNotifyTickType>>(0x0091, false); // 0x0091(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNotifyTriggerChance                                        = new ExternalOffset<float>(0x0094);                           // 0x0094(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ENotifyFilterType>>     _offNotifyFilterType                                           = new ExternalOffset<TEnumAsByte<ENotifyFilterType>>(0x0098, false); // 0x0098(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNotifyFilterLOD                                            = new ExternalOffset<int>(0x009C);                             // 0x009C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbTriggerOnDedicatedServer                                  = new ExternalOffset<byte/*(bool)*/>(0x00A0);                  // 0x00A0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbTriggerOnFollower                                         = new ExternalOffset<byte/*(bool)*/>(0x00A1);                  // 0x00A1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTrackIndex                                                 = new ExternalOffset<int>(0x00A4);                             // 0x00A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               DisplayTime                                                    => _offDisplayTime.GetValue();
	public float                                               TriggerTimeOffset                                              => _offTriggerTimeOffset.GetValue();
	public float                                               EndTriggerTimeOffset                                           => _offEndTriggerTimeOffset.GetValue();
	public float                                               TriggerWeightThreshold                                         => _offTriggerWeightThreshold.GetValue();
	public FName                                               NotifyName                                                     => _offNotifyName.GetValue();
	public UAnimNotify                                         Notify                                                         => _offNotify.GetValue();
	public UAnimNotifyState                                    NotifyStateClass                                               => _offNotifyStateClass.GetValue();
	public float                                               Duration                                                       => _offDuration.GetValue();
	public FAnimLinkableElement                                EndLink                                                        => _offEndLink.GetValue();
	public byte/*(bool)*/                                      bConvertedFromBranchingPoint                                   => _offbConvertedFromBranchingPoint.GetValue();
	public TEnumAsByte<EMontageNotifyTickType>                 MontageTickType                                                => _offMontageTickType.GetValue();
	public float                                               NotifyTriggerChance                                            => _offNotifyTriggerChance.GetValue();
	public TEnumAsByte<ENotifyFilterType>                      NotifyFilterType                                               => _offNotifyFilterType.GetValue();
	public int                                                 NotifyFilterLOD                                                => _offNotifyFilterLOD.GetValue();
	public byte/*(bool)*/                                      bTriggerOnDedicatedServer                                      => _offbTriggerOnDedicatedServer.GetValue();
	public byte/*(bool)*/                                      bTriggerOnFollower                                             => _offbTriggerOnFollower.GetValue();
	public int                                                 TrackIndex                                                     => _offTrackIndex.GetValue();
	#endregion

	public FAnimNotifyEvent(float c_DisplayTime, float c_TriggerTimeOffset, float c_EndTriggerTimeOffset, float c_TriggerWeightThreshold, FName c_NotifyName, UAnimNotify c_Notify, UAnimNotifyState c_NotifyStateClass, float c_Duration, FAnimLinkableElement c_EndLink, byte/*(bool)*/ c_bConvertedFromBranchingPoint, TEnumAsByte<EMontageNotifyTickType> c_MontageTickType, float c_NotifyTriggerChance, TEnumAsByte<ENotifyFilterType> c_NotifyFilterType, int c_NotifyFilterLOD, byte/*(bool)*/ c_bTriggerOnDedicatedServer, byte/*(bool)*/ c_bTriggerOnFollower, int c_TrackIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisplayTime.SetValue(c_DisplayTime);
		_offTriggerTimeOffset.SetValue(c_TriggerTimeOffset);
		_offEndTriggerTimeOffset.SetValue(c_EndTriggerTimeOffset);
		_offTriggerWeightThreshold.SetValue(c_TriggerWeightThreshold);
		_offNotifyName.SetValue(c_NotifyName);
		_offNotify.SetValue(c_Notify);
		_offNotifyStateClass.SetValue(c_NotifyStateClass);
		_offDuration.SetValue(c_Duration);
		_offEndLink.SetValue(c_EndLink);
		_offbConvertedFromBranchingPoint.SetValue(c_bConvertedFromBranchingPoint);
		_offMontageTickType.SetValue(c_MontageTickType);
		_offNotifyTriggerChance.SetValue(c_NotifyTriggerChance);
		_offNotifyFilterType.SetValue(c_NotifyFilterType);
		_offNotifyFilterLOD.SetValue(c_NotifyFilterLOD);
		_offbTriggerOnDedicatedServer.SetValue(c_bTriggerOnDedicatedServer);
		_offbTriggerOnFollower.SetValue(c_bTriggerOnFollower);
		_offTrackIndex.SetValue(c_TrackIndex);
	}
}
// ScriptStruct Engine.AlphaBlend
// 0x0030
public class FAlphaBlend : ExternalClass
{
	#region Offsets
	private ExternalOffset<UCurveFloat>                        _offCustomCurve                                                = new ExternalOffset<UCurveFloat>(0x0000, true);               // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offBlendTime                                                  = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<EAlphaBlendOption>                  _offBlendOption                                                = new ExternalOffset<EAlphaBlendOption>(0x0024, false);        // 0x0024(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UCurveFloat                                         CustomCurve                                                    => _offCustomCurve.GetValue();
	public float                                               BlendTime                                                      => _offBlendTime.GetValue();
	public EAlphaBlendOption                                   BlendOption                                                    => _offBlendOption.GetValue();
	#endregion

	public FAlphaBlend(UCurveFloat c_CustomCurve, float c_BlendTime, EAlphaBlendOption c_BlendOption) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCustomCurve.SetValue(c_CustomCurve);
		_offBlendTime.SetValue(c_BlendTime);
		_offBlendOption.SetValue(c_BlendOption);
	}
}
// ScriptStruct Engine.AnimMontageInstance
// 0x01A8
public class FAnimMontageInstance : ExternalClass
{
	#region Offsets
	private ExternalOffset<UAnimMontage>                       _offMontage                                                    = new ExternalOffset<UAnimMontage>(0x0000, true);              // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbPlaying                                                   = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDefaultBlendTimeMultiplier                                 = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offNextSections                                               = new ExternalOffset<TArray<int>>(0x00E8, false);              // 0x00E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<int>>                        _offPrevSections                                               = new ExternalOffset<TArray<int>>(0x00F8, false);              // 0x00F8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FAnimNotifyEvent>>           _offActiveStateBranchingPoints                                 = new ExternalOffset<TArray<FAnimNotifyEvent>>(0x0118, false); // 0x0118(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offPosition                                                   = new ExternalOffset<float>(0x0128);                           // 0x0128(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offPlayRate                                                   = new ExternalOffset<float>(0x012C);                           // 0x012C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FAlphaBlend>                        _offBlend                                                      = new ExternalOffset<FAlphaBlend>(0x0130, false);              // 0x0130(0x0030) (Transient, NoDestructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                                _offDisableRootMotionCount                                     = new ExternalOffset<int>(0x0180);                             // 0x0180(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UAnimMontage                                        Montage                                                        => _offMontage.GetValue();
	public byte/*(bool)*/                                      bPlaying                                                       => _offbPlaying.GetValue();
	public float                                               DefaultBlendTimeMultiplier                                     => _offDefaultBlendTimeMultiplier.GetValue();
	public TArray<int>                                         NextSections                                                   => _offNextSections.GetValue();
	public TArray<int>                                         PrevSections                                                   => _offPrevSections.GetValue();
	public TArray<FAnimNotifyEvent>                            ActiveStateBranchingPoints                                     => _offActiveStateBranchingPoints.GetValue();
	public float                                               Position                                                       => _offPosition.GetValue();
	public float                                               PlayRate                                                       => _offPlayRate.GetValue();
	public FAlphaBlend                                         Blend                                                          => _offBlend.GetValue();
	public int                                                 DisableRootMotionCount                                         => _offDisableRootMotionCount.GetValue();
	#endregion

	public FAnimMontageInstance(UAnimMontage c_Montage, byte/*(bool)*/ c_bPlaying, float c_DefaultBlendTimeMultiplier, TArray<int> c_NextSections, TArray<int> c_PrevSections, TArray<FAnimNotifyEvent> c_ActiveStateBranchingPoints, float c_Position, float c_PlayRate, FAlphaBlend c_Blend, int c_DisableRootMotionCount) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMontage.SetValue(c_Montage);
		_offbPlaying.SetValue(c_bPlaying);
		_offDefaultBlendTimeMultiplier.SetValue(c_DefaultBlendTimeMultiplier);
		_offNextSections.SetValue(c_NextSections);
		_offPrevSections.SetValue(c_PrevSections);
		_offActiveStateBranchingPoints.SetValue(c_ActiveStateBranchingPoints);
		_offPosition.SetValue(c_Position);
		_offPlayRate.SetValue(c_PlayRate);
		_offBlend.SetValue(c_Blend);
		_offDisableRootMotionCount.SetValue(c_DisableRootMotionCount);
	}
}
// ScriptStruct Engine.MeshMergingSettings
// 0x008C
public class FMeshMergingSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offTargetLightMapResolution                                   = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<EUVOutput>                          _offOutputUVs[0x8]                                             = new ExternalOffset<EUVOutput>(0x0004, false);                // 0x0004(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialProxySettings>             _offMaterialSettings                                           = new ExternalOffset<FMaterialProxySettings>(0x000C, false);   // 0x000C(0x0074) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offGutterSize                                                 = new ExternalOffset<int>(0x0080);                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSpecificLOD                                                = new ExternalOffset<int>(0x0084);                             // 0x0084(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EMeshLODSelectionType>              _offLODSelectionType                                           = new ExternalOffset<EMeshLODSelectionType>(0x0088, false);    // 0x0088(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGenerateLightMapUV                                        = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbComputedLightMapResolution                                = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbPivotPointAtZero                                          = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbMergePhysicsData                                          = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbMergeMaterials                                            = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbBakeVertexDataToMesh                                      = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseVertexDataForBakingMaterial                            = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseTextureBinning                                         = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbReuseMeshLightmapUVs                                      = new ExternalOffset<char>(0x008A, false);                     // 0x008A(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbMergeEquivalentMaterials                                  = new ExternalOffset<char>(0x008A, false);                     // 0x008A(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseLandscapeCulling                                       = new ExternalOffset<char>(0x008A, false);                     // 0x008A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIncludeImposters                                          = new ExternalOffset<char>(0x008A, false);                     // 0x008A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAllowDistanceField                                        = new ExternalOffset<char>(0x008A, false);                     // 0x008A(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 TargetLightMapResolution                                       => _offTargetLightMapResolution.GetValue();
	public FMaterialProxySettings                              MaterialSettings                                               => _offMaterialSettings.GetValue();
	public int                                                 GutterSize                                                     => _offGutterSize.GetValue();
	public int                                                 SpecificLOD                                                    => _offSpecificLOD.GetValue();
	public EMeshLODSelectionType                               LODSelectionType                                               => _offLODSelectionType.GetValue();
	#endregion

	public FMeshMergingSettings(int c_TargetLightMapResolution, FMaterialProxySettings c_MaterialSettings, int c_GutterSize, int c_SpecificLOD, EMeshLODSelectionType c_LODSelectionType) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTargetLightMapResolution.SetValue(c_TargetLightMapResolution);
		_offMaterialSettings.SetValue(c_MaterialSettings);
		_offGutterSize.SetValue(c_GutterSize);
		_offSpecificLOD.SetValue(c_SpecificLOD);
		_offLODSelectionType.SetValue(c_LODSelectionType);
	}
}
// ScriptStruct Engine.BranchingPointMarker
// 0x000C
public class FBranchingPointMarker : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offNotifyIndex                                                = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTriggerTime                                                = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAnimNotifyEventType>>  _offNotifyEventType                                            = new ExternalOffset<TEnumAsByte<EAnimNotifyEventType>>(0x0008, false); // 0x0008(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 NotifyIndex                                                    => _offNotifyIndex.GetValue();
	public float                                               TriggerTime                                                    => _offTriggerTime.GetValue();
	public TEnumAsByte<EAnimNotifyEventType>                   NotifyEventType                                                => _offNotifyEventType.GetValue();
	#endregion

	public FBranchingPointMarker(int c_NotifyIndex, float c_TriggerTime, TEnumAsByte<EAnimNotifyEventType> c_NotifyEventType) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNotifyIndex.SetValue(c_NotifyIndex);
		_offTriggerTime.SetValue(c_TriggerTime);
		_offNotifyEventType.SetValue(c_NotifyEventType);
	}
}
// ScriptStruct Engine.BranchingPoint
// 0x0010 (0x0040 - 0x0030)
public class FBranchingPoint : FAnimLinkableElement
{
	#region Offsets
	private ExternalOffset<FName>                              _offEventName                                                  = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDisplayTime                                                = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTriggerTimeOffset                                          = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               EventName                                                      => _offEventName.GetValue();
	public float                                               DisplayTime                                                    => _offDisplayTime.GetValue();
	public float                                               TriggerTimeOffset                                              => _offTriggerTimeOffset.GetValue();
	#endregion

	public FBranchingPoint(FName c_EventName, float c_DisplayTime, float c_TriggerTimeOffset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEventName.SetValue(c_EventName);
		_offDisplayTime.SetValue(c_DisplayTime);
		_offTriggerTimeOffset.SetValue(c_TriggerTimeOffset);
	}
}
// ScriptStruct Engine.SlotAnimationTrack
// 0x0018
public class FSlotAnimationTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offSlotName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FAnimTrack>                         _offAnimTrack                                                  = new ExternalOffset<FAnimTrack>(0x0008, false);               // 0x0008(0x0010) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               SlotName                                                       => _offSlotName.GetValue();
	public FAnimTrack                                          AnimTrack                                                      => _offAnimTrack.GetValue();
	#endregion

	public FSlotAnimationTrack(FName c_SlotName, FAnimTrack c_AnimTrack) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSlotName.SetValue(c_SlotName);
		_offAnimTrack.SetValue(c_AnimTrack);
	}
}
// ScriptStruct Engine.HierarchicalSimplification
// 0x0138
public class FHierarchicalSimplification : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTransitionScreenSize                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOverrideDrawDistance                                       = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseOverrideDrawDistance                                   = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAllowSpecificExclusion                                    = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSimplifyMesh                                              = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOnlyGenerateClustersForVolumes                            = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbReusePreviousLevelClusters                                = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMeshProxySettings>                 _offProxySetting                                               = new ExternalOffset<FMeshProxySettings>(0x000C, false);       // 0x000C(0x0094) (Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<FMeshMergingSettings>               _offMergeSetting                                               = new ExternalOffset<FMeshMergingSettings>(0x00A0, false);     // 0x00A0(0x008C) (Edit, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDesiredBoundRadius                                         = new ExternalOffset<float>(0x012C);                           // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDesiredFillingPercentage                                   = new ExternalOffset<float>(0x0130);                           // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMinNumberOfActorsToBuild                                   = new ExternalOffset<int>(0x0134);                             // 0x0134(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               TransitionScreenSize                                           => _offTransitionScreenSize.GetValue();
	public float                                               OverrideDrawDistance                                           => _offOverrideDrawDistance.GetValue();
	public FMeshProxySettings                                  ProxySetting                                                   => _offProxySetting.GetValue();
	public FMeshMergingSettings                                MergeSetting                                                   => _offMergeSetting.GetValue();
	public float                                               DesiredBoundRadius                                             => _offDesiredBoundRadius.GetValue();
	public float                                               DesiredFillingPercentage                                       => _offDesiredFillingPercentage.GetValue();
	public int                                                 MinNumberOfActorsToBuild                                       => _offMinNumberOfActorsToBuild.GetValue();
	#endregion

	public FHierarchicalSimplification(float c_TransitionScreenSize, float c_OverrideDrawDistance, FMeshProxySettings c_ProxySetting, FMeshMergingSettings c_MergeSetting, float c_DesiredBoundRadius, float c_DesiredFillingPercentage, int c_MinNumberOfActorsToBuild) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTransitionScreenSize.SetValue(c_TransitionScreenSize);
		_offOverrideDrawDistance.SetValue(c_OverrideDrawDistance);
		_offProxySetting.SetValue(c_ProxySetting);
		_offMergeSetting.SetValue(c_MergeSetting);
		_offDesiredBoundRadius.SetValue(c_DesiredBoundRadius);
		_offDesiredFillingPercentage.SetValue(c_DesiredFillingPercentage);
		_offMinNumberOfActorsToBuild.SetValue(c_MinNumberOfActorsToBuild);
	}
}
// ScriptStruct Engine.CompositeSection
// 0x0028 (0x0058 - 0x0030)
public class FCompositeSection : FAnimLinkableElement
{
	#region Offsets
	private ExternalOffset<FName>                              _offSectionName                                                = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStartTime                                                  = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNextSectionName                                            = new ExternalOffset<FName>(0x003C, false);                    // 0x003C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UAnimMetaData>>              _offMetaData                                                   = new ExternalOffset<TArray<UAnimMetaData>>(0x0048, false);    // 0x0048(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               SectionName                                                    => _offSectionName.GetValue();
	public float                                               StartTime                                                      => _offStartTime.GetValue();
	public FName                                               NextSectionName                                                => _offNextSectionName.GetValue();
	public TArray<UAnimMetaData>                               MetaData                                                       => _offMetaData.GetValue();
	#endregion

	public FCompositeSection(FName c_SectionName, float c_StartTime, FName c_NextSectionName, TArray<UAnimMetaData> c_MetaData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSectionName.SetValue(c_SectionName);
		_offStartTime.SetValue(c_StartTime);
		_offNextSectionName.SetValue(c_NextSectionName);
		_offMetaData.SetValue(c_MetaData);
	}
}
// ScriptStruct Engine.AnimNode_Base
// 0x0010
public class FAnimNode_Base : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAnimNode_Base() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.NetViewer
// 0x0030
public class FNetViewer : ExternalClass
{
	#region Offsets
	private ExternalOffset<UNetConnection>                     _offConnection                                                 = new ExternalOffset<UNetConnection>(0x0000, true);            // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                             _offInViewer                                                   = new ExternalOffset<AActor>(0x0008, true);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                             _offViewTarget                                                 = new ExternalOffset<AActor>(0x0010, true);                    // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offViewLocation                                               = new ExternalOffset<FVector>(0x0018, false);                  // 0x0018(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offViewDir                                                    = new ExternalOffset<FVector>(0x0024, false);                  // 0x0024(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UNetConnection                                      Connection                                                     => _offConnection.GetValue();
	public AActor                                              InViewer                                                       => _offInViewer.GetValue();
	public AActor                                              ViewTarget                                                     => _offViewTarget.GetValue();
	public FVector                                             ViewLocation                                                   => _offViewLocation.GetValue();
	public FVector                                             ViewDir                                                        => _offViewDir.GetValue();
	#endregion

	public FNetViewer(UNetConnection c_Connection, AActor c_InViewer, AActor c_ViewTarget, FVector c_ViewLocation, FVector c_ViewDir) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConnection.SetValue(c_Connection);
		_offInViewer.SetValue(c_InViewer);
		_offViewTarget.SetValue(c_ViewTarget);
		_offViewLocation.SetValue(c_ViewLocation);
		_offViewDir.SetValue(c_ViewDir);
	}
}
// ScriptStruct Engine.PoseLinkBase
// 0x0010
public class FPoseLinkBase : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offLinkID                                                     = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 LinkID                                                         => _offLinkID.GetValue();
	#endregion

	public FPoseLinkBase(int c_LinkID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLinkID.SetValue(c_LinkID);
	}
}
// ScriptStruct Engine.PoseLink
// 0x0000 (0x0010 - 0x0010)
public class FPoseLink : FPoseLinkBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FPoseLink() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.InputScaleBias
// 0x0008
public class FInputScaleBias : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offScale                                                      = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBias                                                       = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Scale                                                          => _offScale.GetValue();
	public float                                               Bias                                                           => _offBias.GetValue();
	#endregion

	public FInputScaleBias(float c_Scale, float c_Bias) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offScale.SetValue(c_Scale);
		_offBias.SetValue(c_Bias);
	}
}
// ScriptStruct Engine.AnimNode_ApplyMeshSpaceAdditive
// 0x0038 (0x0048 - 0x0010)
public class FAnimNode_ApplyMeshSpaceAdditive : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<FPoseLink>                          _offBase                                                       = new ExternalOffset<FPoseLink>(0x0010, false);                // 0x0010(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FPoseLink>                          _offAdditive                                                   = new ExternalOffset<FPoseLink>(0x0020, false);                // 0x0020(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAlpha                                                      = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInputScaleBias>                    _offAlphaScaleBias                                             = new ExternalOffset<FInputScaleBias>(0x0034, false);          // 0x0034(0x0008) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLODThreshold                                               = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPoseLink                                           Base                                                           => _offBase.GetValue();
	public FPoseLink                                           Additive                                                       => _offAdditive.GetValue();
	public float                                               Alpha                                                          => _offAlpha.GetValue();
	public FInputScaleBias                                     AlphaScaleBias                                                 => _offAlphaScaleBias.GetValue();
	public int                                                 LODThreshold                                                   => _offLODThreshold.GetValue();
	#endregion

	public FAnimNode_ApplyMeshSpaceAdditive(FPoseLink c_Base, FPoseLink c_Additive, float c_Alpha, FInputScaleBias c_AlphaScaleBias, int c_LODThreshold) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBase.SetValue(c_Base);
		_offAdditive.SetValue(c_Additive);
		_offAlpha.SetValue(c_Alpha);
		_offAlphaScaleBias.SetValue(c_AlphaScaleBias);
		_offLODThreshold.SetValue(c_LODThreshold);
	}
}
// ScriptStruct Engine.AnimNode_CustomProperty
// 0x0048 (0x0058 - 0x0010)
public class FAnimNode_CustomProperty : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<TArray<FName>>                      _offSourcePropertyNames                                        = new ExternalOffset<TArray<FName>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FName>>                      _offDestPropertyNames                                          = new ExternalOffset<TArray<FName>>(0x0020, false);            // 0x0020(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<UObject>                            _offTargetInstance                                             = new ExternalOffset<UObject>(0x0030, true);                   // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UProperty>>                  _offSourceProperties                                           = new ExternalOffset<TArray<UProperty>>(0x0038, false);        // 0x0038(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UProperty>>                  _offDestProperties                                             = new ExternalOffset<TArray<UProperty>>(0x0048, false);        // 0x0048(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<FName>                                       SourcePropertyNames                                            => _offSourcePropertyNames.GetValue();
	public TArray<FName>                                       DestPropertyNames                                              => _offDestPropertyNames.GetValue();
	public UObject                                             TargetInstance                                                 => _offTargetInstance.GetValue();
	public TArray<UProperty>                                   SourceProperties                                               => _offSourceProperties.GetValue();
	public TArray<UProperty>                                   DestProperties                                                 => _offDestProperties.GetValue();
	#endregion

	public FAnimNode_CustomProperty(TArray<FName> c_SourcePropertyNames, TArray<FName> c_DestPropertyNames, UObject c_TargetInstance, TArray<UProperty> c_SourceProperties, TArray<UProperty> c_DestProperties) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourcePropertyNames.SetValue(c_SourcePropertyNames);
		_offDestPropertyNames.SetValue(c_DestPropertyNames);
		_offTargetInstance.SetValue(c_TargetInstance);
		_offSourceProperties.SetValue(c_SourceProperties);
		_offDestProperties.SetValue(c_DestProperties);
	}
}
// ScriptStruct Engine.LightmassWorldInfoSettings
// 0x004C
public class FLightmassWorldInfoSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offStaticLightingLevelScale                                   = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNumIndirectLightingBounces                                 = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNumSkyLightingBounces                                      = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offIndirectLightingQuality                                    = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offIndirectLightingSmoothness                                 = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offEnvironmentColor                                           = new ExternalOffset<FColor>(0x0014, false);                   // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offEnvironmentIntensity                                       = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offEmissiveBoost                                              = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDiffuseBoost                                               = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EVolumeLightingMethod>> _offVolumeLightingMethod                                       = new ExternalOffset<TEnumAsByte<EVolumeLightingMethod>>(0x0024, false); // 0x0024(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseAmbientOcclusion                                       = new ExternalOffset<char>(0x0025, false);                     // 0x0025(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGenerateAmbientOcclusionMaterialMask                      = new ExternalOffset<char>(0x0025, false);                     // 0x0025(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbVisualizeMaterialDiffuse                                  = new ExternalOffset<char>(0x0025, false);                     // 0x0025(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbVisualizeAmbientOcclusion                                 = new ExternalOffset<char>(0x0025, false);                     // 0x0025(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCompressLightmaps                                         = new ExternalOffset<char>(0x0025, false);                     // 0x0025(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolumetricLightmapDetailCellSize                           = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolumetricLightmapMaximumBrickMemoryMb                     = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolumetricLightmapSphericalHarmonicSmoothing               = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolumeLightSamplePlacementScale                            = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDirectIlluminationOcclusionFraction                        = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offIndirectIlluminationOcclusionFraction                      = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOcclusionExponent                                          = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFullyOccludedSamplesFraction                               = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxOcclusionDistance                                       = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               StaticLightingLevelScale                                       => _offStaticLightingLevelScale.GetValue();
	public int                                                 NumIndirectLightingBounces                                     => _offNumIndirectLightingBounces.GetValue();
	public int                                                 NumSkyLightingBounces                                          => _offNumSkyLightingBounces.GetValue();
	public float                                               IndirectLightingQuality                                        => _offIndirectLightingQuality.GetValue();
	public float                                               IndirectLightingSmoothness                                     => _offIndirectLightingSmoothness.GetValue();
	public FColor                                              EnvironmentColor                                               => _offEnvironmentColor.GetValue();
	public float                                               EnvironmentIntensity                                           => _offEnvironmentIntensity.GetValue();
	public float                                               EmissiveBoost                                                  => _offEmissiveBoost.GetValue();
	public float                                               DiffuseBoost                                                   => _offDiffuseBoost.GetValue();
	public TEnumAsByte<EVolumeLightingMethod>                  VolumeLightingMethod                                           => _offVolumeLightingMethod.GetValue();
	public float                                               VolumetricLightmapDetailCellSize                               => _offVolumetricLightmapDetailCellSize.GetValue();
	public float                                               VolumetricLightmapMaximumBrickMemoryMb                         => _offVolumetricLightmapMaximumBrickMemoryMb.GetValue();
	public float                                               VolumetricLightmapSphericalHarmonicSmoothing                   => _offVolumetricLightmapSphericalHarmonicSmoothing.GetValue();
	public float                                               VolumeLightSamplePlacementScale                                => _offVolumeLightSamplePlacementScale.GetValue();
	public float                                               DirectIlluminationOcclusionFraction                            => _offDirectIlluminationOcclusionFraction.GetValue();
	public float                                               IndirectIlluminationOcclusionFraction                          => _offIndirectIlluminationOcclusionFraction.GetValue();
	public float                                               OcclusionExponent                                              => _offOcclusionExponent.GetValue();
	public float                                               FullyOccludedSamplesFraction                                   => _offFullyOccludedSamplesFraction.GetValue();
	public float                                               MaxOcclusionDistance                                           => _offMaxOcclusionDistance.GetValue();
	#endregion

	public FLightmassWorldInfoSettings(float c_StaticLightingLevelScale, int c_NumIndirectLightingBounces, int c_NumSkyLightingBounces, float c_IndirectLightingQuality, float c_IndirectLightingSmoothness, FColor c_EnvironmentColor, float c_EnvironmentIntensity, float c_EmissiveBoost, float c_DiffuseBoost, TEnumAsByte<EVolumeLightingMethod> c_VolumeLightingMethod, float c_VolumetricLightmapDetailCellSize, float c_VolumetricLightmapMaximumBrickMemoryMb, float c_VolumetricLightmapSphericalHarmonicSmoothing, float c_VolumeLightSamplePlacementScale, float c_DirectIlluminationOcclusionFraction, float c_IndirectIlluminationOcclusionFraction, float c_OcclusionExponent, float c_FullyOccludedSamplesFraction, float c_MaxOcclusionDistance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStaticLightingLevelScale.SetValue(c_StaticLightingLevelScale);
		_offNumIndirectLightingBounces.SetValue(c_NumIndirectLightingBounces);
		_offNumSkyLightingBounces.SetValue(c_NumSkyLightingBounces);
		_offIndirectLightingQuality.SetValue(c_IndirectLightingQuality);
		_offIndirectLightingSmoothness.SetValue(c_IndirectLightingSmoothness);
		_offEnvironmentColor.SetValue(c_EnvironmentColor);
		_offEnvironmentIntensity.SetValue(c_EnvironmentIntensity);
		_offEmissiveBoost.SetValue(c_EmissiveBoost);
		_offDiffuseBoost.SetValue(c_DiffuseBoost);
		_offVolumeLightingMethod.SetValue(c_VolumeLightingMethod);
		_offVolumetricLightmapDetailCellSize.SetValue(c_VolumetricLightmapDetailCellSize);
		_offVolumetricLightmapMaximumBrickMemoryMb.SetValue(c_VolumetricLightmapMaximumBrickMemoryMb);
		_offVolumetricLightmapSphericalHarmonicSmoothing.SetValue(c_VolumetricLightmapSphericalHarmonicSmoothing);
		_offVolumeLightSamplePlacementScale.SetValue(c_VolumeLightSamplePlacementScale);
		_offDirectIlluminationOcclusionFraction.SetValue(c_DirectIlluminationOcclusionFraction);
		_offIndirectIlluminationOcclusionFraction.SetValue(c_IndirectIlluminationOcclusionFraction);
		_offOcclusionExponent.SetValue(c_OcclusionExponent);
		_offFullyOccludedSamplesFraction.SetValue(c_FullyOccludedSamplesFraction);
		_offMaxOcclusionDistance.SetValue(c_MaxOcclusionDistance);
	}
}
// ScriptStruct Engine.AnimNode_SubInstance
// 0x0038 (0x0090 - 0x0058)
public class FAnimNode_SubInstance : FAnimNode_CustomProperty
{
	#region Offsets
	private ExternalOffset<TArray<FPoseLink>>                  _offInputPoses                                                 = new ExternalOffset<TArray<FPoseLink>>(0x0058, false);        // 0x0058(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offInputPoseNames                                             = new ExternalOffset<TArray<FName>>(0x0068, false);            // 0x0068(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                             _offInstanceClass                                              = new ExternalOffset<UClass>(0x0078, true);                    // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offTag                                                        = new ExternalOffset<FName>(0x0080, false);                    // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FPoseLink>                                   InputPoses                                                     => _offInputPoses.GetValue();
	public TArray<FName>                                       InputPoseNames                                                 => _offInputPoseNames.GetValue();
	public UClass                                              InstanceClass                                                  => _offInstanceClass.GetValue();
	public FName                                               Tag                                                            => _offTag.GetValue();
	#endregion

	public FAnimNode_SubInstance(TArray<FPoseLink> c_InputPoses, TArray<FName> c_InputPoseNames, UClass c_InstanceClass, FName c_Tag) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInputPoses.SetValue(c_InputPoses);
		_offInputPoseNames.SetValue(c_InputPoseNames);
		_offInstanceClass.SetValue(c_InstanceClass);
		_offTag.SetValue(c_Tag);
	}
}
// ScriptStruct Engine.AnimNode_Layer
// 0x0010 (0x00A0 - 0x0090)
public class FAnimNode_Layer : FAnimNode_SubInstance
{
	#region Offsets
	private ExternalOffset<UClass>                             _offInterface                                                  = new ExternalOffset<UClass>(0x0090, true);                    // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offLayer                                                      = new ExternalOffset<FName>(0x0098, false);                    // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                              Interface                                                      => _offInterface.GetValue();
	public FName                                               Layer                                                          => _offLayer.GetValue();
	#endregion

	public FAnimNode_Layer(UClass c_Interface, FName c_Layer) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInterface.SetValue(c_Interface);
		_offLayer.SetValue(c_Layer);
	}
}
// ScriptStruct Engine.AnimNode_SaveCachedPose
// 0x00A8 (0x00B8 - 0x0010)
public class FAnimNode_SaveCachedPose : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<FPoseLink>                          _offPose                                                       = new ExternalOffset<FPoseLink>(0x0010, false);                // 0x0010(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offCachePoseName                                              = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPoseLink                                           Pose                                                           => _offPose.GetValue();
	public FName                                               CachePoseName                                                  => _offCachePoseName.GetValue();
	#endregion

	public FAnimNode_SaveCachedPose(FPoseLink c_Pose, FName c_CachePoseName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPose.SetValue(c_Pose);
		_offCachePoseName.SetValue(c_CachePoseName);
	}
}
// ScriptStruct Engine.AnimNode_AssetPlayerBase
// 0x0020 (0x0030 - 0x0010)
public class FAnimNode_AssetPlayerBase : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<int>                                _offGroupIndex                                                 = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAnimGroupRole>>        _offGroupRole                                                  = new ExternalOffset<TEnumAsByte<EAnimGroupRole>>(0x0014, false); // 0x0014(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbIgnoreForRelevancyTest                                    = new ExternalOffset<byte/*(bool)*/>(0x0015);                  // 0x0015(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBlendWeight                                                = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                              _offInternalTimeAccumulator                                    = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public int                                                 GroupIndex                                                     => _offGroupIndex.GetValue();
	public TEnumAsByte<EAnimGroupRole>                         GroupRole                                                      => _offGroupRole.GetValue();
	public byte/*(bool)*/                                      bIgnoreForRelevancyTest                                        => _offbIgnoreForRelevancyTest.GetValue();
	public float                                               BlendWeight                                                    => _offBlendWeight.GetValue();
	public float                                               InternalTimeAccumulator                                        => _offInternalTimeAccumulator.GetValue();
	#endregion

	public FAnimNode_AssetPlayerBase(int c_GroupIndex, TEnumAsByte<EAnimGroupRole> c_GroupRole, byte/*(bool)*/ c_bIgnoreForRelevancyTest, float c_BlendWeight, float c_InternalTimeAccumulator) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroupIndex.SetValue(c_GroupIndex);
		_offGroupRole.SetValue(c_GroupRole);
		_offbIgnoreForRelevancyTest.SetValue(c_bIgnoreForRelevancyTest);
		_offBlendWeight.SetValue(c_BlendWeight);
		_offInternalTimeAccumulator.SetValue(c_InternalTimeAccumulator);
	}
}
// ScriptStruct Engine.InputRange
// 0x0008
public class FInputRange : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offMin                                                        = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMax                                                        = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Min                                                            => _offMin.GetValue();
	public float                                               Max                                                            => _offMax.GetValue();
	#endregion

	public FInputRange(float c_Min, float c_Max) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMin.SetValue(c_Min);
		_offMax.SetValue(c_Max);
	}
}
// ScriptStruct Engine.InputScaleBiasClamp
// 0x0030
public class FInputScaleBiasClamp : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbMapRange                                                  = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbClampResult                                               = new ExternalOffset<byte/*(bool)*/>(0x0001);                  // 0x0001(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbInterpResult                                              = new ExternalOffset<byte/*(bool)*/>(0x0002);                  // 0x0002(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInputRange>                        _offInRange                                                    = new ExternalOffset<FInputRange>(0x0004, false);              // 0x0004(0x0008) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FInputRange>                        _offOutRange                                                   = new ExternalOffset<FInputRange>(0x000C, false);              // 0x000C(0x0008) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offScale                                                      = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBias                                                       = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offClampMin                                                   = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offClampMax                                                   = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInterpSpeedIncreasing                                      = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInterpSpeedDecreasing                                      = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bMapRange                                                      => _offbMapRange.GetValue();
	public byte/*(bool)*/                                      bClampResult                                                   => _offbClampResult.GetValue();
	public byte/*(bool)*/                                      bInterpResult                                                  => _offbInterpResult.GetValue();
	public FInputRange                                         InRange                                                        => _offInRange.GetValue();
	public FInputRange                                         OutRange                                                       => _offOutRange.GetValue();
	public float                                               Scale                                                          => _offScale.GetValue();
	public float                                               Bias                                                           => _offBias.GetValue();
	public float                                               ClampMin                                                       => _offClampMin.GetValue();
	public float                                               ClampMax                                                       => _offClampMax.GetValue();
	public float                                               InterpSpeedIncreasing                                          => _offInterpSpeedIncreasing.GetValue();
	public float                                               InterpSpeedDecreasing                                          => _offInterpSpeedDecreasing.GetValue();
	#endregion

	public FInputScaleBiasClamp(byte/*(bool)*/ c_bMapRange, byte/*(bool)*/ c_bClampResult, byte/*(bool)*/ c_bInterpResult, FInputRange c_InRange, FInputRange c_OutRange, float c_Scale, float c_Bias, float c_ClampMin, float c_ClampMax, float c_InterpSpeedIncreasing, float c_InterpSpeedDecreasing) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbMapRange.SetValue(c_bMapRange);
		_offbClampResult.SetValue(c_bClampResult);
		_offbInterpResult.SetValue(c_bInterpResult);
		_offInRange.SetValue(c_InRange);
		_offOutRange.SetValue(c_OutRange);
		_offScale.SetValue(c_Scale);
		_offBias.SetValue(c_Bias);
		_offClampMin.SetValue(c_ClampMin);
		_offClampMax.SetValue(c_ClampMax);
		_offInterpSpeedIncreasing.SetValue(c_InterpSpeedIncreasing);
		_offInterpSpeedDecreasing.SetValue(c_InterpSpeedDecreasing);
	}
}
// ScriptStruct Engine.AnimNode_SequencePlayer
// 0x0048 (0x0078 - 0x0030)
public class FAnimNode_SequencePlayer : FAnimNode_AssetPlayerBase
{
	#region Offsets
	private ExternalOffset<UAnimSequenceBase>                  _offSequence                                                   = new ExternalOffset<UAnimSequenceBase>(0x0030, true);         // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPlayRateBasis                                              = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPlayRate                                                   = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInputScaleBiasClamp>               _offPlayRateScaleBiasClamp                                     = new ExternalOffset<FInputScaleBiasClamp>(0x0040, false);     // 0x0040(0x0030) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStartPosition                                              = new ExternalOffset<float>(0x0070);                           // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbLoopAnimation                                             = new ExternalOffset<byte/*(bool)*/>(0x0074);                  // 0x0074(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimSequenceBase                                   Sequence                                                       => _offSequence.GetValue();
	public float                                               PlayRateBasis                                                  => _offPlayRateBasis.GetValue();
	public float                                               PlayRate                                                       => _offPlayRate.GetValue();
	public FInputScaleBiasClamp                                PlayRateScaleBiasClamp                                         => _offPlayRateScaleBiasClamp.GetValue();
	public float                                               StartPosition                                                  => _offStartPosition.GetValue();
	public byte/*(bool)*/                                      bLoopAnimation                                                 => _offbLoopAnimation.GetValue();
	#endregion

	public FAnimNode_SequencePlayer(UAnimSequenceBase c_Sequence, float c_PlayRateBasis, float c_PlayRate, FInputScaleBiasClamp c_PlayRateScaleBiasClamp, float c_StartPosition, byte/*(bool)*/ c_bLoopAnimation) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSequence.SetValue(c_Sequence);
		_offPlayRateBasis.SetValue(c_PlayRateBasis);
		_offPlayRate.SetValue(c_PlayRate);
		_offPlayRateScaleBiasClamp.SetValue(c_PlayRateScaleBiasClamp);
		_offStartPosition.SetValue(c_StartPosition);
		_offbLoopAnimation.SetValue(c_bLoopAnimation);
	}
}
// ScriptStruct Engine.AnimNode_StateMachine
// 0x00A0 (0x00B0 - 0x0010)
public class FAnimNode_StateMachine : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<int>                                _offStateMachineIndexInClass                                   = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxTransitionsPerFrame                                     = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbSkipFirstUpdateTransition                                 = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbReinitializeOnBecomingRelevant                            = new ExternalOffset<byte/*(bool)*/>(0x0019);                  // 0x0019(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 StateMachineIndexInClass                                       => _offStateMachineIndexInClass.GetValue();
	public int                                                 MaxTransitionsPerFrame                                         => _offMaxTransitionsPerFrame.GetValue();
	public byte/*(bool)*/                                      bSkipFirstUpdateTransition                                     => _offbSkipFirstUpdateTransition.GetValue();
	public byte/*(bool)*/                                      bReinitializeOnBecomingRelevant                                => _offbReinitializeOnBecomingRelevant.GetValue();
	#endregion

	public FAnimNode_StateMachine(int c_StateMachineIndexInClass, int c_MaxTransitionsPerFrame, byte/*(bool)*/ c_bSkipFirstUpdateTransition, byte/*(bool)*/ c_bReinitializeOnBecomingRelevant) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStateMachineIndexInClass.SetValue(c_StateMachineIndexInClass);
		_offMaxTransitionsPerFrame.SetValue(c_MaxTransitionsPerFrame);
		_offbSkipFirstUpdateTransition.SetValue(c_bSkipFirstUpdateTransition);
		_offbReinitializeOnBecomingRelevant.SetValue(c_bReinitializeOnBecomingRelevant);
	}
}
// ScriptStruct Engine.AnimationPotentialTransition
// 0x0030
public class FAnimationPotentialTransition : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAnimationPotentialTransition() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.AnimationActiveTransitionEntry
// 0x00C8
public class FAnimationActiveTransitionEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<UBlendProfile>                      _offBlendProfile                                               = new ExternalOffset<UBlendProfile>(0x00B8, true);             // 0x00B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UBlendProfile                                       BlendProfile                                                   => _offBlendProfile.GetValue();
	#endregion

	public FAnimationActiveTransitionEntry(UBlendProfile c_BlendProfile) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBlendProfile.SetValue(c_BlendProfile);
	}
}
// ScriptStruct Engine.AnimNode_SubInput
// 0x0060 (0x0070 - 0x0010)
public class FAnimNode_SubInput : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offGraph                                                      = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPoseLink>                          _offInputPose                                                  = new ExternalOffset<FPoseLink>(0x0020, false);                // 0x0020(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public FName                                               Graph                                                          => _offGraph.GetValue();
	public FPoseLink                                           InputPose                                                      => _offInputPose.GetValue();
	#endregion

	public FAnimNode_SubInput(FName c_Name, FName c_Graph, FPoseLink c_InputPose) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offGraph.SetValue(c_Graph);
		_offInputPose.SetValue(c_InputPose);
	}
}
// ScriptStruct Engine.AnimNode_TransitionPoseEvaluator
// 0x0048 (0x0058 - 0x0010)
public class FAnimNode_TransitionPoseEvaluator : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<int>                                _offFramesToCachePose                                          = new ExternalOffset<int>(0x0048);                             // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EEvaluatorDataSource>>  _offDataSource                                                 = new ExternalOffset<TEnumAsByte<EEvaluatorDataSource>>(0x0050, false); // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EEvaluatorMode>>        _offEvaluatorMode                                              = new ExternalOffset<TEnumAsByte<EEvaluatorMode>>(0x0051, false); // 0x0051(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 FramesToCachePose                                              => _offFramesToCachePose.GetValue();
	public TEnumAsByte<EEvaluatorDataSource>                   DataSource                                                     => _offDataSource.GetValue();
	public TEnumAsByte<EEvaluatorMode>                         EvaluatorMode                                                  => _offEvaluatorMode.GetValue();
	#endregion

	public FAnimNode_TransitionPoseEvaluator(int c_FramesToCachePose, TEnumAsByte<EEvaluatorDataSource> c_DataSource, TEnumAsByte<EEvaluatorMode> c_EvaluatorMode) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFramesToCachePose.SetValue(c_FramesToCachePose);
		_offDataSource.SetValue(c_DataSource);
		_offEvaluatorMode.SetValue(c_EvaluatorMode);
	}
}
// ScriptStruct Engine.AnimNode_TransitionResult
// 0x0018 (0x0028 - 0x0010)
public class FAnimNode_TransitionResult : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbCanEnterTransition                                        = new ExternalOffset<byte/*(bool)*/>(0x0010);                  // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bCanEnterTransition                                            => _offbCanEnterTransition.GetValue();
	#endregion

	public FAnimNode_TransitionResult(byte/*(bool)*/ c_bCanEnterTransition) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbCanEnterTransition.SetValue(c_bCanEnterTransition);
	}
}
// ScriptStruct Engine.AnimNode_UseCachedPose
// 0x0018 (0x0028 - 0x0010)
public class FAnimNode_UseCachedPose : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<FPoseLink>                          _offLinkToCachingNode                                          = new ExternalOffset<FPoseLink>(0x0010, false);                // 0x0010(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offCachePoseName                                              = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPoseLink                                           LinkToCachingNode                                              => _offLinkToCachingNode.GetValue();
	public FName                                               CachePoseName                                                  => _offCachePoseName.GetValue();
	#endregion

	public FAnimNode_UseCachedPose(FPoseLink c_LinkToCachingNode, FName c_CachePoseName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLinkToCachingNode.SetValue(c_LinkToCachingNode);
		_offCachePoseName.SetValue(c_CachePoseName);
	}
}
// ScriptStruct Engine.ExposedValueCopyRecord
// 0x0038
public class FExposedValueCopyRecord : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offSourcePropertyName                                         = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offSourceSubPropertyName                                      = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSourceArrayIndex                                           = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbInstanceIsTarget                                          = new ExternalOffset<byte/*(bool)*/>(0x0014);                  // 0x0014(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EPostCopyOperation>                 _offPostCopyOperation                                          = new ExternalOffset<EPostCopyOperation>(0x0015, false);       // 0x0015(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ECopyType>                          _offCopyType                                                   = new ExternalOffset<ECopyType>(0x0016, false);                // 0x0016(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UProperty>                          _offDestProperty                                               = new ExternalOffset<UProperty>(0x0018, true);                 // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDestArrayIndex                                             = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSize                                                       = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UProperty>                          _offCachedSourceProperty                                       = new ExternalOffset<UProperty>(0x0028, true);                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UProperty>                          _offCachedSourceStructSubProperty                              = new ExternalOffset<UProperty>(0x0030, true);                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               SourcePropertyName                                             => _offSourcePropertyName.GetValue();
	public FName                                               SourceSubPropertyName                                          => _offSourceSubPropertyName.GetValue();
	public int                                                 SourceArrayIndex                                               => _offSourceArrayIndex.GetValue();
	public byte/*(bool)*/                                      bInstanceIsTarget                                              => _offbInstanceIsTarget.GetValue();
	public EPostCopyOperation                                  PostCopyOperation                                              => _offPostCopyOperation.GetValue();
	public ECopyType                                           CopyType                                                       => _offCopyType.GetValue();
	public UProperty                                           DestProperty                                                   => _offDestProperty.GetValue();
	public int                                                 DestArrayIndex                                                 => _offDestArrayIndex.GetValue();
	public int                                                 Size                                                           => _offSize.GetValue();
	public UProperty                                           CachedSourceProperty                                           => _offCachedSourceProperty.GetValue();
	public UProperty                                           CachedSourceStructSubProperty                                  => _offCachedSourceStructSubProperty.GetValue();
	#endregion

	public FExposedValueCopyRecord(FName c_SourcePropertyName, FName c_SourceSubPropertyName, int c_SourceArrayIndex, byte/*(bool)*/ c_bInstanceIsTarget, EPostCopyOperation c_PostCopyOperation, ECopyType c_CopyType, UProperty c_DestProperty, int c_DestArrayIndex, int c_Size, UProperty c_CachedSourceProperty, UProperty c_CachedSourceStructSubProperty) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourcePropertyName.SetValue(c_SourcePropertyName);
		_offSourceSubPropertyName.SetValue(c_SourceSubPropertyName);
		_offSourceArrayIndex.SetValue(c_SourceArrayIndex);
		_offbInstanceIsTarget.SetValue(c_bInstanceIsTarget);
		_offPostCopyOperation.SetValue(c_PostCopyOperation);
		_offCopyType.SetValue(c_CopyType);
		_offDestProperty.SetValue(c_DestProperty);
		_offDestArrayIndex.SetValue(c_DestArrayIndex);
		_offSize.SetValue(c_Size);
		_offCachedSourceProperty.SetValue(c_CachedSourceProperty);
		_offCachedSourceStructSubProperty.SetValue(c_CachedSourceStructSubProperty);
	}
}
// ScriptStruct Engine.ExposedValueHandler
// 0x0030
public class FExposedValueHandler : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offBoundFunction                                              = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FExposedValueCopyRecord>>    _offCopyRecords                                                = new ExternalOffset<TArray<FExposedValueCopyRecord>>(0x0008, false); // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UFunction>                          _offFunction                                                   = new ExternalOffset<UFunction>(0x0018, true);                 // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UStructProperty>                    _offValueHandlerNodeProperty                                   = new ExternalOffset<UStructProperty>(0x0020, true);           // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               BoundFunction                                                  => _offBoundFunction.GetValue();
	public TArray<FExposedValueCopyRecord>                     CopyRecords                                                    => _offCopyRecords.GetValue();
	public UFunction                                           Function                                                       => _offFunction.GetValue();
	public UStructProperty                                     ValueHandlerNodeProperty                                       => _offValueHandlerNodeProperty.GetValue();
	#endregion

	public FExposedValueHandler(FName c_BoundFunction, TArray<FExposedValueCopyRecord> c_CopyRecords, UFunction c_Function, UStructProperty c_ValueHandlerNodeProperty) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoundFunction.SetValue(c_BoundFunction);
		_offCopyRecords.SetValue(c_CopyRecords);
		_offFunction.SetValue(c_Function);
		_offValueHandlerNodeProperty.SetValue(c_ValueHandlerNodeProperty);
	}
}
// ScriptStruct Engine.AnimNode_ConvertLocalToComponentSpace
// 0x0010 (0x0020 - 0x0010)
public class FAnimNode_ConvertLocalToComponentSpace : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<FPoseLink>                          _offLocalPose                                                  = new ExternalOffset<FPoseLink>(0x0010, false);                // 0x0010(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPoseLink                                           LocalPose                                                      => _offLocalPose.GetValue();
	#endregion

	public FAnimNode_ConvertLocalToComponentSpace(FPoseLink c_LocalPose) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocalPose.SetValue(c_LocalPose);
	}
}
// ScriptStruct Engine.ComponentSpacePoseLink
// 0x0000 (0x0010 - 0x0010)
public class FComponentSpacePoseLink : FPoseLinkBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FComponentSpacePoseLink() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.AnimNode_ConvertComponentToLocalSpace
// 0x0010 (0x0020 - 0x0010)
public class FAnimNode_ConvertComponentToLocalSpace : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<FComponentSpacePoseLink>            _offComponentPose                                              = new ExternalOffset<FComponentSpacePoseLink>(0x0010, false);  // 0x0010(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FComponentSpacePoseLink                             ComponentPose                                                  => _offComponentPose.GetValue();
	#endregion

	public FAnimNode_ConvertComponentToLocalSpace(FComponentSpacePoseLink c_ComponentPose) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offComponentPose.SetValue(c_ComponentPose);
	}
}
// ScriptStruct Engine.AnimNotifyEventReference
// 0x0010
public class FAnimNotifyEventReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<UObject>                            _offNotifySource                                               = new ExternalOffset<UObject>(0x0008, true);                   // 0x0008(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UObject                                             NotifySource                                                   => _offNotifySource.GetValue();
	#endregion

	public FAnimNotifyEventReference(UObject c_NotifySource) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNotifySource.SetValue(c_NotifySource);
	}
}
// ScriptStruct Engine.AnimNotifyArray
// 0x0010
public class FAnimNotifyArray : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FAnimNotifyEventReference>>  _offNotifies                                                   = new ExternalOffset<TArray<FAnimNotifyEventReference>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FAnimNotifyEventReference>                   Notifies                                                       => _offNotifies.GetValue();
	#endregion

	public FAnimNotifyArray(TArray<FAnimNotifyEventReference> c_Notifies) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNotifies.SetValue(c_Notifies);
	}
}
// ScriptStruct Engine.AnimNotifyQueue
// 0x0070
public class FAnimNotifyQueue : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FAnimNotifyEventReference>>  _offAnimNotifies                                               = new ExternalOffset<TArray<FAnimNotifyEventReference>>(0x0010, false); // 0x0010(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
//	private TMap<struct FName, struct FAnimNotifyArray>        _offUnfilteredMontageAnimNotifies                              = new ExternalOffset<TMap<FAnimNotifyArray>>(0x0020, false);   // 0x0020(0x0050) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FAnimNotifyEventReference>                   AnimNotifies                                                   => _offAnimNotifies.GetValue();
	#endregion

	public FAnimNotifyQueue(TArray<FAnimNotifyEventReference> c_AnimNotifies) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAnimNotifies.SetValue(c_AnimNotifies);
	}
}
// ScriptStruct Engine.CompressedTrack
// 0x0038
public class FCompressedTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<char>>                       _offByteStream                                                 = new ExternalOffset<TArray<char>>(0x0000, false);             // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offTimes                                                      = new ExternalOffset<TArray<float>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<float>                              _offMins[0x3]                                                  = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<float>                              _offRanges[0x3]                                                = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<char>                                        ByteStream                                                     => _offByteStream.GetValue();
	public TArray<float>                                       Times                                                          => _offTimes.GetValue();
	#endregion

	public FCompressedTrack(TArray<char> c_ByteStream, TArray<float> c_Times) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offByteStream.SetValue(c_ByteStream);
		_offTimes.SetValue(c_Times);
	}
}
// ScriptStruct Engine.CurveTrack
// 0x0018
public class FCurveTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offCurveName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offCurveWeights                                               = new ExternalOffset<TArray<float>>(0x0008, false);            // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               CurveName                                                      => _offCurveName.GetValue();
	public TArray<float>                                       CurveWeights                                                   => _offCurveWeights.GetValue();
	#endregion

	public FCurveTrack(FName c_CurveName, TArray<float> c_CurveWeights) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCurveName.SetValue(c_CurveName);
		_offCurveWeights.SetValue(c_CurveWeights);
	}
}
// ScriptStruct Engine.ScaleTrack
// 0x0020
public class FScaleTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FVector>>                    _offScaleKeys                                                  = new ExternalOffset<TArray<FVector>>(0x0000, false);          // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offTimes                                                      = new ExternalOffset<TArray<float>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FVector>                                     ScaleKeys                                                      => _offScaleKeys.GetValue();
	public TArray<float>                                       Times                                                          => _offTimes.GetValue();
	#endregion

	public FScaleTrack(TArray<FVector> c_ScaleKeys, TArray<float> c_Times) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offScaleKeys.SetValue(c_ScaleKeys);
		_offTimes.SetValue(c_Times);
	}
}
// ScriptStruct Engine.RotationTrack
// 0x0020
public class FRotationTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FQuat>>                      _offRotKeys                                                    = new ExternalOffset<TArray<FQuat>>(0x0000, false);            // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offTimes                                                      = new ExternalOffset<TArray<float>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FQuat>                                       RotKeys                                                        => _offRotKeys.GetValue();
	public TArray<float>                                       Times                                                          => _offTimes.GetValue();
	#endregion

	public FRotationTrack(TArray<FQuat> c_RotKeys, TArray<float> c_Times) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRotKeys.SetValue(c_RotKeys);
		_offTimes.SetValue(c_Times);
	}
}
// ScriptStruct Engine.TranslationTrack
// 0x0020
public class FTranslationTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FVector>>                    _offPosKeys                                                    = new ExternalOffset<TArray<FVector>>(0x0000, false);          // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offTimes                                                      = new ExternalOffset<TArray<float>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FVector>                                     PosKeys                                                        => _offPosKeys.GetValue();
	public TArray<float>                                       Times                                                          => _offTimes.GetValue();
	#endregion

	public FTranslationTrack(TArray<FVector> c_PosKeys, TArray<float> c_Times) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPosKeys.SetValue(c_PosKeys);
		_offTimes.SetValue(c_Times);
	}
}
// ScriptStruct Engine.RawAnimSequenceTrack
// 0x0030
public class FRawAnimSequenceTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FVector>>                    _offPosKeys                                                    = new ExternalOffset<TArray<FVector>>(0x0000, false);          // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FQuat>>                      _offRotKeys                                                    = new ExternalOffset<TArray<FQuat>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FVector>>                    _offScaleKeys                                                  = new ExternalOffset<TArray<FVector>>(0x0020, false);          // 0x0020(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FVector>                                     PosKeys                                                        => _offPosKeys.GetValue();
	public TArray<FQuat>                                       RotKeys                                                        => _offRotKeys.GetValue();
	public TArray<FVector>                                     ScaleKeys                                                      => _offScaleKeys.GetValue();
	#endregion

	public FRawAnimSequenceTrack(TArray<FVector> c_PosKeys, TArray<FQuat> c_RotKeys, TArray<FVector> c_ScaleKeys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPosKeys.SetValue(c_PosKeys);
		_offRotKeys.SetValue(c_RotKeys);
		_offScaleKeys.SetValue(c_ScaleKeys);
	}
}
// ScriptStruct Engine.AnimSequenceTrackContainer
// 0x0020
public class FAnimSequenceTrackContainer : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FRawAnimSequenceTrack>>      _offAnimationTracks                                            = new ExternalOffset<TArray<FRawAnimSequenceTrack>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offTrackNames                                                 = new ExternalOffset<TArray<FName>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FRawAnimSequenceTrack>                       AnimationTracks                                                => _offAnimationTracks.GetValue();
	public TArray<FName>                                       TrackNames                                                     => _offTrackNames.GetValue();
	#endregion

	public FAnimSequenceTrackContainer(TArray<FRawAnimSequenceTrack> c_AnimationTracks, TArray<FName> c_TrackNames) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAnimationTracks.SetValue(c_AnimationTracks);
		_offTrackNames.SetValue(c_TrackNames);
	}
}
// ScriptStruct Engine.AnimSetMeshLinkup
// 0x0010
public class FAnimSetMeshLinkup : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<int>>                        _offBoneToTrackTable                                           = new ExternalOffset<TArray<int>>(0x0000, false);              // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<int>                                         BoneToTrackTable                                               => _offBoneToTrackTable.GetValue();
	#endregion

	public FAnimSetMeshLinkup(TArray<int> c_BoneToTrackTable) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneToTrackTable.SetValue(c_BoneToTrackTable);
	}
}
// ScriptStruct Engine.AnimInstanceProxy
// 0x06D0
public class FAnimInstanceProxy : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAnimInstanceProxy() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.AnimSingleNodeInstanceProxy
// 0x0150 (0x0820 - 0x06D0)
public class FAnimSingleNodeInstanceProxy : FAnimInstanceProxy
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAnimSingleNodeInstanceProxy() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.AnimNode_SingleNode
// 0x0020 (0x0030 - 0x0010)
public class FAnimNode_SingleNode : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<FPoseLink>                          _offSourcePose                                                 = new ExternalOffset<FPoseLink>(0x0010, false);                // 0x0010(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPoseLink                                           SourcePose                                                     => _offSourcePose.GetValue();
	#endregion

	public FAnimNode_SingleNode(FPoseLink c_SourcePose) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourcePose.SetValue(c_SourcePose);
	}
}
// ScriptStruct Engine.BakedStateExitTransition
// 0x0020
public class FBakedStateExitTransition : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offCanTakeDelegateIndex                                       = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offCustomResultNodeIndex                                      = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTransitionIndex                                            = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbDesiredTransitionReturnValue                              = new ExternalOffset<byte/*(bool)*/>(0x000C);                  // 0x000C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbAutomaticRemainingTimeRule                                = new ExternalOffset<byte/*(bool)*/>(0x000D);                  // 0x000D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offPoseEvaluatorLinks                                         = new ExternalOffset<TArray<int>>(0x0010, false);              // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 CanTakeDelegateIndex                                           => _offCanTakeDelegateIndex.GetValue();
	public int                                                 CustomResultNodeIndex                                          => _offCustomResultNodeIndex.GetValue();
	public int                                                 TransitionIndex                                                => _offTransitionIndex.GetValue();
	public byte/*(bool)*/                                      bDesiredTransitionReturnValue                                  => _offbDesiredTransitionReturnValue.GetValue();
	public byte/*(bool)*/                                      bAutomaticRemainingTimeRule                                    => _offbAutomaticRemainingTimeRule.GetValue();
	public TArray<int>                                         PoseEvaluatorLinks                                             => _offPoseEvaluatorLinks.GetValue();
	#endregion

	public FBakedStateExitTransition(int c_CanTakeDelegateIndex, int c_CustomResultNodeIndex, int c_TransitionIndex, byte/*(bool)*/ c_bDesiredTransitionReturnValue, byte/*(bool)*/ c_bAutomaticRemainingTimeRule, TArray<int> c_PoseEvaluatorLinks) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCanTakeDelegateIndex.SetValue(c_CanTakeDelegateIndex);
		_offCustomResultNodeIndex.SetValue(c_CustomResultNodeIndex);
		_offTransitionIndex.SetValue(c_TransitionIndex);
		_offbDesiredTransitionReturnValue.SetValue(c_bDesiredTransitionReturnValue);
		_offbAutomaticRemainingTimeRule.SetValue(c_bAutomaticRemainingTimeRule);
		_offPoseEvaluatorLinks.SetValue(c_PoseEvaluatorLinks);
	}
}
// ScriptStruct Engine.BakedAnimationState
// 0x0048
public class FBakedAnimationState : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offStateName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBakedStateExitTransition>>  _offTransitions                                                = new ExternalOffset<TArray<FBakedStateExitTransition>>(0x0008, false); // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStateRootNodeIndex                                         = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartNotify                                                = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offEndNotify                                                  = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offFullyBlendedNotify                                         = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbIsAConduit                                                = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offEntryRuleNodeIndex                                         = new ExternalOffset<int>(0x002C);                             // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offPlayerNodeIndices                                          = new ExternalOffset<TArray<int>>(0x0030, false);              // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbAlwaysResetOnEntry                                        = new ExternalOffset<byte/*(bool)*/>(0x0040);                  // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               StateName                                                      => _offStateName.GetValue();
	public TArray<FBakedStateExitTransition>                   Transitions                                                    => _offTransitions.GetValue();
	public int                                                 StateRootNodeIndex                                             => _offStateRootNodeIndex.GetValue();
	public int                                                 StartNotify                                                    => _offStartNotify.GetValue();
	public int                                                 EndNotify                                                      => _offEndNotify.GetValue();
	public int                                                 FullyBlendedNotify                                             => _offFullyBlendedNotify.GetValue();
	public byte/*(bool)*/                                      bIsAConduit                                                    => _offbIsAConduit.GetValue();
	public int                                                 EntryRuleNodeIndex                                             => _offEntryRuleNodeIndex.GetValue();
	public TArray<int>                                         PlayerNodeIndices                                              => _offPlayerNodeIndices.GetValue();
	public byte/*(bool)*/                                      bAlwaysResetOnEntry                                            => _offbAlwaysResetOnEntry.GetValue();
	#endregion

	public FBakedAnimationState(FName c_StateName, TArray<FBakedStateExitTransition> c_Transitions, int c_StateRootNodeIndex, int c_StartNotify, int c_EndNotify, int c_FullyBlendedNotify, byte/*(bool)*/ c_bIsAConduit, int c_EntryRuleNodeIndex, TArray<int> c_PlayerNodeIndices, byte/*(bool)*/ c_bAlwaysResetOnEntry) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStateName.SetValue(c_StateName);
		_offTransitions.SetValue(c_Transitions);
		_offStateRootNodeIndex.SetValue(c_StateRootNodeIndex);
		_offStartNotify.SetValue(c_StartNotify);
		_offEndNotify.SetValue(c_EndNotify);
		_offFullyBlendedNotify.SetValue(c_FullyBlendedNotify);
		_offbIsAConduit.SetValue(c_bIsAConduit);
		_offEntryRuleNodeIndex.SetValue(c_EntryRuleNodeIndex);
		_offPlayerNodeIndices.SetValue(c_PlayerNodeIndices);
		_offbAlwaysResetOnEntry.SetValue(c_bAlwaysResetOnEntry);
	}
}
// ScriptStruct Engine.AnimationStateBase
// 0x0008
public class FAnimationStateBase : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offStateName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               StateName                                                      => _offStateName.GetValue();
	#endregion

	public FAnimationStateBase(FName c_StateName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStateName.SetValue(c_StateName);
	}
}
// ScriptStruct Engine.PostProcessSettings
// 0x0530
public class FPostProcessSettings : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbOverride_WhiteTemp                                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_WhiteTint                                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorSaturation                                  = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorContrast                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGamma                                       = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGain                                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorOffset                                      = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorSaturationShadows                           = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorContrastShadows                             = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGammaShadows                                = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGainShadows                                 = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorOffsetShadows                               = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorSaturationMidtones                          = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorContrastMidtones                            = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGammaMidtones                               = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGainMidtones                                = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorOffsetMidtones                              = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorSaturationHighlights                        = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorContrastHighlights                          = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGammaHighlights                             = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGainHighlights                              = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorOffsetHighlights                            = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorCorrectionShadowsMax                        = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorCorrectionHighlightsMin                     = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BlueCorrection                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ExpandGamut                                      = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmWhitePoint                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmSaturation                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmChannelMixerRed                              = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmChannelMixerGreen                            = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmChannelMixerBlue                             = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmContrast                                     = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmDynamicRange                                 = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmHealAmount                                   = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmToeAmount                                    = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmShadowTint                                   = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmShadowTintBlend                              = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmShadowTintAmount                             = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmSlope                                        = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmToe                                          = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmShoulder                                     = new ExternalOffset<char>(0x0005, false);                     // 0x0005(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmBlackClip                                    = new ExternalOffset<char>(0x0005, false);                     // 0x0005(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_FilmWhiteClip                                    = new ExternalOffset<char>(0x0005, false);                     // 0x0005(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_SceneColorTint                                   = new ExternalOffset<char>(0x0005, false);                     // 0x0005(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_SceneFringeIntensity                             = new ExternalOffset<char>(0x0005, false);                     // 0x0005(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ChromaticAberrationStartOffset                   = new ExternalOffset<char>(0x0005, false);                     // 0x0005(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientCubemapTint                               = new ExternalOffset<char>(0x0005, false);                     // 0x0005(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientCubemapIntensity                          = new ExternalOffset<char>(0x0005, false);                     // 0x0005(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomMethod                                      = new ExternalOffset<char>(0x0006, false);                     // 0x0006(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomIntensity                                   = new ExternalOffset<char>(0x0006, false);                     // 0x0006(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomThreshold                                   = new ExternalOffset<char>(0x0006, false);                     // 0x0006(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom1Tint                                       = new ExternalOffset<char>(0x0006, false);                     // 0x0006(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom1Size                                       = new ExternalOffset<char>(0x0006, false);                     // 0x0006(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom2Size                                       = new ExternalOffset<char>(0x0006, false);                     // 0x0006(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom2Tint                                       = new ExternalOffset<char>(0x0006, false);                     // 0x0006(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom3Tint                                       = new ExternalOffset<char>(0x0006, false);                     // 0x0006(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom3Size                                       = new ExternalOffset<char>(0x0007, false);                     // 0x0007(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom4Tint                                       = new ExternalOffset<char>(0x0007, false);                     // 0x0007(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom4Size                                       = new ExternalOffset<char>(0x0007, false);                     // 0x0007(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom5Tint                                       = new ExternalOffset<char>(0x0007, false);                     // 0x0007(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom5Size                                       = new ExternalOffset<char>(0x0007, false);                     // 0x0007(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom6Tint                                       = new ExternalOffset<char>(0x0007, false);                     // 0x0007(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_Bloom6Size                                       = new ExternalOffset<char>(0x0007, false);                     // 0x0007(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomSizeScale                                   = new ExternalOffset<char>(0x0007, false);                     // 0x0007(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomConvolutionTexture                          = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomConvolutionSize                             = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomConvolutionCenterUV                         = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomConvolutionPreFilter                        = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomConvolutionPreFilterMin                     = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomConvolutionPreFilterMax                     = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomConvolutionPreFilterMult                    = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomConvolutionBufferScale                      = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomDirtMaskIntensity                           = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomDirtMaskTint                                = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BloomDirtMask                                    = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_CameraShutterSpeed                               = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_CameraISO                                        = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureMethod                               = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureLowPercent                           = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureHighPercent                          = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureMinBrightness                        = new ExternalOffset<char>(0x000A, false);                     // 0x000A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureMaxBrightness                        = new ExternalOffset<char>(0x000A, false);                     // 0x000A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureCalibrationConstant                  = new ExternalOffset<char>(0x000A, false);                     // 0x000A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureSpeedUp                              = new ExternalOffset<char>(0x000A, false);                     // 0x000A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureSpeedDown                            = new ExternalOffset<char>(0x000A, false);                     // 0x000A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureBias                                 = new ExternalOffset<char>(0x000A, false);                     // 0x000A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AutoExposureBiasCurve                            = new ExternalOffset<char>(0x000A, false);                     // 0x000A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_HistogramLogMin                                  = new ExternalOffset<char>(0x000A, false);                     // 0x000A(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_HistogramLogMax                                  = new ExternalOffset<char>(0x000B, false);                     // 0x000B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LensFlareIntensity                               = new ExternalOffset<char>(0x000B, false);                     // 0x000B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LensFlareTint                                    = new ExternalOffset<char>(0x000B, false);                     // 0x000B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LensFlareTints                                   = new ExternalOffset<char>(0x000B, false);                     // 0x000B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LensFlareBokehSize                               = new ExternalOffset<char>(0x000B, false);                     // 0x000B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LensFlareBokehShape                              = new ExternalOffset<char>(0x000B, false);                     // 0x000B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LensFlareThreshold                               = new ExternalOffset<char>(0x000B, false);                     // 0x000B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_VignetteIntensity                                = new ExternalOffset<char>(0x000B, false);                     // 0x000B(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_GrainIntensity                                   = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_GrainJitter                                      = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionIntensity                        = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionStaticFraction                   = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionRadius                           = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionFadeDistance                     = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionFadeRadius                       = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionDistance                         = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionRadiusInWS                       = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionPower                            = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionBias                             = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionQuality                          = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionMipBlend                         = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionMipScale                         = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_AmbientOcclusionMipThreshold                     = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingAO                                     = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingAOSamplesPerPixel                      = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVIntensity                                     = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVDirectionalOcclusionIntensity                 = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVDirectionalOcclusionRadius                    = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVDiffuseOcclusionExponent                      = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVSpecularOcclusionExponent                     = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVDiffuseOcclusionIntensity                     = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVSpecularOcclusionIntensity                    = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVSize                                          = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVSecondaryOcclusionIntensity                   = new ExternalOffset<char>(0x0015, false);                     // 0x0015(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVSecondaryBounceIntensity                      = new ExternalOffset<char>(0x0015, false);                     // 0x0015(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVGeometryVolumeBias                            = new ExternalOffset<char>(0x0015, false);                     // 0x0015(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVVplInjectionBias                              = new ExternalOffset<char>(0x0015, false);                     // 0x0015(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVEmissiveInjectionIntensity                    = new ExternalOffset<char>(0x0015, false);                     // 0x0015(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVFadeRange                                     = new ExternalOffset<char>(0x0015, false);                     // 0x0015(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_LPVDirectionalOcclusionFadeRange                 = new ExternalOffset<char>(0x0015, false);                     // 0x0015(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_IndirectLightingColor                            = new ExternalOffset<char>(0x0015, false);                     // 0x0015(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_IndirectLightingIntensity                        = new ExternalOffset<char>(0x0016, false);                     // 0x0016(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGradingIntensity                            = new ExternalOffset<char>(0x0016, false);                     // 0x0016(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ColorGradingLUT                                  = new ExternalOffset<char>(0x0016, false);                     // 0x0016(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldFocalDistance                        = new ExternalOffset<char>(0x0016, false);                     // 0x0016(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldFstop                                = new ExternalOffset<char>(0x0016, false);                     // 0x0016(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldMinFstop                             = new ExternalOffset<char>(0x0016, false);                     // 0x0016(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldBladeCount                           = new ExternalOffset<char>(0x0016, false);                     // 0x0016(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldSensorWidth                          = new ExternalOffset<char>(0x0016, false);                     // 0x0016(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldDepthBlurRadius                      = new ExternalOffset<char>(0x0017, false);                     // 0x0017(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldDepthBlurAmount                      = new ExternalOffset<char>(0x0017, false);                     // 0x0017(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldFocalRegion                          = new ExternalOffset<char>(0x0017, false);                     // 0x0017(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldNearTransitionRegion                 = new ExternalOffset<char>(0x0017, false);                     // 0x0017(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldFarTransitionRegion                  = new ExternalOffset<char>(0x0017, false);                     // 0x0017(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldScale                                = new ExternalOffset<char>(0x0017, false);                     // 0x0017(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldNearBlurSize                         = new ExternalOffset<char>(0x0017, false);                     // 0x0017(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldFarBlurSize                          = new ExternalOffset<char>(0x0017, false);                     // 0x0017(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_MobileHQGaussian                                 = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldOcclusion                            = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldSkyFocusDistance                     = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DepthOfFieldVignetteSize                         = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_MotionBlurAmount                                 = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_MotionBlurMax                                    = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_MotionBlurTargetFPS                              = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_MotionBlurPerObjectSize                          = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ScreenPercentage                                 = new ExternalOffset<char>(0x0019, false);                     // 0x0019(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ScreenSpaceReflectionIntensity                   = new ExternalOffset<char>(0x0019, false);                     // 0x0019(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ScreenSpaceReflectionQuality                     = new ExternalOffset<char>(0x0019, false);                     // 0x0019(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ScreenSpaceReflectionMaxRoughness                = new ExternalOffset<char>(0x0019, false);                     // 0x0019(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ScreenSpaceReflectionRoughnessScale              = new ExternalOffset<char>(0x0019, false);                     // 0x0019(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ReflectionsType                                  = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingReflectionsMaxRoughness                = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingReflectionsMaxBounces                  = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingReflectionsSamplesPerPixel             = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingReflectionsShadows                     = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_TranslucencyType                                 = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingTranslucencyMaxRoughness               = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingTranslucencyRefractionRays             = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingTranslucencySamplesPerPixel            = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingTranslucencyShadows                    = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingTranslucencyRefraction                 = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingGI                                     = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingGIMaxBounces                           = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_RayTracingGISamplesPerPixel                      = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_PathTracingMaxBounces                            = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_PathTracingSamplesPerPixel                       = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbMobileHQGaussian                                          = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBloomMethod>>          _offBloomMethod                                                = new ExternalOffset<TEnumAsByte<EBloomMethod>>(0x0021, false); // 0x0021(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAutoExposureMethod>>   _offAutoExposureMethod                                         = new ExternalOffset<TEnumAsByte<EAutoExposureMethod>>(0x0022, false); // 0x0022(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWhiteTemp                                                  = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWhiteTint                                                  = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorSaturation                                            = new ExternalOffset<FVector4>(0x0030, false);                 // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorContrast                                              = new ExternalOffset<FVector4>(0x0040, false);                 // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorGamma                                                 = new ExternalOffset<FVector4>(0x0050, false);                 // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorGain                                                  = new ExternalOffset<FVector4>(0x0060, false);                 // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorOffset                                                = new ExternalOffset<FVector4>(0x0070, false);                 // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorSaturationShadows                                     = new ExternalOffset<FVector4>(0x0080, false);                 // 0x0080(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorContrastShadows                                       = new ExternalOffset<FVector4>(0x0090, false);                 // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorGammaShadows                                          = new ExternalOffset<FVector4>(0x00A0, false);                 // 0x00A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorGainShadows                                           = new ExternalOffset<FVector4>(0x00B0, false);                 // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorOffsetShadows                                         = new ExternalOffset<FVector4>(0x00C0, false);                 // 0x00C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorSaturationMidtones                                    = new ExternalOffset<FVector4>(0x00D0, false);                 // 0x00D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorContrastMidtones                                      = new ExternalOffset<FVector4>(0x00E0, false);                 // 0x00E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorGammaMidtones                                         = new ExternalOffset<FVector4>(0x00F0, false);                 // 0x00F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorGainMidtones                                          = new ExternalOffset<FVector4>(0x0100, false);                 // 0x0100(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorOffsetMidtones                                        = new ExternalOffset<FVector4>(0x0110, false);                 // 0x0110(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorSaturationHighlights                                  = new ExternalOffset<FVector4>(0x0120, false);                 // 0x0120(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorContrastHighlights                                    = new ExternalOffset<FVector4>(0x0130, false);                 // 0x0130(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorGammaHighlights                                       = new ExternalOffset<FVector4>(0x0140, false);                 // 0x0140(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorGainHighlights                                        = new ExternalOffset<FVector4>(0x0150, false);                 // 0x0150(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorOffsetHighlights                                      = new ExternalOffset<FVector4>(0x0160, false);                 // 0x0160(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offColorCorrectionHighlightsMin                               = new ExternalOffset<float>(0x0170);                           // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offColorCorrectionShadowsMax                                  = new ExternalOffset<float>(0x0174);                           // 0x0174(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBlueCorrection                                             = new ExternalOffset<float>(0x0178);                           // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offExpandGamut                                                = new ExternalOffset<float>(0x017C);                           // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmSlope                                                  = new ExternalOffset<float>(0x0180);                           // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmToe                                                    = new ExternalOffset<float>(0x0184);                           // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmShoulder                                               = new ExternalOffset<float>(0x0188);                           // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmBlackClip                                              = new ExternalOffset<float>(0x018C);                           // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmWhiteClip                                              = new ExternalOffset<float>(0x0190);                           // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilmWhitePoint                                             = new ExternalOffset<FLinearColor>(0x0194, false);             // 0x0194(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilmShadowTint                                             = new ExternalOffset<FLinearColor>(0x01A4, false);             // 0x01A4(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmShadowTintBlend                                        = new ExternalOffset<float>(0x01B4);                           // 0x01B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmShadowTintAmount                                       = new ExternalOffset<float>(0x01B8);                           // 0x01B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmSaturation                                             = new ExternalOffset<float>(0x01BC);                           // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilmChannelMixerRed                                        = new ExternalOffset<FLinearColor>(0x01C0, false);             // 0x01C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilmChannelMixerGreen                                      = new ExternalOffset<FLinearColor>(0x01D0, false);             // 0x01D0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilmChannelMixerBlue                                       = new ExternalOffset<FLinearColor>(0x01E0, false);             // 0x01E0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmContrast                                               = new ExternalOffset<float>(0x01F0);                           // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmToeAmount                                              = new ExternalOffset<float>(0x01F4);                           // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmHealAmount                                             = new ExternalOffset<float>(0x01F8);                           // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilmDynamicRange                                           = new ExternalOffset<float>(0x01FC);                           // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offSceneColorTint                                             = new ExternalOffset<FLinearColor>(0x0200, false);             // 0x0200(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSceneFringeIntensity                                       = new ExternalOffset<float>(0x0210);                           // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offChromaticAberrationStartOffset                             = new ExternalOffset<float>(0x0214);                           // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloomIntensity                                             = new ExternalOffset<float>(0x0218);                           // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloomThreshold                                             = new ExternalOffset<float>(0x021C);                           // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloomSizeScale                                             = new ExternalOffset<float>(0x0220);                           // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloom1Size                                                 = new ExternalOffset<float>(0x0224);                           // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloom2Size                                                 = new ExternalOffset<float>(0x0228);                           // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloom3Size                                                 = new ExternalOffset<float>(0x022C);                           // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloom4Size                                                 = new ExternalOffset<float>(0x0230);                           // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloom5Size                                                 = new ExternalOffset<float>(0x0234);                           // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloom6Size                                                 = new ExternalOffset<float>(0x0238);                           // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offBloom1Tint                                                 = new ExternalOffset<FLinearColor>(0x023C, false);             // 0x023C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offBloom2Tint                                                 = new ExternalOffset<FLinearColor>(0x024C, false);             // 0x024C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offBloom3Tint                                                 = new ExternalOffset<FLinearColor>(0x025C, false);             // 0x025C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offBloom4Tint                                                 = new ExternalOffset<FLinearColor>(0x026C, false);             // 0x026C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offBloom5Tint                                                 = new ExternalOffset<FLinearColor>(0x027C, false);             // 0x027C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offBloom6Tint                                                 = new ExternalOffset<FLinearColor>(0x028C, false);             // 0x028C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloomConvolutionSize                                       = new ExternalOffset<float>(0x029C);                           // 0x029C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                         _offBloomConvolutionTexture                                    = new ExternalOffset<UTexture2D>(0x02A0, true);                // 0x02A0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offBloomConvolutionCenterUV                                   = new ExternalOffset<FVector2D>(0x02A8, false);                // 0x02A8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloomConvolutionPreFilterMin                               = new ExternalOffset<float>(0x02B0);                           // 0x02B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloomConvolutionPreFilterMax                               = new ExternalOffset<float>(0x02B4);                           // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloomConvolutionPreFilterMult                              = new ExternalOffset<float>(0x02B8);                           // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloomConvolutionBufferScale                                = new ExternalOffset<float>(0x02BC);                           // 0x02BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture>                           _offBloomDirtMask                                              = new ExternalOffset<UTexture>(0x02C0, true);                  // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBloomDirtMaskIntensity                                     = new ExternalOffset<float>(0x02C8);                           // 0x02C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offBloomDirtMaskTint                                          = new ExternalOffset<FLinearColor>(0x02CC, false);             // 0x02CC(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offAmbientCubemapTint                                         = new ExternalOffset<FLinearColor>(0x02DC, false);             // 0x02DC(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientCubemapIntensity                                    = new ExternalOffset<float>(0x02EC);                           // 0x02EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTextureCube>                       _offAmbientCubemap                                             = new ExternalOffset<UTextureCube>(0x02F0, true);              // 0x02F0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCameraShutterSpeed                                         = new ExternalOffset<float>(0x02F8);                           // 0x02F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCameraISO                                                  = new ExternalOffset<float>(0x02FC);                           // 0x02FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldFstop                                          = new ExternalOffset<float>(0x0300);                           // 0x0300(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldMinFstop                                       = new ExternalOffset<float>(0x0304);                           // 0x0304(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDepthOfFieldBladeCount                                     = new ExternalOffset<int>(0x0308);                             // 0x0308(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAutoExposureBias                                           = new ExternalOffset<float>(0x030C);                           // 0x030C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offAutoExposureBiasCurve                                      = new ExternalOffset<UCurveFloat>(0x0310, true);               // 0x0310(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAutoExposureLowPercent                                     = new ExternalOffset<float>(0x0318);                           // 0x0318(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAutoExposureHighPercent                                    = new ExternalOffset<float>(0x031C);                           // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAutoExposureMinBrightness                                  = new ExternalOffset<float>(0x0320);                           // 0x0320(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAutoExposureMaxBrightness                                  = new ExternalOffset<float>(0x0324);                           // 0x0324(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAutoExposureSpeedUp                                        = new ExternalOffset<float>(0x0328);                           // 0x0328(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAutoExposureSpeedDown                                      = new ExternalOffset<float>(0x032C);                           // 0x032C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHistogramLogMin                                            = new ExternalOffset<float>(0x0330);                           // 0x0330(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHistogramLogMax                                            = new ExternalOffset<float>(0x0334);                           // 0x0334(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAutoExposureCalibrationConstant                            = new ExternalOffset<float>(0x0338);                           // 0x0338(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLensFlareIntensity                                         = new ExternalOffset<float>(0x033C);                           // 0x033C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offLensFlareTint                                              = new ExternalOffset<FLinearColor>(0x0340, false);             // 0x0340(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLensFlareBokehSize                                         = new ExternalOffset<float>(0x0350);                           // 0x0350(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLensFlareThreshold                                         = new ExternalOffset<float>(0x0354);                           // 0x0354(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture>                           _offLensFlareBokehShape                                        = new ExternalOffset<UTexture>(0x0358, true);                  // 0x0358(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<FLinearColor>                       _offLensFlareTints[0x8]                                        = new ExternalOffset<FLinearColor>(0x0360, false);             // 0x0360(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVignetteIntensity                                          = new ExternalOffset<float>(0x03E0);                           // 0x03E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGrainJitter                                                = new ExternalOffset<float>(0x03E4);                           // 0x03E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGrainIntensity                                             = new ExternalOffset<float>(0x03E8);                           // 0x03E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionIntensity                                  = new ExternalOffset<float>(0x03EC);                           // 0x03EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionStaticFraction                             = new ExternalOffset<float>(0x03F0);                           // 0x03F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionRadius                                     = new ExternalOffset<float>(0x03F4);                           // 0x03F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offAmbientOcclusionRadiusInWS                                 = new ExternalOffset<char>(0x03F8, false);                     // 0x03F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionFadeDistance                               = new ExternalOffset<float>(0x03FC);                           // 0x03FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionFadeRadius                                 = new ExternalOffset<float>(0x0400);                           // 0x0400(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionDistance                                   = new ExternalOffset<float>(0x0404);                           // 0x0404(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionPower                                      = new ExternalOffset<float>(0x0408);                           // 0x0408(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionBias                                       = new ExternalOffset<float>(0x040C);                           // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionQuality                                    = new ExternalOffset<float>(0x0410);                           // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionMipBlend                                   = new ExternalOffset<float>(0x0414);                           // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionMipScale                                   = new ExternalOffset<float>(0x0418);                           // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAmbientOcclusionMipThreshold                               = new ExternalOffset<float>(0x041C);                           // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offRayTracingAO                                               = new ExternalOffset<char>(0x0420, false);                     // 0x0420(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRayTracingAOSamplesPerPixel                                = new ExternalOffset<int>(0x0424);                             // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offIndirectLightingColor                                      = new ExternalOffset<FLinearColor>(0x0428, false);             // 0x0428(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offIndirectLightingIntensity                                  = new ExternalOffset<float>(0x0438);                           // 0x0438(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offRayTracingGI                                               = new ExternalOffset<char>(0x043C, false);                     // 0x043C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRayTracingGIMaxBounces                                     = new ExternalOffset<int>(0x0440);                             // 0x0440(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRayTracingGISamplesPerPixel                                = new ExternalOffset<int>(0x0444);                             // 0x0444(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offColorGradingIntensity                                      = new ExternalOffset<float>(0x0448);                           // 0x0448(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture>                           _offColorGradingLUT                                            = new ExternalOffset<UTexture>(0x0450, true);                  // 0x0450(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldSensorWidth                                    = new ExternalOffset<float>(0x0458);                           // 0x0458(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldFocalDistance                                  = new ExternalOffset<float>(0x045C);                           // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldDepthBlurAmount                                = new ExternalOffset<float>(0x0460);                           // 0x0460(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldDepthBlurRadius                                = new ExternalOffset<float>(0x0464);                           // 0x0464(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldFocalRegion                                    = new ExternalOffset<float>(0x0468);                           // 0x0468(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldNearTransitionRegion                           = new ExternalOffset<float>(0x046C);                           // 0x046C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldFarTransitionRegion                            = new ExternalOffset<float>(0x0470);                           // 0x0470(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldScale                                          = new ExternalOffset<float>(0x0474);                           // 0x0474(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldNearBlurSize                                   = new ExternalOffset<float>(0x0478);                           // 0x0478(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldFarBlurSize                                    = new ExternalOffset<float>(0x047C);                           // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldOcclusion                                      = new ExternalOffset<float>(0x0480);                           // 0x0480(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldSkyFocusDistance                               = new ExternalOffset<float>(0x0484);                           // 0x0484(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDepthOfFieldVignetteSize                                   = new ExternalOffset<float>(0x0488);                           // 0x0488(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMotionBlurAmount                                           = new ExternalOffset<float>(0x048C);                           // 0x048C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMotionBlurMax                                              = new ExternalOffset<float>(0x0490);                           // 0x0490(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMotionBlurTargetFPS                                        = new ExternalOffset<int>(0x0494);                             // 0x0494(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMotionBlurPerObjectSize                                    = new ExternalOffset<float>(0x0498);                           // 0x0498(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVIntensity                                               = new ExternalOffset<float>(0x049C);                           // 0x049C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVVplInjectionBias                                        = new ExternalOffset<float>(0x04A0);                           // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVSize                                                    = new ExternalOffset<float>(0x04A4);                           // 0x04A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVSecondaryOcclusionIntensity                             = new ExternalOffset<float>(0x04A8);                           // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVSecondaryBounceIntensity                                = new ExternalOffset<float>(0x04AC);                           // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVGeometryVolumeBias                                      = new ExternalOffset<float>(0x04B0);                           // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVEmissiveInjectionIntensity                              = new ExternalOffset<float>(0x04B4);                           // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVDirectionalOcclusionIntensity                           = new ExternalOffset<float>(0x04B8);                           // 0x04B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVDirectionalOcclusionRadius                              = new ExternalOffset<float>(0x04BC);                           // 0x04BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVDiffuseOcclusionExponent                                = new ExternalOffset<float>(0x04C0);                           // 0x04C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVSpecularOcclusionExponent                               = new ExternalOffset<float>(0x04C4);                           // 0x04C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVDiffuseOcclusionIntensity                               = new ExternalOffset<float>(0x04C8);                           // 0x04C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVSpecularOcclusionIntensity                              = new ExternalOffset<float>(0x04CC);                           // 0x04CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EReflectionsType>                   _offReflectionsType                                            = new ExternalOffset<EReflectionsType>(0x04D0, false);         // 0x04D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offScreenSpaceReflectionIntensity                             = new ExternalOffset<float>(0x04D4);                           // 0x04D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offScreenSpaceReflectionQuality                               = new ExternalOffset<float>(0x04D8);                           // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offScreenSpaceReflectionMaxRoughness                          = new ExternalOffset<float>(0x04DC);                           // 0x04DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRayTracingReflectionsMaxRoughness                          = new ExternalOffset<float>(0x04E0);                           // 0x04E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRayTracingReflectionsMaxBounces                            = new ExternalOffset<int>(0x04E4);                             // 0x04E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRayTracingReflectionsSamplesPerPixel                       = new ExternalOffset<int>(0x04E8);                             // 0x04E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EReflectedAndRefractedRayTracedShadows> _offRayTracingReflectionsShadows                               = new ExternalOffset<EReflectedAndRefractedRayTracedShadows>(0x04EC, false); // 0x04EC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ETranslucencyType>                  _offTranslucencyType                                           = new ExternalOffset<ETranslucencyType>(0x04ED, false);        // 0x04ED(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRayTracingTranslucencyMaxRoughness                         = new ExternalOffset<float>(0x04F0);                           // 0x04F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRayTracingTranslucencyRefractionRays                       = new ExternalOffset<int>(0x04F4);                             // 0x04F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRayTracingTranslucencySamplesPerPixel                      = new ExternalOffset<int>(0x04F8);                             // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EReflectedAndRefractedRayTracedShadows> _offRayTracingTranslucencyShadows                              = new ExternalOffset<EReflectedAndRefractedRayTracedShadows>(0x04FC, false); // 0x04FC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offRayTracingTranslucencyRefraction                           = new ExternalOffset<char>(0x04FD, false);                     // 0x04FD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPathTracingMaxBounces                                      = new ExternalOffset<int>(0x0500);                             // 0x0500(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPathTracingSamplesPerPixel                                 = new ExternalOffset<int>(0x0504);                             // 0x0504(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVFadeRange                                               = new ExternalOffset<float>(0x0508);                           // 0x0508(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPVDirectionalOcclusionFadeRange                           = new ExternalOffset<float>(0x050C);                           // 0x050C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offScreenPercentage                                           = new ExternalOffset<float>(0x0510);                           // 0x0510(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FWeightedBlendables>                _offWeightedBlendables                                         = new ExternalOffset<FWeightedBlendables>(0x0518, false);      // 0x0518(0x0010) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EBloomMethod>                           BloomMethod                                                    => _offBloomMethod.GetValue();
	public TEnumAsByte<EAutoExposureMethod>                    AutoExposureMethod                                             => _offAutoExposureMethod.GetValue();
	public float                                               WhiteTemp                                                      => _offWhiteTemp.GetValue();
	public float                                               WhiteTint                                                      => _offWhiteTint.GetValue();
	public FVector4                                            ColorSaturation                                                => _offColorSaturation.GetValue();
	public FVector4                                            ColorContrast                                                  => _offColorContrast.GetValue();
	public FVector4                                            ColorGamma                                                     => _offColorGamma.GetValue();
	public FVector4                                            ColorGain                                                      => _offColorGain.GetValue();
	public FVector4                                            ColorOffset                                                    => _offColorOffset.GetValue();
	public FVector4                                            ColorSaturationShadows                                         => _offColorSaturationShadows.GetValue();
	public FVector4                                            ColorContrastShadows                                           => _offColorContrastShadows.GetValue();
	public FVector4                                            ColorGammaShadows                                              => _offColorGammaShadows.GetValue();
	public FVector4                                            ColorGainShadows                                               => _offColorGainShadows.GetValue();
	public FVector4                                            ColorOffsetShadows                                             => _offColorOffsetShadows.GetValue();
	public FVector4                                            ColorSaturationMidtones                                        => _offColorSaturationMidtones.GetValue();
	public FVector4                                            ColorContrastMidtones                                          => _offColorContrastMidtones.GetValue();
	public FVector4                                            ColorGammaMidtones                                             => _offColorGammaMidtones.GetValue();
	public FVector4                                            ColorGainMidtones                                              => _offColorGainMidtones.GetValue();
	public FVector4                                            ColorOffsetMidtones                                            => _offColorOffsetMidtones.GetValue();
	public FVector4                                            ColorSaturationHighlights                                      => _offColorSaturationHighlights.GetValue();
	public FVector4                                            ColorContrastHighlights                                        => _offColorContrastHighlights.GetValue();
	public FVector4                                            ColorGammaHighlights                                           => _offColorGammaHighlights.GetValue();
	public FVector4                                            ColorGainHighlights                                            => _offColorGainHighlights.GetValue();
	public FVector4                                            ColorOffsetHighlights                                          => _offColorOffsetHighlights.GetValue();
	public float                                               ColorCorrectionHighlightsMin                                   => _offColorCorrectionHighlightsMin.GetValue();
	public float                                               ColorCorrectionShadowsMax                                      => _offColorCorrectionShadowsMax.GetValue();
	public float                                               BlueCorrection                                                 => _offBlueCorrection.GetValue();
	public float                                               ExpandGamut                                                    => _offExpandGamut.GetValue();
	public float                                               FilmSlope                                                      => _offFilmSlope.GetValue();
	public float                                               FilmToe                                                        => _offFilmToe.GetValue();
	public float                                               FilmShoulder                                                   => _offFilmShoulder.GetValue();
	public float                                               FilmBlackClip                                                  => _offFilmBlackClip.GetValue();
	public float                                               FilmWhiteClip                                                  => _offFilmWhiteClip.GetValue();
	public FLinearColor                                        FilmWhitePoint                                                 => _offFilmWhitePoint.GetValue();
	public FLinearColor                                        FilmShadowTint                                                 => _offFilmShadowTint.GetValue();
	public float                                               FilmShadowTintBlend                                            => _offFilmShadowTintBlend.GetValue();
	public float                                               FilmShadowTintAmount                                           => _offFilmShadowTintAmount.GetValue();
	public float                                               FilmSaturation                                                 => _offFilmSaturation.GetValue();
	public FLinearColor                                        FilmChannelMixerRed                                            => _offFilmChannelMixerRed.GetValue();
	public FLinearColor                                        FilmChannelMixerGreen                                          => _offFilmChannelMixerGreen.GetValue();
	public FLinearColor                                        FilmChannelMixerBlue                                           => _offFilmChannelMixerBlue.GetValue();
	public float                                               FilmContrast                                                   => _offFilmContrast.GetValue();
	public float                                               FilmToeAmount                                                  => _offFilmToeAmount.GetValue();
	public float                                               FilmHealAmount                                                 => _offFilmHealAmount.GetValue();
	public float                                               FilmDynamicRange                                               => _offFilmDynamicRange.GetValue();
	public FLinearColor                                        SceneColorTint                                                 => _offSceneColorTint.GetValue();
	public float                                               SceneFringeIntensity                                           => _offSceneFringeIntensity.GetValue();
	public float                                               ChromaticAberrationStartOffset                                 => _offChromaticAberrationStartOffset.GetValue();
	public float                                               BloomIntensity                                                 => _offBloomIntensity.GetValue();
	public float                                               BloomThreshold                                                 => _offBloomThreshold.GetValue();
	public float                                               BloomSizeScale                                                 => _offBloomSizeScale.GetValue();
	public float                                               Bloom1Size                                                     => _offBloom1Size.GetValue();
	public float                                               Bloom2Size                                                     => _offBloom2Size.GetValue();
	public float                                               Bloom3Size                                                     => _offBloom3Size.GetValue();
	public float                                               Bloom4Size                                                     => _offBloom4Size.GetValue();
	public float                                               Bloom5Size                                                     => _offBloom5Size.GetValue();
	public float                                               Bloom6Size                                                     => _offBloom6Size.GetValue();
	public FLinearColor                                        Bloom1Tint                                                     => _offBloom1Tint.GetValue();
	public FLinearColor                                        Bloom2Tint                                                     => _offBloom2Tint.GetValue();
	public FLinearColor                                        Bloom3Tint                                                     => _offBloom3Tint.GetValue();
	public FLinearColor                                        Bloom4Tint                                                     => _offBloom4Tint.GetValue();
	public FLinearColor                                        Bloom5Tint                                                     => _offBloom5Tint.GetValue();
	public FLinearColor                                        Bloom6Tint                                                     => _offBloom6Tint.GetValue();
	public float                                               BloomConvolutionSize                                           => _offBloomConvolutionSize.GetValue();
	public UTexture2D                                          BloomConvolutionTexture                                        => _offBloomConvolutionTexture.GetValue();
	public FVector2D                                           BloomConvolutionCenterUV                                       => _offBloomConvolutionCenterUV.GetValue();
	public float                                               BloomConvolutionPreFilterMin                                   => _offBloomConvolutionPreFilterMin.GetValue();
	public float                                               BloomConvolutionPreFilterMax                                   => _offBloomConvolutionPreFilterMax.GetValue();
	public float                                               BloomConvolutionPreFilterMult                                  => _offBloomConvolutionPreFilterMult.GetValue();
	public float                                               BloomConvolutionBufferScale                                    => _offBloomConvolutionBufferScale.GetValue();
	public UTexture                                            BloomDirtMask                                                  => _offBloomDirtMask.GetValue();
	public float                                               BloomDirtMaskIntensity                                         => _offBloomDirtMaskIntensity.GetValue();
	public FLinearColor                                        BloomDirtMaskTint                                              => _offBloomDirtMaskTint.GetValue();
	public FLinearColor                                        AmbientCubemapTint                                             => _offAmbientCubemapTint.GetValue();
	public float                                               AmbientCubemapIntensity                                        => _offAmbientCubemapIntensity.GetValue();
	public UTextureCube                                        AmbientCubemap                                                 => _offAmbientCubemap.GetValue();
	public float                                               CameraShutterSpeed                                             => _offCameraShutterSpeed.GetValue();
	public float                                               CameraISO                                                      => _offCameraISO.GetValue();
	public float                                               DepthOfFieldFstop                                              => _offDepthOfFieldFstop.GetValue();
	public float                                               DepthOfFieldMinFstop                                           => _offDepthOfFieldMinFstop.GetValue();
	public int                                                 DepthOfFieldBladeCount                                         => _offDepthOfFieldBladeCount.GetValue();
	public float                                               AutoExposureBias                                               => _offAutoExposureBias.GetValue();
	public UCurveFloat                                         AutoExposureBiasCurve                                          => _offAutoExposureBiasCurve.GetValue();
	public float                                               AutoExposureLowPercent                                         => _offAutoExposureLowPercent.GetValue();
	public float                                               AutoExposureHighPercent                                        => _offAutoExposureHighPercent.GetValue();
	public float                                               AutoExposureMinBrightness                                      => _offAutoExposureMinBrightness.GetValue();
	public float                                               AutoExposureMaxBrightness                                      => _offAutoExposureMaxBrightness.GetValue();
	public float                                               AutoExposureSpeedUp                                            => _offAutoExposureSpeedUp.GetValue();
	public float                                               AutoExposureSpeedDown                                          => _offAutoExposureSpeedDown.GetValue();
	public float                                               HistogramLogMin                                                => _offHistogramLogMin.GetValue();
	public float                                               HistogramLogMax                                                => _offHistogramLogMax.GetValue();
	public float                                               AutoExposureCalibrationConstant                                => _offAutoExposureCalibrationConstant.GetValue();
	public float                                               LensFlareIntensity                                             => _offLensFlareIntensity.GetValue();
	public FLinearColor                                        LensFlareTint                                                  => _offLensFlareTint.GetValue();
	public float                                               LensFlareBokehSize                                             => _offLensFlareBokehSize.GetValue();
	public float                                               LensFlareThreshold                                             => _offLensFlareThreshold.GetValue();
	public UTexture                                            LensFlareBokehShape                                            => _offLensFlareBokehShape.GetValue();
	public float                                               VignetteIntensity                                              => _offVignetteIntensity.GetValue();
	public float                                               GrainJitter                                                    => _offGrainJitter.GetValue();
	public float                                               GrainIntensity                                                 => _offGrainIntensity.GetValue();
	public float                                               AmbientOcclusionIntensity                                      => _offAmbientOcclusionIntensity.GetValue();
	public float                                               AmbientOcclusionStaticFraction                                 => _offAmbientOcclusionStaticFraction.GetValue();
	public float                                               AmbientOcclusionRadius                                         => _offAmbientOcclusionRadius.GetValue();
	public float                                               AmbientOcclusionFadeDistance                                   => _offAmbientOcclusionFadeDistance.GetValue();
	public float                                               AmbientOcclusionFadeRadius                                     => _offAmbientOcclusionFadeRadius.GetValue();
	public float                                               AmbientOcclusionDistance                                       => _offAmbientOcclusionDistance.GetValue();
	public float                                               AmbientOcclusionPower                                          => _offAmbientOcclusionPower.GetValue();
	public float                                               AmbientOcclusionBias                                           => _offAmbientOcclusionBias.GetValue();
	public float                                               AmbientOcclusionQuality                                        => _offAmbientOcclusionQuality.GetValue();
	public float                                               AmbientOcclusionMipBlend                                       => _offAmbientOcclusionMipBlend.GetValue();
	public float                                               AmbientOcclusionMipScale                                       => _offAmbientOcclusionMipScale.GetValue();
	public float                                               AmbientOcclusionMipThreshold                                   => _offAmbientOcclusionMipThreshold.GetValue();
	public int                                                 RayTracingAOSamplesPerPixel                                    => _offRayTracingAOSamplesPerPixel.GetValue();
	public FLinearColor                                        IndirectLightingColor                                          => _offIndirectLightingColor.GetValue();
	public float                                               IndirectLightingIntensity                                      => _offIndirectLightingIntensity.GetValue();
	public int                                                 RayTracingGIMaxBounces                                         => _offRayTracingGIMaxBounces.GetValue();
	public int                                                 RayTracingGISamplesPerPixel                                    => _offRayTracingGISamplesPerPixel.GetValue();
	public float                                               ColorGradingIntensity                                          => _offColorGradingIntensity.GetValue();
	public UTexture                                            ColorGradingLUT                                                => _offColorGradingLUT.GetValue();
	public float                                               DepthOfFieldSensorWidth                                        => _offDepthOfFieldSensorWidth.GetValue();
	public float                                               DepthOfFieldFocalDistance                                      => _offDepthOfFieldFocalDistance.GetValue();
	public float                                               DepthOfFieldDepthBlurAmount                                    => _offDepthOfFieldDepthBlurAmount.GetValue();
	public float                                               DepthOfFieldDepthBlurRadius                                    => _offDepthOfFieldDepthBlurRadius.GetValue();
	public float                                               DepthOfFieldFocalRegion                                        => _offDepthOfFieldFocalRegion.GetValue();
	public float                                               DepthOfFieldNearTransitionRegion                               => _offDepthOfFieldNearTransitionRegion.GetValue();
	public float                                               DepthOfFieldFarTransitionRegion                                => _offDepthOfFieldFarTransitionRegion.GetValue();
	public float                                               DepthOfFieldScale                                              => _offDepthOfFieldScale.GetValue();
	public float                                               DepthOfFieldNearBlurSize                                       => _offDepthOfFieldNearBlurSize.GetValue();
	public float                                               DepthOfFieldFarBlurSize                                        => _offDepthOfFieldFarBlurSize.GetValue();
	public float                                               DepthOfFieldOcclusion                                          => _offDepthOfFieldOcclusion.GetValue();
	public float                                               DepthOfFieldSkyFocusDistance                                   => _offDepthOfFieldSkyFocusDistance.GetValue();
	public float                                               DepthOfFieldVignetteSize                                       => _offDepthOfFieldVignetteSize.GetValue();
	public float                                               MotionBlurAmount                                               => _offMotionBlurAmount.GetValue();
	public float                                               MotionBlurMax                                                  => _offMotionBlurMax.GetValue();
	public int                                                 MotionBlurTargetFPS                                            => _offMotionBlurTargetFPS.GetValue();
	public float                                               MotionBlurPerObjectSize                                        => _offMotionBlurPerObjectSize.GetValue();
	public float                                               LPVIntensity                                                   => _offLPVIntensity.GetValue();
	public float                                               LPVVplInjectionBias                                            => _offLPVVplInjectionBias.GetValue();
	public float                                               LPVSize                                                        => _offLPVSize.GetValue();
	public float                                               LPVSecondaryOcclusionIntensity                                 => _offLPVSecondaryOcclusionIntensity.GetValue();
	public float                                               LPVSecondaryBounceIntensity                                    => _offLPVSecondaryBounceIntensity.GetValue();
	public float                                               LPVGeometryVolumeBias                                          => _offLPVGeometryVolumeBias.GetValue();
	public float                                               LPVEmissiveInjectionIntensity                                  => _offLPVEmissiveInjectionIntensity.GetValue();
	public float                                               LPVDirectionalOcclusionIntensity                               => _offLPVDirectionalOcclusionIntensity.GetValue();
	public float                                               LPVDirectionalOcclusionRadius                                  => _offLPVDirectionalOcclusionRadius.GetValue();
	public float                                               LPVDiffuseOcclusionExponent                                    => _offLPVDiffuseOcclusionExponent.GetValue();
	public float                                               LPVSpecularOcclusionExponent                                   => _offLPVSpecularOcclusionExponent.GetValue();
	public float                                               LPVDiffuseOcclusionIntensity                                   => _offLPVDiffuseOcclusionIntensity.GetValue();
	public float                                               LPVSpecularOcclusionIntensity                                  => _offLPVSpecularOcclusionIntensity.GetValue();
	public EReflectionsType                                    ReflectionsType                                                => _offReflectionsType.GetValue();
	public float                                               ScreenSpaceReflectionIntensity                                 => _offScreenSpaceReflectionIntensity.GetValue();
	public float                                               ScreenSpaceReflectionQuality                                   => _offScreenSpaceReflectionQuality.GetValue();
	public float                                               ScreenSpaceReflectionMaxRoughness                              => _offScreenSpaceReflectionMaxRoughness.GetValue();
	public float                                               RayTracingReflectionsMaxRoughness                              => _offRayTracingReflectionsMaxRoughness.GetValue();
	public int                                                 RayTracingReflectionsMaxBounces                                => _offRayTracingReflectionsMaxBounces.GetValue();
	public int                                                 RayTracingReflectionsSamplesPerPixel                           => _offRayTracingReflectionsSamplesPerPixel.GetValue();
	public EReflectedAndRefractedRayTracedShadows              RayTracingReflectionsShadows                                   => _offRayTracingReflectionsShadows.GetValue();
	public ETranslucencyType                                   TranslucencyType                                               => _offTranslucencyType.GetValue();
	public float                                               RayTracingTranslucencyMaxRoughness                             => _offRayTracingTranslucencyMaxRoughness.GetValue();
	public int                                                 RayTracingTranslucencyRefractionRays                           => _offRayTracingTranslucencyRefractionRays.GetValue();
	public int                                                 RayTracingTranslucencySamplesPerPixel                          => _offRayTracingTranslucencySamplesPerPixel.GetValue();
	public EReflectedAndRefractedRayTracedShadows              RayTracingTranslucencyShadows                                  => _offRayTracingTranslucencyShadows.GetValue();
	public int                                                 PathTracingMaxBounces                                          => _offPathTracingMaxBounces.GetValue();
	public int                                                 PathTracingSamplesPerPixel                                     => _offPathTracingSamplesPerPixel.GetValue();
	public float                                               LPVFadeRange                                                   => _offLPVFadeRange.GetValue();
	public float                                               LPVDirectionalOcclusionFadeRange                               => _offLPVDirectionalOcclusionFadeRange.GetValue();
	public float                                               ScreenPercentage                                               => _offScreenPercentage.GetValue();
	public FWeightedBlendables                                 WeightedBlendables                                             => _offWeightedBlendables.GetValue();
	#endregion

	public FPostProcessSettings(TEnumAsByte<EBloomMethod> c_BloomMethod, TEnumAsByte<EAutoExposureMethod> c_AutoExposureMethod, float c_WhiteTemp, float c_WhiteTint, FVector4 c_ColorSaturation, FVector4 c_ColorContrast, FVector4 c_ColorGamma, FVector4 c_ColorGain, FVector4 c_ColorOffset, FVector4 c_ColorSaturationShadows, FVector4 c_ColorContrastShadows, FVector4 c_ColorGammaShadows, FVector4 c_ColorGainShadows, FVector4 c_ColorOffsetShadows, FVector4 c_ColorSaturationMidtones, FVector4 c_ColorContrastMidtones, FVector4 c_ColorGammaMidtones, FVector4 c_ColorGainMidtones, FVector4 c_ColorOffsetMidtones, FVector4 c_ColorSaturationHighlights, FVector4 c_ColorContrastHighlights, FVector4 c_ColorGammaHighlights, FVector4 c_ColorGainHighlights, FVector4 c_ColorOffsetHighlights, float c_ColorCorrectionHighlightsMin, float c_ColorCorrectionShadowsMax, float c_BlueCorrection, float c_ExpandGamut, float c_FilmSlope, float c_FilmToe, float c_FilmShoulder, float c_FilmBlackClip, float c_FilmWhiteClip, FLinearColor c_FilmWhitePoint, FLinearColor c_FilmShadowTint, float c_FilmShadowTintBlend, float c_FilmShadowTintAmount, float c_FilmSaturation, FLinearColor c_FilmChannelMixerRed, FLinearColor c_FilmChannelMixerGreen, FLinearColor c_FilmChannelMixerBlue, float c_FilmContrast, float c_FilmToeAmount, float c_FilmHealAmount, float c_FilmDynamicRange, FLinearColor c_SceneColorTint, float c_SceneFringeIntensity, float c_ChromaticAberrationStartOffset, float c_BloomIntensity, float c_BloomThreshold, float c_BloomSizeScale, float c_Bloom1Size, float c_Bloom2Size, float c_Bloom3Size, float c_Bloom4Size, float c_Bloom5Size, float c_Bloom6Size, FLinearColor c_Bloom1Tint, FLinearColor c_Bloom2Tint, FLinearColor c_Bloom3Tint, FLinearColor c_Bloom4Tint, FLinearColor c_Bloom5Tint, FLinearColor c_Bloom6Tint, float c_BloomConvolutionSize, UTexture2D c_BloomConvolutionTexture, FVector2D c_BloomConvolutionCenterUV, float c_BloomConvolutionPreFilterMin, float c_BloomConvolutionPreFilterMax, float c_BloomConvolutionPreFilterMult, float c_BloomConvolutionBufferScale, UTexture c_BloomDirtMask, float c_BloomDirtMaskIntensity, FLinearColor c_BloomDirtMaskTint, FLinearColor c_AmbientCubemapTint, float c_AmbientCubemapIntensity, UTextureCube c_AmbientCubemap, float c_CameraShutterSpeed, float c_CameraISO, float c_DepthOfFieldFstop, float c_DepthOfFieldMinFstop, int c_DepthOfFieldBladeCount, float c_AutoExposureBias, UCurveFloat c_AutoExposureBiasCurve, float c_AutoExposureLowPercent, float c_AutoExposureHighPercent, float c_AutoExposureMinBrightness, float c_AutoExposureMaxBrightness, float c_AutoExposureSpeedUp, float c_AutoExposureSpeedDown, float c_HistogramLogMin, float c_HistogramLogMax, float c_AutoExposureCalibrationConstant, float c_LensFlareIntensity, FLinearColor c_LensFlareTint, float c_LensFlareBokehSize, float c_LensFlareThreshold, UTexture c_LensFlareBokehShape, float c_VignetteIntensity, float c_GrainJitter, float c_GrainIntensity, float c_AmbientOcclusionIntensity, float c_AmbientOcclusionStaticFraction, float c_AmbientOcclusionRadius, float c_AmbientOcclusionFadeDistance, float c_AmbientOcclusionFadeRadius, float c_AmbientOcclusionDistance, float c_AmbientOcclusionPower, float c_AmbientOcclusionBias, float c_AmbientOcclusionQuality, float c_AmbientOcclusionMipBlend, float c_AmbientOcclusionMipScale, float c_AmbientOcclusionMipThreshold, int c_RayTracingAOSamplesPerPixel, FLinearColor c_IndirectLightingColor, float c_IndirectLightingIntensity, int c_RayTracingGIMaxBounces, int c_RayTracingGISamplesPerPixel, float c_ColorGradingIntensity, UTexture c_ColorGradingLUT, float c_DepthOfFieldSensorWidth, float c_DepthOfFieldFocalDistance, float c_DepthOfFieldDepthBlurAmount, float c_DepthOfFieldDepthBlurRadius, float c_DepthOfFieldFocalRegion, float c_DepthOfFieldNearTransitionRegion, float c_DepthOfFieldFarTransitionRegion, float c_DepthOfFieldScale, float c_DepthOfFieldNearBlurSize, float c_DepthOfFieldFarBlurSize, float c_DepthOfFieldOcclusion, float c_DepthOfFieldSkyFocusDistance, float c_DepthOfFieldVignetteSize, float c_MotionBlurAmount, float c_MotionBlurMax, int c_MotionBlurTargetFPS, float c_MotionBlurPerObjectSize, float c_LPVIntensity, float c_LPVVplInjectionBias, float c_LPVSize, float c_LPVSecondaryOcclusionIntensity, float c_LPVSecondaryBounceIntensity, float c_LPVGeometryVolumeBias, float c_LPVEmissiveInjectionIntensity, float c_LPVDirectionalOcclusionIntensity, float c_LPVDirectionalOcclusionRadius, float c_LPVDiffuseOcclusionExponent, float c_LPVSpecularOcclusionExponent, float c_LPVDiffuseOcclusionIntensity, float c_LPVSpecularOcclusionIntensity, EReflectionsType c_ReflectionsType, float c_ScreenSpaceReflectionIntensity, float c_ScreenSpaceReflectionQuality, float c_ScreenSpaceReflectionMaxRoughness, float c_RayTracingReflectionsMaxRoughness, int c_RayTracingReflectionsMaxBounces, int c_RayTracingReflectionsSamplesPerPixel, EReflectedAndRefractedRayTracedShadows c_RayTracingReflectionsShadows, ETranslucencyType c_TranslucencyType, float c_RayTracingTranslucencyMaxRoughness, int c_RayTracingTranslucencyRefractionRays, int c_RayTracingTranslucencySamplesPerPixel, EReflectedAndRefractedRayTracedShadows c_RayTracingTranslucencyShadows, int c_PathTracingMaxBounces, int c_PathTracingSamplesPerPixel, float c_LPVFadeRange, float c_LPVDirectionalOcclusionFadeRange, float c_ScreenPercentage, FWeightedBlendables c_WeightedBlendables) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBloomMethod.SetValue(c_BloomMethod);
		_offAutoExposureMethod.SetValue(c_AutoExposureMethod);
		_offWhiteTemp.SetValue(c_WhiteTemp);
		_offWhiteTint.SetValue(c_WhiteTint);
		_offColorSaturation.SetValue(c_ColorSaturation);
		_offColorContrast.SetValue(c_ColorContrast);
		_offColorGamma.SetValue(c_ColorGamma);
		_offColorGain.SetValue(c_ColorGain);
		_offColorOffset.SetValue(c_ColorOffset);
		_offColorSaturationShadows.SetValue(c_ColorSaturationShadows);
		_offColorContrastShadows.SetValue(c_ColorContrastShadows);
		_offColorGammaShadows.SetValue(c_ColorGammaShadows);
		_offColorGainShadows.SetValue(c_ColorGainShadows);
		_offColorOffsetShadows.SetValue(c_ColorOffsetShadows);
		_offColorSaturationMidtones.SetValue(c_ColorSaturationMidtones);
		_offColorContrastMidtones.SetValue(c_ColorContrastMidtones);
		_offColorGammaMidtones.SetValue(c_ColorGammaMidtones);
		_offColorGainMidtones.SetValue(c_ColorGainMidtones);
		_offColorOffsetMidtones.SetValue(c_ColorOffsetMidtones);
		_offColorSaturationHighlights.SetValue(c_ColorSaturationHighlights);
		_offColorContrastHighlights.SetValue(c_ColorContrastHighlights);
		_offColorGammaHighlights.SetValue(c_ColorGammaHighlights);
		_offColorGainHighlights.SetValue(c_ColorGainHighlights);
		_offColorOffsetHighlights.SetValue(c_ColorOffsetHighlights);
		_offColorCorrectionHighlightsMin.SetValue(c_ColorCorrectionHighlightsMin);
		_offColorCorrectionShadowsMax.SetValue(c_ColorCorrectionShadowsMax);
		_offBlueCorrection.SetValue(c_BlueCorrection);
		_offExpandGamut.SetValue(c_ExpandGamut);
		_offFilmSlope.SetValue(c_FilmSlope);
		_offFilmToe.SetValue(c_FilmToe);
		_offFilmShoulder.SetValue(c_FilmShoulder);
		_offFilmBlackClip.SetValue(c_FilmBlackClip);
		_offFilmWhiteClip.SetValue(c_FilmWhiteClip);
		_offFilmWhitePoint.SetValue(c_FilmWhitePoint);
		_offFilmShadowTint.SetValue(c_FilmShadowTint);
		_offFilmShadowTintBlend.SetValue(c_FilmShadowTintBlend);
		_offFilmShadowTintAmount.SetValue(c_FilmShadowTintAmount);
		_offFilmSaturation.SetValue(c_FilmSaturation);
		_offFilmChannelMixerRed.SetValue(c_FilmChannelMixerRed);
		_offFilmChannelMixerGreen.SetValue(c_FilmChannelMixerGreen);
		_offFilmChannelMixerBlue.SetValue(c_FilmChannelMixerBlue);
		_offFilmContrast.SetValue(c_FilmContrast);
		_offFilmToeAmount.SetValue(c_FilmToeAmount);
		_offFilmHealAmount.SetValue(c_FilmHealAmount);
		_offFilmDynamicRange.SetValue(c_FilmDynamicRange);
		_offSceneColorTint.SetValue(c_SceneColorTint);
		_offSceneFringeIntensity.SetValue(c_SceneFringeIntensity);
		_offChromaticAberrationStartOffset.SetValue(c_ChromaticAberrationStartOffset);
		_offBloomIntensity.SetValue(c_BloomIntensity);
		_offBloomThreshold.SetValue(c_BloomThreshold);
		_offBloomSizeScale.SetValue(c_BloomSizeScale);
		_offBloom1Size.SetValue(c_Bloom1Size);
		_offBloom2Size.SetValue(c_Bloom2Size);
		_offBloom3Size.SetValue(c_Bloom3Size);
		_offBloom4Size.SetValue(c_Bloom4Size);
		_offBloom5Size.SetValue(c_Bloom5Size);
		_offBloom6Size.SetValue(c_Bloom6Size);
		_offBloom1Tint.SetValue(c_Bloom1Tint);
		_offBloom2Tint.SetValue(c_Bloom2Tint);
		_offBloom3Tint.SetValue(c_Bloom3Tint);
		_offBloom4Tint.SetValue(c_Bloom4Tint);
		_offBloom5Tint.SetValue(c_Bloom5Tint);
		_offBloom6Tint.SetValue(c_Bloom6Tint);
		_offBloomConvolutionSize.SetValue(c_BloomConvolutionSize);
		_offBloomConvolutionTexture.SetValue(c_BloomConvolutionTexture);
		_offBloomConvolutionCenterUV.SetValue(c_BloomConvolutionCenterUV);
		_offBloomConvolutionPreFilterMin.SetValue(c_BloomConvolutionPreFilterMin);
		_offBloomConvolutionPreFilterMax.SetValue(c_BloomConvolutionPreFilterMax);
		_offBloomConvolutionPreFilterMult.SetValue(c_BloomConvolutionPreFilterMult);
		_offBloomConvolutionBufferScale.SetValue(c_BloomConvolutionBufferScale);
		_offBloomDirtMask.SetValue(c_BloomDirtMask);
		_offBloomDirtMaskIntensity.SetValue(c_BloomDirtMaskIntensity);
		_offBloomDirtMaskTint.SetValue(c_BloomDirtMaskTint);
		_offAmbientCubemapTint.SetValue(c_AmbientCubemapTint);
		_offAmbientCubemapIntensity.SetValue(c_AmbientCubemapIntensity);
		_offAmbientCubemap.SetValue(c_AmbientCubemap);
		_offCameraShutterSpeed.SetValue(c_CameraShutterSpeed);
		_offCameraISO.SetValue(c_CameraISO);
		_offDepthOfFieldFstop.SetValue(c_DepthOfFieldFstop);
		_offDepthOfFieldMinFstop.SetValue(c_DepthOfFieldMinFstop);
		_offDepthOfFieldBladeCount.SetValue(c_DepthOfFieldBladeCount);
		_offAutoExposureBias.SetValue(c_AutoExposureBias);
		_offAutoExposureBiasCurve.SetValue(c_AutoExposureBiasCurve);
		_offAutoExposureLowPercent.SetValue(c_AutoExposureLowPercent);
		_offAutoExposureHighPercent.SetValue(c_AutoExposureHighPercent);
		_offAutoExposureMinBrightness.SetValue(c_AutoExposureMinBrightness);
		_offAutoExposureMaxBrightness.SetValue(c_AutoExposureMaxBrightness);
		_offAutoExposureSpeedUp.SetValue(c_AutoExposureSpeedUp);
		_offAutoExposureSpeedDown.SetValue(c_AutoExposureSpeedDown);
		_offHistogramLogMin.SetValue(c_HistogramLogMin);
		_offHistogramLogMax.SetValue(c_HistogramLogMax);
		_offAutoExposureCalibrationConstant.SetValue(c_AutoExposureCalibrationConstant);
		_offLensFlareIntensity.SetValue(c_LensFlareIntensity);
		_offLensFlareTint.SetValue(c_LensFlareTint);
		_offLensFlareBokehSize.SetValue(c_LensFlareBokehSize);
		_offLensFlareThreshold.SetValue(c_LensFlareThreshold);
		_offLensFlareBokehShape.SetValue(c_LensFlareBokehShape);
		_offVignetteIntensity.SetValue(c_VignetteIntensity);
		_offGrainJitter.SetValue(c_GrainJitter);
		_offGrainIntensity.SetValue(c_GrainIntensity);
		_offAmbientOcclusionIntensity.SetValue(c_AmbientOcclusionIntensity);
		_offAmbientOcclusionStaticFraction.SetValue(c_AmbientOcclusionStaticFraction);
		_offAmbientOcclusionRadius.SetValue(c_AmbientOcclusionRadius);
		_offAmbientOcclusionFadeDistance.SetValue(c_AmbientOcclusionFadeDistance);
		_offAmbientOcclusionFadeRadius.SetValue(c_AmbientOcclusionFadeRadius);
		_offAmbientOcclusionDistance.SetValue(c_AmbientOcclusionDistance);
		_offAmbientOcclusionPower.SetValue(c_AmbientOcclusionPower);
		_offAmbientOcclusionBias.SetValue(c_AmbientOcclusionBias);
		_offAmbientOcclusionQuality.SetValue(c_AmbientOcclusionQuality);
		_offAmbientOcclusionMipBlend.SetValue(c_AmbientOcclusionMipBlend);
		_offAmbientOcclusionMipScale.SetValue(c_AmbientOcclusionMipScale);
		_offAmbientOcclusionMipThreshold.SetValue(c_AmbientOcclusionMipThreshold);
		_offRayTracingAOSamplesPerPixel.SetValue(c_RayTracingAOSamplesPerPixel);
		_offIndirectLightingColor.SetValue(c_IndirectLightingColor);
		_offIndirectLightingIntensity.SetValue(c_IndirectLightingIntensity);
		_offRayTracingGIMaxBounces.SetValue(c_RayTracingGIMaxBounces);
		_offRayTracingGISamplesPerPixel.SetValue(c_RayTracingGISamplesPerPixel);
		_offColorGradingIntensity.SetValue(c_ColorGradingIntensity);
		_offColorGradingLUT.SetValue(c_ColorGradingLUT);
		_offDepthOfFieldSensorWidth.SetValue(c_DepthOfFieldSensorWidth);
		_offDepthOfFieldFocalDistance.SetValue(c_DepthOfFieldFocalDistance);
		_offDepthOfFieldDepthBlurAmount.SetValue(c_DepthOfFieldDepthBlurAmount);
		_offDepthOfFieldDepthBlurRadius.SetValue(c_DepthOfFieldDepthBlurRadius);
		_offDepthOfFieldFocalRegion.SetValue(c_DepthOfFieldFocalRegion);
		_offDepthOfFieldNearTransitionRegion.SetValue(c_DepthOfFieldNearTransitionRegion);
		_offDepthOfFieldFarTransitionRegion.SetValue(c_DepthOfFieldFarTransitionRegion);
		_offDepthOfFieldScale.SetValue(c_DepthOfFieldScale);
		_offDepthOfFieldNearBlurSize.SetValue(c_DepthOfFieldNearBlurSize);
		_offDepthOfFieldFarBlurSize.SetValue(c_DepthOfFieldFarBlurSize);
		_offDepthOfFieldOcclusion.SetValue(c_DepthOfFieldOcclusion);
		_offDepthOfFieldSkyFocusDistance.SetValue(c_DepthOfFieldSkyFocusDistance);
		_offDepthOfFieldVignetteSize.SetValue(c_DepthOfFieldVignetteSize);
		_offMotionBlurAmount.SetValue(c_MotionBlurAmount);
		_offMotionBlurMax.SetValue(c_MotionBlurMax);
		_offMotionBlurTargetFPS.SetValue(c_MotionBlurTargetFPS);
		_offMotionBlurPerObjectSize.SetValue(c_MotionBlurPerObjectSize);
		_offLPVIntensity.SetValue(c_LPVIntensity);
		_offLPVVplInjectionBias.SetValue(c_LPVVplInjectionBias);
		_offLPVSize.SetValue(c_LPVSize);
		_offLPVSecondaryOcclusionIntensity.SetValue(c_LPVSecondaryOcclusionIntensity);
		_offLPVSecondaryBounceIntensity.SetValue(c_LPVSecondaryBounceIntensity);
		_offLPVGeometryVolumeBias.SetValue(c_LPVGeometryVolumeBias);
		_offLPVEmissiveInjectionIntensity.SetValue(c_LPVEmissiveInjectionIntensity);
		_offLPVDirectionalOcclusionIntensity.SetValue(c_LPVDirectionalOcclusionIntensity);
		_offLPVDirectionalOcclusionRadius.SetValue(c_LPVDirectionalOcclusionRadius);
		_offLPVDiffuseOcclusionExponent.SetValue(c_LPVDiffuseOcclusionExponent);
		_offLPVSpecularOcclusionExponent.SetValue(c_LPVSpecularOcclusionExponent);
		_offLPVDiffuseOcclusionIntensity.SetValue(c_LPVDiffuseOcclusionIntensity);
		_offLPVSpecularOcclusionIntensity.SetValue(c_LPVSpecularOcclusionIntensity);
		_offReflectionsType.SetValue(c_ReflectionsType);
		_offScreenSpaceReflectionIntensity.SetValue(c_ScreenSpaceReflectionIntensity);
		_offScreenSpaceReflectionQuality.SetValue(c_ScreenSpaceReflectionQuality);
		_offScreenSpaceReflectionMaxRoughness.SetValue(c_ScreenSpaceReflectionMaxRoughness);
		_offRayTracingReflectionsMaxRoughness.SetValue(c_RayTracingReflectionsMaxRoughness);
		_offRayTracingReflectionsMaxBounces.SetValue(c_RayTracingReflectionsMaxBounces);
		_offRayTracingReflectionsSamplesPerPixel.SetValue(c_RayTracingReflectionsSamplesPerPixel);
		_offRayTracingReflectionsShadows.SetValue(c_RayTracingReflectionsShadows);
		_offTranslucencyType.SetValue(c_TranslucencyType);
		_offRayTracingTranslucencyMaxRoughness.SetValue(c_RayTracingTranslucencyMaxRoughness);
		_offRayTracingTranslucencyRefractionRays.SetValue(c_RayTracingTranslucencyRefractionRays);
		_offRayTracingTranslucencySamplesPerPixel.SetValue(c_RayTracingTranslucencySamplesPerPixel);
		_offRayTracingTranslucencyShadows.SetValue(c_RayTracingTranslucencyShadows);
		_offPathTracingMaxBounces.SetValue(c_PathTracingMaxBounces);
		_offPathTracingSamplesPerPixel.SetValue(c_PathTracingSamplesPerPixel);
		_offLPVFadeRange.SetValue(c_LPVFadeRange);
		_offLPVDirectionalOcclusionFadeRange.SetValue(c_LPVDirectionalOcclusionFadeRange);
		_offScreenPercentage.SetValue(c_ScreenPercentage);
		_offWeightedBlendables.SetValue(c_WeightedBlendables);
	}
}
// ScriptStruct Engine.AnimationTransitionBetweenStates
// 0x0038 (0x0040 - 0x0008)
public class FAnimationTransitionBetweenStates : FAnimationStateBase
{
	#region Offsets
	private ExternalOffset<int>                                _offPreviousState                                              = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNextState                                                  = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCrossfadeDuration                                          = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartNotify                                                = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offEndNotify                                                  = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offInterruptNotify                                            = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAlphaBlendOption>                  _offBlendMode                                                  = new ExternalOffset<EAlphaBlendOption>(0x0020, false);        // 0x0020(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offCustomCurve                                                = new ExternalOffset<UCurveFloat>(0x0028, true);               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UBlendProfile>                      _offBlendProfile                                               = new ExternalOffset<UBlendProfile>(0x0030, true);             // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETransitionLogicType>>  _offLogicType                                                  = new ExternalOffset<TEnumAsByte<ETransitionLogicType>>(0x0038, false); // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PreviousState                                                  => _offPreviousState.GetValue();
	public int                                                 NextState                                                      => _offNextState.GetValue();
	public float                                               CrossfadeDuration                                              => _offCrossfadeDuration.GetValue();
	public int                                                 StartNotify                                                    => _offStartNotify.GetValue();
	public int                                                 EndNotify                                                      => _offEndNotify.GetValue();
	public int                                                 InterruptNotify                                                => _offInterruptNotify.GetValue();
	public EAlphaBlendOption                                   BlendMode                                                      => _offBlendMode.GetValue();
	public UCurveFloat                                         CustomCurve                                                    => _offCustomCurve.GetValue();
	public UBlendProfile                                       BlendProfile                                                   => _offBlendProfile.GetValue();
	public TEnumAsByte<ETransitionLogicType>                   LogicType                                                      => _offLogicType.GetValue();
	#endregion

	public FAnimationTransitionBetweenStates(int c_PreviousState, int c_NextState, float c_CrossfadeDuration, int c_StartNotify, int c_EndNotify, int c_InterruptNotify, EAlphaBlendOption c_BlendMode, UCurveFloat c_CustomCurve, UBlendProfile c_BlendProfile, TEnumAsByte<ETransitionLogicType> c_LogicType) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPreviousState.SetValue(c_PreviousState);
		_offNextState.SetValue(c_NextState);
		_offCrossfadeDuration.SetValue(c_CrossfadeDuration);
		_offStartNotify.SetValue(c_StartNotify);
		_offEndNotify.SetValue(c_EndNotify);
		_offInterruptNotify.SetValue(c_InterruptNotify);
		_offBlendMode.SetValue(c_BlendMode);
		_offCustomCurve.SetValue(c_CustomCurve);
		_offBlendProfile.SetValue(c_BlendProfile);
		_offLogicType.SetValue(c_LogicType);
	}
}
// ScriptStruct Engine.BakedAnimationStateMachine
// 0x0030
public class FBakedAnimationStateMachine : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offMachineName                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offInitialState                                               = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBakedAnimationState>>       _offStates                                                     = new ExternalOffset<TArray<FBakedAnimationState>>(0x0010, false); // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimationTransitionBetweenStates>> _offTransitions                                                = new ExternalOffset<TArray<FAnimationTransitionBetweenStates>>(0x0020, false); // 0x0020(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               MachineName                                                    => _offMachineName.GetValue();
	public int                                                 InitialState                                                   => _offInitialState.GetValue();
	public TArray<FBakedAnimationState>                        States                                                         => _offStates.GetValue();
	public TArray<FAnimationTransitionBetweenStates>           Transitions                                                    => _offTransitions.GetValue();
	#endregion

	public FBakedAnimationStateMachine(FName c_MachineName, int c_InitialState, TArray<FBakedAnimationState> c_States, TArray<FAnimationTransitionBetweenStates> c_Transitions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMachineName.SetValue(c_MachineName);
		_offInitialState.SetValue(c_InitialState);
		_offStates.SetValue(c_States);
		_offTransitions.SetValue(c_Transitions);
	}
}
// ScriptStruct Engine.AnimationTransitionRule
// 0x0010
public class FAnimationTransitionRule : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offRuleToExecute                                              = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offTransitionReturnVal                                        = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTransitionIndex                                            = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               RuleToExecute                                                  => _offRuleToExecute.GetValue();
	public byte/*(bool)*/                                      TransitionReturnVal                                            => _offTransitionReturnVal.GetValue();
	public int                                                 TransitionIndex                                                => _offTransitionIndex.GetValue();
	#endregion

	public FAnimationTransitionRule(FName c_RuleToExecute, byte/*(bool)*/ c_TransitionReturnVal, int c_TransitionIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRuleToExecute.SetValue(c_RuleToExecute);
		_offTransitionReturnVal.SetValue(c_TransitionReturnVal);
		_offTransitionIndex.SetValue(c_TransitionIndex);
	}
}
// ScriptStruct Engine.AnimationState
// 0x0020 (0x0028 - 0x0008)
public class FAnimationState : FAnimationStateBase
{
	#region Offsets
	private ExternalOffset<TArray<FAnimationTransitionRule>>   _offTransitions                                                = new ExternalOffset<TArray<FAnimationTransitionRule>>(0x0008, false); // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStateRootNodeIndex                                         = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartNotify                                                = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offEndNotify                                                  = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offFullyBlendedNotify                                         = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FAnimationTransitionRule>                    Transitions                                                    => _offTransitions.GetValue();
	public int                                                 StateRootNodeIndex                                             => _offStateRootNodeIndex.GetValue();
	public int                                                 StartNotify                                                    => _offStartNotify.GetValue();
	public int                                                 EndNotify                                                      => _offEndNotify.GetValue();
	public int                                                 FullyBlendedNotify                                             => _offFullyBlendedNotify.GetValue();
	#endregion

	public FAnimationState(TArray<FAnimationTransitionRule> c_Transitions, int c_StateRootNodeIndex, int c_StartNotify, int c_EndNotify, int c_FullyBlendedNotify) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTransitions.SetValue(c_Transitions);
		_offStateRootNodeIndex.SetValue(c_StateRootNodeIndex);
		_offStartNotify.SetValue(c_StartNotify);
		_offEndNotify.SetValue(c_EndNotify);
		_offFullyBlendedNotify.SetValue(c_FullyBlendedNotify);
	}
}
// ScriptStruct Engine.TrackToSkeletonMap
// 0x0004
public class FTrackToSkeletonMap : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offBoneTreeIndex                                              = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 BoneTreeIndex                                                  => _offBoneTreeIndex.GetValue();
	#endregion

	public FTrackToSkeletonMap(int c_BoneTreeIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneTreeIndex.SetValue(c_BoneTreeIndex);
	}
}
// ScriptStruct Engine.AnimSyncMarker
// 0x000C
public class FAnimSyncMarker : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offMarkerName                                                 = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               MarkerName                                                     => _offMarkerName.GetValue();
	public float                                               Time                                                           => _offTime.GetValue();
	#endregion

	public FAnimSyncMarker(FName c_MarkerName, float c_Time) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMarkerName.SetValue(c_MarkerName);
		_offTime.SetValue(c_Time);
	}
}
// ScriptStruct Engine.MarkerSyncData
// 0x0020
public class FMarkerSyncData : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FAnimSyncMarker>>            _offAuthoredSyncMarkers                                        = new ExternalOffset<TArray<FAnimSyncMarker>>(0x0000, false);  // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FAnimSyncMarker>                             AuthoredSyncMarkers                                            => _offAuthoredSyncMarkers.GetValue();
	#endregion

	public FMarkerSyncData(TArray<FAnimSyncMarker> c_AuthoredSyncMarkers) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthoredSyncMarkers.SetValue(c_AuthoredSyncMarkers);
	}
}
// ScriptStruct Engine.DebugTextInfo
// 0x0060
public class FDebugTextInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<AActor>                             _offSrcActor                                                   = new ExternalOffset<AActor>(0x0000, true);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offSrcActorOffset                                             = new ExternalOffset<FVector>(0x0008, false);                  // 0x0008(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offSrcActorDesiredOffset                                      = new ExternalOffset<FVector>(0x0014, false);                  // 0x0014(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDebugText                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTimeRemaining                                              = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDuration                                                   = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offTextColor                                                  = new ExternalOffset<FColor>(0x0038, false);                   // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAbsoluteLocation                                          = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbKeepAttachedToActor                                       = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbDrawShadow                                                = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrigActorLocation                                          = new ExternalOffset<FVector>(0x0040, false);                  // 0x0040(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UFont>                              _offFont                                                       = new ExternalOffset<UFont>(0x0050, true);                     // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFontScale                                                  = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public AActor                                              SrcActor                                                       => _offSrcActor.GetValue();
	public FVector                                             SrcActorOffset                                                 => _offSrcActorOffset.GetValue();
	public FVector                                             SrcActorDesiredOffset                                          => _offSrcActorDesiredOffset.GetValue();
	public FString                                             DebugText                                                      => _offDebugText.GetValue();
	public float                                               TimeRemaining                                                  => _offTimeRemaining.GetValue();
	public float                                               Duration                                                       => _offDuration.GetValue();
	public FColor                                              TextColor                                                      => _offTextColor.GetValue();
	public FVector                                             OrigActorLocation                                              => _offOrigActorLocation.GetValue();
	public UFont                                               Font                                                           => _offFont.GetValue();
	public float                                               FontScale                                                      => _offFontScale.GetValue();
	#endregion

	public FDebugTextInfo(AActor c_SrcActor, FVector c_SrcActorOffset, FVector c_SrcActorDesiredOffset, FString c_DebugText, float c_TimeRemaining, float c_Duration, FColor c_TextColor, FVector c_OrigActorLocation, UFont c_Font, float c_FontScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSrcActor.SetValue(c_SrcActor);
		_offSrcActorOffset.SetValue(c_SrcActorOffset);
		_offSrcActorDesiredOffset.SetValue(c_SrcActorDesiredOffset);
		_offDebugText.SetValue(c_DebugText);
		_offTimeRemaining.SetValue(c_TimeRemaining);
		_offDuration.SetValue(c_Duration);
		_offTextColor.SetValue(c_TextColor);
		_offOrigActorLocation.SetValue(c_OrigActorLocation);
		_offFont.SetValue(c_Font);
		_offFontScale.SetValue(c_FontScale);
	}
}
// ScriptStruct Engine.AnimNotifyTrack
// 0x0038
public class FAnimNotifyTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offTrackName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offTrackColor                                                 = new ExternalOffset<FLinearColor>(0x0008, false);             // 0x0008(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               TrackName                                                      => _offTrackName.GetValue();
	public FLinearColor                                        TrackColor                                                     => _offTrackColor.GetValue();
	#endregion

	public FAnimNotifyTrack(FName c_TrackName, FLinearColor c_TrackColor) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTrackName.SetValue(c_TrackName);
		_offTrackColor.SetValue(c_TrackColor);
	}
}
// ScriptStruct Engine.PerBoneBlendWeight
// 0x0008
public class FPerBoneBlendWeight : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offSourceIndex                                                = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBlendWeight                                                = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 SourceIndex                                                    => _offSourceIndex.GetValue();
	public float                                               BlendWeight                                                    => _offBlendWeight.GetValue();
	#endregion

	public FPerBoneBlendWeight(int c_SourceIndex, float c_BlendWeight) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourceIndex.SetValue(c_SourceIndex);
		_offBlendWeight.SetValue(c_BlendWeight);
	}
}
// ScriptStruct Engine.PerBoneBlendWeights
// 0x0010
public class FPerBoneBlendWeights : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FPerBoneBlendWeight>>        _offBoneBlendWeights                                           = new ExternalOffset<TArray<FPerBoneBlendWeight>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FPerBoneBlendWeight>                         BoneBlendWeights                                               => _offBoneBlendWeights.GetValue();
	#endregion

	public FPerBoneBlendWeights(TArray<FPerBoneBlendWeight> c_BoneBlendWeights) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneBlendWeights.SetValue(c_BoneBlendWeights);
	}
}
// ScriptStruct Engine.AssetImportInfo
// 0x0001
public class FAssetImportInfo : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAssetImportInfo() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.DirectoryPath
// 0x0010
public class FDirectoryPath : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offPath                                                       = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Path                                                           => _offPath.GetValue();
	#endregion

	public FDirectoryPath(FString c_Path) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPath.SetValue(c_Path);
	}
}
// ScriptStruct Engine.PrimaryAssetRules
// 0x0010
public class FPrimaryAssetRules : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offPriority                                                   = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbApplyRecursively                                          = new ExternalOffset<byte/*(bool)*/>(0x0004);                  // 0x0004(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offChunkId                                                    = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EPrimaryAssetCookRule>              _offCookRule                                                   = new ExternalOffset<EPrimaryAssetCookRule>(0x000C, false);    // 0x000C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Priority                                                       => _offPriority.GetValue();
	public byte/*(bool)*/                                      bApplyRecursively                                              => _offbApplyRecursively.GetValue();
	public int                                                 ChunkId                                                        => _offChunkId.GetValue();
	public EPrimaryAssetCookRule                               CookRule                                                       => _offCookRule.GetValue();
	#endregion

	public FPrimaryAssetRules(int c_Priority, byte/*(bool)*/ c_bApplyRecursively, int c_ChunkId, EPrimaryAssetCookRule c_CookRule) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPriority.SetValue(c_Priority);
		_offbApplyRecursively.SetValue(c_bApplyRecursively);
		_offChunkId.SetValue(c_ChunkId);
		_offCookRule.SetValue(c_CookRule);
	}
}
// ScriptStruct Engine.PrimaryAssetRulesCustomOverride
// 0x0038
public class FPrimaryAssetRulesCustomOverride : ExternalClass
{
	#region Offsets
	private ExternalOffset<FPrimaryAssetType>                  _offPrimaryAssetType                                           = new ExternalOffset<FPrimaryAssetType>(0x0000, false);        // 0x0000(0x0008) (Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FDirectoryPath>                     _offFilterDirectory                                            = new ExternalOffset<FDirectoryPath>(0x0008, false);           // 0x0008(0x0010) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFilterString                                               = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPrimaryAssetRules>                 _offRules                                                      = new ExternalOffset<FPrimaryAssetRules>(0x0028, false);       // 0x0028(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPrimaryAssetType                                   PrimaryAssetType                                               => _offPrimaryAssetType.GetValue();
	public FDirectoryPath                                      FilterDirectory                                                => _offFilterDirectory.GetValue();
	public FString                                             FilterString                                                   => _offFilterString.GetValue();
	public FPrimaryAssetRules                                  Rules                                                          => _offRules.GetValue();
	#endregion

	public FPrimaryAssetRulesCustomOverride(FPrimaryAssetType c_PrimaryAssetType, FDirectoryPath c_FilterDirectory, FString c_FilterString, FPrimaryAssetRules c_Rules) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPrimaryAssetType.SetValue(c_PrimaryAssetType);
		_offFilterDirectory.SetValue(c_FilterDirectory);
		_offFilterString.SetValue(c_FilterString);
		_offRules.SetValue(c_Rules);
	}
}
// ScriptStruct Engine.ActiveForceFeedbackEffect
// 0x0018
public class FActiveForceFeedbackEffect : ExternalClass
{
	#region Offsets
	private ExternalOffset<UForceFeedbackEffect>               _offForceFeedbackEffect                                        = new ExternalOffset<UForceFeedbackEffect>(0x0000, true);      // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UForceFeedbackEffect                                ForceFeedbackEffect                                            => _offForceFeedbackEffect.GetValue();
	#endregion

	public FActiveForceFeedbackEffect(UForceFeedbackEffect c_ForceFeedbackEffect) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForceFeedbackEffect.SetValue(c_ForceFeedbackEffect);
	}
}
// ScriptStruct Engine.PrimaryAssetRulesOverride
// 0x0020
public class FPrimaryAssetRulesOverride : ExternalClass
{
	#region Offsets
	private ExternalOffset<FPrimaryAssetId>                    _offPrimaryAssetId                                             = new ExternalOffset<FPrimaryAssetId>(0x0000, false);          // 0x0000(0x0010) (Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPrimaryAssetRules>                 _offRules                                                      = new ExternalOffset<FPrimaryAssetRules>(0x0010, false);       // 0x0010(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPrimaryAssetId                                     PrimaryAssetId                                                 => _offPrimaryAssetId.GetValue();
	public FPrimaryAssetRules                                  Rules                                                          => _offRules.GetValue();
	#endregion

	public FPrimaryAssetRulesOverride(FPrimaryAssetId c_PrimaryAssetId, FPrimaryAssetRules c_Rules) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPrimaryAssetId.SetValue(c_PrimaryAssetId);
		_offRules.SetValue(c_Rules);
	}
}
// ScriptStruct Engine.AssetManagerRedirect
// 0x0020
public class FAssetManagerRedirect : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offOld                                                        = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNew                                                        = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Old                                                            => _offOld.GetValue();
	public FString                                             New                                                            => _offNew.GetValue();
	#endregion

	public FAssetManagerRedirect(FString c_Old, FString c_New) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOld.SetValue(c_Old);
		_offNew.SetValue(c_New);
	}
}
// ScriptStruct Engine.PrimaryAssetTypeInfo
// 0x0088
public class FPrimaryAssetTypeInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offPrimaryAssetType                                           = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                             _offAssetBaseClassLoaded                                       = new ExternalOffset<UClass>(0x0030, true);                    // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbHasBlueprintClasses                                       = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbIsEditorOnly                                              = new ExternalOffset<byte/*(bool)*/>(0x0039);                  // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FDirectoryPath>>             _offDirectories                                                = new ExternalOffset<TArray<FDirectoryPath>>(0x0040, false);   // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FSoftObjectPath>>            _offSpecificAssets                                             = new ExternalOffset<TArray<FSoftObjectPath>>(0x0050, false);  // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<FPrimaryAssetRules>                 _offRules                                                      = new ExternalOffset<FPrimaryAssetRules>(0x0060, false);       // 0x0060(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offAssetScanPaths                                             = new ExternalOffset<TArray<FString>>(0x0070, false);          // 0x0070(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbIsDynamicAsset                                            = new ExternalOffset<byte/*(bool)*/>(0x0080);                  // 0x0080(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNumberOfAssets                                             = new ExternalOffset<int>(0x0084);                             // 0x0084(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               PrimaryAssetType                                               => _offPrimaryAssetType.GetValue();
	public UClass                                              AssetBaseClassLoaded                                           => _offAssetBaseClassLoaded.GetValue();
	public byte/*(bool)*/                                      bHasBlueprintClasses                                           => _offbHasBlueprintClasses.GetValue();
	public byte/*(bool)*/                                      bIsEditorOnly                                                  => _offbIsEditorOnly.GetValue();
	public TArray<FDirectoryPath>                              Directories                                                    => _offDirectories.GetValue();
	public TArray<FSoftObjectPath>                             SpecificAssets                                                 => _offSpecificAssets.GetValue();
	public FPrimaryAssetRules                                  Rules                                                          => _offRules.GetValue();
	public TArray<FString>                                     AssetScanPaths                                                 => _offAssetScanPaths.GetValue();
	public byte/*(bool)*/                                      bIsDynamicAsset                                                => _offbIsDynamicAsset.GetValue();
	public int                                                 NumberOfAssets                                                 => _offNumberOfAssets.GetValue();
	#endregion

	public FPrimaryAssetTypeInfo(FName c_PrimaryAssetType, UClass c_AssetBaseClassLoaded, byte/*(bool)*/ c_bHasBlueprintClasses, byte/*(bool)*/ c_bIsEditorOnly, TArray<FDirectoryPath> c_Directories, TArray<FSoftObjectPath> c_SpecificAssets, FPrimaryAssetRules c_Rules, TArray<FString> c_AssetScanPaths, byte/*(bool)*/ c_bIsDynamicAsset, int c_NumberOfAssets) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPrimaryAssetType.SetValue(c_PrimaryAssetType);
		_offAssetBaseClassLoaded.SetValue(c_AssetBaseClassLoaded);
		_offbHasBlueprintClasses.SetValue(c_bHasBlueprintClasses);
		_offbIsEditorOnly.SetValue(c_bIsEditorOnly);
		_offDirectories.SetValue(c_Directories);
		_offSpecificAssets.SetValue(c_SpecificAssets);
		_offRules.SetValue(c_Rules);
		_offAssetScanPaths.SetValue(c_AssetScanPaths);
		_offbIsDynamicAsset.SetValue(c_bIsDynamicAsset);
		_offNumberOfAssets.SetValue(c_NumberOfAssets);
	}
}
// ScriptStruct Engine.AssetMapping
// 0x0010
public class FAssetMapping : ExternalClass
{
	#region Offsets
	private ExternalOffset<UAnimationAsset>                    _offSourceAsset                                                = new ExternalOffset<UAnimationAsset>(0x0000, true);           // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimationAsset>                    _offTargetAsset                                                = new ExternalOffset<UAnimationAsset>(0x0008, true);           // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimationAsset                                     SourceAsset                                                    => _offSourceAsset.GetValue();
	public UAnimationAsset                                     TargetAsset                                                    => _offTargetAsset.GetValue();
	#endregion

	public FAssetMapping(UAnimationAsset c_SourceAsset, UAnimationAsset c_TargetAsset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourceAsset.SetValue(c_SourceAsset);
		_offTargetAsset.SetValue(c_TargetAsset);
	}
}
// ScriptStruct Engine.ViewTargetTransitionParams
// 0x0010
public class FViewTargetTransitionParams : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offBlendTime                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EViewTargetBlendFunction>> _offBlendFunction                                              = new ExternalOffset<TEnumAsByte<EViewTargetBlendFunction>>(0x0004, false); // 0x0004(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBlendExp                                                   = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockOutgoing                                              = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               BlendTime                                                      => _offBlendTime.GetValue();
	public TEnumAsByte<EViewTargetBlendFunction>               BlendFunction                                                  => _offBlendFunction.GetValue();
	public float                                               BlendExp                                                       => _offBlendExp.GetValue();
	#endregion

	public FViewTargetTransitionParams(float c_BlendTime, TEnumAsByte<EViewTargetBlendFunction> c_BlendFunction, float c_BlendExp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBlendTime.SetValue(c_BlendTime);
		_offBlendFunction.SetValue(c_BlendFunction);
		_offBlendExp.SetValue(c_BlendExp);
	}
}
// ScriptStruct Engine.ActorComponentDuplicatedObjectData
// 0x0010
public class FActorComponentDuplicatedObjectData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FActorComponentDuplicatedObjectData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.UpdateLevelVisibilityLevelInfo
// 0x000C
public class FUpdateLevelVisibilityLevelInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offPackageName                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsVisible                                                 = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               PackageName                                                    => _offPackageName.GetValue();
	#endregion

	public FUpdateLevelVisibilityLevelInfo(FName c_PackageName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPackageName.SetValue(c_PackageName);
	}
}
// ScriptStruct Engine.UniqueNetIdRepl
// 0x0027 (0x0028 - 0x0001)
public class FUniqueNetIdRepl : FUniqueNetIdWrapper
{
	#region Offsets
	private ExternalOffset<TArray<char>>                       _offReplicationBytes                                           = new ExternalOffset<TArray<char>>(0x0018, false);             // 0x0018(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<char>                                        ReplicationBytes                                               => _offReplicationBytes.GetValue();
	#endregion

	public FUniqueNetIdRepl(TArray<char> c_ReplicationBytes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offReplicationBytes.SetValue(c_ReplicationBytes);
	}
}
// ScriptStruct Engine.ActorComponentInstanceData
// 0x0058
public class FActorComponentInstanceData : ExternalClass
{
	#region Offsets
	private ExternalOffset<UObject>                            _offSourceComponentTemplate                                    = new ExternalOffset<UObject>(0x0008, true);                   // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<EComponentCreationMethod>           _offSourceComponentCreationMethod                              = new ExternalOffset<EComponentCreationMethod>(0x0010, false); // 0x0010(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                                _offSourceComponentTypeSerializedIndex                         = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<char>>                       _offSavedProperties                                            = new ExternalOffset<TArray<char>>(0x0018, false);             // 0x0018(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FActorComponentDuplicatedObjectData>> _offDuplicatedObjects                                          = new ExternalOffset<TArray<FActorComponentDuplicatedObjectData>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UObject>>                    _offReferencedObjects                                          = new ExternalOffset<TArray<UObject>>(0x0038, false);          // 0x0038(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FName>>                      _offReferencedNames                                            = new ExternalOffset<TArray<FName>>(0x0048, false);            // 0x0048(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UObject                                             SourceComponentTemplate                                        => _offSourceComponentTemplate.GetValue();
	public EComponentCreationMethod                            SourceComponentCreationMethod                                  => _offSourceComponentCreationMethod.GetValue();
	public int                                                 SourceComponentTypeSerializedIndex                             => _offSourceComponentTypeSerializedIndex.GetValue();
	public TArray<char>                                        SavedProperties                                                => _offSavedProperties.GetValue();
	public TArray<FActorComponentDuplicatedObjectData>         DuplicatedObjects                                              => _offDuplicatedObjects.GetValue();
	public TArray<UObject>                                     ReferencedObjects                                              => _offReferencedObjects.GetValue();
	public TArray<FName>                                       ReferencedNames                                                => _offReferencedNames.GetValue();
	#endregion

	public FActorComponentInstanceData(UObject c_SourceComponentTemplate, EComponentCreationMethod c_SourceComponentCreationMethod, int c_SourceComponentTypeSerializedIndex, TArray<char> c_SavedProperties, TArray<FActorComponentDuplicatedObjectData> c_DuplicatedObjects, TArray<UObject> c_ReferencedObjects, TArray<FName> c_ReferencedNames) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourceComponentTemplate.SetValue(c_SourceComponentTemplate);
		_offSourceComponentCreationMethod.SetValue(c_SourceComponentCreationMethod);
		_offSourceComponentTypeSerializedIndex.SetValue(c_SourceComponentTypeSerializedIndex);
		_offSavedProperties.SetValue(c_SavedProperties);
		_offDuplicatedObjects.SetValue(c_DuplicatedObjects);
		_offReferencedObjects.SetValue(c_ReferencedObjects);
		_offReferencedNames.SetValue(c_ReferencedNames);
	}
}
// ScriptStruct Engine.SceneComponentInstanceData
// 0x0050 (0x00A8 - 0x0058)
public class FSceneComponentInstanceData : FActorComponentInstanceData
{
	#region Offsets
//	private TMap<class USceneComponent*, struct FTransform>    _offAttachedInstanceComponents                                 = new ExternalOffset<TMap<FTransform>>(0x0058, false);         // 0x0058(0x0050) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FSceneComponentInstanceData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.WalkableSlopeOverride
// 0x0010
public class FWalkableSlopeOverride : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EWalkableSlopeBehavior>> _offWalkableSlopeBehavior                                      = new ExternalOffset<TEnumAsByte<EWalkableSlopeBehavior>>(0x0000, false); // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWalkableSlopeAngle                                         = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EWalkableSlopeBehavior>                 WalkableSlopeBehavior                                          => _offWalkableSlopeBehavior.GetValue();
	public float                                               WalkableSlopeAngle                                             => _offWalkableSlopeAngle.GetValue();
	#endregion

	public FWalkableSlopeOverride(TEnumAsByte<EWalkableSlopeBehavior> c_WalkableSlopeBehavior, float c_WalkableSlopeAngle) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offWalkableSlopeBehavior.SetValue(c_WalkableSlopeBehavior);
		_offWalkableSlopeAngle.SetValue(c_WalkableSlopeAngle);
	}
}
// ScriptStruct Engine.AtmospherePrecomputeInstanceData
// 0x01E0 (0x0288 - 0x00A8)
public class FAtmospherePrecomputeInstanceData : FSceneComponentInstanceData
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAtmospherePrecomputeInstanceData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.LatentActionInfo
// 0x0018
public class FLatentActionInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offLinkage                                                    = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offUUID                                                       = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offExecutionFunction                                          = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                            _offCallbackTarget                                             = new ExternalOffset<UObject>(0x0010, true);                   // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Linkage                                                        => _offLinkage.GetValue();
	public int                                                 UUID                                                           => _offUUID.GetValue();
	public FName                                               ExecutionFunction                                              => _offExecutionFunction.GetValue();
	public UObject                                             CallbackTarget                                                 => _offCallbackTarget.GetValue();
	#endregion

	public FLatentActionInfo(int c_Linkage, int c_UUID, FName c_ExecutionFunction, UObject c_CallbackTarget) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLinkage.SetValue(c_Linkage);
		_offUUID.SetValue(c_UUID);
		_offExecutionFunction.SetValue(c_ExecutionFunction);
		_offCallbackTarget.SetValue(c_CallbackTarget);
	}
}
// ScriptStruct Engine.AtmospherePrecomputeParameters
// 0x002C
public class FAtmospherePrecomputeParameters : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offDensityHeight                                              = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDecayHeight                                                = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxScatteringOrder                                         = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTransmittanceTexWidth                                      = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTransmittanceTexHeight                                     = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIrradianceTexWidth                                         = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIrradianceTexHeight                                        = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offInscatterAltitudeSampleNum                                 = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offInscatterMuNum                                             = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offInscatterMuSNum                                            = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offInscatterNuNum                                             = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               DensityHeight                                                  => _offDensityHeight.GetValue();
	public float                                               DecayHeight                                                    => _offDecayHeight.GetValue();
	public int                                                 MaxScatteringOrder                                             => _offMaxScatteringOrder.GetValue();
	public int                                                 TransmittanceTexWidth                                          => _offTransmittanceTexWidth.GetValue();
	public int                                                 TransmittanceTexHeight                                         => _offTransmittanceTexHeight.GetValue();
	public int                                                 IrradianceTexWidth                                             => _offIrradianceTexWidth.GetValue();
	public int                                                 IrradianceTexHeight                                            => _offIrradianceTexHeight.GetValue();
	public int                                                 InscatterAltitudeSampleNum                                     => _offInscatterAltitudeSampleNum.GetValue();
	public int                                                 InscatterMuNum                                                 => _offInscatterMuNum.GetValue();
	public int                                                 InscatterMuSNum                                                => _offInscatterMuSNum.GetValue();
	public int                                                 InscatterNuNum                                                 => _offInscatterNuNum.GetValue();
	#endregion

	public FAtmospherePrecomputeParameters(float c_DensityHeight, float c_DecayHeight, int c_MaxScatteringOrder, int c_TransmittanceTexWidth, int c_TransmittanceTexHeight, int c_IrradianceTexWidth, int c_IrradianceTexHeight, int c_InscatterAltitudeSampleNum, int c_InscatterMuNum, int c_InscatterMuSNum, int c_InscatterNuNum) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDensityHeight.SetValue(c_DensityHeight);
		_offDecayHeight.SetValue(c_DecayHeight);
		_offMaxScatteringOrder.SetValue(c_MaxScatteringOrder);
		_offTransmittanceTexWidth.SetValue(c_TransmittanceTexWidth);
		_offTransmittanceTexHeight.SetValue(c_TransmittanceTexHeight);
		_offIrradianceTexWidth.SetValue(c_IrradianceTexWidth);
		_offIrradianceTexHeight.SetValue(c_IrradianceTexHeight);
		_offInscatterAltitudeSampleNum.SetValue(c_InscatterAltitudeSampleNum);
		_offInscatterMuNum.SetValue(c_InscatterMuNum);
		_offInscatterMuSNum.SetValue(c_InscatterMuSNum);
		_offInscatterNuNum.SetValue(c_InscatterNuNum);
	}
}
// ScriptStruct Engine.RuntimeFloatCurve
// 0x0088
public class FRuntimeFloatCurve : ExternalClass
{
	#region Offsets
	private ExternalOffset<FRichCurve>                         _offEditorCurveData                                            = new ExternalOffset<FRichCurve>(0x0000, false);               // 0x0000(0x0080) (NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offExternalCurve                                              = new ExternalOffset<UCurveFloat>(0x0080, true);               // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRichCurve                                          EditorCurveData                                                => _offEditorCurveData.GetValue();
	public UCurveFloat                                         ExternalCurve                                                  => _offExternalCurve.GetValue();
	#endregion

	public FRuntimeFloatCurve(FRichCurve c_EditorCurveData, UCurveFloat c_ExternalCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEditorCurveData.SetValue(c_EditorCurveData);
		_offExternalCurve.SetValue(c_ExternalCurve);
	}
}
// ScriptStruct Engine.BaseAttenuationSettings
// 0x00B0
public class FBaseAttenuationSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<EAttenuationDistanceModel>          _offDistanceAlgorithm                                          = new ExternalOffset<EAttenuationDistanceModel>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAttenuationShape>>     _offAttenuationShape                                           = new ExternalOffset<TEnumAsByte<EAttenuationShape>>(0x0009, false); // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offdBAttenuationAtMax                                         = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offAttenuationShapeExtents                                    = new ExternalOffset<FVector>(0x0010, false);                  // 0x0010(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offConeOffset                                                 = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFalloffDistance                                            = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                 _offCustomAttenuationCurve                                     = new ExternalOffset<FRuntimeFloatCurve>(0x0028, false);       // 0x0028(0x0088) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public EAttenuationDistanceModel                           DistanceAlgorithm                                              => _offDistanceAlgorithm.GetValue();
	public TEnumAsByte<EAttenuationShape>                      AttenuationShape                                               => _offAttenuationShape.GetValue();
	public float                                               dBAttenuationAtMax                                             => _offdBAttenuationAtMax.GetValue();
	public FVector                                             AttenuationShapeExtents                                        => _offAttenuationShapeExtents.GetValue();
	public float                                               ConeOffset                                                     => _offConeOffset.GetValue();
	public float                                               FalloffDistance                                                => _offFalloffDistance.GetValue();
	public FRuntimeFloatCurve                                  CustomAttenuationCurve                                         => _offCustomAttenuationCurve.GetValue();
	#endregion

	public FBaseAttenuationSettings(EAttenuationDistanceModel c_DistanceAlgorithm, TEnumAsByte<EAttenuationShape> c_AttenuationShape, float c_dBAttenuationAtMax, FVector c_AttenuationShapeExtents, float c_ConeOffset, float c_FalloffDistance, FRuntimeFloatCurve c_CustomAttenuationCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDistanceAlgorithm.SetValue(c_DistanceAlgorithm);
		_offAttenuationShape.SetValue(c_AttenuationShape);
		_offdBAttenuationAtMax.SetValue(c_dBAttenuationAtMax);
		_offAttenuationShapeExtents.SetValue(c_AttenuationShapeExtents);
		_offConeOffset.SetValue(c_ConeOffset);
		_offFalloffDistance.SetValue(c_FalloffDistance);
		_offCustomAttenuationCurve.SetValue(c_CustomAttenuationCurve);
	}
}
// ScriptStruct Engine.AudioComponentParam
// 0x0020
public class FAudioComponentParam : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offParamName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFloatParam                                                 = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offBoolParam                                                  = new ExternalOffset<byte/*(bool)*/>(0x000C);                  // 0x000C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIntParam                                                   = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundWave>                         _offSoundWaveParam                                             = new ExternalOffset<USoundWave>(0x0018, true);                // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ParamName                                                      => _offParamName.GetValue();
	public float                                               FloatParam                                                     => _offFloatParam.GetValue();
	public byte/*(bool)*/                                      BoolParam                                                      => _offBoolParam.GetValue();
	public int                                                 IntParam                                                       => _offIntParam.GetValue();
	public USoundWave                                          SoundWaveParam                                                 => _offSoundWaveParam.GetValue();
	#endregion

	public FAudioComponentParam(FName c_ParamName, float c_FloatParam, byte/*(bool)*/ c_BoolParam, int c_IntParam, USoundWave c_SoundWaveParam) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParamName.SetValue(c_ParamName);
		_offFloatParam.SetValue(c_FloatParam);
		_offBoolParam.SetValue(c_BoolParam);
		_offIntParam.SetValue(c_IntParam);
		_offSoundWaveParam.SetValue(c_SoundWaveParam);
	}
}
// ScriptStruct Engine.UpdateLevelStreamingLevelStatus
// 0x0010
public class FUpdateLevelStreamingLevelStatus : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offPackageName                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLODIndex                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbNewShouldBeLoaded                                         = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbNewShouldBeVisible                                        = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbNewShouldBlockOnLoad                                      = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               PackageName                                                    => _offPackageName.GetValue();
	public int                                                 LODIndex                                                       => _offLODIndex.GetValue();
	#endregion

	public FUpdateLevelStreamingLevelStatus(FName c_PackageName, int c_LODIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPackageName.SetValue(c_PackageName);
		_offLODIndex.SetValue(c_LODIndex);
	}
}
// ScriptStruct Engine.AudioQualitySettings
// 0x0020
public class FAudioQualitySettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FText>                              _offDisplayName                                                = new ExternalOffset<FText>(0x0000, false);                    // 0x0000(0x0018) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxChannels                                                = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FText                                               DisplayName                                                    => _offDisplayName.GetValue();
	public int                                                 MaxChannels                                                    => _offMaxChannels.GetValue();
	#endregion

	public FAudioQualitySettings(FText c_DisplayName, int c_MaxChannels) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisplayName.SetValue(c_DisplayName);
		_offMaxChannels.SetValue(c_MaxChannels);
	}
}
// ScriptStruct Engine.InteriorSettings
// 0x0024
public class FInteriorSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbIsWorldSettings                                           = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offExteriorVolume                                             = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offExteriorTime                                               = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offExteriorLPF                                                = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offExteriorLPFTime                                            = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInteriorVolume                                             = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInteriorTime                                               = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInteriorLPF                                                = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInteriorLPFTime                                            = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bIsWorldSettings                                               => _offbIsWorldSettings.GetValue();
	public float                                               ExteriorVolume                                                 => _offExteriorVolume.GetValue();
	public float                                               ExteriorTime                                                   => _offExteriorTime.GetValue();
	public float                                               ExteriorLPF                                                    => _offExteriorLPF.GetValue();
	public float                                               ExteriorLPFTime                                                => _offExteriorLPFTime.GetValue();
	public float                                               InteriorVolume                                                 => _offInteriorVolume.GetValue();
	public float                                               InteriorTime                                                   => _offInteriorTime.GetValue();
	public float                                               InteriorLPF                                                    => _offInteriorLPF.GetValue();
	public float                                               InteriorLPFTime                                                => _offInteriorLPFTime.GetValue();
	#endregion

	public FInteriorSettings(byte/*(bool)*/ c_bIsWorldSettings, float c_ExteriorVolume, float c_ExteriorTime, float c_ExteriorLPF, float c_ExteriorLPFTime, float c_InteriorVolume, float c_InteriorTime, float c_InteriorLPF, float c_InteriorLPFTime) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbIsWorldSettings.SetValue(c_bIsWorldSettings);
		_offExteriorVolume.SetValue(c_ExteriorVolume);
		_offExteriorTime.SetValue(c_ExteriorTime);
		_offExteriorLPF.SetValue(c_ExteriorLPF);
		_offExteriorLPFTime.SetValue(c_ExteriorLPFTime);
		_offInteriorVolume.SetValue(c_InteriorVolume);
		_offInteriorTime.SetValue(c_InteriorTime);
		_offInteriorLPF.SetValue(c_InteriorLPF);
		_offInteriorLPFTime.SetValue(c_InteriorLPFTime);
	}
}
// ScriptStruct Engine.ReverbSettings
// 0x0020
public class FReverbSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbApplyReverb                                               = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UReverbEffect>                      _offReverbEffect                                               = new ExternalOffset<UReverbEffect>(0x0008, true);             // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundEffectSubmixPreset>           _offReverbPluginEffect                                         = new ExternalOffset<USoundEffectSubmixPreset>(0x0010, true);  // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolume                                                     = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFadeTime                                                   = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bApplyReverb                                                   => _offbApplyReverb.GetValue();
	public UReverbEffect                                       ReverbEffect                                                   => _offReverbEffect.GetValue();
	public USoundEffectSubmixPreset                            ReverbPluginEffect                                             => _offReverbPluginEffect.GetValue();
	public float                                               Volume                                                         => _offVolume.GetValue();
	public float                                               FadeTime                                                       => _offFadeTime.GetValue();
	#endregion

	public FReverbSettings(byte/*(bool)*/ c_bApplyReverb, UReverbEffect c_ReverbEffect, USoundEffectSubmixPreset c_ReverbPluginEffect, float c_Volume, float c_FadeTime) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbApplyReverb.SetValue(c_bApplyReverb);
		_offReverbEffect.SetValue(c_ReverbEffect);
		_offReverbPluginEffect.SetValue(c_ReverbPluginEffect);
		_offVolume.SetValue(c_Volume);
		_offFadeTime.SetValue(c_FadeTime);
	}
}
// ScriptStruct Engine.FilePath
// 0x0010
public class FFilePath : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offFilePath                                                   = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FilePath                                                       => _offFilePath.GetValue();
	#endregion

	public FFilePath(FString c_FilePath) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFilePath.SetValue(c_FilePath);
	}
}
// ScriptStruct Engine.ForceFeedbackParameters
// 0x000C
public class FForceFeedbackParameters : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offTag                                                        = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbLooping                                                   = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbIgnoreTimeDilation                                        = new ExternalOffset<byte/*(bool)*/>(0x0009);                  // 0x0009(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbPlayWhilePaused                                           = new ExternalOffset<byte/*(bool)*/>(0x000A);                  // 0x000A(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Tag                                                            => _offTag.GetValue();
	public byte/*(bool)*/                                      bLooping                                                       => _offbLooping.GetValue();
	public byte/*(bool)*/                                      bIgnoreTimeDilation                                            => _offbIgnoreTimeDilation.GetValue();
	public byte/*(bool)*/                                      bPlayWhilePaused                                               => _offbPlayWhilePaused.GetValue();
	#endregion

	public FForceFeedbackParameters(FName c_Tag, byte/*(bool)*/ c_bLooping, byte/*(bool)*/ c_bIgnoreTimeDilation, byte/*(bool)*/ c_bPlayWhilePaused) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTag.SetValue(c_Tag);
		_offbLooping.SetValue(c_bLooping);
		_offbIgnoreTimeDilation.SetValue(c_bIgnoreTimeDilation);
		_offbPlayWhilePaused.SetValue(c_bPlayWhilePaused);
	}
}
// ScriptStruct Engine.LaunchOnTestSettings
// 0x0020
public class FLaunchOnTestSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFilePath>                          _offLaunchOnTestmap                                            = new ExternalOffset<FFilePath>(0x0000, false);                // 0x0000(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDeviceID                                                   = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFilePath                                           LaunchOnTestmap                                                => _offLaunchOnTestmap.GetValue();
	public FString                                             DeviceID                                                       => _offDeviceID.GetValue();
	#endregion

	public FLaunchOnTestSettings(FFilePath c_LaunchOnTestmap, FString c_DeviceID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLaunchOnTestmap.SetValue(c_LaunchOnTestmap);
		_offDeviceID.SetValue(c_DeviceID);
	}
}
// ScriptStruct Engine.EditorMapPerformanceTestDefinition
// 0x0020
public class FEditorMapPerformanceTestDefinition : ExternalClass
{
	#region Offsets
	private ExternalOffset<FSoftObjectPath>                    _offPerformanceTestmap                                         = new ExternalOffset<FSoftObjectPath>(0x0000, false);          // 0x0000(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTestTimer                                                  = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FSoftObjectPath                                     PerformanceTestmap                                             => _offPerformanceTestmap.GetValue();
	public int                                                 TestTimer                                                      => _offTestTimer.GetValue();
	#endregion

	public FEditorMapPerformanceTestDefinition(FSoftObjectPath c_PerformanceTestmap, int c_TestTimer) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPerformanceTestmap.SetValue(c_PerformanceTestmap);
		_offTestTimer.SetValue(c_TestTimer);
	}
}
// ScriptStruct Engine.ImportFactorySettingValues
// 0x0020
public class FImportFactorySettingValues : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offSettingName                                                = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offValue                                                      = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SettingName                                                    => _offSettingName.GetValue();
	public FString                                             Value                                                          => _offValue.GetValue();
	#endregion

	public FImportFactorySettingValues(FString c_SettingName, FString c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSettingName.SetValue(c_SettingName);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct Engine.EditorImportWorkflowDefinition
// 0x0020
public class FEditorImportWorkflowDefinition : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFilePath>                          _offImportFilePath                                             = new ExternalOffset<FFilePath>(0x0000, false);                // 0x0000(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FImportFactorySettingValues>> _offFactorySettings                                            = new ExternalOffset<TArray<FImportFactorySettingValues>>(0x0010, false); // 0x0010(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFilePath                                           ImportFilePath                                                 => _offImportFilePath.GetValue();
	public TArray<FImportFactorySettingValues>                 FactorySettings                                                => _offFactorySettings.GetValue();
	#endregion

	public FEditorImportWorkflowDefinition(FFilePath c_ImportFilePath, TArray<FImportFactorySettingValues> c_FactorySettings) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offImportFilePath.SetValue(c_ImportFilePath);
		_offFactorySettings.SetValue(c_FactorySettings);
	}
}
// ScriptStruct Engine.BuildPromotionImportWorkflowSettings
// 0x0150
public class FBuildPromotionImportWorkflowSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offDiffuse                                                    = new ExternalOffset<FEditorImportWorkflowDefinition>(0x0000, false); // 0x0000(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offNormal                                                     = new ExternalOffset<FEditorImportWorkflowDefinition>(0x0020, false); // 0x0020(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offStaticMesh                                                 = new ExternalOffset<FEditorImportWorkflowDefinition>(0x0040, false); // 0x0040(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offReimportStaticMesh                                         = new ExternalOffset<FEditorImportWorkflowDefinition>(0x0060, false); // 0x0060(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offBlendShapeMesh                                             = new ExternalOffset<FEditorImportWorkflowDefinition>(0x0080, false); // 0x0080(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offMorphMesh                                                  = new ExternalOffset<FEditorImportWorkflowDefinition>(0x00A0, false); // 0x00A0(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offSkeletalMesh                                               = new ExternalOffset<FEditorImportWorkflowDefinition>(0x00C0, false); // 0x00C0(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offAnimation                                                  = new ExternalOffset<FEditorImportWorkflowDefinition>(0x00E0, false); // 0x00E0(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offSound                                                      = new ExternalOffset<FEditorImportWorkflowDefinition>(0x0100, false); // 0x0100(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FEditorImportWorkflowDefinition>    _offSurroundSound                                              = new ExternalOffset<FEditorImportWorkflowDefinition>(0x0120, false); // 0x0120(0x0020) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FEditorImportWorkflowDefinition>> _offOtherAssetsToImport                                        = new ExternalOffset<TArray<FEditorImportWorkflowDefinition>>(0x0140, false); // 0x0140(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FEditorImportWorkflowDefinition                     Diffuse                                                        => _offDiffuse.GetValue();
	public FEditorImportWorkflowDefinition                     Normal                                                         => _offNormal.GetValue();
	public FEditorImportWorkflowDefinition                     StaticMesh                                                     => _offStaticMesh.GetValue();
	public FEditorImportWorkflowDefinition                     ReimportStaticMesh                                             => _offReimportStaticMesh.GetValue();
	public FEditorImportWorkflowDefinition                     BlendShapeMesh                                                 => _offBlendShapeMesh.GetValue();
	public FEditorImportWorkflowDefinition                     MorphMesh                                                      => _offMorphMesh.GetValue();
	public FEditorImportWorkflowDefinition                     SkeletalMesh                                                   => _offSkeletalMesh.GetValue();
	public FEditorImportWorkflowDefinition                     Animation                                                      => _offAnimation.GetValue();
	public FEditorImportWorkflowDefinition                     Sound                                                          => _offSound.GetValue();
	public FEditorImportWorkflowDefinition                     SurroundSound                                                  => _offSurroundSound.GetValue();
	public TArray<FEditorImportWorkflowDefinition>             OtherAssetsToImport                                            => _offOtherAssetsToImport.GetValue();
	#endregion

	public FBuildPromotionImportWorkflowSettings(FEditorImportWorkflowDefinition c_Diffuse, FEditorImportWorkflowDefinition c_Normal, FEditorImportWorkflowDefinition c_StaticMesh, FEditorImportWorkflowDefinition c_ReimportStaticMesh, FEditorImportWorkflowDefinition c_BlendShapeMesh, FEditorImportWorkflowDefinition c_MorphMesh, FEditorImportWorkflowDefinition c_SkeletalMesh, FEditorImportWorkflowDefinition c_Animation, FEditorImportWorkflowDefinition c_Sound, FEditorImportWorkflowDefinition c_SurroundSound, TArray<FEditorImportWorkflowDefinition> c_OtherAssetsToImport) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDiffuse.SetValue(c_Diffuse);
		_offNormal.SetValue(c_Normal);
		_offStaticMesh.SetValue(c_StaticMesh);
		_offReimportStaticMesh.SetValue(c_ReimportStaticMesh);
		_offBlendShapeMesh.SetValue(c_BlendShapeMesh);
		_offMorphMesh.SetValue(c_MorphMesh);
		_offSkeletalMesh.SetValue(c_SkeletalMesh);
		_offAnimation.SetValue(c_Animation);
		_offSound.SetValue(c_Sound);
		_offSurroundSound.SetValue(c_SurroundSound);
		_offOtherAssetsToImport.SetValue(c_OtherAssetsToImport);
	}
}
// ScriptStruct Engine.BuildPromotionOpenAssetSettings
// 0x0060
public class FBuildPromotionOpenAssetSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFilePath>                          _offBlueprintAsset                                             = new ExternalOffset<FFilePath>(0x0000, false);                // 0x0000(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offMaterialAsset                                              = new ExternalOffset<FFilePath>(0x0010, false);                // 0x0010(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offParticleSystemAsset                                        = new ExternalOffset<FFilePath>(0x0020, false);                // 0x0020(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offSkeletalMeshAsset                                          = new ExternalOffset<FFilePath>(0x0030, false);                // 0x0030(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offStaticMeshAsset                                            = new ExternalOffset<FFilePath>(0x0040, false);                // 0x0040(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offTextureAsset                                               = new ExternalOffset<FFilePath>(0x0050, false);                // 0x0050(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFilePath                                           BlueprintAsset                                                 => _offBlueprintAsset.GetValue();
	public FFilePath                                           MaterialAsset                                                  => _offMaterialAsset.GetValue();
	public FFilePath                                           ParticleSystemAsset                                            => _offParticleSystemAsset.GetValue();
	public FFilePath                                           SkeletalMeshAsset                                              => _offSkeletalMeshAsset.GetValue();
	public FFilePath                                           StaticMeshAsset                                                => _offStaticMeshAsset.GetValue();
	public FFilePath                                           TextureAsset                                                   => _offTextureAsset.GetValue();
	#endregion

	public FBuildPromotionOpenAssetSettings(FFilePath c_BlueprintAsset, FFilePath c_MaterialAsset, FFilePath c_ParticleSystemAsset, FFilePath c_SkeletalMeshAsset, FFilePath c_StaticMeshAsset, FFilePath c_TextureAsset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBlueprintAsset.SetValue(c_BlueprintAsset);
		_offMaterialAsset.SetValue(c_MaterialAsset);
		_offParticleSystemAsset.SetValue(c_ParticleSystemAsset);
		_offSkeletalMeshAsset.SetValue(c_SkeletalMeshAsset);
		_offStaticMeshAsset.SetValue(c_StaticMeshAsset);
		_offTextureAsset.SetValue(c_TextureAsset);
	}
}
// ScriptStruct Engine.BuildPromotionNewProjectSettings
// 0x0020
public class FBuildPromotionNewProjectSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FDirectoryPath>                     _offNewProjectFolderOverride                                   = new ExternalOffset<FDirectoryPath>(0x0000, false);           // 0x0000(0x0010) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNewProjectNameOverride                                     = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FDirectoryPath                                      NewProjectFolderOverride                                       => _offNewProjectFolderOverride.GetValue();
	public FString                                             NewProjectNameOverride                                         => _offNewProjectNameOverride.GetValue();
	#endregion

	public FBuildPromotionNewProjectSettings(FDirectoryPath c_NewProjectFolderOverride, FString c_NewProjectNameOverride) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNewProjectFolderOverride.SetValue(c_NewProjectFolderOverride);
		_offNewProjectNameOverride.SetValue(c_NewProjectNameOverride);
	}
}
// ScriptStruct Engine.CollisionResponseContainer
// 0x0020
public class FCollisionResponseContainer : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offWorldStatic                                                = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0000, false); // 0x0000(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offWorldDynamic                                               = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0001, false); // 0x0001(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offPawn                                                       = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0002, false); // 0x0002(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offVisibility                                                 = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0003, false); // 0x0003(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offCamera                                                     = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0004, false); // 0x0004(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offPhysicsBody                                                = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0005, false); // 0x0005(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offVehicle                                                    = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0006, false); // 0x0006(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offDestructible                                               = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0007, false); // 0x0007(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offEngineTraceChannel1                                        = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offEngineTraceChannel2                                        = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0009, false); // 0x0009(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offEngineTraceChannel3                                        = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x000A, false); // 0x000A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offEngineTraceChannel4                                        = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x000B, false); // 0x000B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offEngineTraceChannel5                                        = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x000C, false); // 0x000C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offEngineTraceChannel6                                        = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x000D, false); // 0x000D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel1                                          = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x000E, false); // 0x000E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel2                                          = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x000F, false); // 0x000F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel3                                          = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0010, false); // 0x0010(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel4                                          = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0011, false); // 0x0011(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel5                                          = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0012, false); // 0x0012(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel6                                          = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0013, false); // 0x0013(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel7                                          = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0014, false); // 0x0014(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel8                                          = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0015, false); // 0x0015(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel9                                          = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0016, false); // 0x0016(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel10                                         = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0017, false); // 0x0017(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel11                                         = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0018, false); // 0x0018(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel12                                         = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0019, false); // 0x0019(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel13                                         = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x001A, false); // 0x001A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel14                                         = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x001B, false); // 0x001B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel15                                         = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x001C, false); // 0x001C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel16                                         = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x001D, false); // 0x001D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel17                                         = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x001E, false); // 0x001E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offGameTraceChannel18                                         = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x001F, false); // 0x001F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ECollisionResponse>                     WorldStatic                                                    => _offWorldStatic.GetValue();
	public TEnumAsByte<ECollisionResponse>                     WorldDynamic                                                   => _offWorldDynamic.GetValue();
	public TEnumAsByte<ECollisionResponse>                     Pawn                                                           => _offPawn.GetValue();
	public TEnumAsByte<ECollisionResponse>                     Visibility                                                     => _offVisibility.GetValue();
	public TEnumAsByte<ECollisionResponse>                     Camera                                                         => _offCamera.GetValue();
	public TEnumAsByte<ECollisionResponse>                     PhysicsBody                                                    => _offPhysicsBody.GetValue();
	public TEnumAsByte<ECollisionResponse>                     Vehicle                                                        => _offVehicle.GetValue();
	public TEnumAsByte<ECollisionResponse>                     Destructible                                                   => _offDestructible.GetValue();
	public TEnumAsByte<ECollisionResponse>                     EngineTraceChannel1                                            => _offEngineTraceChannel1.GetValue();
	public TEnumAsByte<ECollisionResponse>                     EngineTraceChannel2                                            => _offEngineTraceChannel2.GetValue();
	public TEnumAsByte<ECollisionResponse>                     EngineTraceChannel3                                            => _offEngineTraceChannel3.GetValue();
	public TEnumAsByte<ECollisionResponse>                     EngineTraceChannel4                                            => _offEngineTraceChannel4.GetValue();
	public TEnumAsByte<ECollisionResponse>                     EngineTraceChannel5                                            => _offEngineTraceChannel5.GetValue();
	public TEnumAsByte<ECollisionResponse>                     EngineTraceChannel6                                            => _offEngineTraceChannel6.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel1                                              => _offGameTraceChannel1.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel2                                              => _offGameTraceChannel2.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel3                                              => _offGameTraceChannel3.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel4                                              => _offGameTraceChannel4.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel5                                              => _offGameTraceChannel5.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel6                                              => _offGameTraceChannel6.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel7                                              => _offGameTraceChannel7.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel8                                              => _offGameTraceChannel8.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel9                                              => _offGameTraceChannel9.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel10                                             => _offGameTraceChannel10.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel11                                             => _offGameTraceChannel11.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel12                                             => _offGameTraceChannel12.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel13                                             => _offGameTraceChannel13.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel14                                             => _offGameTraceChannel14.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel15                                             => _offGameTraceChannel15.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel16                                             => _offGameTraceChannel16.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel17                                             => _offGameTraceChannel17.GetValue();
	public TEnumAsByte<ECollisionResponse>                     GameTraceChannel18                                             => _offGameTraceChannel18.GetValue();
	#endregion

	public FCollisionResponseContainer(TEnumAsByte<ECollisionResponse> c_WorldStatic, TEnumAsByte<ECollisionResponse> c_WorldDynamic, TEnumAsByte<ECollisionResponse> c_Pawn, TEnumAsByte<ECollisionResponse> c_Visibility, TEnumAsByte<ECollisionResponse> c_Camera, TEnumAsByte<ECollisionResponse> c_PhysicsBody, TEnumAsByte<ECollisionResponse> c_Vehicle, TEnumAsByte<ECollisionResponse> c_Destructible, TEnumAsByte<ECollisionResponse> c_EngineTraceChannel1, TEnumAsByte<ECollisionResponse> c_EngineTraceChannel2, TEnumAsByte<ECollisionResponse> c_EngineTraceChannel3, TEnumAsByte<ECollisionResponse> c_EngineTraceChannel4, TEnumAsByte<ECollisionResponse> c_EngineTraceChannel5, TEnumAsByte<ECollisionResponse> c_EngineTraceChannel6, TEnumAsByte<ECollisionResponse> c_GameTraceChannel1, TEnumAsByte<ECollisionResponse> c_GameTraceChannel2, TEnumAsByte<ECollisionResponse> c_GameTraceChannel3, TEnumAsByte<ECollisionResponse> c_GameTraceChannel4, TEnumAsByte<ECollisionResponse> c_GameTraceChannel5, TEnumAsByte<ECollisionResponse> c_GameTraceChannel6, TEnumAsByte<ECollisionResponse> c_GameTraceChannel7, TEnumAsByte<ECollisionResponse> c_GameTraceChannel8, TEnumAsByte<ECollisionResponse> c_GameTraceChannel9, TEnumAsByte<ECollisionResponse> c_GameTraceChannel10, TEnumAsByte<ECollisionResponse> c_GameTraceChannel11, TEnumAsByte<ECollisionResponse> c_GameTraceChannel12, TEnumAsByte<ECollisionResponse> c_GameTraceChannel13, TEnumAsByte<ECollisionResponse> c_GameTraceChannel14, TEnumAsByte<ECollisionResponse> c_GameTraceChannel15, TEnumAsByte<ECollisionResponse> c_GameTraceChannel16, TEnumAsByte<ECollisionResponse> c_GameTraceChannel17, TEnumAsByte<ECollisionResponse> c_GameTraceChannel18) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offWorldStatic.SetValue(c_WorldStatic);
		_offWorldDynamic.SetValue(c_WorldDynamic);
		_offPawn.SetValue(c_Pawn);
		_offVisibility.SetValue(c_Visibility);
		_offCamera.SetValue(c_Camera);
		_offPhysicsBody.SetValue(c_PhysicsBody);
		_offVehicle.SetValue(c_Vehicle);
		_offDestructible.SetValue(c_Destructible);
		_offEngineTraceChannel1.SetValue(c_EngineTraceChannel1);
		_offEngineTraceChannel2.SetValue(c_EngineTraceChannel2);
		_offEngineTraceChannel3.SetValue(c_EngineTraceChannel3);
		_offEngineTraceChannel4.SetValue(c_EngineTraceChannel4);
		_offEngineTraceChannel5.SetValue(c_EngineTraceChannel5);
		_offEngineTraceChannel6.SetValue(c_EngineTraceChannel6);
		_offGameTraceChannel1.SetValue(c_GameTraceChannel1);
		_offGameTraceChannel2.SetValue(c_GameTraceChannel2);
		_offGameTraceChannel3.SetValue(c_GameTraceChannel3);
		_offGameTraceChannel4.SetValue(c_GameTraceChannel4);
		_offGameTraceChannel5.SetValue(c_GameTraceChannel5);
		_offGameTraceChannel6.SetValue(c_GameTraceChannel6);
		_offGameTraceChannel7.SetValue(c_GameTraceChannel7);
		_offGameTraceChannel8.SetValue(c_GameTraceChannel8);
		_offGameTraceChannel9.SetValue(c_GameTraceChannel9);
		_offGameTraceChannel10.SetValue(c_GameTraceChannel10);
		_offGameTraceChannel11.SetValue(c_GameTraceChannel11);
		_offGameTraceChannel12.SetValue(c_GameTraceChannel12);
		_offGameTraceChannel13.SetValue(c_GameTraceChannel13);
		_offGameTraceChannel14.SetValue(c_GameTraceChannel14);
		_offGameTraceChannel15.SetValue(c_GameTraceChannel15);
		_offGameTraceChannel16.SetValue(c_GameTraceChannel16);
		_offGameTraceChannel17.SetValue(c_GameTraceChannel17);
		_offGameTraceChannel18.SetValue(c_GameTraceChannel18);
	}
}
// ScriptStruct Engine.BuildPromotionTestSettings
// 0x01F0
public class FBuildPromotionTestSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFilePath>                          _offDefaultStaticMeshAsset                                     = new ExternalOffset<FFilePath>(0x0000, false);                // 0x0000(0x0010) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FBuildPromotionImportWorkflowSettings> _offImportWorkflow                                             = new ExternalOffset<FBuildPromotionImportWorkflowSettings>(0x0010, false); // 0x0010(0x0150) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FBuildPromotionOpenAssetSettings>   _offOpenAssets                                                 = new ExternalOffset<FBuildPromotionOpenAssetSettings>(0x0160, false); // 0x0160(0x0060) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FBuildPromotionNewProjectSettings>  _offNewProjectSettings                                         = new ExternalOffset<FBuildPromotionNewProjectSettings>(0x01C0, false); // 0x01C0(0x0020) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offSourceControlMaterial                                      = new ExternalOffset<FFilePath>(0x01E0, false);                // 0x01E0(0x0010) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFilePath                                           DefaultStaticMeshAsset                                         => _offDefaultStaticMeshAsset.GetValue();
	public FBuildPromotionImportWorkflowSettings               ImportWorkflow                                                 => _offImportWorkflow.GetValue();
	public FBuildPromotionOpenAssetSettings                    OpenAssets                                                     => _offOpenAssets.GetValue();
	public FBuildPromotionNewProjectSettings                   NewProjectSettings                                             => _offNewProjectSettings.GetValue();
	public FFilePath                                           SourceControlMaterial                                          => _offSourceControlMaterial.GetValue();
	#endregion

	public FBuildPromotionTestSettings(FFilePath c_DefaultStaticMeshAsset, FBuildPromotionImportWorkflowSettings c_ImportWorkflow, FBuildPromotionOpenAssetSettings c_OpenAssets, FBuildPromotionNewProjectSettings c_NewProjectSettings, FFilePath c_SourceControlMaterial) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefaultStaticMeshAsset.SetValue(c_DefaultStaticMeshAsset);
		_offImportWorkflow.SetValue(c_ImportWorkflow);
		_offOpenAssets.SetValue(c_OpenAssets);
		_offNewProjectSettings.SetValue(c_NewProjectSettings);
		_offSourceControlMaterial.SetValue(c_SourceControlMaterial);
	}
}
// ScriptStruct Engine.ResponseChannel
// 0x000C
public class FResponseChannel : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offChannel                                                    = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offresponse                                                   = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x0008, false); // 0x0008(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Channel                                                        => _offChannel.GetValue();
	public TEnumAsByte<ECollisionResponse>                     response                                                       => _offresponse.GetValue();
	#endregion

	public FResponseChannel(FName c_Channel, TEnumAsByte<ECollisionResponse> c_response) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offChannel.SetValue(c_Channel);
		_offresponse.SetValue(c_response);
	}
}
// ScriptStruct Engine.CollisionResponse
// 0x0030
public class FCollisionResponse : ExternalClass
{
	#region Offsets
	private ExternalOffset<FCollisionResponseContainer>        _offResponseToChannels                                         = new ExternalOffset<FCollisionResponseContainer>(0x0000, false); // 0x0000(0x0020) (Transient, NoDestructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FResponseChannel>>           _offResponseArray                                              = new ExternalOffset<TArray<FResponseChannel>>(0x0020, false); // 0x0020(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FCollisionResponseContainer                         ResponseToChannels                                             => _offResponseToChannels.GetValue();
	public TArray<FResponseChannel>                            ResponseArray                                                  => _offResponseArray.GetValue();
	#endregion

	public FCollisionResponse(FCollisionResponseContainer c_ResponseToChannels, TArray<FResponseChannel> c_ResponseArray) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offResponseToChannels.SetValue(c_ResponseToChannels);
		_offResponseArray.SetValue(c_ResponseArray);
	}
}
// ScriptStruct Engine.BlueprintEditorPromotionSettings
// 0x0030
public class FBlueprintEditorPromotionSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFilePath>                          _offFirstMeshPath                                              = new ExternalOffset<FFilePath>(0x0000, false);                // 0x0000(0x0010) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offSecondMeshPath                                             = new ExternalOffset<FFilePath>(0x0010, false);                // 0x0010(0x0010) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offDefaultParticleAsset                                       = new ExternalOffset<FFilePath>(0x0020, false);                // 0x0020(0x0010) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFilePath                                           FirstMeshPath                                                  => _offFirstMeshPath.GetValue();
	public FFilePath                                           SecondMeshPath                                                 => _offSecondMeshPath.GetValue();
	public FFilePath                                           DefaultParticleAsset                                           => _offDefaultParticleAsset.GetValue();
	#endregion

	public FBlueprintEditorPromotionSettings(FFilePath c_FirstMeshPath, FFilePath c_SecondMeshPath, FFilePath c_DefaultParticleAsset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFirstMeshPath.SetValue(c_FirstMeshPath);
		_offSecondMeshPath.SetValue(c_SecondMeshPath);
		_offDefaultParticleAsset.SetValue(c_DefaultParticleAsset);
	}
}
// ScriptStruct Engine.ParticleEditorPromotionSettings
// 0x0010
public class FParticleEditorPromotionSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFilePath>                          _offDefaultParticleAsset                                       = new ExternalOffset<FFilePath>(0x0000, false);                // 0x0000(0x0010) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFilePath                                           DefaultParticleAsset                                           => _offDefaultParticleAsset.GetValue();
	#endregion

	public FParticleEditorPromotionSettings(FFilePath c_DefaultParticleAsset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefaultParticleAsset.SetValue(c_DefaultParticleAsset);
	}
}
// ScriptStruct Engine.MaterialEditorPromotionSettings
// 0x0030
public class FMaterialEditorPromotionSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFilePath>                          _offDefaultMaterialAsset                                       = new ExternalOffset<FFilePath>(0x0000, false);                // 0x0000(0x0010) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offDefaultDiffuseTexture                                      = new ExternalOffset<FFilePath>(0x0010, false);                // 0x0010(0x0010) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offDefaultNormalTexture                                       = new ExternalOffset<FFilePath>(0x0020, false);                // 0x0020(0x0010) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFilePath                                           DefaultMaterialAsset                                           => _offDefaultMaterialAsset.GetValue();
	public FFilePath                                           DefaultDiffuseTexture                                          => _offDefaultDiffuseTexture.GetValue();
	public FFilePath                                           DefaultNormalTexture                                           => _offDefaultNormalTexture.GetValue();
	#endregion

	public FMaterialEditorPromotionSettings(FFilePath c_DefaultMaterialAsset, FFilePath c_DefaultDiffuseTexture, FFilePath c_DefaultNormalTexture) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefaultMaterialAsset.SetValue(c_DefaultMaterialAsset);
		_offDefaultDiffuseTexture.SetValue(c_DefaultDiffuseTexture);
		_offDefaultNormalTexture.SetValue(c_DefaultNormalTexture);
	}
}
// ScriptStruct Engine.EditorImportExportTestDefinition
// 0x0038
public class FEditorImportExportTestDefinition : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFilePath>                          _offImportFilePath                                             = new ExternalOffset<FFilePath>(0x0000, false);                // 0x0000(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offExportFileExtension                                        = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbSkipExport                                                = new ExternalOffset<byte/*(bool)*/>(0x0020);                  // 0x0020(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FImportFactorySettingValues>> _offFactorySettings                                            = new ExternalOffset<TArray<FImportFactorySettingValues>>(0x0028, false); // 0x0028(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFilePath                                           ImportFilePath                                                 => _offImportFilePath.GetValue();
	public FString                                             ExportFileExtension                                            => _offExportFileExtension.GetValue();
	public byte/*(bool)*/                                      bSkipExport                                                    => _offbSkipExport.GetValue();
	public TArray<FImportFactorySettingValues>                 FactorySettings                                                => _offFactorySettings.GetValue();
	#endregion

	public FEditorImportExportTestDefinition(FFilePath c_ImportFilePath, FString c_ExportFileExtension, byte/*(bool)*/ c_bSkipExport, TArray<FImportFactorySettingValues> c_FactorySettings) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offImportFilePath.SetValue(c_ImportFilePath);
		_offExportFileExtension.SetValue(c_ExportFileExtension);
		_offbSkipExport.SetValue(c_bSkipExport);
		_offFactorySettings.SetValue(c_FactorySettings);
	}
}
// ScriptStruct Engine.ExternalToolDefinition
// 0x0060
public class FExternalToolDefinition : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offToolName                                                   = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FFilePath>                          _offExecutablePath                                             = new ExternalOffset<FFilePath>(0x0010, false);                // 0x0010(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCommandLineOptions                                         = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FDirectoryPath>                     _offWorkingDirectory                                           = new ExternalOffset<FDirectoryPath>(0x0030, false);           // 0x0030(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offScriptExtension                                            = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FDirectoryPath>                     _offScriptDirectory                                            = new ExternalOffset<FDirectoryPath>(0x0050, false);           // 0x0050(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ToolName                                                       => _offToolName.GetValue();
	public FFilePath                                           ExecutablePath                                                 => _offExecutablePath.GetValue();
	public FString                                             CommandLineOptions                                             => _offCommandLineOptions.GetValue();
	public FDirectoryPath                                      WorkingDirectory                                               => _offWorkingDirectory.GetValue();
	public FString                                             ScriptExtension                                                => _offScriptExtension.GetValue();
	public FDirectoryPath                                      ScriptDirectory                                                => _offScriptDirectory.GetValue();
	#endregion

	public FExternalToolDefinition(FString c_ToolName, FFilePath c_ExecutablePath, FString c_CommandLineOptions, FDirectoryPath c_WorkingDirectory, FString c_ScriptExtension, FDirectoryPath c_ScriptDirectory) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offToolName.SetValue(c_ToolName);
		_offExecutablePath.SetValue(c_ExecutablePath);
		_offCommandLineOptions.SetValue(c_CommandLineOptions);
		_offWorkingDirectory.SetValue(c_WorkingDirectory);
		_offScriptExtension.SetValue(c_ScriptExtension);
		_offScriptDirectory.SetValue(c_ScriptDirectory);
	}
}
// ScriptStruct Engine.NavAvoidanceData
// 0x003C
public class FNavAvoidanceData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FNavAvoidanceData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.BoneReference
// 0x0010
public class FBoneReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offBoneName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               BoneName                                                       => _offBoneName.GetValue();
	#endregion

	public FBoneReference(FName c_BoneName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneName.SetValue(c_BoneName);
	}
}
// ScriptStruct Engine.BlendProfileBoneEntry
// 0x0014
public class FBlendProfileBoneEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<FBoneReference>                     _offBoneReference                                              = new ExternalOffset<FBoneReference>(0x0000, false);           // 0x0000(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBlendScale                                                 = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FBoneReference                                      BoneReference                                                  => _offBoneReference.GetValue();
	public float                                               BlendScale                                                     => _offBlendScale.GetValue();
	#endregion

	public FBlendProfileBoneEntry(FBoneReference c_BoneReference, float c_BlendScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneReference.SetValue(c_BoneReference);
		_offBlendScale.SetValue(c_BlendScale);
	}
}
// ScriptStruct Engine.PerBoneInterpolation
// 0x0014
public class FPerBoneInterpolation : ExternalClass
{
	#region Offsets
	private ExternalOffset<FBoneReference>                     _offBoneReference                                              = new ExternalOffset<FBoneReference>(0x0000, false);           // 0x0000(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInterpolationSpeedPerSec                                   = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FBoneReference                                      BoneReference                                                  => _offBoneReference.GetValue();
	public float                                               InterpolationSpeedPerSec                                       => _offInterpolationSpeedPerSec.GetValue();
	#endregion

	public FPerBoneInterpolation(FBoneReference c_BoneReference, float c_InterpolationSpeedPerSec) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneReference.SetValue(c_BoneReference);
		_offInterpolationSpeedPerSec.SetValue(c_InterpolationSpeedPerSec);
	}
}
// ScriptStruct Engine.BodyInstance
// 0x0110
public class FBodyInstance : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ECollisionChannel>>     _offObjectType                                                 = new ExternalOffset<TEnumAsByte<ECollisionChannel>>(0x0006, false); // 0x0006(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TEnumAsByte<ECollisionEnabled>>     _offCollisionEnabled                                           = new ExternalOffset<TEnumAsByte<ECollisionEnabled>>(0x0008, false); // 0x0008(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<ESleepFamily>                       _offSleepFamily                                                = new ExternalOffset<ESleepFamily>(0x000A, false);             // 0x000A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EDOFMode>>              _offDOFMode                                                    = new ExternalOffset<TEnumAsByte<EDOFMode>>(0x000B, false);    // 0x000B(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseCCD                                                    = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbNotifyRigidBodyCollision                                  = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSimulatePhysics                                           = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideMass                                              = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableGravity                                             = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAutoWeld                                                  = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbStartAwake                                                = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGenerateWakeEvents                                        = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUpdateMassWhenScaleChanges                                = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockTranslation                                           = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockRotation                                              = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockXTranslation                                          = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockYTranslation                                          = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockZTranslation                                          = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockXRotation                                             = new ExternalOffset<char>(0x000D, false);                     // 0x000D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockYRotation                                             = new ExternalOffset<char>(0x000E, false);                     // 0x000E(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockZRotation                                             = new ExternalOffset<char>(0x000E, false);                     // 0x000E(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideMaxAngularVelocity                                = new ExternalOffset<char>(0x000E, false);                     // 0x000E(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideMaxDepenetrationVelocity                          = new ExternalOffset<char>(0x000E, false);                     // 0x000E(0x0001) BIT_FIELD (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                               _offbOverrideWalkableSlopeOnInstance                           = new ExternalOffset<char>(0x000E, false);                     // 0x000E(0x0001) BIT_FIELD (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                               _offbInterpolateWhenSubStepping                                = new ExternalOffset<char>(0x000E, false);                     // 0x000E(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FName>                              _offCollisionProfileName                                       = new ExternalOffset<FName>(0x001C, false);                    // 0x001C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                               _offPositionSolverIterationCount                               = new ExternalOffset<char>(0x0024, false);                     // 0x0024(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offVelocitySolverIterationCount                               = new ExternalOffset<char>(0x0025, false);                     // 0x0025(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FCollisionResponse>                 _offCollisionResponses                                         = new ExternalOffset<FCollisionResponse>(0x0028, false);       // 0x0028(0x0030) (Edit, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offMaxDepenetrationVelocity                                   = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                              _offMassInKgOverride                                           = new ExternalOffset<float>(0x005C);                           // 0x005C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                              _offLinearDamping                                              = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAngularDamping                                             = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offCustomDOFPlaneNormal                                       = new ExternalOffset<FVector>(0x0070, false);                  // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offCOMNudge                                                   = new ExternalOffset<FVector>(0x007C, false);                  // 0x007C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMassScale                                                  = new ExternalOffset<float>(0x0088);                           // 0x0088(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offInertiaTensorScale                                         = new ExternalOffset<FVector>(0x008C, false);                  // 0x008C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FWalkableSlopeOverride>             _offWalkableSlopeOverride                                      = new ExternalOffset<FWalkableSlopeOverride>(0x00A8, false);   // 0x00A8(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<UPhysicalMaterial>                  _offPhysMaterialOverride                                       = new ExternalOffset<UPhysicalMaterial>(0x00B8, true);         // 0x00B8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                              _offMaxAngularVelocity                                         = new ExternalOffset<float>(0x00C0);                           // 0x00C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCustomSleepThresholdMultiplier                             = new ExternalOffset<float>(0x00C4);                           // 0x00C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStabilizationThresholdMultiplier                           = new ExternalOffset<float>(0x00C8);                           // 0x00C8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPhysicsBlendWeight                                         = new ExternalOffset<float>(0x00CC);                           // 0x00CC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ECollisionChannel>                      ObjectType                                                     => _offObjectType.GetValue();
	public TEnumAsByte<ECollisionEnabled>                      CollisionEnabled                                               => _offCollisionEnabled.GetValue();
	public ESleepFamily                                        SleepFamily                                                    => _offSleepFamily.GetValue();
	public TEnumAsByte<EDOFMode>                               DOFMode                                                        => _offDOFMode.GetValue();
	public FName                                               CollisionProfileName                                           => _offCollisionProfileName.GetValue();
	public FCollisionResponse                                  CollisionResponses                                             => _offCollisionResponses.GetValue();
	public float                                               MaxDepenetrationVelocity                                       => _offMaxDepenetrationVelocity.GetValue();
	public float                                               MassInKgOverride                                               => _offMassInKgOverride.GetValue();
	public float                                               LinearDamping                                                  => _offLinearDamping.GetValue();
	public float                                               AngularDamping                                                 => _offAngularDamping.GetValue();
	public FVector                                             CustomDOFPlaneNormal                                           => _offCustomDOFPlaneNormal.GetValue();
	public FVector                                             COMNudge                                                       => _offCOMNudge.GetValue();
	public float                                               MassScale                                                      => _offMassScale.GetValue();
	public FVector                                             InertiaTensorScale                                             => _offInertiaTensorScale.GetValue();
	public FWalkableSlopeOverride                              WalkableSlopeOverride                                          => _offWalkableSlopeOverride.GetValue();
	public UPhysicalMaterial                                   PhysMaterialOverride                                           => _offPhysMaterialOverride.GetValue();
	public float                                               MaxAngularVelocity                                             => _offMaxAngularVelocity.GetValue();
	public float                                               CustomSleepThresholdMultiplier                                 => _offCustomSleepThresholdMultiplier.GetValue();
	public float                                               StabilizationThresholdMultiplier                               => _offStabilizationThresholdMultiplier.GetValue();
	public float                                               PhysicsBlendWeight                                             => _offPhysicsBlendWeight.GetValue();
	#endregion

	public FBodyInstance(TEnumAsByte<ECollisionChannel> c_ObjectType, TEnumAsByte<ECollisionEnabled> c_CollisionEnabled, ESleepFamily c_SleepFamily, TEnumAsByte<EDOFMode> c_DOFMode, FName c_CollisionProfileName, FCollisionResponse c_CollisionResponses, float c_MaxDepenetrationVelocity, float c_MassInKgOverride, float c_LinearDamping, float c_AngularDamping, FVector c_CustomDOFPlaneNormal, FVector c_COMNudge, float c_MassScale, FVector c_InertiaTensorScale, FWalkableSlopeOverride c_WalkableSlopeOverride, UPhysicalMaterial c_PhysMaterialOverride, float c_MaxAngularVelocity, float c_CustomSleepThresholdMultiplier, float c_StabilizationThresholdMultiplier, float c_PhysicsBlendWeight) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offObjectType.SetValue(c_ObjectType);
		_offCollisionEnabled.SetValue(c_CollisionEnabled);
		_offSleepFamily.SetValue(c_SleepFamily);
		_offDOFMode.SetValue(c_DOFMode);
		_offCollisionProfileName.SetValue(c_CollisionProfileName);
		_offCollisionResponses.SetValue(c_CollisionResponses);
		_offMaxDepenetrationVelocity.SetValue(c_MaxDepenetrationVelocity);
		_offMassInKgOverride.SetValue(c_MassInKgOverride);
		_offLinearDamping.SetValue(c_LinearDamping);
		_offAngularDamping.SetValue(c_AngularDamping);
		_offCustomDOFPlaneNormal.SetValue(c_CustomDOFPlaneNormal);
		_offCOMNudge.SetValue(c_COMNudge);
		_offMassScale.SetValue(c_MassScale);
		_offInertiaTensorScale.SetValue(c_InertiaTensorScale);
		_offWalkableSlopeOverride.SetValue(c_WalkableSlopeOverride);
		_offPhysMaterialOverride.SetValue(c_PhysMaterialOverride);
		_offMaxAngularVelocity.SetValue(c_MaxAngularVelocity);
		_offCustomSleepThresholdMultiplier.SetValue(c_CustomSleepThresholdMultiplier);
		_offStabilizationThresholdMultiplier.SetValue(c_StabilizationThresholdMultiplier);
		_offPhysicsBlendWeight.SetValue(c_PhysicsBlendWeight);
	}
}
// ScriptStruct Engine.EditorElement
// 0x0018
public class FEditorElement : ExternalClass
{
	#region Offsets
//	private ExternalOffset<int>                                _offIndices[0x3]                                               = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<float>                              _offWeights[0x3]                                               = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FEditorElement() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.GridBlendSample
// 0x001C
public class FGridBlendSample : ExternalClass
{
	#region Offsets
	private ExternalOffset<FEditorElement>                     _offGridElement                                                = new ExternalOffset<FEditorElement>(0x0000, false);           // 0x0000(0x0018) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBlendWeight                                                = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FEditorElement                                      GridElement                                                    => _offGridElement.GetValue();
	public float                                               BlendWeight                                                    => _offBlendWeight.GetValue();
	#endregion

	public FGridBlendSample(FEditorElement c_GridElement, float c_BlendWeight) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGridElement.SetValue(c_GridElement);
		_offBlendWeight.SetValue(c_BlendWeight);
	}
}
// ScriptStruct Engine.BlendSample
// 0x0018
public class FBlendSample : ExternalClass
{
	#region Offsets
	private ExternalOffset<UAnimSequence>                      _offAnimation                                                  = new ExternalOffset<UAnimSequence>(0x0000, true);             // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offSampleValue                                                = new ExternalOffset<FVector>(0x0008, false);                  // 0x0008(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRateScale                                                  = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimSequence                                       Animation                                                      => _offAnimation.GetValue();
	public FVector                                             SampleValue                                                    => _offSampleValue.GetValue();
	public float                                               RateScale                                                      => _offRateScale.GetValue();
	#endregion

	public FBlendSample(UAnimSequence c_Animation, FVector c_SampleValue, float c_RateScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAnimation.SetValue(c_Animation);
		_offSampleValue.SetValue(c_SampleValue);
		_offRateScale.SetValue(c_RateScale);
	}
}
// ScriptStruct Engine.CustomPrimitiveData
// 0x0010
public class FCustomPrimitiveData : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<float>>                      _offData                                                       = new ExternalOffset<TArray<float>>(0x0000, false);            // 0x0000(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<float>                                       Data                                                           => _offData.GetValue();
	#endregion

	public FCustomPrimitiveData(TArray<float> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct Engine.BlendParameter
// 0x0020
public class FBlendParameter : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offDisplayName                                                = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMin                                                        = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMax                                                        = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offGridNum                                                    = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DisplayName                                                    => _offDisplayName.GetValue();
	public float                                               Min                                                            => _offMin.GetValue();
	public float                                               Max                                                            => _offMax.GetValue();
	public int                                                 GridNum                                                        => _offGridNum.GetValue();
	#endregion

	public FBlendParameter(FString c_DisplayName, float c_Min, float c_Max, int c_GridNum) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisplayName.SetValue(c_DisplayName);
		_offMin.SetValue(c_Min);
		_offMax.SetValue(c_Max);
		_offGridNum.SetValue(c_GridNum);
	}
}
// ScriptStruct Engine.LightingChannels
// 0x0001
public class FLightingChannels : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbChannel0                                                  = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbChannel1                                                  = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbChannel2                                                  = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FLightingChannels() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.InterpolationParameter
// 0x0008
public class FInterpolationParameter : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offInterpolationTime                                          = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EFilterInterpolationType>> _offInterpolationType                                          = new ExternalOffset<TEnumAsByte<EFilterInterpolationType>>(0x0004, false); // 0x0004(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               InterpolationTime                                              => _offInterpolationTime.GetValue();
	public TEnumAsByte<EFilterInterpolationType>               InterpolationType                                              => _offInterpolationType.GetValue();
	#endregion

	public FInterpolationParameter(float c_InterpolationTime, TEnumAsByte<EFilterInterpolationType> c_InterpolationType) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInterpolationTime.SetValue(c_InterpolationTime);
		_offInterpolationType.SetValue(c_InterpolationType);
	}
}
// ScriptStruct Engine.BPEditorBookmarkNode
// 0x0038
public class FBPEditorBookmarkNode : ExternalClass
{
	#region Offsets
	private ExternalOffset<FGuid>                              _offNodeGuid                                                   = new ExternalOffset<FGuid>(0x0000, false);                    // 0x0000(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offParentGuid                                                 = new ExternalOffset<FGuid>(0x0010, false);                    // 0x0010(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FText>                              _offDisplayName                                                = new ExternalOffset<FText>(0x0020, false);                    // 0x0020(0x0018) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FGuid                                               NodeGuid                                                       => _offNodeGuid.GetValue();
	public FGuid                                               ParentGuid                                                     => _offParentGuid.GetValue();
	public FText                                               DisplayName                                                    => _offDisplayName.GetValue();
	#endregion

	public FBPEditorBookmarkNode(FGuid c_NodeGuid, FGuid c_ParentGuid, FText c_DisplayName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNodeGuid.SetValue(c_NodeGuid);
		_offParentGuid.SetValue(c_ParentGuid);
		_offDisplayName.SetValue(c_DisplayName);
	}
}
// ScriptStruct Engine.EditedDocumentInfo
// 0x0030
public class FEditedDocumentInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FSoftObjectPath>                    _offEditedObjectPath                                           = new ExternalOffset<FSoftObjectPath>(0x0000, false);          // 0x0000(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offSavedViewOffset                                            = new ExternalOffset<FVector2D>(0x0018, false);                // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSavedZoomAmount                                            = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                            _offEditedObject                                               = new ExternalOffset<UObject>(0x0028, true);                   // 0x0028(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FSoftObjectPath                                     EditedObjectPath                                               => _offEditedObjectPath.GetValue();
	public FVector2D                                           SavedViewOffset                                                => _offSavedViewOffset.GetValue();
	public float                                               SavedZoomAmount                                                => _offSavedZoomAmount.GetValue();
	public UObject                                             EditedObject                                                   => _offEditedObject.GetValue();
	#endregion

	public FEditedDocumentInfo(FSoftObjectPath c_EditedObjectPath, FVector2D c_SavedViewOffset, float c_SavedZoomAmount, UObject c_EditedObject) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEditedObjectPath.SetValue(c_EditedObjectPath);
		_offSavedViewOffset.SetValue(c_SavedViewOffset);
		_offSavedZoomAmount.SetValue(c_SavedZoomAmount);
		_offEditedObject.SetValue(c_EditedObject);
	}
}
// ScriptStruct Engine.BPInterfaceDescription
// 0x0018
public class FBPInterfaceDescription : ExternalClass
{
	#region Offsets
	private ExternalOffset<UClass>                             _offInterface                                                  = new ExternalOffset<UClass>(0x0000, true);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UEdGraph>>                   _offGraphs                                                     = new ExternalOffset<TArray<UEdGraph>>(0x0008, false);         // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                              Interface                                                      => _offInterface.GetValue();
	public TArray<UEdGraph>                                    Graphs                                                         => _offGraphs.GetValue();
	#endregion

	public FBPInterfaceDescription(UClass c_Interface, TArray<UEdGraph> c_Graphs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInterface.SetValue(c_Interface);
		_offGraphs.SetValue(c_Graphs);
	}
}
// ScriptStruct Engine.SimpleMemberReference
// 0x0020
public class FSimpleMemberReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<UObject>                            _offMemberParent                                               = new ExternalOffset<UObject>(0x0000, true);                   // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offMemberName                                                 = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offMemberGuid                                                 = new ExternalOffset<FGuid>(0x0010, false);                    // 0x0010(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UObject                                             MemberParent                                                   => _offMemberParent.GetValue();
	public FName                                               MemberName                                                     => _offMemberName.GetValue();
	public FGuid                                               MemberGuid                                                     => _offMemberGuid.GetValue();
	#endregion

	public FSimpleMemberReference(UObject c_MemberParent, FName c_MemberName, FGuid c_MemberGuid) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMemberParent.SetValue(c_MemberParent);
		_offMemberName.SetValue(c_MemberName);
		_offMemberGuid.SetValue(c_MemberGuid);
	}
}
// ScriptStruct Engine.EdGraphTerminalType
// 0x001C
public class FEdGraphTerminalType : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offTerminalCategory                                           = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offTerminalSubCategory                                        = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<UObject>>            _offTerminalSubCategoryObject                                  = new ExternalOffset<TWeakObjectPtr<UObject>>(0x0010, false);  // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbTerminalIsConst                                           = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbTerminalIsWeakPointer                                     = new ExternalOffset<byte/*(bool)*/>(0x0019);                  // 0x0019(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               TerminalCategory                                               => _offTerminalCategory.GetValue();
	public FName                                               TerminalSubCategory                                            => _offTerminalSubCategory.GetValue();
	public TWeakObjectPtr<UObject>                             TerminalSubCategoryObject                                      => _offTerminalSubCategoryObject.GetValue();
	public byte/*(bool)*/                                      bTerminalIsConst                                               => _offbTerminalIsConst.GetValue();
	public byte/*(bool)*/                                      bTerminalIsWeakPointer                                         => _offbTerminalIsWeakPointer.GetValue();
	#endregion

	public FEdGraphTerminalType(FName c_TerminalCategory, FName c_TerminalSubCategory, TWeakObjectPtr<UObject> c_TerminalSubCategoryObject, byte/*(bool)*/ c_bTerminalIsConst, byte/*(bool)*/ c_bTerminalIsWeakPointer) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTerminalCategory.SetValue(c_TerminalCategory);
		_offTerminalSubCategory.SetValue(c_TerminalSubCategory);
		_offTerminalSubCategoryObject.SetValue(c_TerminalSubCategoryObject);
		_offbTerminalIsConst.SetValue(c_bTerminalIsConst);
		_offbTerminalIsWeakPointer.SetValue(c_bTerminalIsWeakPointer);
	}
}
// ScriptStruct Engine.EdGraphPinType
// 0x0058
public class FEdGraphPinType : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offPinCategory                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offPinSubCategory                                             = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<UObject>>            _offPinSubCategoryObject                                       = new ExternalOffset<TWeakObjectPtr<UObject>>(0x0010, false);  // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSimpleMemberReference>             _offPinSubCategoryMemberReference                              = new ExternalOffset<FSimpleMemberReference>(0x0018, false);   // 0x0018(0x0020) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FEdGraphTerminalType>               _offPinValueType                                               = new ExternalOffset<FEdGraphTerminalType>(0x0038, false);     // 0x0038(0x001C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<EPinContainerType>                  _offContainerType                                              = new ExternalOffset<EPinContainerType>(0x0054, false);        // 0x0054(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsArray                                                   = new ExternalOffset<char>(0x0055, false);                     // 0x0055(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                               _offbIsReference                                               = new ExternalOffset<char>(0x0055, false);                     // 0x0055(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsConst                                                   = new ExternalOffset<char>(0x0055, false);                     // 0x0055(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsWeakPointer                                             = new ExternalOffset<char>(0x0055, false);                     // 0x0055(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               PinCategory                                                    => _offPinCategory.GetValue();
	public FName                                               PinSubCategory                                                 => _offPinSubCategory.GetValue();
	public TWeakObjectPtr<UObject>                             PinSubCategoryObject                                           => _offPinSubCategoryObject.GetValue();
	public FSimpleMemberReference                              PinSubCategoryMemberReference                                  => _offPinSubCategoryMemberReference.GetValue();
	public FEdGraphTerminalType                                PinValueType                                                   => _offPinValueType.GetValue();
	public EPinContainerType                                   ContainerType                                                  => _offContainerType.GetValue();
	#endregion

	public FEdGraphPinType(FName c_PinCategory, FName c_PinSubCategory, TWeakObjectPtr<UObject> c_PinSubCategoryObject, FSimpleMemberReference c_PinSubCategoryMemberReference, FEdGraphTerminalType c_PinValueType, EPinContainerType c_ContainerType) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPinCategory.SetValue(c_PinCategory);
		_offPinSubCategory.SetValue(c_PinSubCategory);
		_offPinSubCategoryObject.SetValue(c_PinSubCategoryObject);
		_offPinSubCategoryMemberReference.SetValue(c_PinSubCategoryMemberReference);
		_offPinValueType.SetValue(c_PinValueType);
		_offContainerType.SetValue(c_ContainerType);
	}
}
// ScriptStruct Engine.BPVariableMetaDataEntry
// 0x0018
public class FBPVariableMetaDataEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offDataKey                                                    = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDataValue                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               DataKey                                                        => _offDataKey.GetValue();
	public FString                                             DataValue                                                      => _offDataValue.GetValue();
	#endregion

	public FBPVariableMetaDataEntry(FName c_DataKey, FString c_DataValue) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataKey.SetValue(c_DataKey);
		_offDataValue.SetValue(c_DataValue);
	}
}
// ScriptStruct Engine.BPVariableDescription
// 0x00D0
public class FBPVariableDescription : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offVarName                                                    = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offVarGuid                                                    = new ExternalOffset<FGuid>(0x0008, false);                    // 0x0008(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FEdGraphPinType>                    _offVarType                                                    = new ExternalOffset<FEdGraphPinType>(0x0018, false);          // 0x0018(0x0058) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFriendlyName                                               = new ExternalOffset<FString>(0x0070, false);                  // 0x0070(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FText>                              _offCategory                                                   = new ExternalOffset<FText>(0x0080, false);                    // 0x0080(0x0018) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<ulong>                              _offPropertyFlags                                              = new ExternalOffset<ulong>(0x0098);                           // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offRepNotifyFunc                                              = new ExternalOffset<FName>(0x00A0, false);                    // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ELifetimeCondition>>    _offReplicationCondition                                       = new ExternalOffset<TEnumAsByte<ELifetimeCondition>>(0x00A8, false); // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBPVariableMetaDataEntry>>   _offMetaDataArray                                              = new ExternalOffset<TArray<FBPVariableMetaDataEntry>>(0x00B0, false); // 0x00B0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDefaultValue                                               = new ExternalOffset<FString>(0x00C0, false);                  // 0x00C0(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               VarName                                                        => _offVarName.GetValue();
	public FGuid                                               VarGuid                                                        => _offVarGuid.GetValue();
	public FEdGraphPinType                                     VarType                                                        => _offVarType.GetValue();
	public FString                                             FriendlyName                                                   => _offFriendlyName.GetValue();
	public FText                                               Category                                                       => _offCategory.GetValue();
	public ulong                                               PropertyFlags                                                  => _offPropertyFlags.GetValue();
	public FName                                               RepNotifyFunc                                                  => _offRepNotifyFunc.GetValue();
	public TEnumAsByte<ELifetimeCondition>                     ReplicationCondition                                           => _offReplicationCondition.GetValue();
	public TArray<FBPVariableMetaDataEntry>                    MetaDataArray                                                  => _offMetaDataArray.GetValue();
	public FString                                             DefaultValue                                                   => _offDefaultValue.GetValue();
	#endregion

	public FBPVariableDescription(FName c_VarName, FGuid c_VarGuid, FEdGraphPinType c_VarType, FString c_FriendlyName, FText c_Category, ulong c_PropertyFlags, FName c_RepNotifyFunc, TEnumAsByte<ELifetimeCondition> c_ReplicationCondition, TArray<FBPVariableMetaDataEntry> c_MetaDataArray, FString c_DefaultValue) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVarName.SetValue(c_VarName);
		_offVarGuid.SetValue(c_VarGuid);
		_offVarType.SetValue(c_VarType);
		_offFriendlyName.SetValue(c_FriendlyName);
		_offCategory.SetValue(c_Category);
		_offPropertyFlags.SetValue(c_PropertyFlags);
		_offRepNotifyFunc.SetValue(c_RepNotifyFunc);
		_offReplicationCondition.SetValue(c_ReplicationCondition);
		_offMetaDataArray.SetValue(c_MetaDataArray);
		_offDefaultValue.SetValue(c_DefaultValue);
	}
}
// ScriptStruct Engine.BlueprintMacroCosmeticInfo
// 0x0001
public class FBlueprintMacroCosmeticInfo : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FBlueprintMacroCosmeticInfo() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.CompilerNativizationOptions
// 0x0080
public class FCompilerNativizationOptions : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offPlatformName                                               = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offServerOnlyPlatform                                         = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offClientOnlyPlatform                                         = new ExternalOffset<byte/*(bool)*/>(0x0009);                  // 0x0009(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbExcludeMonolithicHeaders                                  = new ExternalOffset<byte/*(bool)*/>(0x000A);                  // 0x000A(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offExcludedModules                                            = new ExternalOffset<TArray<FName>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offExcludedFolderPaths                                        = new ExternalOffset<TArray<FString>>(0x0070, false);          // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               PlatformName                                                   => _offPlatformName.GetValue();
	public byte/*(bool)*/                                      ServerOnlyPlatform                                             => _offServerOnlyPlatform.GetValue();
	public byte/*(bool)*/                                      ClientOnlyPlatform                                             => _offClientOnlyPlatform.GetValue();
	public byte/*(bool)*/                                      bExcludeMonolithicHeaders                                      => _offbExcludeMonolithicHeaders.GetValue();
	public TArray<FName>                                       ExcludedModules                                                => _offExcludedModules.GetValue();
	public TArray<FString>                                     ExcludedFolderPaths                                            => _offExcludedFolderPaths.GetValue();
	#endregion

	public FCompilerNativizationOptions(FName c_PlatformName, byte/*(bool)*/ c_ServerOnlyPlatform, byte/*(bool)*/ c_ClientOnlyPlatform, byte/*(bool)*/ c_bExcludeMonolithicHeaders, TArray<FName> c_ExcludedModules, TArray<FString> c_ExcludedFolderPaths) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlatformName.SetValue(c_PlatformName);
		_offServerOnlyPlatform.SetValue(c_ServerOnlyPlatform);
		_offClientOnlyPlatform.SetValue(c_ClientOnlyPlatform);
		_offbExcludeMonolithicHeaders.SetValue(c_bExcludeMonolithicHeaders);
		_offExcludedModules.SetValue(c_ExcludedModules);
		_offExcludedFolderPaths.SetValue(c_ExcludedFolderPaths);
	}
}
// ScriptStruct Engine.BlueprintComponentChangedPropertyInfo
// 0x0018
public class FBlueprintComponentChangedPropertyInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offPropertyName                                               = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offArrayIndex                                                 = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UStruct>                            _offPropertyScope                                              = new ExternalOffset<UStruct>(0x0010, true);                   // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               PropertyName                                                   => _offPropertyName.GetValue();
	public int                                                 ArrayIndex                                                     => _offArrayIndex.GetValue();
	public UStruct                                             PropertyScope                                                  => _offPropertyScope.GetValue();
	#endregion

	public FBlueprintComponentChangedPropertyInfo(FName c_PropertyName, int c_ArrayIndex, UStruct c_PropertyScope) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPropertyName.SetValue(c_PropertyName);
		_offArrayIndex.SetValue(c_ArrayIndex);
		_offPropertyScope.SetValue(c_PropertyScope);
	}
}
// ScriptStruct Engine.BlueprintCookedComponentInstancingData
// 0x0050
public class FBlueprintCookedComponentInstancingData : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbHasValidCookedData                                        = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBlueprintComponentChangedPropertyInfo>> _offChangedPropertyList                                        = new ExternalOffset<TArray<FBlueprintComponentChangedPropertyInfo>>(0x0008, false); // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bHasValidCookedData                                            => _offbHasValidCookedData.GetValue();
	public TArray<FBlueprintComponentChangedPropertyInfo>      ChangedPropertyList                                            => _offChangedPropertyList.GetValue();
	#endregion

	public FBlueprintCookedComponentInstancingData(byte/*(bool)*/ c_bHasValidCookedData, TArray<FBlueprintComponentChangedPropertyInfo> c_ChangedPropertyList) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbHasValidCookedData.SetValue(c_bHasValidCookedData);
		_offChangedPropertyList.SetValue(c_ChangedPropertyList);
	}
}
// ScriptStruct Engine.EventGraphFastCallPair
// 0x0010
public class FEventGraphFastCallPair : ExternalClass
{
	#region Offsets
	private ExternalOffset<UFunction>                          _offFunctionToPatch                                            = new ExternalOffset<UFunction>(0x0000, true);                 // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offEventGraphCallOffset                                       = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UFunction                                           FunctionToPatch                                                => _offFunctionToPatch.GetValue();
	public int                                                 EventGraphCallOffset                                           => _offEventGraphCallOffset.GetValue();
	#endregion

	public FEventGraphFastCallPair(UFunction c_FunctionToPatch, int c_EventGraphCallOffset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFunctionToPatch.SetValue(c_FunctionToPatch);
		_offEventGraphCallOffset.SetValue(c_EventGraphCallOffset);
	}
}
// ScriptStruct Engine.BlueprintDebugData
// 0x0001
public class FBlueprintDebugData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FBlueprintDebugData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.PointerToUberGraphFrame
// 0x0008
public class FPointerToUberGraphFrame : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FPointerToUberGraphFrame() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.DebuggingInfoForSingleFunction
// 0x0190
public class FDebuggingInfoForSingleFunction : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FDebuggingInfoForSingleFunction() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.NodeToCodeAssociation
// 0x0014
public class FNodeToCodeAssociation : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FNodeToCodeAssociation() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.AnimCurveType
// 0x0002
public class FAnimCurveType : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAnimCurveType() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.BookmarkBaseJumpToSettings
// 0x0001
public class FBookmarkBaseJumpToSettings : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FBookmarkBaseJumpToSettings() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.BookmarkJumpToSettings
// 0x0000 (0x0001 - 0x0001)
public class FBookmarkJumpToSettings : FBookmarkBaseJumpToSettings
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FBookmarkJumpToSettings() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.Bookmark2DJumpToSettings
// 0x0001
public class FBookmark2DJumpToSettings : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FBookmark2DJumpToSettings() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.GeomSelection
// 0x000C
public class FGeomSelection : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offType                                                       = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIndex                                                      = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSelectionIndex                                             = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Type                                                           => _offType.GetValue();
	public int                                                 Index                                                          => _offIndex.GetValue();
	public int                                                 SelectionIndex                                                 => _offSelectionIndex.GetValue();
	#endregion

	public FGeomSelection(int c_Type, int c_Index, int c_SelectionIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offType.SetValue(c_Type);
		_offIndex.SetValue(c_Index);
		_offSelectionIndex.SetValue(c_SelectionIndex);
	}
}
// ScriptStruct Engine.BuilderPoly
// 0x0020
public class FBuilderPoly : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<int>>                        _offVertexIndices                                              = new ExternalOffset<TArray<int>>(0x0000, false);              // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDirection                                                  = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offItemName                                                   = new ExternalOffset<FName>(0x0014, false);                    // 0x0014(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPolyFlags                                                  = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<int>                                         VertexIndices                                                  => _offVertexIndices.GetValue();
	public int                                                 Direction                                                      => _offDirection.GetValue();
	public FName                                               ItemName                                                       => _offItemName.GetValue();
	public int                                                 PolyFlags                                                      => _offPolyFlags.GetValue();
	#endregion

	public FBuilderPoly(TArray<int> c_VertexIndices, int c_Direction, FName c_ItemName, int c_PolyFlags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVertexIndices.SetValue(c_VertexIndices);
		_offDirection.SetValue(c_Direction);
		_offItemName.SetValue(c_ItemName);
		_offPolyFlags.SetValue(c_PolyFlags);
	}
}
// ScriptStruct Engine.CachedAnimTransitionData
// 0x0024
public class FCachedAnimTransitionData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offStateMachineName                                           = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offFromStateName                                              = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offToStateName                                                = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               StateMachineName                                               => _offStateMachineName.GetValue();
	public FName                                               FromStateName                                                  => _offFromStateName.GetValue();
	public FName                                               ToStateName                                                    => _offToStateName.GetValue();
	#endregion

	public FCachedAnimTransitionData(FName c_StateMachineName, FName c_FromStateName, FName c_ToStateName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStateMachineName.SetValue(c_StateMachineName);
		_offFromStateName.SetValue(c_FromStateName);
		_offToStateName.SetValue(c_ToStateName);
	}
}
// ScriptStruct Engine.CachedAnimRelevancyData
// 0x001C
public class FCachedAnimRelevancyData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offStateMachineName                                           = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offStateName                                                  = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               StateMachineName                                               => _offStateMachineName.GetValue();
	public FName                                               StateName                                                      => _offStateName.GetValue();
	#endregion

	public FCachedAnimRelevancyData(FName c_StateMachineName, FName c_StateName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStateMachineName.SetValue(c_StateMachineName);
		_offStateName.SetValue(c_StateName);
	}
}
// ScriptStruct Engine.CachedAnimAssetPlayerData
// 0x0018
public class FCachedAnimAssetPlayerData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offStateMachineName                                           = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offStateName                                                  = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               StateMachineName                                               => _offStateMachineName.GetValue();
	public FName                                               StateName                                                      => _offStateName.GetValue();
	#endregion

	public FCachedAnimAssetPlayerData(FName c_StateMachineName, FName c_StateName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStateMachineName.SetValue(c_StateMachineName);
		_offStateName.SetValue(c_StateName);
	}
}
// ScriptStruct Engine.CachedAnimStateData
// 0x001C
public class FCachedAnimStateData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offStateMachineName                                           = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offStateName                                                  = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               StateMachineName                                               => _offStateMachineName.GetValue();
	public FName                                               StateName                                                      => _offStateName.GetValue();
	#endregion

	public FCachedAnimStateData(FName c_StateMachineName, FName c_StateName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStateMachineName.SetValue(c_StateMachineName);
		_offStateName.SetValue(c_StateName);
	}
}
// ScriptStruct Engine.CachedAnimStateArray
// 0x0018
public class FCachedAnimStateArray : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FCachedAnimStateData>>       _offStates                                                     = new ExternalOffset<TArray<FCachedAnimStateData>>(0x0000, false); // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FCachedAnimStateData>                        States                                                         => _offStates.GetValue();
	#endregion

	public FCachedAnimStateArray(TArray<FCachedAnimStateData> c_States) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStates.SetValue(c_States);
	}
}
// ScriptStruct Engine.PooledCameraShakes
// 0x0010
public class FPooledCameraShakes : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<UCameraShake>>               _offPooledShakes                                               = new ExternalOffset<TArray<UCameraShake>>(0x0000, false);     // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UCameraShake>                                PooledShakes                                                   => _offPooledShakes.GetValue();
	#endregion

	public FPooledCameraShakes(TArray<UCameraShake> c_PooledShakes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPooledShakes.SetValue(c_PooledShakes);
	}
}
// ScriptStruct Engine.FOscillator
// 0x000C
public class FFOscillator : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offAmplitude                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFrequency                                                  = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EInitialOscillatorOffset>> _offInitialOffset                                              = new ExternalOffset<TEnumAsByte<EInitialOscillatorOffset>>(0x0008, false); // 0x0008(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EOscillatorWaveform>                _offWaveform                                                   = new ExternalOffset<EOscillatorWaveform>(0x0009, false);      // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Amplitude                                                      => _offAmplitude.GetValue();
	public float                                               Frequency                                                      => _offFrequency.GetValue();
	public TEnumAsByte<EInitialOscillatorOffset>               InitialOffset                                                  => _offInitialOffset.GetValue();
	public EOscillatorWaveform                                 Waveform                                                       => _offWaveform.GetValue();
	#endregion

	public FFOscillator(float c_Amplitude, float c_Frequency, TEnumAsByte<EInitialOscillatorOffset> c_InitialOffset, EOscillatorWaveform c_Waveform) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmplitude.SetValue(c_Amplitude);
		_offFrequency.SetValue(c_Frequency);
		_offInitialOffset.SetValue(c_InitialOffset);
		_offWaveform.SetValue(c_Waveform);
	}
}
// ScriptStruct Engine.VOscillator
// 0x0024
public class FVOscillator : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFOscillator>                       _offX                                                          = new ExternalOffset<FFOscillator>(0x0000, false);             // 0x0000(0x000C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FFOscillator>                       _offY                                                          = new ExternalOffset<FFOscillator>(0x000C, false);             // 0x000C(0x000C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FFOscillator>                       _offZ                                                          = new ExternalOffset<FFOscillator>(0x0018, false);             // 0x0018(0x000C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFOscillator                                        X                                                              => _offX.GetValue();
	public FFOscillator                                        Y                                                              => _offY.GetValue();
	public FFOscillator                                        Z                                                              => _offZ.GetValue();
	#endregion

	public FVOscillator(FFOscillator c_X, FFOscillator c_Y, FFOscillator c_Z) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offX.SetValue(c_X);
		_offY.SetValue(c_Y);
		_offZ.SetValue(c_Z);
	}
}
// ScriptStruct Engine.ROscillator
// 0x0024
public class FROscillator : ExternalClass
{
	#region Offsets
	private ExternalOffset<FFOscillator>                       _offPitch                                                      = new ExternalOffset<FFOscillator>(0x0000, false);             // 0x0000(0x000C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FFOscillator>                       _offYaw                                                        = new ExternalOffset<FFOscillator>(0x000C, false);             // 0x000C(0x000C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FFOscillator>                       _offRoll                                                       = new ExternalOffset<FFOscillator>(0x0018, false);             // 0x0018(0x000C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFOscillator                                        Pitch                                                          => _offPitch.GetValue();
	public FFOscillator                                        Yaw                                                            => _offYaw.GetValue();
	public FFOscillator                                        Roll                                                           => _offRoll.GetValue();
	#endregion

	public FROscillator(FFOscillator c_Pitch, FFOscillator c_Yaw, FFOscillator c_Roll) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPitch.SetValue(c_Pitch);
		_offYaw.SetValue(c_Yaw);
		_offRoll.SetValue(c_Roll);
	}
}
// ScriptStruct Engine.DummySpacerCameraTypes
// 0x0001
public class FDummySpacerCameraTypes : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FDummySpacerCameraTypes() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.MinimalViewInfo
// 0x05C0
public class FMinimalViewInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offLocation                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x000C, false);                 // 0x000C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFOV                                                        = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDesiredFOV                                                 = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOrthoWidth                                                 = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOrthoNearClipPlane                                         = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOrthoFarClipPlane                                          = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAspectRatio                                                = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbConstrainAspectRatio                                      = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseFieldOfViewForLOD                                      = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECameraProjectionMode>> _offProjectionMode                                             = new ExternalOffset<TEnumAsByte<ECameraProjectionMode>>(0x0034, false); // 0x0034(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPostProcessBlendWeight                                     = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPostProcessSettings>               _offPostProcessSettings                                        = new ExternalOffset<FPostProcessSettings>(0x0040, false);     // 0x0040(0x0530) (BlueprintVisible, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offOffCenterProjectionOffset                                  = new ExternalOffset<FVector2D>(0x0570, false);                // 0x0570(0x0008) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Location                                                       => _offLocation.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public float                                               FOV                                                            => _offFOV.GetValue();
	public float                                               DesiredFOV                                                     => _offDesiredFOV.GetValue();
	public float                                               OrthoWidth                                                     => _offOrthoWidth.GetValue();
	public float                                               OrthoNearClipPlane                                             => _offOrthoNearClipPlane.GetValue();
	public float                                               OrthoFarClipPlane                                              => _offOrthoFarClipPlane.GetValue();
	public float                                               AspectRatio                                                    => _offAspectRatio.GetValue();
	public TEnumAsByte<ECameraProjectionMode>                  ProjectionMode                                                 => _offProjectionMode.GetValue();
	public float                                               PostProcessBlendWeight                                         => _offPostProcessBlendWeight.GetValue();
	public FPostProcessSettings                                PostProcessSettings                                            => _offPostProcessSettings.GetValue();
	public FVector2D                                           OffCenterProjectionOffset                                      => _offOffCenterProjectionOffset.GetValue();
	#endregion

	public FMinimalViewInfo(FVector c_Location, FRotator c_Rotation, float c_FOV, float c_DesiredFOV, float c_OrthoWidth, float c_OrthoNearClipPlane, float c_OrthoFarClipPlane, float c_AspectRatio, TEnumAsByte<ECameraProjectionMode> c_ProjectionMode, float c_PostProcessBlendWeight, FPostProcessSettings c_PostProcessSettings, FVector2D c_OffCenterProjectionOffset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocation.SetValue(c_Location);
		_offRotation.SetValue(c_Rotation);
		_offFOV.SetValue(c_FOV);
		_offDesiredFOV.SetValue(c_DesiredFOV);
		_offOrthoWidth.SetValue(c_OrthoWidth);
		_offOrthoNearClipPlane.SetValue(c_OrthoNearClipPlane);
		_offOrthoFarClipPlane.SetValue(c_OrthoFarClipPlane);
		_offAspectRatio.SetValue(c_AspectRatio);
		_offProjectionMode.SetValue(c_ProjectionMode);
		_offPostProcessBlendWeight.SetValue(c_PostProcessBlendWeight);
		_offPostProcessSettings.SetValue(c_PostProcessSettings);
		_offOffCenterProjectionOffset.SetValue(c_OffCenterProjectionOffset);
	}
}
// ScriptStruct Engine.CanvasIcon
// 0x0018
public class FCanvasIcon : ExternalClass
{
	#region Offsets
	private ExternalOffset<UTexture>                           _offTexture                                                    = new ExternalOffset<UTexture>(0x0000, true);                  // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offU                                                          = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offV                                                          = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offUL                                                         = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVL                                                         = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTexture                                            Texture                                                        => _offTexture.GetValue();
	public float                                               U                                                              => _offU.GetValue();
	public float                                               V                                                              => _offV.GetValue();
	public float                                               UL                                                             => _offUL.GetValue();
	public float                                               VL                                                             => _offVL.GetValue();
	#endregion

	public FCanvasIcon(UTexture c_Texture, float c_U, float c_V, float c_UL, float c_VL) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTexture.SetValue(c_Texture);
		_offU.SetValue(c_U);
		_offV.SetValue(c_V);
		_offUL.SetValue(c_UL);
		_offVL.SetValue(c_VL);
	}
}
// ScriptStruct Engine.WrappedStringElement
// 0x0018
public class FWrappedStringElement : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offValue                                                      = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offLineExtent                                                 = new ExternalOffset<FVector2D>(0x0010, false);                // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Value                                                          => _offValue.GetValue();
	public FVector2D                                           LineExtent                                                     => _offLineExtent.GetValue();
	#endregion

	public FWrappedStringElement(FString c_Value, FVector2D c_LineExtent) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offValue.SetValue(c_Value);
		_offLineExtent.SetValue(c_LineExtent);
	}
}
// ScriptStruct Engine.TextSizingParameters
// 0x0028
public class FTextSizingParameters : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offDrawX                                                      = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDrawY                                                      = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDrawXL                                                     = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDrawYL                                                     = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offScaling                                                    = new ExternalOffset<FVector2D>(0x0010, false);                // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UFont>                              _offDrawFont                                                   = new ExternalOffset<UFont>(0x0018, true);                     // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offSpacingAdjust                                              = new ExternalOffset<FVector2D>(0x0020, false);                // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               DrawX                                                          => _offDrawX.GetValue();
	public float                                               DrawY                                                          => _offDrawY.GetValue();
	public float                                               DrawXL                                                         => _offDrawXL.GetValue();
	public float                                               DrawYL                                                         => _offDrawYL.GetValue();
	public FVector2D                                           Scaling                                                        => _offScaling.GetValue();
	public UFont                                               DrawFont                                                       => _offDrawFont.GetValue();
	public FVector2D                                           SpacingAdjust                                                  => _offSpacingAdjust.GetValue();
	#endregion

	public FTextSizingParameters(float c_DrawX, float c_DrawY, float c_DrawXL, float c_DrawYL, FVector2D c_Scaling, UFont c_DrawFont, FVector2D c_SpacingAdjust) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDrawX.SetValue(c_DrawX);
		_offDrawY.SetValue(c_DrawY);
		_offDrawXL.SetValue(c_DrawXL);
		_offDrawYL.SetValue(c_DrawYL);
		_offScaling.SetValue(c_Scaling);
		_offDrawFont.SetValue(c_DrawFont);
		_offSpacingAdjust.SetValue(c_SpacingAdjust);
	}
}
// ScriptStruct Engine.CharacterMovementComponentPostPhysicsTickFunction
// 0x0008 (0x0058 - 0x0050)
public class FCharacterMovementComponentPostPhysicsTickFunction : FTickFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FCharacterMovementComponentPostPhysicsTickFunction() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.FindFloorResult
// 0x0094
public class FFindFloorResult : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbBlockingHit                                               = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbWalkableFloor                                             = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLineTrace                                                 = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFloorDist                                                  = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLineDist                                                   = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FHitResult>                         _offHitResult                                                  = new ExternalOffset<FHitResult>(0x000C, false);               // 0x000C(0x0088) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               FloorDist                                                      => _offFloorDist.GetValue();
	public float                                               LineDist                                                       => _offLineDist.GetValue();
	public FHitResult                                          HitResult                                                      => _offHitResult.GetValue();
	#endregion

	public FFindFloorResult(float c_FloorDist, float c_LineDist, FHitResult c_HitResult) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFloorDist.SetValue(c_FloorDist);
		_offLineDist.SetValue(c_LineDist);
		_offHitResult.SetValue(c_HitResult);
	}
}
// ScriptStruct Engine.ChildActorAttachedActorInfo
// 0x0040
public class FChildActorAttachedActorInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<TWeakObjectPtr<AActor>>             _offActor                                                      = new ExternalOffset<TWeakObjectPtr<AActor>>(0x0000, false);   // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offSocketName                                                 = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FTransform>                         _offRelativeTransform                                          = new ExternalOffset<FTransform>(0x0010, false);               // 0x0010(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TWeakObjectPtr<AActor>                              Actor                                                          => _offActor.GetValue();
	public FName                                               SocketName                                                     => _offSocketName.GetValue();
	public FTransform                                          RelativeTransform                                              => _offRelativeTransform.GetValue();
	#endregion

	public FChildActorAttachedActorInfo(TWeakObjectPtr<AActor> c_Actor, FName c_SocketName, FTransform c_RelativeTransform) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActor.SetValue(c_Actor);
		_offSocketName.SetValue(c_SocketName);
		_offRelativeTransform.SetValue(c_RelativeTransform);
	}
}
// ScriptStruct Engine.ChildActorComponentInstanceData
// 0x0028 (0x00D0 - 0x00A8)
public class FChildActorComponentInstanceData : FSceneComponentInstanceData
{
	#region Offsets
	private ExternalOffset<FName>                              _offChildActorName                                             = new ExternalOffset<FName>(0x00A8, false);                    // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FChildActorAttachedActorInfo>> _offAttachedActors                                             = new ExternalOffset<TArray<FChildActorAttachedActorInfo>>(0x00B0, false); // 0x00B0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ChildActorName                                                 => _offChildActorName.GetValue();
	public TArray<FChildActorAttachedActorInfo>                AttachedActors                                                 => _offAttachedActors.GetValue();
	#endregion

	public FChildActorComponentInstanceData(FName c_ChildActorName, TArray<FChildActorAttachedActorInfo> c_AttachedActors) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offChildActorName.SetValue(c_ChildActorName);
		_offAttachedActors.SetValue(c_AttachedActors);
	}
}
// ScriptStruct Engine.CustomProfile
// 0x0018
public class FCustomProfile : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FResponseChannel>>           _offCustomResponses                                            = new ExternalOffset<TArray<FResponseChannel>>(0x0008, false); // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public TArray<FResponseChannel>                            CustomResponses                                                => _offCustomResponses.GetValue();
	#endregion

	public FCustomProfile(FName c_Name, TArray<FResponseChannel> c_CustomResponses) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offCustomResponses.SetValue(c_CustomResponses);
	}
}
// ScriptStruct Engine.ActorComponentTickFunction
// 0x0008 (0x0058 - 0x0050)
public class FActorComponentTickFunction : FTickFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FActorComponentTickFunction() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.CustomChannelSetup
// 0x0010
public class FCustomChannelSetup : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ECollisionChannel>>     _offChannel                                                    = new ExternalOffset<TEnumAsByte<ECollisionChannel>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionResponse>>    _offDefaultResponse                                            = new ExternalOffset<TEnumAsByte<ECollisionResponse>>(0x000C, false); // 0x000C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbTraceType                                                 = new ExternalOffset<byte/*(bool)*/>(0x000D);                  // 0x000D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbStaticObject                                              = new ExternalOffset<byte/*(bool)*/>(0x000E);                  // 0x000E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ECollisionChannel>                      Channel                                                        => _offChannel.GetValue();
	public FName                                               Name                                                           => _offName.GetValue();
	public TEnumAsByte<ECollisionResponse>                     DefaultResponse                                                => _offDefaultResponse.GetValue();
	public byte/*(bool)*/                                      bTraceType                                                     => _offbTraceType.GetValue();
	public byte/*(bool)*/                                      bStaticObject                                                  => _offbStaticObject.GetValue();
	#endregion

	public FCustomChannelSetup(TEnumAsByte<ECollisionChannel> c_Channel, FName c_Name, TEnumAsByte<ECollisionResponse> c_DefaultResponse, byte/*(bool)*/ c_bTraceType, byte/*(bool)*/ c_bStaticObject) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offChannel.SetValue(c_Channel);
		_offName.SetValue(c_Name);
		_offDefaultResponse.SetValue(c_DefaultResponse);
		_offbTraceType.SetValue(c_bTraceType);
		_offbStaticObject.SetValue(c_bStaticObject);
	}
}
// ScriptStruct Engine.CollisionResponseTemplate
// 0x0060
public class FCollisionResponseTemplate : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionEnabled>>     _offCollisionEnabled                                           = new ExternalOffset<TEnumAsByte<ECollisionEnabled>>(0x0008, false); // 0x0008(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offObjectTypeName                                             = new ExternalOffset<FName>(0x000C, false);                    // 0x000C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FResponseChannel>>           _offCustomResponses                                            = new ExternalOffset<TArray<FResponseChannel>>(0x0018, false); // 0x0018(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offHelpMessage                                                = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbCanModify                                                 = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public TEnumAsByte<ECollisionEnabled>                      CollisionEnabled                                               => _offCollisionEnabled.GetValue();
	public FName                                               ObjectTypeName                                                 => _offObjectTypeName.GetValue();
	public TArray<FResponseChannel>                            CustomResponses                                                => _offCustomResponses.GetValue();
	public FString                                             HelpMessage                                                    => _offHelpMessage.GetValue();
	public byte/*(bool)*/                                      bCanModify                                                     => _offbCanModify.GetValue();
	#endregion

	public FCollisionResponseTemplate(FName c_Name, TEnumAsByte<ECollisionEnabled> c_CollisionEnabled, FName c_ObjectTypeName, TArray<FResponseChannel> c_CustomResponses, FString c_HelpMessage, byte/*(bool)*/ c_bCanModify) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offCollisionEnabled.SetValue(c_CollisionEnabled);
		_offObjectTypeName.SetValue(c_ObjectTypeName);
		_offCustomResponses.SetValue(c_CustomResponses);
		_offHelpMessage.SetValue(c_HelpMessage);
		_offbCanModify.SetValue(c_bCanModify);
	}
}
// ScriptStruct Engine.BlueprintComponentDelegateBinding
// 0x0018
public class FBlueprintComponentDelegateBinding : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offComponentPropertyName                                      = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offDelegatePropertyName                                       = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offFunctionNameToBind                                         = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ComponentPropertyName                                          => _offComponentPropertyName.GetValue();
	public FName                                               DelegatePropertyName                                           => _offDelegatePropertyName.GetValue();
	public FName                                               FunctionNameToBind                                             => _offFunctionNameToBind.GetValue();
	#endregion

	public FBlueprintComponentDelegateBinding(FName c_ComponentPropertyName, FName c_DelegatePropertyName, FName c_FunctionNameToBind) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offComponentPropertyName.SetValue(c_ComponentPropertyName);
		_offDelegatePropertyName.SetValue(c_DelegatePropertyName);
		_offFunctionNameToBind.SetValue(c_FunctionNameToBind);
	}
}
// ScriptStruct Engine.MeshUVChannelInfo
// 0x0014
public class FMeshUVChannelInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbInitialized                                               = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbOverrideDensities                                         = new ExternalOffset<byte/*(bool)*/>(0x0001);                  // 0x0001(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<float>                              _offLocalUVDensities[0x4]                                      = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bInitialized                                                   => _offbInitialized.GetValue();
	public byte/*(bool)*/                                      bOverrideDensities                                             => _offbOverrideDensities.GetValue();
	#endregion

	public FMeshUVChannelInfo(byte/*(bool)*/ c_bInitialized, byte/*(bool)*/ c_bOverrideDensities) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbInitialized.SetValue(c_bInitialized);
		_offbOverrideDensities.SetValue(c_bOverrideDensities);
	}
}
// ScriptStruct Engine.AutoCompleteNode
// 0x0028
public class FAutoCompleteNode : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offIndexChar                                                  = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offAutoCompleteListIndices                                    = new ExternalOffset<TArray<int>>(0x0008, false);              // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 IndexChar                                                      => _offIndexChar.GetValue();
	public TArray<int>                                         AutoCompleteListIndices                                        => _offAutoCompleteListIndices.GetValue();
	#endregion

	public FAutoCompleteNode(int c_IndexChar, TArray<int> c_AutoCompleteListIndices) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIndexChar.SetValue(c_IndexChar);
		_offAutoCompleteListIndices.SetValue(c_AutoCompleteListIndices);
	}
}
// ScriptStruct Engine.ConstraintDrive
// 0x0010
public class FConstraintDrive : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offStiffness                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDamping                                                    = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxForce                                                   = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnablePositionDrive                                       = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableVelocityDrive                                       = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Stiffness                                                      => _offStiffness.GetValue();
	public float                                               Damping                                                        => _offDamping.GetValue();
	public float                                               MaxForce                                                       => _offMaxForce.GetValue();
	#endregion

	public FConstraintDrive(float c_Stiffness, float c_Damping, float c_MaxForce) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStiffness.SetValue(c_Stiffness);
		_offDamping.SetValue(c_Damping);
		_offMaxForce.SetValue(c_MaxForce);
	}
}
// ScriptStruct Engine.AngularDriveConstraint
// 0x004C
public class FAngularDriveConstraint : ExternalClass
{
	#region Offsets
	private ExternalOffset<FConstraintDrive>                   _offTwistDrive                                                 = new ExternalOffset<FConstraintDrive>(0x0000, false);         // 0x0000(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstraintDrive>                   _offSwingDrive                                                 = new ExternalOffset<FConstraintDrive>(0x0010, false);         // 0x0010(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstraintDrive>                   _offSlerpDrive                                                 = new ExternalOffset<FConstraintDrive>(0x0020, false);         // 0x0020(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offOrientationTarget                                          = new ExternalOffset<FRotator>(0x0030, false);                 // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offAngularVelocityTarget                                      = new ExternalOffset<FVector>(0x003C, false);                  // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAngularDriveMode>>     _offAngularDriveMode                                           = new ExternalOffset<TEnumAsByte<EAngularDriveMode>>(0x0048, false); // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FConstraintDrive                                    TwistDrive                                                     => _offTwistDrive.GetValue();
	public FConstraintDrive                                    SwingDrive                                                     => _offSwingDrive.GetValue();
	public FConstraintDrive                                    SlerpDrive                                                     => _offSlerpDrive.GetValue();
	public FRotator                                            OrientationTarget                                              => _offOrientationTarget.GetValue();
	public FVector                                             AngularVelocityTarget                                          => _offAngularVelocityTarget.GetValue();
	public TEnumAsByte<EAngularDriveMode>                      AngularDriveMode                                               => _offAngularDriveMode.GetValue();
	#endregion

	public FAngularDriveConstraint(FConstraintDrive c_TwistDrive, FConstraintDrive c_SwingDrive, FConstraintDrive c_SlerpDrive, FRotator c_OrientationTarget, FVector c_AngularVelocityTarget, TEnumAsByte<EAngularDriveMode> c_AngularDriveMode) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTwistDrive.SetValue(c_TwistDrive);
		_offSwingDrive.SetValue(c_SwingDrive);
		_offSlerpDrive.SetValue(c_SlerpDrive);
		_offOrientationTarget.SetValue(c_OrientationTarget);
		_offAngularVelocityTarget.SetValue(c_AngularVelocityTarget);
		_offAngularDriveMode.SetValue(c_AngularDriveMode);
	}
}
// ScriptStruct Engine.LinearDriveConstraint
// 0x004C
public class FLinearDriveConstraint : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offPositionTarget                                             = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offVelocityTarget                                             = new ExternalOffset<FVector>(0x000C, false);                  // 0x000C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstraintDrive>                   _offXDrive                                                     = new ExternalOffset<FConstraintDrive>(0x0018, false);         // 0x0018(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstraintDrive>                   _offYDrive                                                     = new ExternalOffset<FConstraintDrive>(0x0028, false);         // 0x0028(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstraintDrive>                   _offZDrive                                                     = new ExternalOffset<FConstraintDrive>(0x0038, false);         // 0x0038(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnablePositionDrive                                       = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             PositionTarget                                                 => _offPositionTarget.GetValue();
	public FVector                                             VelocityTarget                                                 => _offVelocityTarget.GetValue();
	public FConstraintDrive                                    XDrive                                                         => _offXDrive.GetValue();
	public FConstraintDrive                                    YDrive                                                         => _offYDrive.GetValue();
	public FConstraintDrive                                    ZDrive                                                         => _offZDrive.GetValue();
	#endregion

	public FLinearDriveConstraint(FVector c_PositionTarget, FVector c_VelocityTarget, FConstraintDrive c_XDrive, FConstraintDrive c_YDrive, FConstraintDrive c_ZDrive) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPositionTarget.SetValue(c_PositionTarget);
		_offVelocityTarget.SetValue(c_VelocityTarget);
		_offXDrive.SetValue(c_XDrive);
		_offYDrive.SetValue(c_YDrive);
		_offZDrive.SetValue(c_ZDrive);
	}
}
// ScriptStruct Engine.ConstraintBaseParams
// 0x0014
public class FConstraintBaseParams : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offStiffness                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDamping                                                    = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRestitution                                                = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offContactDistance                                            = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSoftConstraint                                            = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Stiffness                                                      => _offStiffness.GetValue();
	public float                                               Damping                                                        => _offDamping.GetValue();
	public float                                               Restitution                                                    => _offRestitution.GetValue();
	public float                                               ContactDistance                                                => _offContactDistance.GetValue();
	#endregion

	public FConstraintBaseParams(float c_Stiffness, float c_Damping, float c_Restitution, float c_ContactDistance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStiffness.SetValue(c_Stiffness);
		_offDamping.SetValue(c_Damping);
		_offRestitution.SetValue(c_Restitution);
		_offContactDistance.SetValue(c_ContactDistance);
	}
}
// ScriptStruct Engine.LinearConstraint
// 0x0008 (0x001C - 0x0014)
public class FLinearConstraint : FConstraintBaseParams
{
	#region Offsets
	private ExternalOffset<float>                              _offLimit                                                      = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ELinearConstraintMotion>> _offXMotion                                                    = new ExternalOffset<TEnumAsByte<ELinearConstraintMotion>>(0x0018, false); // 0x0018(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ELinearConstraintMotion>> _offYMotion                                                    = new ExternalOffset<TEnumAsByte<ELinearConstraintMotion>>(0x0019, false); // 0x0019(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ELinearConstraintMotion>> _offZMotion                                                    = new ExternalOffset<TEnumAsByte<ELinearConstraintMotion>>(0x001A, false); // 0x001A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Limit                                                          => _offLimit.GetValue();
	public TEnumAsByte<ELinearConstraintMotion>                XMotion                                                        => _offXMotion.GetValue();
	public TEnumAsByte<ELinearConstraintMotion>                YMotion                                                        => _offYMotion.GetValue();
	public TEnumAsByte<ELinearConstraintMotion>                ZMotion                                                        => _offZMotion.GetValue();
	#endregion

	public FLinearConstraint(float c_Limit, TEnumAsByte<ELinearConstraintMotion> c_XMotion, TEnumAsByte<ELinearConstraintMotion> c_YMotion, TEnumAsByte<ELinearConstraintMotion> c_ZMotion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLimit.SetValue(c_Limit);
		_offXMotion.SetValue(c_XMotion);
		_offYMotion.SetValue(c_YMotion);
		_offZMotion.SetValue(c_ZMotion);
	}
}
// ScriptStruct Engine.ConeConstraint
// 0x000C (0x0020 - 0x0014)
public class FConeConstraint : FConstraintBaseParams
{
	#region Offsets
	private ExternalOffset<float>                              _offSwing1LimitDegrees                                         = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSwing2LimitDegrees                                         = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAngularConstraintMotion>> _offSwing1Motion                                               = new ExternalOffset<TEnumAsByte<EAngularConstraintMotion>>(0x001C, false); // 0x001C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAngularConstraintMotion>> _offSwing2Motion                                               = new ExternalOffset<TEnumAsByte<EAngularConstraintMotion>>(0x001D, false); // 0x001D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Swing1LimitDegrees                                             => _offSwing1LimitDegrees.GetValue();
	public float                                               Swing2LimitDegrees                                             => _offSwing2LimitDegrees.GetValue();
	public TEnumAsByte<EAngularConstraintMotion>               Swing1Motion                                                   => _offSwing1Motion.GetValue();
	public TEnumAsByte<EAngularConstraintMotion>               Swing2Motion                                                   => _offSwing2Motion.GetValue();
	#endregion

	public FConeConstraint(float c_Swing1LimitDegrees, float c_Swing2LimitDegrees, TEnumAsByte<EAngularConstraintMotion> c_Swing1Motion, TEnumAsByte<EAngularConstraintMotion> c_Swing2Motion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSwing1LimitDegrees.SetValue(c_Swing1LimitDegrees);
		_offSwing2LimitDegrees.SetValue(c_Swing2LimitDegrees);
		_offSwing1Motion.SetValue(c_Swing1Motion);
		_offSwing2Motion.SetValue(c_Swing2Motion);
	}
}
// ScriptStruct Engine.TwistConstraint
// 0x0008 (0x001C - 0x0014)
public class FTwistConstraint : FConstraintBaseParams
{
	#region Offsets
	private ExternalOffset<float>                              _offTwistLimitDegrees                                          = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAngularConstraintMotion>> _offTwistMotion                                                = new ExternalOffset<TEnumAsByte<EAngularConstraintMotion>>(0x0018, false); // 0x0018(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               TwistLimitDegrees                                              => _offTwistLimitDegrees.GetValue();
	public TEnumAsByte<EAngularConstraintMotion>               TwistMotion                                                    => _offTwistMotion.GetValue();
	#endregion

	public FTwistConstraint(float c_TwistLimitDegrees, TEnumAsByte<EAngularConstraintMotion> c_TwistMotion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTwistLimitDegrees.SetValue(c_TwistLimitDegrees);
		_offTwistMotion.SetValue(c_TwistMotion);
	}
}
// ScriptStruct Engine.ConstraintProfileProperties
// 0x0104
public class FConstraintProfileProperties : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offProjectionLinearTolerance                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offProjectionAngularTolerance                                 = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLinearBreakThreshold                                       = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAngularBreakThreshold                                      = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearConstraint>                  _offLinearLimit                                                = new ExternalOffset<FLinearConstraint>(0x0010, false);        // 0x0010(0x001C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FConeConstraint>                    _offConeLimit                                                  = new ExternalOffset<FConeConstraint>(0x002C, false);          // 0x002C(0x0020) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FTwistConstraint>                   _offTwistLimit                                                 = new ExternalOffset<FTwistConstraint>(0x004C, false);         // 0x004C(0x001C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearDriveConstraint>             _offLinearDrive                                                = new ExternalOffset<FLinearDriveConstraint>(0x0068, false);   // 0x0068(0x004C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FAngularDriveConstraint>            _offAngularDrive                                               = new ExternalOffset<FAngularDriveConstraint>(0x00B4, false);  // 0x00B4(0x004C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbDisableCollision                                          = new ExternalOffset<char>(0x0100, false);                     // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbParentDominates                                           = new ExternalOffset<char>(0x0100, false);                     // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableProjection                                          = new ExternalOffset<char>(0x0100, false);                     // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAngularBreakable                                          = new ExternalOffset<char>(0x0100, false);                     // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLinearBreakable                                           = new ExternalOffset<char>(0x0100, false);                     // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               ProjectionLinearTolerance                                      => _offProjectionLinearTolerance.GetValue();
	public float                                               ProjectionAngularTolerance                                     => _offProjectionAngularTolerance.GetValue();
	public float                                               LinearBreakThreshold                                           => _offLinearBreakThreshold.GetValue();
	public float                                               AngularBreakThreshold                                          => _offAngularBreakThreshold.GetValue();
	public FLinearConstraint                                   LinearLimit                                                    => _offLinearLimit.GetValue();
	public FConeConstraint                                     ConeLimit                                                      => _offConeLimit.GetValue();
	public FTwistConstraint                                    TwistLimit                                                     => _offTwistLimit.GetValue();
	public FLinearDriveConstraint                              LinearDrive                                                    => _offLinearDrive.GetValue();
	public FAngularDriveConstraint                             AngularDrive                                                   => _offAngularDrive.GetValue();
	#endregion

	public FConstraintProfileProperties(float c_ProjectionLinearTolerance, float c_ProjectionAngularTolerance, float c_LinearBreakThreshold, float c_AngularBreakThreshold, FLinearConstraint c_LinearLimit, FConeConstraint c_ConeLimit, FTwistConstraint c_TwistLimit, FLinearDriveConstraint c_LinearDrive, FAngularDriveConstraint c_AngularDrive) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offProjectionLinearTolerance.SetValue(c_ProjectionLinearTolerance);
		_offProjectionAngularTolerance.SetValue(c_ProjectionAngularTolerance);
		_offLinearBreakThreshold.SetValue(c_LinearBreakThreshold);
		_offAngularBreakThreshold.SetValue(c_AngularBreakThreshold);
		_offLinearLimit.SetValue(c_LinearLimit);
		_offConeLimit.SetValue(c_ConeLimit);
		_offTwistLimit.SetValue(c_TwistLimit);
		_offLinearDrive.SetValue(c_LinearDrive);
		_offAngularDrive.SetValue(c_AngularDrive);
	}
}
// ScriptStruct Engine.ConstraintInstance
// 0x01B8
public class FConstraintInstance : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offJointName                                                  = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offConstraintBone1                                            = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offConstraintBone2                                            = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offPos1                                                       = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offPriAxis1                                                   = new ExternalOffset<FVector>(0x003C, false);                  // 0x003C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offSecAxis1                                                   = new ExternalOffset<FVector>(0x0048, false);                  // 0x0048(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offPos2                                                       = new ExternalOffset<FVector>(0x0054, false);                  // 0x0054(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offPriAxis2                                                   = new ExternalOffset<FVector>(0x0060, false);                  // 0x0060(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offSecAxis2                                                   = new ExternalOffset<FVector>(0x006C, false);                  // 0x006C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offAngularRotationOffset                                      = new ExternalOffset<FRotator>(0x0078, false);                 // 0x0078(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbScaleLinearLimits                                         = new ExternalOffset<char>(0x0084, false);                     // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstraintProfileProperties>       _offProfileInstance                                            = new ExternalOffset<FConstraintProfileProperties>(0x008C, false); // 0x008C(0x0104) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               JointName                                                      => _offJointName.GetValue();
	public FName                                               ConstraintBone1                                                => _offConstraintBone1.GetValue();
	public FName                                               ConstraintBone2                                                => _offConstraintBone2.GetValue();
	public FVector                                             Pos1                                                           => _offPos1.GetValue();
	public FVector                                             PriAxis1                                                       => _offPriAxis1.GetValue();
	public FVector                                             SecAxis1                                                       => _offSecAxis1.GetValue();
	public FVector                                             Pos2                                                           => _offPos2.GetValue();
	public FVector                                             PriAxis2                                                       => _offPriAxis2.GetValue();
	public FVector                                             SecAxis2                                                       => _offSecAxis2.GetValue();
	public FRotator                                            AngularRotationOffset                                          => _offAngularRotationOffset.GetValue();
	public FConstraintProfileProperties                        ProfileInstance                                                => _offProfileInstance.GetValue();
	#endregion

	public FConstraintInstance(FName c_JointName, FName c_ConstraintBone1, FName c_ConstraintBone2, FVector c_Pos1, FVector c_PriAxis1, FVector c_SecAxis1, FVector c_Pos2, FVector c_PriAxis2, FVector c_SecAxis2, FRotator c_AngularRotationOffset, FConstraintProfileProperties c_ProfileInstance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offJointName.SetValue(c_JointName);
		_offConstraintBone1.SetValue(c_ConstraintBone1);
		_offConstraintBone2.SetValue(c_ConstraintBone2);
		_offPos1.SetValue(c_Pos1);
		_offPriAxis1.SetValue(c_PriAxis1);
		_offSecAxis1.SetValue(c_SecAxis1);
		_offPos2.SetValue(c_Pos2);
		_offPriAxis2.SetValue(c_PriAxis2);
		_offSecAxis2.SetValue(c_SecAxis2);
		_offAngularRotationOffset.SetValue(c_AngularRotationOffset);
		_offProfileInstance.SetValue(c_ProfileInstance);
	}
}
// ScriptStruct Engine.CullDistanceSizePair
// 0x0008
public class FCullDistanceSizePair : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offSize                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCullDistance                                               = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Size                                                           => _offSize.GetValue();
	public float                                               CullDistance                                                   => _offCullDistance.GetValue();
	#endregion

	public FCullDistanceSizePair(float c_Size, float c_CullDistance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSize.SetValue(c_Size);
		_offCullDistance.SetValue(c_CullDistance);
	}
}
// ScriptStruct Engine.RuntimeCurveLinearColor
// 0x0208
public class FRuntimeCurveLinearColor : ExternalClass
{
	#region Offsets
//	private ExternalOffset<FRichCurve>                         _offColorCurves[0x4]                                           = new ExternalOffset<FRichCurve>(0x0000, false);               // 0x0000(0x0080) (NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveLinearColor>                  _offExternalCurve                                              = new ExternalOffset<UCurveLinearColor>(0x0200, true);         // 0x0200(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCurveLinearColor                                   ExternalCurve                                                  => _offExternalCurve.GetValue();
	#endregion

	public FRuntimeCurveLinearColor(UCurveLinearColor c_ExternalCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offExternalCurve.SetValue(c_ExternalCurve);
	}
}
// ScriptStruct Engine.NamedCurveValue
// 0x000C
public class FNamedCurveValue : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offValue                                                      = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public float                                               Value                                                          => _offValue.GetValue();
	#endregion

	public FNamedCurveValue(FName c_Name, float c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct Engine.DataTableCategoryHandle
// 0x0018
public class FDataTableCategoryHandle : ExternalClass
{
	#region Offsets
	private ExternalOffset<UDataTable>                         _offDataTable                                                  = new ExternalOffset<UDataTable>(0x0000, true);                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offColumnName                                                 = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offRowContents                                                = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UDataTable                                          DataTable                                                      => _offDataTable.GetValue();
	public FName                                               ColumnName                                                     => _offColumnName.GetValue();
	public FName                                               RowContents                                                    => _offRowContents.GetValue();
	#endregion

	public FDataTableCategoryHandle(UDataTable c_DataTable, FName c_ColumnName, FName c_RowContents) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataTable.SetValue(c_DataTable);
		_offColumnName.SetValue(c_ColumnName);
		_offRowContents.SetValue(c_RowContents);
	}
}
// ScriptStruct Engine.DataTableRowHandle
// 0x0010
public class FDataTableRowHandle : ExternalClass
{
	#region Offsets
	private ExternalOffset<UDataTable>                         _offDataTable                                                  = new ExternalOffset<UDataTable>(0x0000, true);                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offRowName                                                    = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UDataTable                                          DataTable                                                      => _offDataTable.GetValue();
	public FName                                               RowName                                                        => _offRowName.GetValue();
	#endregion

	public FDataTableRowHandle(UDataTable c_DataTable, FName c_RowName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataTable.SetValue(c_DataTable);
		_offRowName.SetValue(c_RowName);
	}
}
// ScriptStruct Engine.DebugCameraControllerSettingsViewModeIndex
// 0x0010
public class FDebugCameraControllerSettingsViewModeIndex : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EViewModeIndex>>        _offViewModeIndex                                              = new ExternalOffset<TEnumAsByte<EViewModeIndex>>(0x0008, false); // 0x0008(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EViewModeIndex>                         ViewModeIndex                                                  => _offViewModeIndex.GetValue();
	#endregion

	public FDebugCameraControllerSettingsViewModeIndex(TEnumAsByte<EViewModeIndex> c_ViewModeIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offViewModeIndex.SetValue(c_ViewModeIndex);
	}
}
// ScriptStruct Engine.DebugDisplayProperty
// 0x0020
public class FDebugDisplayProperty : ExternalClass
{
	#region Offsets
	private ExternalOffset<UObject>                            _offObj                                                        = new ExternalOffset<UObject>(0x0000, true);                   // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                             _offWithinClass                                                = new ExternalOffset<UClass>(0x0008, true);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UObject                                             Obj                                                            => _offObj.GetValue();
	public UClass                                              WithinClass                                                    => _offWithinClass.GetValue();
	#endregion

	public FDebugDisplayProperty(UObject c_Obj, UClass c_WithinClass) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offObj.SetValue(c_Obj);
		_offWithinClass.SetValue(c_WithinClass);
	}
}
// ScriptStruct Engine.MulticastRecordOptions
// 0x0018
public class FMulticastRecordOptions : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offFuncPathName                                               = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbServerSkip                                                = new ExternalOffset<byte/*(bool)*/>(0x0010);                  // 0x0010(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbClientSkip                                                = new ExternalOffset<byte/*(bool)*/>(0x0011);                  // 0x0011(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FuncPathName                                                   => _offFuncPathName.GetValue();
	public byte/*(bool)*/                                      bServerSkip                                                    => _offbServerSkip.GetValue();
	public byte/*(bool)*/                                      bClientSkip                                                    => _offbClientSkip.GetValue();
	#endregion

	public FMulticastRecordOptions(FString c_FuncPathName, byte/*(bool)*/ c_bServerSkip, byte/*(bool)*/ c_bClientSkip) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFuncPathName.SetValue(c_FuncPathName);
		_offbServerSkip.SetValue(c_bServerSkip);
		_offbClientSkip.SetValue(c_bClientSkip);
	}
}
// ScriptStruct Engine.RollbackNetStartupActorInfo
// 0x00A0
public class FRollbackNetStartupActorInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<UObject>                            _offArchetype                                                  = new ExternalOffset<UObject>(0x0008, true);                   // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ULevel>                             _offLevel                                                      = new ExternalOffset<ULevel>(0x0028, true);                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObject>>                    _offObjReferences                                              = new ExternalOffset<TArray<UObject>>(0x0090, false);          // 0x0090(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UObject                                             Archetype                                                      => _offArchetype.GetValue();
	public ULevel                                              Level                                                          => _offLevel.GetValue();
	public TArray<UObject>                                     ObjReferences                                                  => _offObjReferences.GetValue();
	#endregion

	public FRollbackNetStartupActorInfo(UObject c_Archetype, ULevel c_Level, TArray<UObject> c_ObjReferences) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offArchetype.SetValue(c_Archetype);
		_offLevel.SetValue(c_Level);
		_offObjReferences.SetValue(c_ObjReferences);
	}
}
// ScriptStruct Engine.LevelNameAndTime
// 0x0018
public class FLevelNameAndTime : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offLevelName                                                  = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                               _offLevelChangeTimeInMS                                        = new ExternalOffset<uint>(0x0010);                            // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LevelName                                                      => _offLevelName.GetValue();
	public uint                                                LevelChangeTimeInMS                                            => _offLevelChangeTimeInMS.GetValue();
	#endregion

	public FLevelNameAndTime(FString c_LevelName, uint c_LevelChangeTimeInMS) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLevelName.SetValue(c_LevelName);
		_offLevelChangeTimeInMS.SetValue(c_LevelChangeTimeInMS);
	}
}
// ScriptStruct Engine.DialogueContext
// 0x0018
public class FDialogueContext : ExternalClass
{
	#region Offsets
	private ExternalOffset<UDialogueVoice>                     _offSpeaker                                                    = new ExternalOffset<UDialogueVoice>(0x0000, true);            // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UDialogueVoice>>             _offTargets                                                    = new ExternalOffset<TArray<UDialogueVoice>>(0x0008, false);   // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UDialogueVoice                                      Speaker                                                        => _offSpeaker.GetValue();
	public TArray<UDialogueVoice>                              Targets                                                        => _offTargets.GetValue();
	#endregion

	public FDialogueContext(UDialogueVoice c_Speaker, TArray<UDialogueVoice> c_Targets) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSpeaker.SetValue(c_Speaker);
		_offTargets.SetValue(c_Targets);
	}
}
// ScriptStruct Engine.DialogueWaveParameter
// 0x0020
public class FDialogueWaveParameter : ExternalClass
{
	#region Offsets
	private ExternalOffset<UDialogueWave>                      _offDialogueWave                                               = new ExternalOffset<UDialogueWave>(0x0000, true);             // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FDialogueContext>                   _offContext                                                    = new ExternalOffset<FDialogueContext>(0x0008, false);         // 0x0008(0x0018) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UDialogueWave                                       DialogueWave                                                   => _offDialogueWave.GetValue();
	public FDialogueContext                                    Context                                                        => _offContext.GetValue();
	#endregion

	public FDialogueWaveParameter(UDialogueWave c_DialogueWave, FDialogueContext c_Context) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDialogueWave.SetValue(c_DialogueWave);
		_offContext.SetValue(c_Context);
	}
}
// ScriptStruct Engine.DialogueContextMapping
// 0x0038
public class FDialogueContextMapping : ExternalClass
{
	#region Offsets
	private ExternalOffset<FDialogueContext>                   _offContext                                                    = new ExternalOffset<FDialogueContext>(0x0000, false);         // 0x0000(0x0018) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundWave>                         _offSoundWave                                                  = new ExternalOffset<USoundWave>(0x0018, true);                // 0x0018(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLocalizationKeyFormat                                      = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UDialogueSoundWaveProxy>            _offProxy                                                      = new ExternalOffset<UDialogueSoundWaveProxy>(0x0030, true);   // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FDialogueContext                                    Context                                                        => _offContext.GetValue();
	public USoundWave                                          SoundWave                                                      => _offSoundWave.GetValue();
	public FString                                             LocalizationKeyFormat                                          => _offLocalizationKeyFormat.GetValue();
	public UDialogueSoundWaveProxy                             Proxy                                                          => _offProxy.GetValue();
	#endregion

	public FDialogueContextMapping(FDialogueContext c_Context, USoundWave c_SoundWave, FString c_LocalizationKeyFormat, UDialogueSoundWaveProxy c_Proxy) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContext.SetValue(c_Context);
		_offSoundWave.SetValue(c_SoundWave);
		_offLocalizationKeyFormat.SetValue(c_LocalizationKeyFormat);
		_offProxy.SetValue(c_Proxy);
	}
}
// ScriptStruct Engine.DistributionLookupTable
// 0x0028
public class FDistributionLookupTable : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offOp                                                         = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offEntryCount                                                 = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offEntryStride                                                = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offSubEntryStride                                             = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTimeScale                                                  = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTimeBias                                                   = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offValues                                                     = new ExternalOffset<TArray<float>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offLockFlag                                                   = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               TimeScale                                                      => _offTimeScale.GetValue();
	public float                                               TimeBias                                                       => _offTimeBias.GetValue();
	public TArray<float>                                       Values                                                         => _offValues.GetValue();
	#endregion

	public FDistributionLookupTable(float c_TimeScale, float c_TimeBias, TArray<float> c_Values) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTimeScale.SetValue(c_TimeScale);
		_offTimeBias.SetValue(c_TimeBias);
		_offValues.SetValue(c_Values);
	}
}
// ScriptStruct Engine.RawDistribution
// 0x0028
public class FRawDistribution : ExternalClass
{
	#region Offsets
	private ExternalOffset<FDistributionLookupTable>           _offtable                                                      = new ExternalOffset<FDistributionLookupTable>(0x0000, false); // 0x0000(0x0028) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FDistributionLookupTable                            table                                                          => _offtable.GetValue();
	#endregion

	public FRawDistribution(FDistributionLookupTable c_table) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offtable.SetValue(c_table);
	}
}
// ScriptStruct Engine.RawDistributionFloat
// 0x0010 (0x0038 - 0x0028)
public class FRawDistributionFloat : FRawDistribution
{
	#region Offsets
	private ExternalOffset<float>                              _offMinValue                                                   = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offMaxValue                                                   = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UDistributionFloat>                 _offDistribution                                               = new ExternalOffset<UDistributionFloat>(0x0030, true);        // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               MinValue                                                       => _offMinValue.GetValue();
	public float                                               MaxValue                                                       => _offMaxValue.GetValue();
	public UDistributionFloat                                  Distribution                                                   => _offDistribution.GetValue();
	#endregion

	public FRawDistributionFloat(float c_MinValue, float c_MaxValue, UDistributionFloat c_Distribution) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMinValue.SetValue(c_MinValue);
		_offMaxValue.SetValue(c_MaxValue);
		_offDistribution.SetValue(c_Distribution);
	}
}
// ScriptStruct Engine.RawDistributionVector
// 0x0028 (0x0050 - 0x0028)
public class FRawDistributionVector : FRawDistribution
{
	#region Offsets
	private ExternalOffset<float>                              _offMinValue                                                   = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offMaxValue                                                   = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FVector>                            _offMinValueVec                                                = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FVector>                            _offMaxValueVec                                                = new ExternalOffset<FVector>(0x003C, false);                  // 0x003C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UDistributionVector>                _offDistribution                                               = new ExternalOffset<UDistributionVector>(0x0048, true);       // 0x0048(0x0008) (Edit, ExportObject, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               MinValue                                                       => _offMinValue.GetValue();
	public float                                               MaxValue                                                       => _offMaxValue.GetValue();
	public FVector                                             MinValueVec                                                    => _offMinValueVec.GetValue();
	public FVector                                             MaxValueVec                                                    => _offMaxValueVec.GetValue();
	public UDistributionVector                                 Distribution                                                   => _offDistribution.GetValue();
	#endregion

	public FRawDistributionVector(float c_MinValue, float c_MaxValue, FVector c_MinValueVec, FVector c_MaxValueVec, UDistributionVector c_Distribution) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMinValue.SetValue(c_MinValue);
		_offMaxValue.SetValue(c_MaxValue);
		_offMinValueVec.SetValue(c_MinValueVec);
		_offMaxValueVec.SetValue(c_MaxValueVec);
		_offDistribution.SetValue(c_Distribution);
	}
}
// ScriptStruct Engine.GraphReference
// 0x0020
public class FGraphReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<UEdGraph>                           _offMacroGraph                                                 = new ExternalOffset<UEdGraph>(0x0000, true);                  // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<UBlueprint>                         _offGraphBlueprint                                             = new ExternalOffset<UBlueprint>(0x0008, true);                // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FGuid>                              _offGraphGuid                                                  = new ExternalOffset<FGuid>(0x0010, false);                    // 0x0010(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UEdGraph                                            MacroGraph                                                     => _offMacroGraph.GetValue();
	public UBlueprint                                          GraphBlueprint                                                 => _offGraphBlueprint.GetValue();
	public FGuid                                               GraphGuid                                                      => _offGraphGuid.GetValue();
	#endregion

	public FGraphReference(UEdGraph c_MacroGraph, UBlueprint c_GraphBlueprint, FGuid c_GraphGuid) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMacroGraph.SetValue(c_MacroGraph);
		_offGraphBlueprint.SetValue(c_GraphBlueprint);
		_offGraphGuid.SetValue(c_GraphGuid);
	}
}
// ScriptStruct Engine.EdGraphPinReference
// 0x0018
public class FEdGraphPinReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<TWeakObjectPtr<UEdGraphNode>>       _offOwningNode                                                 = new ExternalOffset<TWeakObjectPtr<UEdGraphNode>>(0x0000, false); // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FGuid>                              _offPinId                                                      = new ExternalOffset<FGuid>(0x0008, false);                    // 0x0008(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TWeakObjectPtr<UEdGraphNode>                        OwningNode                                                     => _offOwningNode.GetValue();
	public FGuid                                               PinId                                                          => _offPinId.GetValue();
	#endregion

	public FEdGraphPinReference(TWeakObjectPtr<UEdGraphNode> c_OwningNode, FGuid c_PinId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOwningNode.SetValue(c_OwningNode);
		_offPinId.SetValue(c_PinId);
	}
}
// ScriptStruct Engine.EdGraphSchemaAction
// 0x0100
public class FEdGraphSchemaAction : ExternalClass
{
	#region Offsets
	private ExternalOffset<FText>                              _offMenuDescription                                            = new ExternalOffset<FText>(0x0008, false);                    // 0x0008(0x0018) (NativeAccessSpecifierPrivate)
	private ExternalOffset<FText>                              _offTooltipDescription                                         = new ExternalOffset<FText>(0x0020, false);                    // 0x0020(0x0018) (NativeAccessSpecifierPrivate)
	private ExternalOffset<FText>                              _offCategory                                                   = new ExternalOffset<FText>(0x0038, false);                    // 0x0038(0x0018) (NativeAccessSpecifierPrivate)
	private ExternalOffset<FText>                              _offKeywords                                                   = new ExternalOffset<FText>(0x0050, false);                    // 0x0050(0x0018) (NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                                _offGrouping                                                   = new ExternalOffset<int>(0x0068);                             // 0x0068(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSectionID                                                  = new ExternalOffset<int>(0x006C);                             // 0x006C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offMenuDescriptionArray                                       = new ExternalOffset<TArray<FString>>(0x0070, false);          // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offFullSearchTitlesArray                                      = new ExternalOffset<TArray<FString>>(0x0080, false);          // 0x0080(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offFullSearchKeywordsArray                                    = new ExternalOffset<TArray<FString>>(0x0090, false);          // 0x0090(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offFullSearchCategoryArray                                    = new ExternalOffset<TArray<FString>>(0x00A0, false);          // 0x00A0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offLocalizedMenuDescriptionArray                              = new ExternalOffset<TArray<FString>>(0x00B0, false);          // 0x00B0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offLocalizedFullSearchTitlesArray                             = new ExternalOffset<TArray<FString>>(0x00C0, false);          // 0x00C0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offLocalizedFullSearchKeywordsArray                           = new ExternalOffset<TArray<FString>>(0x00D0, false);          // 0x00D0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offLocalizedFullSearchCategoryArray                           = new ExternalOffset<TArray<FString>>(0x00E0, false);          // 0x00E0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSearchText                                                 = new ExternalOffset<FString>(0x00F0, false);                  // 0x00F0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FText                                               MenuDescription                                                => _offMenuDescription.GetValue();
	public FText                                               TooltipDescription                                             => _offTooltipDescription.GetValue();
	public FText                                               Category                                                       => _offCategory.GetValue();
	public FText                                               Keywords                                                       => _offKeywords.GetValue();
	public int                                                 Grouping                                                       => _offGrouping.GetValue();
	public int                                                 SectionID                                                      => _offSectionID.GetValue();
	public TArray<FString>                                     MenuDescriptionArray                                           => _offMenuDescriptionArray.GetValue();
	public TArray<FString>                                     FullSearchTitlesArray                                          => _offFullSearchTitlesArray.GetValue();
	public TArray<FString>                                     FullSearchKeywordsArray                                        => _offFullSearchKeywordsArray.GetValue();
	public TArray<FString>                                     FullSearchCategoryArray                                        => _offFullSearchCategoryArray.GetValue();
	public TArray<FString>                                     LocalizedMenuDescriptionArray                                  => _offLocalizedMenuDescriptionArray.GetValue();
	public TArray<FString>                                     LocalizedFullSearchTitlesArray                                 => _offLocalizedFullSearchTitlesArray.GetValue();
	public TArray<FString>                                     LocalizedFullSearchKeywordsArray                               => _offLocalizedFullSearchKeywordsArray.GetValue();
	public TArray<FString>                                     LocalizedFullSearchCategoryArray                               => _offLocalizedFullSearchCategoryArray.GetValue();
	public FString                                             SearchText                                                     => _offSearchText.GetValue();
	#endregion

	public FEdGraphSchemaAction(FText c_MenuDescription, FText c_TooltipDescription, FText c_Category, FText c_Keywords, int c_Grouping, int c_SectionID, TArray<FString> c_MenuDescriptionArray, TArray<FString> c_FullSearchTitlesArray, TArray<FString> c_FullSearchKeywordsArray, TArray<FString> c_FullSearchCategoryArray, TArray<FString> c_LocalizedMenuDescriptionArray, TArray<FString> c_LocalizedFullSearchTitlesArray, TArray<FString> c_LocalizedFullSearchKeywordsArray, TArray<FString> c_LocalizedFullSearchCategoryArray, FString c_SearchText) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMenuDescription.SetValue(c_MenuDescription);
		_offTooltipDescription.SetValue(c_TooltipDescription);
		_offCategory.SetValue(c_Category);
		_offKeywords.SetValue(c_Keywords);
		_offGrouping.SetValue(c_Grouping);
		_offSectionID.SetValue(c_SectionID);
		_offMenuDescriptionArray.SetValue(c_MenuDescriptionArray);
		_offFullSearchTitlesArray.SetValue(c_FullSearchTitlesArray);
		_offFullSearchKeywordsArray.SetValue(c_FullSearchKeywordsArray);
		_offFullSearchCategoryArray.SetValue(c_FullSearchCategoryArray);
		_offLocalizedMenuDescriptionArray.SetValue(c_LocalizedMenuDescriptionArray);
		_offLocalizedFullSearchTitlesArray.SetValue(c_LocalizedFullSearchTitlesArray);
		_offLocalizedFullSearchKeywordsArray.SetValue(c_LocalizedFullSearchKeywordsArray);
		_offLocalizedFullSearchCategoryArray.SetValue(c_LocalizedFullSearchCategoryArray);
		_offSearchText.SetValue(c_SearchText);
	}
}
// ScriptStruct Engine.EdGraphSchemaAction_NewNode
// 0x0008 (0x0108 - 0x0100)
public class FEdGraphSchemaAction_NewNode : FEdGraphSchemaAction
{
	#region Offsets
	private ExternalOffset<UEdGraphNode>                       _offNodeTemplate                                               = new ExternalOffset<UEdGraphNode>(0x0100, true);              // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UEdGraphNode                                        NodeTemplate                                                   => _offNodeTemplate.GetValue();
	#endregion

	public FEdGraphSchemaAction_NewNode(UEdGraphNode c_NodeTemplate) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNodeTemplate.SetValue(c_NodeTemplate);
	}
}
// ScriptStruct Engine.PluginRedirect
// 0x0020
public class FPluginRedirect : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offOldPluginName                                              = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNewPluginName                                              = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OldPluginName                                                  => _offOldPluginName.GetValue();
	public FString                                             NewPluginName                                                  => _offNewPluginName.GetValue();
	#endregion

	public FPluginRedirect(FString c_OldPluginName, FString c_NewPluginName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOldPluginName.SetValue(c_OldPluginName);
		_offNewPluginName.SetValue(c_NewPluginName);
	}
}
// ScriptStruct Engine.StructRedirect
// 0x0010
public class FStructRedirect : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offOldStructName                                              = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNewStructName                                              = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               OldStructName                                                  => _offOldStructName.GetValue();
	public FName                                               NewStructName                                                  => _offNewStructName.GetValue();
	#endregion

	public FStructRedirect(FName c_OldStructName, FName c_NewStructName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOldStructName.SetValue(c_OldStructName);
		_offNewStructName.SetValue(c_NewStructName);
	}
}
// ScriptStruct Engine.ClassRedirect
// 0x003C
public class FClassRedirect : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offObjectName                                                 = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offOldClassName                                               = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNewClassName                                               = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offOldSubobjName                                              = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNewSubobjName                                              = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNewClassClass                                              = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNewClassPackage                                            = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offInstanceOnly                                               = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ObjectName                                                     => _offObjectName.GetValue();
	public FName                                               OldClassName                                                   => _offOldClassName.GetValue();
	public FName                                               NewClassName                                                   => _offNewClassName.GetValue();
	public FName                                               OldSubobjName                                                  => _offOldSubobjName.GetValue();
	public FName                                               NewSubobjName                                                  => _offNewSubobjName.GetValue();
	public FName                                               NewClassClass                                                  => _offNewClassClass.GetValue();
	public FName                                               NewClassPackage                                                => _offNewClassPackage.GetValue();
	public byte/*(bool)*/                                      InstanceOnly                                                   => _offInstanceOnly.GetValue();
	#endregion

	public FClassRedirect(FName c_ObjectName, FName c_OldClassName, FName c_NewClassName, FName c_OldSubobjName, FName c_NewSubobjName, FName c_NewClassClass, FName c_NewClassPackage, byte/*(bool)*/ c_InstanceOnly) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offObjectName.SetValue(c_ObjectName);
		_offOldClassName.SetValue(c_OldClassName);
		_offNewClassName.SetValue(c_NewClassName);
		_offOldSubobjName.SetValue(c_OldSubobjName);
		_offNewSubobjName.SetValue(c_NewSubobjName);
		_offNewClassClass.SetValue(c_NewClassClass);
		_offNewClassPackage.SetValue(c_NewClassPackage);
		_offInstanceOnly.SetValue(c_InstanceOnly);
	}
}
// ScriptStruct Engine.GameNameRedirect
// 0x0010
public class FGameNameRedirect : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offOldGameName                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNewGameName                                                = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               OldGameName                                                    => _offOldGameName.GetValue();
	public FName                                               NewGameName                                                    => _offNewGameName.GetValue();
	#endregion

	public FGameNameRedirect(FName c_OldGameName, FName c_NewGameName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOldGameName.SetValue(c_OldGameName);
		_offNewGameName.SetValue(c_NewGameName);
	}
}
// ScriptStruct Engine.ScreenMessageString
// 0x0030
public class FScreenMessageString : ExternalClass
{
	#region Offsets
	private ExternalOffset<ulong>                              _offKey                                                        = new ExternalOffset<ulong>(0x0000);                           // 0x0000(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offScreenMessage                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offDisplayColor                                               = new ExternalOffset<FColor>(0x0018, false);                   // 0x0018(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTimeToDisplay                                              = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCurrentTimeDisplayed                                       = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offTextScale                                                  = new ExternalOffset<FVector2D>(0x0024, false);                // 0x0024(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ulong                                               Key                                                            => _offKey.GetValue();
	public FString                                             ScreenMessage                                                  => _offScreenMessage.GetValue();
	public FColor                                              DisplayColor                                                   => _offDisplayColor.GetValue();
	public float                                               TimeToDisplay                                                  => _offTimeToDisplay.GetValue();
	public float                                               CurrentTimeDisplayed                                           => _offCurrentTimeDisplayed.GetValue();
	public FVector2D                                           TextScale                                                      => _offTextScale.GetValue();
	#endregion

	public FScreenMessageString(ulong c_Key, FString c_ScreenMessage, FColor c_DisplayColor, float c_TimeToDisplay, float c_CurrentTimeDisplayed, FVector2D c_TextScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKey.SetValue(c_Key);
		_offScreenMessage.SetValue(c_ScreenMessage);
		_offDisplayColor.SetValue(c_DisplayColor);
		_offTimeToDisplay.SetValue(c_TimeToDisplay);
		_offCurrentTimeDisplayed.SetValue(c_CurrentTimeDisplayed);
		_offTextScale.SetValue(c_TextScale);
	}
}
// ScriptStruct Engine.DropNoteInfo
// 0x0028
public class FDropNoteInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offLocation                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x000C, false);                 // 0x000C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offComment                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Location                                                       => _offLocation.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public FString                                             Comment                                                        => _offComment.GetValue();
	#endregion

	public FDropNoteInfo(FVector c_Location, FRotator c_Rotation, FString c_Comment) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocation.SetValue(c_Location);
		_offRotation.SetValue(c_Rotation);
		_offComment.SetValue(c_Comment);
	}
}
// ScriptStruct Engine.StatColorMapEntry
// 0x0008
public class FStatColorMapEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offIn                                                         = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offOut                                                        = new ExternalOffset<FColor>(0x0004, false);                   // 0x0004(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               In                                                             => _offIn.GetValue();
	public FColor                                              Out                                                            => _offOut.GetValue();
	#endregion

	public FStatColorMapEntry(float c_In, FColor c_Out) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIn.SetValue(c_In);
		_offOut.SetValue(c_Out);
	}
}
// ScriptStruct Engine.StatColorMapping
// 0x0028
public class FStatColorMapping : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offStatName                                                   = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStatColorMapEntry>>         _offColormap                                                   = new ExternalOffset<TArray<FStatColorMapEntry>>(0x0010, false); // 0x0010(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offDisableBlend                                               = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             StatName                                                       => _offStatName.GetValue();
	public TArray<FStatColorMapEntry>                          Colormap                                                       => _offColormap.GetValue();
	#endregion

	public FStatColorMapping(FString c_StatName, TArray<FStatColorMapEntry> c_Colormap) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatName.SetValue(c_StatName);
		_offColormap.SetValue(c_Colormap);
	}
}
// ScriptStruct Engine.URL
// 0x0068
public class FURL : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offProtocol                                                   = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offHost                                                       = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPort                                                       = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offValid                                                      = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMap                                                        = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRedirectURL                                                = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                    _offOp                                                         = new ExternalOffset<TArray<FString>>(0x0048, false);          // 0x0048(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPortal                                                     = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Protocol                                                       => _offProtocol.GetValue();
	public FString                                             Host                                                           => _offHost.GetValue();
	public int                                                 Port                                                           => _offPort.GetValue();
	public int                                                 Valid                                                          => _offValid.GetValue();
	public FString                                             Map                                                            => _offMap.GetValue();
	public FString                                             RedirectURL                                                    => _offRedirectURL.GetValue();
	public TArray<FString>                                     Op                                                             => _offOp.GetValue();
	public FString                                             Portal                                                         => _offPortal.GetValue();
	#endregion

	public FURL(FString c_Protocol, FString c_Host, int c_Port, int c_Valid, FString c_Map, FString c_RedirectURL, TArray<FString> c_Op, FString c_Portal) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offProtocol.SetValue(c_Protocol);
		_offHost.SetValue(c_Host);
		_offPort.SetValue(c_Port);
		_offValid.SetValue(c_Valid);
		_offMap.SetValue(c_Map);
		_offRedirectURL.SetValue(c_RedirectURL);
		_offOp.SetValue(c_Op);
		_offPortal.SetValue(c_Portal);
	}
}
// ScriptStruct Engine.FullyLoadedPackagesInfo
// 0x0038
public class FFullyLoadedPackagesInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EFullyLoadPackageType>> _offFullyLoadType                                              = new ExternalOffset<TEnumAsByte<EFullyLoadPackageType>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTag                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offPackagesToLoad                                             = new ExternalOffset<TArray<FName>>(0x0018, false);            // 0x0018(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObject>>                    _offLoadedObjects                                              = new ExternalOffset<TArray<UObject>>(0x0028, false);          // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EFullyLoadPackageType>                  FullyLoadType                                                  => _offFullyLoadType.GetValue();
	public FString                                             Tag                                                            => _offTag.GetValue();
	public TArray<FName>                                       PackagesToLoad                                                 => _offPackagesToLoad.GetValue();
	public TArray<UObject>                                     LoadedObjects                                                  => _offLoadedObjects.GetValue();
	#endregion

	public FFullyLoadedPackagesInfo(TEnumAsByte<EFullyLoadPackageType> c_FullyLoadType, FString c_Tag, TArray<FName> c_PackagesToLoad, TArray<UObject> c_LoadedObjects) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFullyLoadType.SetValue(c_FullyLoadType);
		_offTag.SetValue(c_Tag);
		_offPackagesToLoad.SetValue(c_PackagesToLoad);
		_offLoadedObjects.SetValue(c_LoadedObjects);
	}
}
// ScriptStruct Engine.LevelStreamingStatus
// 0x0010
public class FLevelStreamingStatus : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offPackageName                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbShouldBeLoaded                                            = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbShouldBeVisible                                           = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                               _offLODIndex                                                   = new ExternalOffset<uint>(0x000C);                            // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               PackageName                                                    => _offPackageName.GetValue();
	public uint                                                LODIndex                                                       => _offLODIndex.GetValue();
	#endregion

	public FLevelStreamingStatus(FName c_PackageName, uint c_LODIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPackageName.SetValue(c_PackageName);
		_offLODIndex.SetValue(c_LODIndex);
	}
}
// ScriptStruct Engine.NamedNetDriver
// 0x0010
public class FNamedNetDriver : ExternalClass
{
	#region Offsets
	private ExternalOffset<UNetDriver>                         _offNetDriver                                                  = new ExternalOffset<UNetDriver>(0x0000, true);                // 0x0000(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UNetDriver                                          NetDriver                                                      => _offNetDriver.GetValue();
	#endregion

	public FNamedNetDriver(UNetDriver c_NetDriver) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNetDriver.SetValue(c_NetDriver);
	}
}
// ScriptStruct Engine.WorldContext
// 0x0280
public class FWorldContext : ExternalClass
{
	#region Offsets
	private ExternalOffset<FURL>                               _offLastURL                                                    = new ExternalOffset<FURL>(0x00D0, false);                     // 0x00D0(0x0068) (NativeAccessSpecifierPublic)
	private ExternalOffset<FURL>                               _offLastRemoteURL                                              = new ExternalOffset<FURL>(0x0138, false);                     // 0x0138(0x0068) (NativeAccessSpecifierPublic)
	private ExternalOffset<UPendingNetGame>                    _offPendingNetGame                                             = new ExternalOffset<UPendingNetGame>(0x01A0, true);           // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FFullyLoadedPackagesInfo>>   _offPackagesToFullyLoad                                        = new ExternalOffset<TArray<FFullyLoadedPackagesInfo>>(0x01A8, false); // 0x01A8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<ULevel>>                     _offLoadedLevelsForPendingMapChange                            = new ExternalOffset<TArray<ULevel>>(0x01C8, false);           // 0x01C8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObjectReferencer>>          _offObjectReferencers                                          = new ExternalOffset<TArray<UObjectReferencer>>(0x01F0, false); // 0x01F0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLevelStreamingStatus>>      _offPendingLevelStreamingStatusUpdates                         = new ExternalOffset<TArray<FLevelStreamingStatus>>(0x0200, false); // 0x0200(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UGameViewportClient>                _offGameViewport                                               = new ExternalOffset<UGameViewportClient>(0x0210, true);       // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UGameInstance>                      _offOwningGameInstance                                         = new ExternalOffset<UGameInstance>(0x0218, true);             // 0x0218(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FNamedNetDriver>>            _offActiveNetDrivers                                           = new ExternalOffset<TArray<FNamedNetDriver>>(0x0220, false);  // 0x0220(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FURL                                                LastURL                                                        => _offLastURL.GetValue();
	public FURL                                                LastRemoteURL                                                  => _offLastRemoteURL.GetValue();
	public UPendingNetGame                                     PendingNetGame                                                 => _offPendingNetGame.GetValue();
	public TArray<FFullyLoadedPackagesInfo>                    PackagesToFullyLoad                                            => _offPackagesToFullyLoad.GetValue();
	public TArray<ULevel>                                      LoadedLevelsForPendingMapChange                                => _offLoadedLevelsForPendingMapChange.GetValue();
	public TArray<UObjectReferencer>                           ObjectReferencers                                              => _offObjectReferencers.GetValue();
	public TArray<FLevelStreamingStatus>                       PendingLevelStreamingStatusUpdates                             => _offPendingLevelStreamingStatusUpdates.GetValue();
	public UGameViewportClient                                 GameViewport                                                   => _offGameViewport.GetValue();
	public UGameInstance                                       OwningGameInstance                                             => _offOwningGameInstance.GetValue();
	public TArray<FNamedNetDriver>                             ActiveNetDrivers                                               => _offActiveNetDrivers.GetValue();
	#endregion

	public FWorldContext(FURL c_LastURL, FURL c_LastRemoteURL, UPendingNetGame c_PendingNetGame, TArray<FFullyLoadedPackagesInfo> c_PackagesToFullyLoad, TArray<ULevel> c_LoadedLevelsForPendingMapChange, TArray<UObjectReferencer> c_ObjectReferencers, TArray<FLevelStreamingStatus> c_PendingLevelStreamingStatusUpdates, UGameViewportClient c_GameViewport, UGameInstance c_OwningGameInstance, TArray<FNamedNetDriver> c_ActiveNetDrivers) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLastURL.SetValue(c_LastURL);
		_offLastRemoteURL.SetValue(c_LastRemoteURL);
		_offPendingNetGame.SetValue(c_PendingNetGame);
		_offPackagesToFullyLoad.SetValue(c_PackagesToFullyLoad);
		_offLoadedLevelsForPendingMapChange.SetValue(c_LoadedLevelsForPendingMapChange);
		_offObjectReferencers.SetValue(c_ObjectReferencers);
		_offPendingLevelStreamingStatusUpdates.SetValue(c_PendingLevelStreamingStatusUpdates);
		_offGameViewport.SetValue(c_GameViewport);
		_offOwningGameInstance.SetValue(c_OwningGameInstance);
		_offActiveNetDrivers.SetValue(c_ActiveNetDrivers);
	}
}
// ScriptStruct Engine.NetDriverDefinition
// 0x0018
public class FNetDriverDefinition : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offDefName                                                    = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offDriverClassName                                            = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offDriverClassNameFallback                                    = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               DefName                                                        => _offDefName.GetValue();
	public FName                                               DriverClassName                                                => _offDriverClassName.GetValue();
	public FName                                               DriverClassNameFallback                                        => _offDriverClassNameFallback.GetValue();
	#endregion

	public FNetDriverDefinition(FName c_DefName, FName c_DriverClassName, FName c_DriverClassNameFallback) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefName.SetValue(c_DefName);
		_offDriverClassName.SetValue(c_DriverClassName);
		_offDriverClassNameFallback.SetValue(c_DriverClassNameFallback);
	}
}
// ScriptStruct Engine.ExposureSettings
// 0x0008
public class FExposureSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offFixedEV100                                                 = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbFixed                                                     = new ExternalOffset<byte/*(bool)*/>(0x0004);                  // 0x0004(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               FixedEV100                                                     => _offFixedEV100.GetValue();
	public byte/*(bool)*/                                      bFixed                                                         => _offbFixed.GetValue();
	#endregion

	public FExposureSettings(float c_FixedEV100, byte/*(bool)*/ c_bFixed) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFixedEV100.SetValue(c_FixedEV100);
		_offbFixed.SetValue(c_bFixed);
	}
}
// ScriptStruct Engine.TickPrerequisite
// 0x0010
public class FTickPrerequisite : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FTickPrerequisite() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.CanvasUVTri
// 0x0060
public class FCanvasUVTri : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector2D>                          _offV0_Pos                                                     = new ExternalOffset<FVector2D>(0x0000, false);                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offV0_UV                                                      = new ExternalOffset<FVector2D>(0x0008, false);                // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offV0_Color                                                   = new ExternalOffset<FLinearColor>(0x0010, false);             // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offV1_Pos                                                     = new ExternalOffset<FVector2D>(0x0020, false);                // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offV1_UV                                                      = new ExternalOffset<FVector2D>(0x0028, false);                // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offV1_Color                                                   = new ExternalOffset<FLinearColor>(0x0030, false);             // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offV2_Pos                                                     = new ExternalOffset<FVector2D>(0x0040, false);                // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offV2_UV                                                      = new ExternalOffset<FVector2D>(0x0048, false);                // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offV2_Color                                                   = new ExternalOffset<FLinearColor>(0x0050, false);             // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector2D                                           V0_Pos                                                         => _offV0_Pos.GetValue();
	public FVector2D                                           V0_UV                                                          => _offV0_UV.GetValue();
	public FLinearColor                                        V0_Color                                                       => _offV0_Color.GetValue();
	public FVector2D                                           V1_Pos                                                         => _offV1_Pos.GetValue();
	public FVector2D                                           V1_UV                                                          => _offV1_UV.GetValue();
	public FLinearColor                                        V1_Color                                                       => _offV1_Color.GetValue();
	public FVector2D                                           V2_Pos                                                         => _offV2_Pos.GetValue();
	public FVector2D                                           V2_UV                                                          => _offV2_UV.GetValue();
	public FLinearColor                                        V2_Color                                                       => _offV2_Color.GetValue();
	#endregion

	public FCanvasUVTri(FVector2D c_V0_Pos, FVector2D c_V0_UV, FLinearColor c_V0_Color, FVector2D c_V1_Pos, FVector2D c_V1_UV, FLinearColor c_V1_Color, FVector2D c_V2_Pos, FVector2D c_V2_UV, FLinearColor c_V2_Color) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offV0_Pos.SetValue(c_V0_Pos);
		_offV0_UV.SetValue(c_V0_UV);
		_offV0_Color.SetValue(c_V0_Color);
		_offV1_Pos.SetValue(c_V1_Pos);
		_offV1_UV.SetValue(c_V1_UV);
		_offV1_Color.SetValue(c_V1_Color);
		_offV2_Pos.SetValue(c_V2_Pos);
		_offV2_UV.SetValue(c_V2_UV);
		_offV2_Color.SetValue(c_V2_Color);
	}
}
// ScriptStruct Engine.DepthFieldGlowInfo
// 0x0024
public class FDepthFieldGlowInfo : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbEnableGlow                                                = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offGlowColor                                                  = new ExternalOffset<FLinearColor>(0x0004, false);             // 0x0004(0x0010) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offGlowOuterRadius                                            = new ExternalOffset<FVector2D>(0x0014, false);                // 0x0014(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offGlowInnerRadius                                            = new ExternalOffset<FVector2D>(0x001C, false);                // 0x001C(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FLinearColor                                        GlowColor                                                      => _offGlowColor.GetValue();
	public FVector2D                                           GlowOuterRadius                                                => _offGlowOuterRadius.GetValue();
	public FVector2D                                           GlowInnerRadius                                                => _offGlowInnerRadius.GetValue();
	#endregion

	public FDepthFieldGlowInfo(FLinearColor c_GlowColor, FVector2D c_GlowOuterRadius, FVector2D c_GlowInnerRadius) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGlowColor.SetValue(c_GlowColor);
		_offGlowOuterRadius.SetValue(c_GlowOuterRadius);
		_offGlowInnerRadius.SetValue(c_GlowInnerRadius);
	}
}
// ScriptStruct Engine.FontRenderInfo
// 0x0028
public class FFontRenderInfo : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbClipText                                                  = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableShadow                                              = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FDepthFieldGlowInfo>                _offGlowInfo                                                   = new ExternalOffset<FDepthFieldGlowInfo>(0x0004, false);      // 0x0004(0x0024) (BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FDepthFieldGlowInfo                                 GlowInfo                                                       => _offGlowInfo.GetValue();
	#endregion

	public FFontRenderInfo(FDepthFieldGlowInfo c_GlowInfo) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGlowInfo.SetValue(c_GlowInfo);
	}
}
// ScriptStruct Engine.Redirector
// 0x0010
public class FRedirector : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offOldName                                                    = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNewName                                                    = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               OldName                                                        => _offOldName.GetValue();
	public FName                                               NewName                                                        => _offNewName.GetValue();
	#endregion

	public FRedirector(FName c_OldName, FName c_NewName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOldName.SetValue(c_OldName);
		_offNewName.SetValue(c_NewName);
	}
}
// ScriptStruct Engine.CollectionReference
// 0x0008
public class FCollectionReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offCollectionName                                             = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               CollectionName                                                 => _offCollectionName.GetValue();
	#endregion

	public FCollectionReference(FName c_CollectionName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCollectionName.SetValue(c_CollectionName);
	}
}
// ScriptStruct Engine.ComponentReference
// 0x0028
public class FComponentReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<AActor>                             _offOtherActor                                                 = new ExternalOffset<AActor>(0x0000, true);                    // 0x0000(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offComponentProperty                                          = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPathToComponent                                            = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public AActor                                              OtherActor                                                     => _offOtherActor.GetValue();
	public FName                                               ComponentProperty                                              => _offComponentProperty.GetValue();
	public FString                                             PathToComponent                                                => _offPathToComponent.GetValue();
	#endregion

	public FComponentReference(AActor c_OtherActor, FName c_ComponentProperty, FString c_PathToComponent) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOtherActor.SetValue(c_OtherActor);
		_offComponentProperty.SetValue(c_ComponentProperty);
		_offPathToComponent.SetValue(c_PathToComponent);
	}
}
// ScriptStruct Engine.ConstrainComponentPropName
// 0x0008
public class FConstrainComponentPropName : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offComponentName                                              = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ComponentName                                                  => _offComponentName.GetValue();
	#endregion

	public FConstrainComponentPropName(FName c_ComponentName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offComponentName.SetValue(c_ComponentName);
	}
}
// ScriptStruct Engine.MeshBuildSettings
// 0x0030
public class FMeshBuildSettings : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbUseMikkTSpace                                             = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRecomputeNormals                                          = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRecomputeTangents                                         = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRemoveDegenerates                                         = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbBuildAdjacencyBuffer                                      = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbBuildReversedIndexBuffer                                  = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseHighPrecisionTangentBasis                              = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseFullPrecisionUVs                                       = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGenerateLightmapUVs                                       = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGenerateDistanceFieldAsIfTwoSided                         = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMinLightmapResolution                                      = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSrcLightmapIndex                                           = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDstLightmapIndex                                           = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBuildScale                                                 = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offBuildScale3D                                               = new ExternalOffset<FVector>(0x0014, false);                  // 0x0014(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDistanceFieldResolutionScale                               = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UStaticMesh>                        _offDistanceFieldReplacementMesh                               = new ExternalOffset<UStaticMesh>(0x0028, true);               // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MinLightmapResolution                                          => _offMinLightmapResolution.GetValue();
	public int                                                 SrcLightmapIndex                                               => _offSrcLightmapIndex.GetValue();
	public int                                                 DstLightmapIndex                                               => _offDstLightmapIndex.GetValue();
	public float                                               BuildScale                                                     => _offBuildScale.GetValue();
	public FVector                                             BuildScale3D                                                   => _offBuildScale3D.GetValue();
	public float                                               DistanceFieldResolutionScale                                   => _offDistanceFieldResolutionScale.GetValue();
	public UStaticMesh                                         DistanceFieldReplacementMesh                                   => _offDistanceFieldReplacementMesh.GetValue();
	#endregion

	public FMeshBuildSettings(int c_MinLightmapResolution, int c_SrcLightmapIndex, int c_DstLightmapIndex, float c_BuildScale, FVector c_BuildScale3D, float c_DistanceFieldResolutionScale, UStaticMesh c_DistanceFieldReplacementMesh) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMinLightmapResolution.SetValue(c_MinLightmapResolution);
		_offSrcLightmapIndex.SetValue(c_SrcLightmapIndex);
		_offDstLightmapIndex.SetValue(c_DstLightmapIndex);
		_offBuildScale.SetValue(c_BuildScale);
		_offBuildScale3D.SetValue(c_BuildScale3D);
		_offDistanceFieldResolutionScale.SetValue(c_DistanceFieldResolutionScale);
		_offDistanceFieldReplacementMesh.SetValue(c_DistanceFieldReplacementMesh);
	}
}
// ScriptStruct Engine.POV
// 0x001C
public class FPOV : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offLocation                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x000C, false);                 // 0x000C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFOV                                                        = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Location                                                       => _offLocation.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public float                                               FOV                                                            => _offFOV.GetValue();
	#endregion

	public FPOV(FVector c_Location, FRotator c_Rotation, float c_FOV) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocation.SetValue(c_Location);
		_offRotation.SetValue(c_Rotation);
		_offFOV.SetValue(c_FOV);
	}
}
// ScriptStruct Engine.AnimUpdateRateParameters
// 0x0088
public class FAnimUpdateRateParameters : ExternalClass
{
	#region Offsets
	private ExternalOffset<EUpdateRateShiftBucket>             _offShiftBucket                                                = new ExternalOffset<EUpdateRateShiftBucket>(0x0001, false);   // 0x0001(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbInterpolateSkippedFrames                                  = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbShouldUseLodMap                                           = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbShouldUseMinLod                                           = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSkipUpdate                                                = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSkipEvaluation                                            = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offUpdateRate                                                 = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offEvaluationRate                                             = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTickedPoseOffestTime                                       = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAdditionalTime                                             = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offBaseNonRenderedUpdateRate                                  = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxEvalRateForInterpolation                                = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offBaseVisibleDistanceFactorThesholds                         = new ExternalOffset<TArray<float>>(0x0020, false);            // 0x0020(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private TMap<int, int>                                     _offLODToFrameSkipMap                                          = new ExternalOffset<TMap<int>>(0x0030, false);                // 0x0030(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSkippedUpdateFrames                                        = new ExternalOffset<int>(0x0080);                             // 0x0080(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSkippedEvalFrames                                          = new ExternalOffset<int>(0x0084);                             // 0x0084(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public EUpdateRateShiftBucket                              ShiftBucket                                                    => _offShiftBucket.GetValue();
	public int                                                 UpdateRate                                                     => _offUpdateRate.GetValue();
	public int                                                 EvaluationRate                                                 => _offEvaluationRate.GetValue();
	public float                                               TickedPoseOffestTime                                           => _offTickedPoseOffestTime.GetValue();
	public float                                               AdditionalTime                                                 => _offAdditionalTime.GetValue();
	public int                                                 BaseNonRenderedUpdateRate                                      => _offBaseNonRenderedUpdateRate.GetValue();
	public int                                                 MaxEvalRateForInterpolation                                    => _offMaxEvalRateForInterpolation.GetValue();
	public TArray<float>                                       BaseVisibleDistanceFactorThesholds                             => _offBaseVisibleDistanceFactorThesholds.GetValue();
	public int                                                 SkippedUpdateFrames                                            => _offSkippedUpdateFrames.GetValue();
	public int                                                 SkippedEvalFrames                                              => _offSkippedEvalFrames.GetValue();
	#endregion

	public FAnimUpdateRateParameters(EUpdateRateShiftBucket c_ShiftBucket, int c_UpdateRate, int c_EvaluationRate, float c_TickedPoseOffestTime, float c_AdditionalTime, int c_BaseNonRenderedUpdateRate, int c_MaxEvalRateForInterpolation, TArray<float> c_BaseVisibleDistanceFactorThesholds, int c_SkippedUpdateFrames, int c_SkippedEvalFrames) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offShiftBucket.SetValue(c_ShiftBucket);
		_offUpdateRate.SetValue(c_UpdateRate);
		_offEvaluationRate.SetValue(c_EvaluationRate);
		_offTickedPoseOffestTime.SetValue(c_TickedPoseOffestTime);
		_offAdditionalTime.SetValue(c_AdditionalTime);
		_offBaseNonRenderedUpdateRate.SetValue(c_BaseNonRenderedUpdateRate);
		_offMaxEvalRateForInterpolation.SetValue(c_MaxEvalRateForInterpolation);
		_offBaseVisibleDistanceFactorThesholds.SetValue(c_BaseVisibleDistanceFactorThesholds);
		_offSkippedUpdateFrames.SetValue(c_SkippedUpdateFrames);
		_offSkippedEvalFrames.SetValue(c_SkippedEvalFrames);
	}
}
// ScriptStruct Engine.AnimSlotDesc
// 0x000C
public class FAnimSlotDesc : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offSlotName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNumChannels                                                = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               SlotName                                                       => _offSlotName.GetValue();
	public int                                                 NumChannels                                                    => _offNumChannels.GetValue();
	#endregion

	public FAnimSlotDesc(FName c_SlotName, int c_NumChannels) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSlotName.SetValue(c_SlotName);
		_offNumChannels.SetValue(c_NumChannels);
	}
}
// ScriptStruct Engine.AnimSlotInfo
// 0x0018
public class FAnimSlotInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offSlotName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offChannelWeights                                             = new ExternalOffset<TArray<float>>(0x0008, false);            // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               SlotName                                                       => _offSlotName.GetValue();
	public TArray<float>                                       ChannelWeights                                                 => _offChannelWeights.GetValue();
	#endregion

	public FAnimSlotInfo(FName c_SlotName, TArray<float> c_ChannelWeights) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSlotName.SetValue(c_SlotName);
		_offChannelWeights.SetValue(c_ChannelWeights);
	}
}
// ScriptStruct Engine.MTDResult
// 0x0010
public class FMTDResult : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offDirection                                                  = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offdistance                                                   = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Direction                                                      => _offDirection.GetValue();
	public float                                               distance                                                       => _offdistance.GetValue();
	#endregion

	public FMTDResult(FVector c_Direction, float c_distance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDirection.SetValue(c_Direction);
		_offdistance.SetValue(c_distance);
	}
}
// ScriptStruct Engine.OverlapResult
// 0x0018
public class FOverlapResult : ExternalClass
{
	#region Offsets
	private ExternalOffset<TWeakObjectPtr<AActor>>             _offActor                                                      = new ExternalOffset<TWeakObjectPtr<AActor>>(0x0000, false);   // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<UPrimitiveComponent>> _offComponent                                                  = new ExternalOffset<TWeakObjectPtr<UPrimitiveComponent>>(0x0008, false); // 0x0008(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbBlockingHit                                               = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TWeakObjectPtr<AActor>                              Actor                                                          => _offActor.GetValue();
	public TWeakObjectPtr<UPrimitiveComponent>                 Component                                                      => _offComponent.GetValue();
	#endregion

	public FOverlapResult(TWeakObjectPtr<AActor> c_Actor, TWeakObjectPtr<UPrimitiveComponent> c_Component) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActor.SetValue(c_Actor);
		_offComponent.SetValue(c_Component);
	}
}
// ScriptStruct Engine.PrimitiveMaterialRef
// 0x0018
public class FPrimitiveMaterialRef : ExternalClass
{
	#region Offsets
	private ExternalOffset<UPrimitiveComponent>                _offPrimitive                                                  = new ExternalOffset<UPrimitiveComponent>(0x0000, true);       // 0x0000(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UDecalComponent>                    _offDecal                                                      = new ExternalOffset<UDecalComponent>(0x0008, true);           // 0x0008(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offElementIndex                                               = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPrimitiveComponent                                 Primitive                                                      => _offPrimitive.GetValue();
	public UDecalComponent                                     Decal                                                          => _offDecal.GetValue();
	public int                                                 ElementIndex                                                   => _offElementIndex.GetValue();
	#endregion

	public FPrimitiveMaterialRef(UPrimitiveComponent c_Primitive, UDecalComponent c_Decal, int c_ElementIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPrimitive.SetValue(c_Primitive);
		_offDecal.SetValue(c_Decal);
		_offElementIndex.SetValue(c_ElementIndex);
	}
}
// ScriptStruct Engine.SwarmDebugOptions
// 0x0004
public class FSwarmDebugOptions : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbDistributionEnabled                                       = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbForceContentExport                                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbInitialized                                               = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FSwarmDebugOptions() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.LightmassDebugOptions
// 0x0010
public class FLightmassDebugOptions : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbDebugMode                                                 = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbStatsEnabled                                              = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGatherBSPSurfacesAcrossComponents                         = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCoplanarTolerance                                          = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseImmediateImport                                        = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbImmediateProcessMappings                                  = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSortMappings                                              = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbDumpBinaryFiles                                           = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbDebugMaterials                                            = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbPadMappings                                               = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbDebugPaddings                                             = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOnlyCalcDebugTexelMappings                                = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseRandomColors                                           = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbColorBordersGreen                                         = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbColorByExecutionTime                                      = new ExternalOffset<char>(0x0009, false);                     // 0x0009(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offExecutionTimeDivisor                                       = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               CoplanarTolerance                                              => _offCoplanarTolerance.GetValue();
	public float                                               ExecutionTimeDivisor                                           => _offExecutionTimeDivisor.GetValue();
	#endregion

	public FLightmassDebugOptions(float c_CoplanarTolerance, float c_ExecutionTimeDivisor) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCoplanarTolerance.SetValue(c_CoplanarTolerance);
		_offExecutionTimeDivisor.SetValue(c_ExecutionTimeDivisor);
	}
}
// ScriptStruct Engine.LightmassPrimitiveSettings
// 0x0018
public class FLightmassPrimitiveSettings : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbUseTwoSidedLighting                                       = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbShadowIndirectOnly                                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseEmissiveForStaticLighting                              = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseVertexNormalForHemisphereGather                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offEmissiveLightFalloffExponent                               = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offEmissiveLightExplicitInfluenceRadius                       = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offEmissiveBoost                                              = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDiffuseBoost                                               = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFullyOccludedSamplesFraction                               = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               EmissiveLightFalloffExponent                                   => _offEmissiveLightFalloffExponent.GetValue();
	public float                                               EmissiveLightExplicitInfluenceRadius                           => _offEmissiveLightExplicitInfluenceRadius.GetValue();
	public float                                               EmissiveBoost                                                  => _offEmissiveBoost.GetValue();
	public float                                               DiffuseBoost                                                   => _offDiffuseBoost.GetValue();
	public float                                               FullyOccludedSamplesFraction                                   => _offFullyOccludedSamplesFraction.GetValue();
	#endregion

	public FLightmassPrimitiveSettings(float c_EmissiveLightFalloffExponent, float c_EmissiveLightExplicitInfluenceRadius, float c_EmissiveBoost, float c_DiffuseBoost, float c_FullyOccludedSamplesFraction) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmissiveLightFalloffExponent.SetValue(c_EmissiveLightFalloffExponent);
		_offEmissiveLightExplicitInfluenceRadius.SetValue(c_EmissiveLightExplicitInfluenceRadius);
		_offEmissiveBoost.SetValue(c_EmissiveBoost);
		_offDiffuseBoost.SetValue(c_DiffuseBoost);
		_offFullyOccludedSamplesFraction.SetValue(c_FullyOccludedSamplesFraction);
	}
}
// ScriptStruct Engine.LightmassLightSettings
// 0x000C
public class FLightmassLightSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offIndirectLightingSaturation                                 = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offShadowExponent                                             = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbUseAreaShadowsForStationaryLight                          = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               IndirectLightingSaturation                                     => _offIndirectLightingSaturation.GetValue();
	public float                                               ShadowExponent                                                 => _offShadowExponent.GetValue();
	public byte/*(bool)*/                                      bUseAreaShadowsForStationaryLight                              => _offbUseAreaShadowsForStationaryLight.GetValue();
	#endregion

	public FLightmassLightSettings(float c_IndirectLightingSaturation, float c_ShadowExponent, byte/*(bool)*/ c_bUseAreaShadowsForStationaryLight) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIndirectLightingSaturation.SetValue(c_IndirectLightingSaturation);
		_offShadowExponent.SetValue(c_ShadowExponent);
		_offbUseAreaShadowsForStationaryLight.SetValue(c_bUseAreaShadowsForStationaryLight);
	}
}
// ScriptStruct Engine.LightmassDirectionalLightSettings
// 0x0004 (0x0010 - 0x000C)
public class FLightmassDirectionalLightSettings : FLightmassLightSettings
{
	#region Offsets
	private ExternalOffset<float>                              _offLightSourceAngle                                           = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               LightSourceAngle                                               => _offLightSourceAngle.GetValue();
	#endregion

	public FLightmassDirectionalLightSettings(float c_LightSourceAngle) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLightSourceAngle.SetValue(c_LightSourceAngle);
	}
}
// ScriptStruct Engine.LightmassPointLightSettings
// 0x0000 (0x000C - 0x000C)
public class FLightmassPointLightSettings : FLightmassLightSettings
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FLightmassPointLightSettings() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.BasedPosition
// 0x0038
public class FBasedPosition : ExternalClass
{
	#region Offsets
	private ExternalOffset<AActor>                             _offBase                                                       = new ExternalOffset<AActor>(0x0000, true);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offPosition                                                   = new ExternalOffset<FVector>(0x0008, false);                  // 0x0008(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offCachedBaseLocation                                         = new ExternalOffset<FVector>(0x0014, false);                  // 0x0014(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offCachedBaseRotation                                         = new ExternalOffset<FRotator>(0x0020, false);                 // 0x0020(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offCachedTransPosition                                        = new ExternalOffset<FVector>(0x002C, false);                  // 0x002C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public AActor                                              Base                                                           => _offBase.GetValue();
	public FVector                                             Position                                                       => _offPosition.GetValue();
	public FVector                                             CachedBaseLocation                                             => _offCachedBaseLocation.GetValue();
	public FRotator                                            CachedBaseRotation                                             => _offCachedBaseRotation.GetValue();
	public FVector                                             CachedTransPosition                                            => _offCachedTransPosition.GetValue();
	#endregion

	public FBasedPosition(AActor c_Base, FVector c_Position, FVector c_CachedBaseLocation, FRotator c_CachedBaseRotation, FVector c_CachedTransPosition) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBase.SetValue(c_Base);
		_offPosition.SetValue(c_Position);
		_offCachedBaseLocation.SetValue(c_CachedBaseLocation);
		_offCachedBaseRotation.SetValue(c_CachedBaseRotation);
		_offCachedTransPosition.SetValue(c_CachedTransPosition);
	}
}
// ScriptStruct Engine.FractureEffect
// 0x0010
public class FFractureEffect : ExternalClass
{
	#region Offsets
	private ExternalOffset<UParticleSystem>                    _offParticleSystem                                             = new ExternalOffset<UParticleSystem>(0x0000, true);           // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundBase>                         _offSound                                                      = new ExternalOffset<USoundBase>(0x0008, true);                // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UParticleSystem                                     ParticleSystem                                                 => _offParticleSystem.GetValue();
	public USoundBase                                          Sound                                                          => _offSound.GetValue();
	#endregion

	public FFractureEffect(UParticleSystem c_ParticleSystem, USoundBase c_Sound) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParticleSystem.SetValue(c_ParticleSystem);
		_offSound.SetValue(c_Sound);
	}
}
// ScriptStruct Engine.RigidBodyContactInfo
// 0x0030
public class FRigidBodyContactInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offContactPosition                                            = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offContactNormal                                              = new ExternalOffset<FVector>(0x000C, false);                  // 0x000C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offContactPenetration                                         = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<UPhysicalMaterial>                  _offPhysMaterial[0x2]                                          = new ExternalOffset<UPhysicalMaterial>(0x0020, true);         // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             ContactPosition                                                => _offContactPosition.GetValue();
	public FVector                                             ContactNormal                                                  => _offContactNormal.GetValue();
	public float                                               ContactPenetration                                             => _offContactPenetration.GetValue();
	#endregion

	public FRigidBodyContactInfo(FVector c_ContactPosition, FVector c_ContactNormal, float c_ContactPenetration) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContactPosition.SetValue(c_ContactPosition);
		_offContactNormal.SetValue(c_ContactNormal);
		_offContactPenetration.SetValue(c_ContactPenetration);
	}
}
// ScriptStruct Engine.CollisionImpactData
// 0x0028
public class FCollisionImpactData : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FRigidBodyContactInfo>>      _offContactInfos                                               = new ExternalOffset<TArray<FRigidBodyContactInfo>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offTotalNormalImpulse                                         = new ExternalOffset<FVector>(0x0010, false);                  // 0x0010(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offTotalFrictionImpulse                                       = new ExternalOffset<FVector>(0x001C, false);                  // 0x001C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FRigidBodyContactInfo>                       ContactInfos                                                   => _offContactInfos.GetValue();
	public FVector                                             TotalNormalImpulse                                             => _offTotalNormalImpulse.GetValue();
	public FVector                                             TotalFrictionImpulse                                           => _offTotalFrictionImpulse.GetValue();
	#endregion

	public FCollisionImpactData(TArray<FRigidBodyContactInfo> c_ContactInfos, FVector c_TotalNormalImpulse, FVector c_TotalFrictionImpulse) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContactInfos.SetValue(c_ContactInfos);
		_offTotalNormalImpulse.SetValue(c_TotalNormalImpulse);
		_offTotalFrictionImpulse.SetValue(c_TotalFrictionImpulse);
	}
}
// ScriptStruct Engine.RigidBodyErrorCorrection
// 0x0034
public class FRigidBodyErrorCorrection : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offPingExtrapolation                                          = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPingLimit                                                  = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offErrorPerLinearDifference                                   = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offErrorPerAngularDifference                                  = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxRestoredStateError                                      = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxLinearHardSnapDistance                                  = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPositionLerp                                               = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAngleLerp                                                  = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLinearVelocityCoefficient                                  = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAngularVelocityCoefficient                                 = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offErrorAccumulationSeconds                                   = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offErrorAccumulationDistanceSq                                = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offErrorAccumulationSimilarity                                = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               PingExtrapolation                                              => _offPingExtrapolation.GetValue();
	public float                                               PingLimit                                                      => _offPingLimit.GetValue();
	public float                                               ErrorPerLinearDifference                                       => _offErrorPerLinearDifference.GetValue();
	public float                                               ErrorPerAngularDifference                                      => _offErrorPerAngularDifference.GetValue();
	public float                                               MaxRestoredStateError                                          => _offMaxRestoredStateError.GetValue();
	public float                                               MaxLinearHardSnapDistance                                      => _offMaxLinearHardSnapDistance.GetValue();
	public float                                               PositionLerp                                                   => _offPositionLerp.GetValue();
	public float                                               AngleLerp                                                      => _offAngleLerp.GetValue();
	public float                                               LinearVelocityCoefficient                                      => _offLinearVelocityCoefficient.GetValue();
	public float                                               AngularVelocityCoefficient                                     => _offAngularVelocityCoefficient.GetValue();
	public float                                               ErrorAccumulationSeconds                                       => _offErrorAccumulationSeconds.GetValue();
	public float                                               ErrorAccumulationDistanceSq                                    => _offErrorAccumulationDistanceSq.GetValue();
	public float                                               ErrorAccumulationSimilarity                                    => _offErrorAccumulationSimilarity.GetValue();
	#endregion

	public FRigidBodyErrorCorrection(float c_PingExtrapolation, float c_PingLimit, float c_ErrorPerLinearDifference, float c_ErrorPerAngularDifference, float c_MaxRestoredStateError, float c_MaxLinearHardSnapDistance, float c_PositionLerp, float c_AngleLerp, float c_LinearVelocityCoefficient, float c_AngularVelocityCoefficient, float c_ErrorAccumulationSeconds, float c_ErrorAccumulationDistanceSq, float c_ErrorAccumulationSimilarity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPingExtrapolation.SetValue(c_PingExtrapolation);
		_offPingLimit.SetValue(c_PingLimit);
		_offErrorPerLinearDifference.SetValue(c_ErrorPerLinearDifference);
		_offErrorPerAngularDifference.SetValue(c_ErrorPerAngularDifference);
		_offMaxRestoredStateError.SetValue(c_MaxRestoredStateError);
		_offMaxLinearHardSnapDistance.SetValue(c_MaxLinearHardSnapDistance);
		_offPositionLerp.SetValue(c_PositionLerp);
		_offAngleLerp.SetValue(c_AngleLerp);
		_offLinearVelocityCoefficient.SetValue(c_LinearVelocityCoefficient);
		_offAngularVelocityCoefficient.SetValue(c_AngularVelocityCoefficient);
		_offErrorAccumulationSeconds.SetValue(c_ErrorAccumulationSeconds);
		_offErrorAccumulationDistanceSq.SetValue(c_ErrorAccumulationDistanceSq);
		_offErrorAccumulationSimilarity.SetValue(c_ErrorAccumulationSimilarity);
	}
}
// ScriptStruct Engine.RigidBodyState
// 0x0040
public class FRigidBodyState : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector_NetQuantize100>             _offPosition                                                   = new ExternalOffset<FVector_NetQuantize100>(0x0000, false);   // 0x0000(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FQuat>                              _offQuaternion                                                 = new ExternalOffset<FQuat>(0x0010, false);                    // 0x0010(0x0010) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize100>             _offLinVel                                                     = new ExternalOffset<FVector_NetQuantize100>(0x0020, false);   // 0x0020(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector_NetQuantize100>             _offAngVel                                                     = new ExternalOffset<FVector_NetQuantize100>(0x002C, false);   // 0x002C(0x000C) (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offFlags                                                      = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector_NetQuantize100                              Position                                                       => _offPosition.GetValue();
	public FQuat                                               Quaternion                                                     => _offQuaternion.GetValue();
	public FVector_NetQuantize100                              LinVel                                                         => _offLinVel.GetValue();
	public FVector_NetQuantize100                              AngVel                                                         => _offAngVel.GetValue();
	#endregion

	public FRigidBodyState(FVector_NetQuantize100 c_Position, FQuat c_Quaternion, FVector_NetQuantize100 c_LinVel, FVector_NetQuantize100 c_AngVel) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPosition.SetValue(c_Position);
		_offQuaternion.SetValue(c_Quaternion);
		_offLinVel.SetValue(c_LinVel);
		_offAngVel.SetValue(c_AngVel);
	}
}
// ScriptStruct Engine.MaterialShadingModelField
// 0x0002
public class FMaterialShadingModelField : ExternalClass
{
	#region Offsets
	private ExternalOffset<ushort>                             _offShadingModelField                                          = new ExternalOffset<ushort>(0x0000);                          // 0x0000(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public ushort                                              ShadingModelField                                              => _offShadingModelField.GetValue();
	#endregion

	public FMaterialShadingModelField(ushort c_ShadingModelField) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offShadingModelField.SetValue(c_ShadingModelField);
	}
}
// ScriptStruct Engine.ExponentialHeightFogData
// 0x000C
public class FExponentialHeightFogData : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offFogDensity                                                 = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFogHeightFalloff                                           = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFogHeightOffset                                            = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               FogDensity                                                     => _offFogDensity.GetValue();
	public float                                               FogHeightFalloff                                               => _offFogHeightFalloff.GetValue();
	public float                                               FogHeightOffset                                                => _offFogHeightOffset.GetValue();
	#endregion

	public FExponentialHeightFogData(float c_FogDensity, float c_FogHeightFalloff, float c_FogHeightOffset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFogDensity.SetValue(c_FogDensity);
		_offFogHeightFalloff.SetValue(c_FogHeightFalloff);
		_offFogHeightOffset.SetValue(c_FogHeightOffset);
	}
}
// ScriptStruct Engine.FontCharacter
// 0x0018
public class FFontCharacter : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offStartU                                                     = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartV                                                     = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offUSize                                                      = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVSize                                                      = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offTextureIndex                                               = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVerticalOffset                                             = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 StartU                                                         => _offStartU.GetValue();
	public int                                                 StartV                                                         => _offStartV.GetValue();
	public int                                                 USize                                                          => _offUSize.GetValue();
	public int                                                 VSize                                                          => _offVSize.GetValue();
	public int                                                 VerticalOffset                                                 => _offVerticalOffset.GetValue();
	#endregion

	public FFontCharacter(int c_StartU, int c_StartV, int c_USize, int c_VSize, int c_VerticalOffset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStartU.SetValue(c_StartU);
		_offStartV.SetValue(c_StartV);
		_offUSize.SetValue(c_USize);
		_offVSize.SetValue(c_VSize);
		_offVerticalOffset.SetValue(c_VerticalOffset);
	}
}
// ScriptStruct Engine.FontImportOptionsData
// 0x00B0
public class FFontImportOptionsData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offFontName                                                   = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHeight                                                     = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableAntialiasing                                        = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableBold                                                = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableItalic                                              = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableUnderline                                           = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAlphaOnly                                                 = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EFontImportCharacterSet>> _offCharacterSet                                               = new ExternalOffset<TEnumAsByte<EFontImportCharacterSet>>(0x0018, false); // 0x0018(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offChars                                                      = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offUnicodeRange                                               = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharsFilePath                                              = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharsFileWildcard                                          = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCreatePrintableOnly                                       = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIncludeASCIIRange                                         = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offForegroundColor                                            = new ExternalOffset<FLinearColor>(0x0064, false);             // 0x0064(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableDropShadow                                          = new ExternalOffset<char>(0x0074, false);                     // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTexturePageWidth                                           = new ExternalOffset<int>(0x0078);                             // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTexturePageMaxHeight                                       = new ExternalOffset<int>(0x007C);                             // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offXPadding                                                   = new ExternalOffset<int>(0x0080);                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offYPadding                                                   = new ExternalOffset<int>(0x0084);                             // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExtendBoxTop                                               = new ExternalOffset<int>(0x0088);                             // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExtendBoxBottom                                            = new ExternalOffset<int>(0x008C);                             // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExtendBoxRight                                             = new ExternalOffset<int>(0x0090);                             // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExtendBoxLeft                                              = new ExternalOffset<int>(0x0094);                             // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableLegacyMode                                          = new ExternalOffset<char>(0x0098, false);                     // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offKerning                                                    = new ExternalOffset<int>(0x009C);                             // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseDistanceFieldAlpha                                     = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDistanceFieldScaleFactor                                   = new ExternalOffset<int>(0x00A4);                             // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDistanceFieldScanRadiusScale                               = new ExternalOffset<float>(0x00A8);                           // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FontName                                                       => _offFontName.GetValue();
	public float                                               Height                                                         => _offHeight.GetValue();
	public TEnumAsByte<EFontImportCharacterSet>                CharacterSet                                                   => _offCharacterSet.GetValue();
	public FString                                             Chars                                                          => _offChars.GetValue();
	public FString                                             UnicodeRange                                                   => _offUnicodeRange.GetValue();
	public FString                                             CharsFilePath                                                  => _offCharsFilePath.GetValue();
	public FString                                             CharsFileWildcard                                              => _offCharsFileWildcard.GetValue();
	public FLinearColor                                        ForegroundColor                                                => _offForegroundColor.GetValue();
	public int                                                 TexturePageWidth                                               => _offTexturePageWidth.GetValue();
	public int                                                 TexturePageMaxHeight                                           => _offTexturePageMaxHeight.GetValue();
	public int                                                 XPadding                                                       => _offXPadding.GetValue();
	public int                                                 YPadding                                                       => _offYPadding.GetValue();
	public int                                                 ExtendBoxTop                                                   => _offExtendBoxTop.GetValue();
	public int                                                 ExtendBoxBottom                                                => _offExtendBoxBottom.GetValue();
	public int                                                 ExtendBoxRight                                                 => _offExtendBoxRight.GetValue();
	public int                                                 ExtendBoxLeft                                                  => _offExtendBoxLeft.GetValue();
	public int                                                 Kerning                                                        => _offKerning.GetValue();
	public int                                                 DistanceFieldScaleFactor                                       => _offDistanceFieldScaleFactor.GetValue();
	public float                                               DistanceFieldScanRadiusScale                                   => _offDistanceFieldScanRadiusScale.GetValue();
	#endregion

	public FFontImportOptionsData(FString c_FontName, float c_Height, TEnumAsByte<EFontImportCharacterSet> c_CharacterSet, FString c_Chars, FString c_UnicodeRange, FString c_CharsFilePath, FString c_CharsFileWildcard, FLinearColor c_ForegroundColor, int c_TexturePageWidth, int c_TexturePageMaxHeight, int c_XPadding, int c_YPadding, int c_ExtendBoxTop, int c_ExtendBoxBottom, int c_ExtendBoxRight, int c_ExtendBoxLeft, int c_Kerning, int c_DistanceFieldScaleFactor, float c_DistanceFieldScanRadiusScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFontName.SetValue(c_FontName);
		_offHeight.SetValue(c_Height);
		_offCharacterSet.SetValue(c_CharacterSet);
		_offChars.SetValue(c_Chars);
		_offUnicodeRange.SetValue(c_UnicodeRange);
		_offCharsFilePath.SetValue(c_CharsFilePath);
		_offCharsFileWildcard.SetValue(c_CharsFileWildcard);
		_offForegroundColor.SetValue(c_ForegroundColor);
		_offTexturePageWidth.SetValue(c_TexturePageWidth);
		_offTexturePageMaxHeight.SetValue(c_TexturePageMaxHeight);
		_offXPadding.SetValue(c_XPadding);
		_offYPadding.SetValue(c_YPadding);
		_offExtendBoxTop.SetValue(c_ExtendBoxTop);
		_offExtendBoxBottom.SetValue(c_ExtendBoxBottom);
		_offExtendBoxRight.SetValue(c_ExtendBoxRight);
		_offExtendBoxLeft.SetValue(c_ExtendBoxLeft);
		_offKerning.SetValue(c_Kerning);
		_offDistanceFieldScaleFactor.SetValue(c_DistanceFieldScaleFactor);
		_offDistanceFieldScanRadiusScale.SetValue(c_DistanceFieldScanRadiusScale);
	}
}
// ScriptStruct Engine.ForceFeedbackAttenuationSettings
// 0x0000 (0x00B0 - 0x00B0)
public class FForceFeedbackAttenuationSettings : FBaseAttenuationSettings
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FForceFeedbackAttenuationSettings() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.ForceFeedbackChannelDetails
// 0x0090
public class FForceFeedbackChannelDetails : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbAffectsLeftLarge                                          = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAffectsLeftSmall                                          = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAffectsRightLarge                                         = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAffectsRightSmall                                         = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                 _offCurve                                                      = new ExternalOffset<FRuntimeFloatCurve>(0x0008, false);       // 0x0008(0x0088) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRuntimeFloatCurve                                  Curve                                                          => _offCurve.GetValue();
	#endregion

	public FForceFeedbackChannelDetails(FRuntimeFloatCurve c_Curve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCurve.SetValue(c_Curve);
	}
}
// ScriptStruct Engine.PredictProjectilePathPointData
// 0x001C
public class FPredictProjectilePathPointData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offLocation                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offVelocity                                                   = new ExternalOffset<FVector>(0x000C, false);                  // 0x000C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Location                                                       => _offLocation.GetValue();
	public FVector                                             Velocity                                                       => _offVelocity.GetValue();
	public float                                               Time                                                           => _offTime.GetValue();
	#endregion

	public FPredictProjectilePathPointData(FVector c_Location, FVector c_Velocity, float c_Time) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocation.SetValue(c_Location);
		_offVelocity.SetValue(c_Velocity);
		_offTime.SetValue(c_Time);
	}
}
// ScriptStruct Engine.PredictProjectilePathResult
// 0x00B8
public class FPredictProjectilePathResult : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FPredictProjectilePathPointData>> _offPathData                                                   = new ExternalOffset<TArray<FPredictProjectilePathPointData>>(0x0000, false); // 0x0000(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	private ExternalOffset<FPredictProjectilePathPointData>    _offLastTraceDestination                                       = new ExternalOffset<FPredictProjectilePathPointData>(0x0010, false); // 0x0010(0x001C) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FHitResult>                         _offHitResult                                                  = new ExternalOffset<FHitResult>(0x002C, false);               // 0x002C(0x0088) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FPredictProjectilePathPointData>             PathData                                                       => _offPathData.GetValue();
	public FPredictProjectilePathPointData                     LastTraceDestination                                           => _offLastTraceDestination.GetValue();
	public FHitResult                                          HitResult                                                      => _offHitResult.GetValue();
	#endregion

	public FPredictProjectilePathResult(TArray<FPredictProjectilePathPointData> c_PathData, FPredictProjectilePathPointData c_LastTraceDestination, FHitResult c_HitResult) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPathData.SetValue(c_PathData);
		_offLastTraceDestination.SetValue(c_LastTraceDestination);
		_offHitResult.SetValue(c_HitResult);
	}
}
// ScriptStruct Engine.PredictProjectilePathParams
// 0x0060
public class FPredictProjectilePathParams : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offStartLocation                                              = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offLaunchVelocity                                             = new ExternalOffset<FVector>(0x000C, false);                  // 0x000C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbTraceWithCollision                                        = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offProjectileRadius                                           = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxSimTime                                                 = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbTraceWithChannel                                          = new ExternalOffset<byte/*(bool)*/>(0x0024);                  // 0x0024(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionChannel>>     _offTraceChannel                                               = new ExternalOffset<TEnumAsByte<ECollisionChannel>>(0x0025, false); // 0x0025(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<TEnumAsByte<EObjectTypeQuery>>> _offObjectTypes                                                = new ExternalOffset<TArray<TEnumAsByte<EObjectTypeQuery>>>(0x0028, false); // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                     _offActorsToIgnore                                             = new ExternalOffset<TArray<AActor>>(0x0038, false);           // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSimFrequency                                               = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOverrideGravityZ                                           = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EDrawDebugTrace>>       _offDrawDebugType                                              = new ExternalOffset<TEnumAsByte<EDrawDebugTrace>>(0x0050, false); // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDrawDebugTime                                              = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbTraceComplex                                              = new ExternalOffset<byte/*(bool)*/>(0x0058);                  // 0x0058(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             StartLocation                                                  => _offStartLocation.GetValue();
	public FVector                                             LaunchVelocity                                                 => _offLaunchVelocity.GetValue();
	public byte/*(bool)*/                                      bTraceWithCollision                                            => _offbTraceWithCollision.GetValue();
	public float                                               ProjectileRadius                                               => _offProjectileRadius.GetValue();
	public float                                               MaxSimTime                                                     => _offMaxSimTime.GetValue();
	public byte/*(bool)*/                                      bTraceWithChannel                                              => _offbTraceWithChannel.GetValue();
	public TEnumAsByte<ECollisionChannel>                      TraceChannel                                                   => _offTraceChannel.GetValue();
	public TArray<TEnumAsByte<EObjectTypeQuery>>               ObjectTypes                                                    => _offObjectTypes.GetValue();
	public TArray<AActor>                                      ActorsToIgnore                                                 => _offActorsToIgnore.GetValue();
	public float                                               SimFrequency                                                   => _offSimFrequency.GetValue();
	public float                                               OverrideGravityZ                                               => _offOverrideGravityZ.GetValue();
	public TEnumAsByte<EDrawDebugTrace>                        DrawDebugType                                                  => _offDrawDebugType.GetValue();
	public float                                               DrawDebugTime                                                  => _offDrawDebugTime.GetValue();
	public byte/*(bool)*/                                      bTraceComplex                                                  => _offbTraceComplex.GetValue();
	#endregion

	public FPredictProjectilePathParams(FVector c_StartLocation, FVector c_LaunchVelocity, byte/*(bool)*/ c_bTraceWithCollision, float c_ProjectileRadius, float c_MaxSimTime, byte/*(bool)*/ c_bTraceWithChannel, TEnumAsByte<ECollisionChannel> c_TraceChannel, TArray<TEnumAsByte<EObjectTypeQuery>> c_ObjectTypes, TArray<AActor> c_ActorsToIgnore, float c_SimFrequency, float c_OverrideGravityZ, TEnumAsByte<EDrawDebugTrace> c_DrawDebugType, float c_DrawDebugTime, byte/*(bool)*/ c_bTraceComplex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStartLocation.SetValue(c_StartLocation);
		_offLaunchVelocity.SetValue(c_LaunchVelocity);
		_offbTraceWithCollision.SetValue(c_bTraceWithCollision);
		_offProjectileRadius.SetValue(c_ProjectileRadius);
		_offMaxSimTime.SetValue(c_MaxSimTime);
		_offbTraceWithChannel.SetValue(c_bTraceWithChannel);
		_offTraceChannel.SetValue(c_TraceChannel);
		_offObjectTypes.SetValue(c_ObjectTypes);
		_offActorsToIgnore.SetValue(c_ActorsToIgnore);
		_offSimFrequency.SetValue(c_SimFrequency);
		_offOverrideGravityZ.SetValue(c_OverrideGravityZ);
		_offDrawDebugType.SetValue(c_DrawDebugType);
		_offDrawDebugTime.SetValue(c_DrawDebugTime);
		_offbTraceComplex.SetValue(c_bTraceComplex);
	}
}
// ScriptStruct Engine.ActiveHapticFeedbackEffect
// 0x0018
public class FActiveHapticFeedbackEffect : ExternalClass
{
	#region Offsets
	private ExternalOffset<UHapticFeedbackEffect_Base>         _offHapticEffect                                               = new ExternalOffset<UHapticFeedbackEffect_Base>(0x0000, true); // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UHapticFeedbackEffect_Base                          HapticEffect                                                   => _offHapticEffect.GetValue();
	#endregion

	public FActiveHapticFeedbackEffect(UHapticFeedbackEffect_Base c_HapticEffect) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offHapticEffect.SetValue(c_HapticEffect);
	}
}
// ScriptStruct Engine.HapticFeedbackDetails_Curve
// 0x0110
public class FHapticFeedbackDetails_Curve : ExternalClass
{
	#region Offsets
	private ExternalOffset<FRuntimeFloatCurve>                 _offFrequency                                                  = new ExternalOffset<FRuntimeFloatCurve>(0x0000, false);       // 0x0000(0x0088) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                 _offAmplitude                                                  = new ExternalOffset<FRuntimeFloatCurve>(0x0088, false);       // 0x0088(0x0088) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRuntimeFloatCurve                                  Frequency                                                      => _offFrequency.GetValue();
	public FRuntimeFloatCurve                                  Amplitude                                                      => _offAmplitude.GetValue();
	#endregion

	public FHapticFeedbackDetails_Curve(FRuntimeFloatCurve c_Frequency, FRuntimeFloatCurve c_Amplitude) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFrequency.SetValue(c_Frequency);
		_offAmplitude.SetValue(c_Amplitude);
	}
}
// ScriptStruct Engine.ClusterNode
// 0x0040
public class FClusterNode : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offBoundMin                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offFirstChild                                                 = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offBoundMax                                                   = new ExternalOffset<FVector>(0x0010, false);                  // 0x0010(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLastChild                                                  = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offFirstInstance                                              = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLastInstance                                               = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offMinInstanceScale                                           = new ExternalOffset<FVector>(0x0028, false);                  // 0x0028(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offMaxInstanceScale                                           = new ExternalOffset<FVector>(0x0034, false);                  // 0x0034(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             BoundMin                                                       => _offBoundMin.GetValue();
	public int                                                 FirstChild                                                     => _offFirstChild.GetValue();
	public FVector                                             BoundMax                                                       => _offBoundMax.GetValue();
	public int                                                 LastChild                                                      => _offLastChild.GetValue();
	public int                                                 FirstInstance                                                  => _offFirstInstance.GetValue();
	public int                                                 LastInstance                                                   => _offLastInstance.GetValue();
	public FVector                                             MinInstanceScale                                               => _offMinInstanceScale.GetValue();
	public FVector                                             MaxInstanceScale                                               => _offMaxInstanceScale.GetValue();
	#endregion

	public FClusterNode(FVector c_BoundMin, int c_FirstChild, FVector c_BoundMax, int c_LastChild, int c_FirstInstance, int c_LastInstance, FVector c_MinInstanceScale, FVector c_MaxInstanceScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoundMin.SetValue(c_BoundMin);
		_offFirstChild.SetValue(c_FirstChild);
		_offBoundMax.SetValue(c_BoundMax);
		_offLastChild.SetValue(c_LastChild);
		_offFirstInstance.SetValue(c_FirstInstance);
		_offLastInstance.SetValue(c_LastInstance);
		_offMinInstanceScale.SetValue(c_MinInstanceScale);
		_offMaxInstanceScale.SetValue(c_MaxInstanceScale);
	}
}
// ScriptStruct Engine.ClusterNode_DEPRECATED
// 0x0028
public class FClusterNode_DEPRECATED : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offBoundMin                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offFirstChild                                                 = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offBoundMax                                                   = new ExternalOffset<FVector>(0x0010, false);                  // 0x0010(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLastChild                                                  = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offFirstInstance                                              = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLastInstance                                               = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             BoundMin                                                       => _offBoundMin.GetValue();
	public int                                                 FirstChild                                                     => _offFirstChild.GetValue();
	public FVector                                             BoundMax                                                       => _offBoundMax.GetValue();
	public int                                                 LastChild                                                      => _offLastChild.GetValue();
	public int                                                 FirstInstance                                                  => _offFirstInstance.GetValue();
	public int                                                 LastInstance                                                   => _offLastInstance.GetValue();
	#endregion

	public FClusterNode_DEPRECATED(FVector c_BoundMin, int c_FirstChild, FVector c_BoundMax, int c_LastChild, int c_FirstInstance, int c_LastInstance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoundMin.SetValue(c_BoundMin);
		_offFirstChild.SetValue(c_FirstChild);
		_offBoundMax.SetValue(c_BoundMax);
		_offLastChild.SetValue(c_LastChild);
		_offFirstInstance.SetValue(c_FirstInstance);
		_offLastInstance.SetValue(c_LastInstance);
	}
}
// ScriptStruct Engine.HLODProxyMesh
// 0x0030
public class FHLODProxyMesh : ExternalClass
{
	#region Offsets
	private ExternalOffset<TLazyObjectPtr<ALODActor>>          _offLODActor                                                   = new ExternalOffset<TLazyObjectPtr<ALODActor>>(0x0000, false); // 0x0000(0x001C) (Edit, EditConst, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UStaticMesh>                        _offStaticMesh                                                 = new ExternalOffset<UStaticMesh>(0x0020, true);               // 0x0020(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                              _offKey                                                        = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TLazyObjectPtr<ALODActor>                           LODActor                                                       => _offLODActor.GetValue();
	public UStaticMesh                                         StaticMesh                                                     => _offStaticMesh.GetValue();
	public FName                                               Key                                                            => _offKey.GetValue();
	#endregion

	public FHLODProxyMesh(TLazyObjectPtr<ALODActor> c_LODActor, UStaticMesh c_StaticMesh, FName c_Key) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLODActor.SetValue(c_LODActor);
		_offStaticMesh.SetValue(c_StaticMesh);
		_offKey.SetValue(c_Key);
	}
}
// ScriptStruct Engine.SoundModulation
// 0x0010
public class FSoundModulation : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<USoundModulationPluginSourceSettingsBase>> _offSettings                                                   = new ExternalOffset<TArray<USoundModulationPluginSourceSettingsBase>>(0x0000, false); // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<USoundModulationPluginSourceSettingsBase>    Settings                                                       => _offSettings.GetValue();
	#endregion

	public FSoundModulation(TArray<USoundModulationPluginSourceSettingsBase> c_Settings) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSettings.SetValue(c_Settings);
	}
}
// ScriptStruct Engine.ImportanceTexture
// 0x0050
public class FImportanceTexture : ExternalClass
{
	#region Offsets
	private ExternalOffset<FIntPoint>                          _offSize                                                       = new ExternalOffset<FIntPoint>(0x0000, false);                // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNumMips                                                    = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offMarginalCDF                                                = new ExternalOffset<TArray<float>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offConditionalCDF                                             = new ExternalOffset<TArray<float>>(0x0020, false);            // 0x0020(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FColor>>                     _offTextureData                                                = new ExternalOffset<TArray<FColor>>(0x0030, false);           // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<UTexture2D>>         _offTexture                                                    = new ExternalOffset<TWeakObjectPtr<UTexture2D>>(0x0040, false); // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EImportanceWeight>>     _offWeighting                                                  = new ExternalOffset<TEnumAsByte<EImportanceWeight>>(0x0048, false); // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FIntPoint                                           Size                                                           => _offSize.GetValue();
	public int                                                 NumMips                                                        => _offNumMips.GetValue();
	public TArray<float>                                       MarginalCDF                                                    => _offMarginalCDF.GetValue();
	public TArray<float>                                       ConditionalCDF                                                 => _offConditionalCDF.GetValue();
	public TArray<FColor>                                      TextureData                                                    => _offTextureData.GetValue();
	public TWeakObjectPtr<UTexture2D>                          Texture                                                        => _offTexture.GetValue();
	public TEnumAsByte<EImportanceWeight>                      Weighting                                                      => _offWeighting.GetValue();
	#endregion

	public FImportanceTexture(FIntPoint c_Size, int c_NumMips, TArray<float> c_MarginalCDF, TArray<float> c_ConditionalCDF, TArray<FColor> c_TextureData, TWeakObjectPtr<UTexture2D> c_Texture, TEnumAsByte<EImportanceWeight> c_Weighting) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSize.SetValue(c_Size);
		_offNumMips.SetValue(c_NumMips);
		_offMarginalCDF.SetValue(c_MarginalCDF);
		_offConditionalCDF.SetValue(c_ConditionalCDF);
		_offTextureData.SetValue(c_TextureData);
		_offTexture.SetValue(c_Texture);
		_offWeighting.SetValue(c_Weighting);
	}
}
// ScriptStruct Engine.ComponentKey
// 0x0020
public class FComponentKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<UClass>                             _offOwnerClass                                                 = new ExternalOffset<UClass>(0x0000, true);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                              _offSCSVariableName                                            = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FGuid>                              _offAssociatedGuid                                             = new ExternalOffset<FGuid>(0x0010, false);                    // 0x0010(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UClass                                              OwnerClass                                                     => _offOwnerClass.GetValue();
	public FName                                               SCSVariableName                                                => _offSCSVariableName.GetValue();
	public FGuid                                               AssociatedGuid                                                 => _offAssociatedGuid.GetValue();
	#endregion

	public FComponentKey(UClass c_OwnerClass, FName c_SCSVariableName, FGuid c_AssociatedGuid) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOwnerClass.SetValue(c_OwnerClass);
		_offSCSVariableName.SetValue(c_SCSVariableName);
		_offAssociatedGuid.SetValue(c_AssociatedGuid);
	}
}
// ScriptStruct Engine.ComponentOverrideRecord
// 0x0080
public class FComponentOverrideRecord : ExternalClass
{
	#region Offsets
	private ExternalOffset<UClass>                             _offComponentClass                                             = new ExternalOffset<UClass>(0x0000, true);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UActorComponent>                    _offComponentTemplate                                          = new ExternalOffset<UActorComponent>(0x0008, true);           // 0x0008(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FComponentKey>                      _offComponentKey                                               = new ExternalOffset<FComponentKey>(0x0010, false);            // 0x0010(0x0020) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FBlueprintCookedComponentInstancingData> _offCookedComponentInstancingData                              = new ExternalOffset<FBlueprintCookedComponentInstancingData>(0x0030, false); // 0x0030(0x0050) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                              ComponentClass                                                 => _offComponentClass.GetValue();
	public UActorComponent                                     ComponentTemplate                                              => _offComponentTemplate.GetValue();
	public FComponentKey                                       ComponentKey                                                   => _offComponentKey.GetValue();
	public FBlueprintCookedComponentInstancingData             CookedComponentInstancingData                                  => _offCookedComponentInstancingData.GetValue();
	#endregion

	public FComponentOverrideRecord(UClass c_ComponentClass, UActorComponent c_ComponentTemplate, FComponentKey c_ComponentKey, FBlueprintCookedComponentInstancingData c_CookedComponentInstancingData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offComponentClass.SetValue(c_ComponentClass);
		_offComponentTemplate.SetValue(c_ComponentTemplate);
		_offComponentKey.SetValue(c_ComponentKey);
		_offCookedComponentInstancingData.SetValue(c_CookedComponentInstancingData);
	}
}
// ScriptStruct Engine.BlueprintInputDelegateBinding
// 0x0004
public class FBlueprintInputDelegateBinding : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbConsumeInput                                              = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbExecuteWhenPaused                                         = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideParentBinding                                     = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FBlueprintInputDelegateBinding() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.BlueprintInputActionDelegateBinding
// 0x0014 (0x0018 - 0x0004)
public class FBlueprintInputActionDelegateBinding : FBlueprintInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<FName>                              _offInputActionName                                            = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EInputEvent>>           _offInputKeyEvent                                              = new ExternalOffset<TEnumAsByte<EInputEvent>>(0x000C, false); // 0x000C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offFunctionNameToBind                                         = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               InputActionName                                                => _offInputActionName.GetValue();
	public TEnumAsByte<EInputEvent>                            InputKeyEvent                                                  => _offInputKeyEvent.GetValue();
	public FName                                               FunctionNameToBind                                             => _offFunctionNameToBind.GetValue();
	#endregion

	public FBlueprintInputActionDelegateBinding(FName c_InputActionName, TEnumAsByte<EInputEvent> c_InputKeyEvent, FName c_FunctionNameToBind) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInputActionName.SetValue(c_InputActionName);
		_offInputKeyEvent.SetValue(c_InputKeyEvent);
		_offFunctionNameToBind.SetValue(c_FunctionNameToBind);
	}
}
// ScriptStruct Engine.BlueprintInputAxisDelegateBinding
// 0x0010 (0x0014 - 0x0004)
public class FBlueprintInputAxisDelegateBinding : FBlueprintInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<FName>                              _offInputAxisName                                              = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offFunctionNameToBind                                         = new ExternalOffset<FName>(0x000C, false);                    // 0x000C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               InputAxisName                                                  => _offInputAxisName.GetValue();
	public FName                                               FunctionNameToBind                                             => _offFunctionNameToBind.GetValue();
	#endregion

	public FBlueprintInputAxisDelegateBinding(FName c_InputAxisName, FName c_FunctionNameToBind) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInputAxisName.SetValue(c_InputAxisName);
		_offFunctionNameToBind.SetValue(c_FunctionNameToBind);
	}
}
// ScriptStruct Engine.BlueprintInputAxisKeyDelegateBinding
// 0x0024 (0x0028 - 0x0004)
public class FBlueprintInputAxisKeyDelegateBinding : FBlueprintInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<FKey>                               _offAxisKey                                                    = new ExternalOffset<FKey>(0x0008, false);                     // 0x0008(0x0018) (HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offFunctionNameToBind                                         = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FKey                                                AxisKey                                                        => _offAxisKey.GetValue();
	public FName                                               FunctionNameToBind                                             => _offFunctionNameToBind.GetValue();
	#endregion

	public FBlueprintInputAxisKeyDelegateBinding(FKey c_AxisKey, FName c_FunctionNameToBind) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAxisKey.SetValue(c_AxisKey);
		_offFunctionNameToBind.SetValue(c_FunctionNameToBind);
	}
}
// ScriptStruct Engine.CachedKeyToActionInfo
// 0x0070
public class FCachedKeyToActionInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<UPlayerInput>                       _offPlayerInput                                                = new ExternalOffset<UPlayerInput>(0x0000, true);              // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayerInput                                        PlayerInput                                                    => _offPlayerInput.GetValue();
	#endregion

	public FCachedKeyToActionInfo(UPlayerInput c_PlayerInput) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayerInput.SetValue(c_PlayerInput);
	}
}
// ScriptStruct Engine.BlueprintInputKeyDelegateBinding
// 0x0034 (0x0038 - 0x0004)
public class FBlueprintInputKeyDelegateBinding : FBlueprintInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<FInputChord>                        _offInputChord                                                 = new ExternalOffset<FInputChord>(0x0008, false);              // 0x0008(0x0020) (HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EInputEvent>>           _offInputKeyEvent                                              = new ExternalOffset<TEnumAsByte<EInputEvent>>(0x0028, false); // 0x0028(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offFunctionNameToBind                                         = new ExternalOffset<FName>(0x002C, false);                    // 0x002C(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInputChord                                         InputChord                                                     => _offInputChord.GetValue();
	public TEnumAsByte<EInputEvent>                            InputKeyEvent                                                  => _offInputKeyEvent.GetValue();
	public FName                                               FunctionNameToBind                                             => _offFunctionNameToBind.GetValue();
	#endregion

	public FBlueprintInputKeyDelegateBinding(FInputChord c_InputChord, TEnumAsByte<EInputEvent> c_InputKeyEvent, FName c_FunctionNameToBind) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInputChord.SetValue(c_InputChord);
		_offInputKeyEvent.SetValue(c_InputKeyEvent);
		_offFunctionNameToBind.SetValue(c_FunctionNameToBind);
	}
}
// ScriptStruct Engine.SkelMeshComponentLODInfo
// 0x0028
public class FSkelMeshComponentLODInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<bool>>                       _offHiddenMaterials                                            = new ExternalOffset<TArray<bool>>(0x0000, false);             // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<bool>                                        HiddenMaterials                                                => _offHiddenMaterials.GetValue();
	#endregion

	public FSkelMeshComponentLODInfo(TArray<bool> c_HiddenMaterials) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offHiddenMaterials.SetValue(c_HiddenMaterials);
	}
}
// ScriptStruct Engine.BlueprintInputTouchDelegateBinding
// 0x000C (0x0010 - 0x0004)
public class FBlueprintInputTouchDelegateBinding : FBlueprintInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EInputEvent>>           _offInputKeyEvent                                              = new ExternalOffset<TEnumAsByte<EInputEvent>>(0x0004, false); // 0x0004(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offFunctionNameToBind                                         = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EInputEvent>                            InputKeyEvent                                                  => _offInputKeyEvent.GetValue();
	public FName                                               FunctionNameToBind                                             => _offFunctionNameToBind.GetValue();
	#endregion

	public FBlueprintInputTouchDelegateBinding(TEnumAsByte<EInputEvent> c_InputKeyEvent, FName c_FunctionNameToBind) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInputKeyEvent.SetValue(c_InputKeyEvent);
		_offFunctionNameToBind.SetValue(c_FunctionNameToBind);
	}
}
// ScriptStruct Engine.InstancedStaticMeshLightMapInstanceData
// 0x0040
public class FInstancedStaticMeshLightMapInstanceData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FTransform>                         _offTransform                                                  = new ExternalOffset<FTransform>(0x0000, false);               // 0x0000(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FGuid>>                      _offMapBuildDataIds                                            = new ExternalOffset<TArray<FGuid>>(0x0030, false);            // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FTransform                                          Transform                                                      => _offTransform.GetValue();
	public TArray<FGuid>                                       MapBuildDataIds                                                => _offMapBuildDataIds.GetValue();
	#endregion

	public FInstancedStaticMeshLightMapInstanceData(FTransform c_Transform, TArray<FGuid> c_MapBuildDataIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTransform.SetValue(c_Transform);
		_offMapBuildDataIds.SetValue(c_MapBuildDataIds);
	}
}
// ScriptStruct Engine.InstancedStaticMeshInstanceData
// 0x0040
public class FInstancedStaticMeshInstanceData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMatrix>                            _offTransform                                                  = new ExternalOffset<FMatrix>(0x0000, false);                  // 0x0000(0x0040) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMatrix                                             Transform                                                      => _offTransform.GetValue();
	#endregion

	public FInstancedStaticMeshInstanceData(FMatrix c_Transform) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTransform.SetValue(c_Transform);
	}
}
// ScriptStruct Engine.SkelMeshSkinWeightInfo
// 0x0028
public class FSkelMeshSkinWeightInfo : ExternalClass
{
	#region Offsets
//	private ExternalOffset<int>                                _offBones[0x8]                                                 = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offWeights[0x8]                                               = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FSkelMeshSkinWeightInfo() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.InstancedStaticMeshComponentInstanceData
// 0x0088 (0x0130 - 0x00A8)
public class FInstancedStaticMeshComponentInstanceData : FSceneComponentInstanceData
{
	#region Offsets
	private ExternalOffset<UStaticMesh>                        _offStaticMesh                                                 = new ExternalOffset<UStaticMesh>(0x00A8, true);               // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInstancedStaticMeshLightMapInstanceData> _offCachedStaticLighting                                       = new ExternalOffset<FInstancedStaticMeshLightMapInstanceData>(0x00B0, false); // 0x00B0(0x0040) (NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FInstancedStaticMeshInstanceData>> _offPerInstanceSMData                                          = new ExternalOffset<TArray<FInstancedStaticMeshInstanceData>>(0x00F0, false); // 0x00F0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offInstancingRandomSeed                                       = new ExternalOffset<int>(0x0120);                             // 0x0120(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UStaticMesh                                         StaticMesh                                                     => _offStaticMesh.GetValue();
	public FInstancedStaticMeshLightMapInstanceData            CachedStaticLighting                                           => _offCachedStaticLighting.GetValue();
	public TArray<FInstancedStaticMeshInstanceData>            PerInstanceSMData                                              => _offPerInstanceSMData.GetValue();
	public int                                                 InstancingRandomSeed                                           => _offInstancingRandomSeed.GetValue();
	#endregion

	public FInstancedStaticMeshComponentInstanceData(UStaticMesh c_StaticMesh, FInstancedStaticMeshLightMapInstanceData c_CachedStaticLighting, TArray<FInstancedStaticMeshInstanceData> c_PerInstanceSMData, int c_InstancingRandomSeed) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStaticMesh.SetValue(c_StaticMesh);
		_offCachedStaticLighting.SetValue(c_CachedStaticLighting);
		_offPerInstanceSMData.SetValue(c_PerInstanceSMData);
		_offInstancingRandomSeed.SetValue(c_InstancingRandomSeed);
	}
}
// ScriptStruct Engine.InstancedStaticMeshMappingInfo
// 0x0008
public class FInstancedStaticMeshMappingInfo : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FInstancedStaticMeshMappingInfo() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.IntegralKey
// 0x0008
public class FIntegralKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offValue                                                      = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public int                                                 Value                                                          => _offValue.GetValue();
	#endregion

	public FIntegralKey(float c_Time, int c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct Engine.IntegralCurve
// 0x0018 (0x0080 - 0x0068)
public class FIntegralCurve : FIndexedCurve
{
	#region Offsets
	private ExternalOffset<TArray<FIntegralKey>>               _offKeys                                                       = new ExternalOffset<TArray<FIntegralKey>>(0x0068, false);     // 0x0068(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                                _offDefaultValue                                               = new ExternalOffset<int>(0x0078);                             // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                     _offbUseDefaultValueBeforeFirstKey                             = new ExternalOffset<byte/*(bool)*/>(0x007C);                  // 0x007C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FIntegralKey>                                Keys                                                           => _offKeys.GetValue();
	public int                                                 DefaultValue                                                   => _offDefaultValue.GetValue();
	public byte/*(bool)*/                                      bUseDefaultValueBeforeFirstKey                                 => _offbUseDefaultValueBeforeFirstKey.GetValue();
	#endregion

	public FIntegralCurve(TArray<FIntegralKey> c_Keys, int c_DefaultValue, byte/*(bool)*/ c_bUseDefaultValueBeforeFirstKey) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeys.SetValue(c_Keys);
		_offDefaultValue.SetValue(c_DefaultValue);
		_offbUseDefaultValueBeforeFirstKey.SetValue(c_bUseDefaultValueBeforeFirstKey);
	}
}
// ScriptStruct Engine.CurveEdEntry
// 0x0038
public class FCurveEdEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<UObject>                            _offCurveObject                                                = new ExternalOffset<UObject>(0x0000, true);                   // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offCurveColor                                                 = new ExternalOffset<FColor>(0x0008, false);                   // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCurveName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offbHideCurve                                                 = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offbColorCurve                                                = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offbFloatingPointColorCurve                                   = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offbClamp                                                     = new ExternalOffset<int>(0x002C);                             // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offClampLow                                                   = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offClampHigh                                                  = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UObject                                             CurveObject                                                    => _offCurveObject.GetValue();
	public FColor                                              CurveColor                                                     => _offCurveColor.GetValue();
	public FString                                             CurveName                                                      => _offCurveName.GetValue();
	public int                                                 bHideCurve                                                     => _offbHideCurve.GetValue();
	public int                                                 bColorCurve                                                    => _offbColorCurve.GetValue();
	public int                                                 bFloatingPointColorCurve                                       => _offbFloatingPointColorCurve.GetValue();
	public int                                                 bClamp                                                         => _offbClamp.GetValue();
	public float                                               ClampLow                                                       => _offClampLow.GetValue();
	public float                                               ClampHigh                                                      => _offClampHigh.GetValue();
	#endregion

	public FCurveEdEntry(UObject c_CurveObject, FColor c_CurveColor, FString c_CurveName, int c_bHideCurve, int c_bColorCurve, int c_bFloatingPointColorCurve, int c_bClamp, float c_ClampLow, float c_ClampHigh) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCurveObject.SetValue(c_CurveObject);
		_offCurveColor.SetValue(c_CurveColor);
		_offCurveName.SetValue(c_CurveName);
		_offbHideCurve.SetValue(c_bHideCurve);
		_offbColorCurve.SetValue(c_bColorCurve);
		_offbFloatingPointColorCurve.SetValue(c_bFloatingPointColorCurve);
		_offbClamp.SetValue(c_bClamp);
		_offClampLow.SetValue(c_ClampLow);
		_offClampHigh.SetValue(c_ClampHigh);
	}
}
// ScriptStruct Engine.CurveEdTab
// 0x0030
public class FCurveEdTab : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offTabName                                                    = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FCurveEdEntry>>              _offCurves                                                     = new ExternalOffset<TArray<FCurveEdEntry>>(0x0010, false);    // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offViewStartInput                                             = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offViewEndInput                                               = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offViewStartOutput                                            = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offViewEndOutput                                              = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TabName                                                        => _offTabName.GetValue();
	public TArray<FCurveEdEntry>                               Curves                                                         => _offCurves.GetValue();
	public float                                               ViewStartInput                                                 => _offViewStartInput.GetValue();
	public float                                               ViewEndInput                                                   => _offViewEndInput.GetValue();
	public float                                               ViewStartOutput                                                => _offViewStartOutput.GetValue();
	public float                                               ViewEndOutput                                                  => _offViewEndOutput.GetValue();
	#endregion

	public FCurveEdTab(FString c_TabName, TArray<FCurveEdEntry> c_Curves, float c_ViewStartInput, float c_ViewEndInput, float c_ViewStartOutput, float c_ViewEndOutput) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTabName.SetValue(c_TabName);
		_offCurves.SetValue(c_Curves);
		_offViewStartInput.SetValue(c_ViewStartInput);
		_offViewEndInput.SetValue(c_ViewEndInput);
		_offViewStartOutput.SetValue(c_ViewStartOutput);
		_offViewEndOutput.SetValue(c_ViewEndOutput);
	}
}
// ScriptStruct Engine.InterpEdSelKey
// 0x0018
public class FInterpEdSelKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<UInterpGroup>                       _offGroup                                                      = new ExternalOffset<UInterpGroup>(0x0000, true);              // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpTrack>                       _offTrack                                                      = new ExternalOffset<UInterpTrack>(0x0008, true);              // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offKeyIndex                                                   = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offUnsnappedPosition                                          = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UInterpGroup                                        Group                                                          => _offGroup.GetValue();
	public UInterpTrack                                        Track                                                          => _offTrack.GetValue();
	public int                                                 KeyIndex                                                       => _offKeyIndex.GetValue();
	public float                                               UnsnappedPosition                                              => _offUnsnappedPosition.GetValue();
	#endregion

	public FInterpEdSelKey(UInterpGroup c_Group, UInterpTrack c_Track, int c_KeyIndex, float c_UnsnappedPosition) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
		_offTrack.SetValue(c_Track);
		_offKeyIndex.SetValue(c_KeyIndex);
		_offUnsnappedPosition.SetValue(c_UnsnappedPosition);
	}
}
// ScriptStruct Engine.CameraPreviewInfo
// 0x0030
public class FCameraPreviewInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<UClass>                             _offPawnClass                                                  = new ExternalOffset<UClass>(0x0000, true);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimSequence>                      _offAnimSeq                                                    = new ExternalOffset<UAnimSequence>(0x0008, true);             // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offLocation                                                   = new ExternalOffset<FVector>(0x0010, false);                  // 0x0010(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x001C, false);                 // 0x001C(0x000C) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<APawn>                              _offPawnInst                                                   = new ExternalOffset<APawn>(0x0028, true);                     // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                              PawnClass                                                      => _offPawnClass.GetValue();
	public UAnimSequence                                       AnimSeq                                                        => _offAnimSeq.GetValue();
	public FVector                                             Location                                                       => _offLocation.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public APawn                                               PawnInst                                                       => _offPawnInst.GetValue();
	#endregion

	public FCameraPreviewInfo(UClass c_PawnClass, UAnimSequence c_AnimSeq, FVector c_Location, FRotator c_Rotation, APawn c_PawnInst) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPawnClass.SetValue(c_PawnClass);
		_offAnimSeq.SetValue(c_AnimSeq);
		_offLocation.SetValue(c_Location);
		_offRotation.SetValue(c_Rotation);
		_offPawnInst.SetValue(c_PawnInst);
	}
}
// ScriptStruct Engine.SubTrackGroup
// 0x0028
public class FSubTrackGroup : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offGroupName                                                  = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offTrackIndices                                               = new ExternalOffset<TArray<int>>(0x0010, false);              // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsCollapsed                                               = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsSelected                                                = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             GroupName                                                      => _offGroupName.GetValue();
	public TArray<int>                                         TrackIndices                                                   => _offTrackIndices.GetValue();
	#endregion

	public FSubTrackGroup(FString c_GroupName, TArray<int> c_TrackIndices) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroupName.SetValue(c_GroupName);
		_offTrackIndices.SetValue(c_TrackIndices);
	}
}
// ScriptStruct Engine.SupportedSubTrackInfo
// 0x0020
public class FSupportedSubTrackInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<UClass>                             _offSupportedClass                                             = new ExternalOffset<UClass>(0x0000, true);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSubTrackName                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offGroupIndex                                                 = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                              SupportedClass                                                 => _offSupportedClass.GetValue();
	public FString                                             SubTrackName                                                   => _offSubTrackName.GetValue();
	public int                                                 GroupIndex                                                     => _offGroupIndex.GetValue();
	#endregion

	public FSupportedSubTrackInfo(UClass c_SupportedClass, FString c_SubTrackName, int c_GroupIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSupportedClass.SetValue(c_SupportedClass);
		_offSubTrackName.SetValue(c_SubTrackName);
		_offGroupIndex.SetValue(c_GroupIndex);
	}
}
// ScriptStruct Engine.AnimControlTrackKey
// 0x0020
public class FAnimControlTrackKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offStartTime                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimSequence>                      _offAnimSeq                                                    = new ExternalOffset<UAnimSequence>(0x0008, true);             // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAnimStartOffset                                            = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAnimEndOffset                                              = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAnimPlayRate                                               = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLooping                                                   = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbReverse                                                   = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               StartTime                                                      => _offStartTime.GetValue();
	public UAnimSequence                                       AnimSeq                                                        => _offAnimSeq.GetValue();
	public float                                               AnimStartOffset                                                => _offAnimStartOffset.GetValue();
	public float                                               AnimEndOffset                                                  => _offAnimEndOffset.GetValue();
	public float                                               AnimPlayRate                                                   => _offAnimPlayRate.GetValue();
	#endregion

	public FAnimControlTrackKey(float c_StartTime, UAnimSequence c_AnimSeq, float c_AnimStartOffset, float c_AnimEndOffset, float c_AnimPlayRate) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStartTime.SetValue(c_StartTime);
		_offAnimSeq.SetValue(c_AnimSeq);
		_offAnimStartOffset.SetValue(c_AnimStartOffset);
		_offAnimEndOffset.SetValue(c_AnimEndOffset);
		_offAnimPlayRate.SetValue(c_AnimPlayRate);
	}
}
// ScriptStruct Engine.BoolTrackKey
// 0x0008
public class FBoolTrackKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offValue                                                      = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	#endregion

	public FBoolTrackKey(float c_Time) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
	}
}
// ScriptStruct Engine.DirectorTrackCut
// 0x0014
public class FDirectorTrackCut : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTransitionTime                                             = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offTargetCamGroup                                             = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offShotNumber                                                 = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public float                                               TransitionTime                                                 => _offTransitionTime.GetValue();
	public FName                                               TargetCamGroup                                                 => _offTargetCamGroup.GetValue();
	public int                                                 ShotNumber                                                     => _offShotNumber.GetValue();
	#endregion

	public FDirectorTrackCut(float c_Time, float c_TransitionTime, FName c_TargetCamGroup, int c_ShotNumber) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offTransitionTime.SetValue(c_TransitionTime);
		_offTargetCamGroup.SetValue(c_TargetCamGroup);
		_offShotNumber.SetValue(c_ShotNumber);
	}
}
// ScriptStruct Engine.EventTrackKey
// 0x000C
public class FEventTrackKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offEventName                                                  = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public FName                                               EventName                                                      => _offEventName.GetValue();
	#endregion

	public FEventTrackKey(float c_Time, FName c_EventName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offEventName.SetValue(c_EventName);
	}
}
// ScriptStruct Engine.InterpLookupPoint
// 0x000C
public class FInterpLookupPoint : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offGroupName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               GroupName                                                      => _offGroupName.GetValue();
	public float                                               Time                                                           => _offTime.GetValue();
	#endregion

	public FInterpLookupPoint(FName c_GroupName, float c_Time) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroupName.SetValue(c_GroupName);
		_offTime.SetValue(c_Time);
	}
}
// ScriptStruct Engine.InterpLookupTrack
// 0x0010
public class FInterpLookupTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FInterpLookupPoint>>         _offPoints                                                     = new ExternalOffset<TArray<FInterpLookupPoint>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FInterpLookupPoint>                          Points                                                         => _offPoints.GetValue();
	#endregion

	public FInterpLookupTrack(TArray<FInterpLookupPoint> c_Points) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPoints.SetValue(c_Points);
	}
}
// ScriptStruct Engine.ParticleReplayTrackKey
// 0x000C
public class FParticleReplayTrackKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDuration                                                   = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offClipIDNumber                                               = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public float                                               Duration                                                       => _offDuration.GetValue();
	public int                                                 ClipIDNumber                                                   => _offClipIDNumber.GetValue();
	#endregion

	public FParticleReplayTrackKey(float c_Time, float c_Duration, int c_ClipIDNumber) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offDuration.SetValue(c_Duration);
		_offClipIDNumber.SetValue(c_ClipIDNumber);
	}
}
// ScriptStruct Engine.SoundTrackKey
// 0x0018
public class FSoundTrackKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolume                                                     = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPitch                                                      = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundBase>                         _offSound                                                      = new ExternalOffset<USoundBase>(0x0010, true);                // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public float                                               Volume                                                         => _offVolume.GetValue();
	public float                                               Pitch                                                          => _offPitch.GetValue();
	public USoundBase                                          Sound                                                          => _offSound.GetValue();
	#endregion

	public FSoundTrackKey(float c_Time, float c_Volume, float c_Pitch, USoundBase c_Sound) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offVolume.SetValue(c_Volume);
		_offPitch.SetValue(c_Pitch);
		_offSound.SetValue(c_Sound);
	}
}
// ScriptStruct Engine.ToggleTrackKey
// 0x0008
public class FToggleTrackKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETrackToggleAction>>    _offToggleAction                                               = new ExternalOffset<TEnumAsByte<ETrackToggleAction>>(0x0004, false); // 0x0004(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public TEnumAsByte<ETrackToggleAction>                     ToggleAction                                                   => _offToggleAction.GetValue();
	#endregion

	public FToggleTrackKey(float c_Time, TEnumAsByte<ETrackToggleAction> c_ToggleAction) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offToggleAction.SetValue(c_ToggleAction);
	}
}
// ScriptStruct Engine.VisibilityTrackKey
// 0x0008
public class FVisibilityTrackKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EVisibilityTrackAction>> _offAction                                                     = new ExternalOffset<TEnumAsByte<EVisibilityTrackAction>>(0x0004, false); // 0x0004(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EVisibilityTrackCondition>> _offActiveCondition                                            = new ExternalOffset<TEnumAsByte<EVisibilityTrackCondition>>(0x0005, false); // 0x0005(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public TEnumAsByte<EVisibilityTrackAction>                 Action                                                         => _offAction.GetValue();
	public TEnumAsByte<EVisibilityTrackCondition>              ActiveCondition                                                => _offActiveCondition.GetValue();
	#endregion

	public FVisibilityTrackKey(float c_Time, TEnumAsByte<EVisibilityTrackAction> c_Action, TEnumAsByte<EVisibilityTrackCondition> c_ActiveCondition) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offAction.SetValue(c_Action);
		_offActiveCondition.SetValue(c_ActiveCondition);
	}
}
// ScriptStruct Engine.VectorSpringState
// 0x0018
public class FVectorSpringState : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FVectorSpringState() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.FloatSpringState
// 0x0008
public class FFloatSpringState : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FFloatSpringState() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.DrawToRenderTargetContext
// 0x0010
public class FDrawToRenderTargetContext : ExternalClass
{
	#region Offsets
	private ExternalOffset<UTextureRenderTarget2D>             _offRenderTarget                                               = new ExternalOffset<UTextureRenderTarget2D>(0x0000, true);    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTextureRenderTarget2D                              RenderTarget                                                   => _offRenderTarget.GetValue();
	#endregion

	public FDrawToRenderTargetContext(UTextureRenderTarget2D c_RenderTarget) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRenderTarget.SetValue(c_RenderTarget);
	}
}
// ScriptStruct Engine.LatentActionManager
// 0x0060
public class FLatentActionManager : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FLatentActionManager() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.LayerActorStats
// 0x0010
public class FLayerActorStats : ExternalClass
{
	#region Offsets
	private ExternalOffset<UClass>                             _offType                                                       = new ExternalOffset<UClass>(0x0000, true);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTotal                                                      = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                              Type                                                           => _offType.GetValue();
	public int                                                 Total                                                          => _offTotal.GetValue();
	#endregion

	public FLayerActorStats(UClass c_Type, int c_Total) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offType.SetValue(c_Type);
		_offTotal.SetValue(c_Total);
	}
}
// ScriptStruct Engine.ReplicatedStaticActorDestructionInfo
// 0x0038
public class FReplicatedStaticActorDestructionInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<UClass>                             _offObjClass                                                   = new ExternalOffset<UClass>(0x0030, true);                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                              ObjClass                                                       => _offObjClass.GetValue();
	#endregion

	public FReplicatedStaticActorDestructionInfo(UClass c_ObjClass) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offObjClass.SetValue(c_ObjClass);
	}
}
// ScriptStruct Engine.SingleAnimationPlayData
// 0x0018
public class FSingleAnimationPlayData : ExternalClass
{
	#region Offsets
	private ExternalOffset<UAnimationAsset>                    _offAnimToPlay                                                 = new ExternalOffset<UAnimationAsset>(0x0000, true);           // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSavedLooping                                              = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSavedPlaying                                              = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSavedPosition                                              = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSavedPlayRate                                              = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimationAsset                                     AnimToPlay                                                     => _offAnimToPlay.GetValue();
	public float                                               SavedPosition                                                  => _offSavedPosition.GetValue();
	public float                                               SavedPlayRate                                                  => _offSavedPlayRate.GetValue();
	#endregion

	public FSingleAnimationPlayData(UAnimationAsset c_AnimToPlay, float c_SavedPosition, float c_SavedPlayRate) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAnimToPlay.SetValue(c_AnimToPlay);
		_offSavedPosition.SetValue(c_SavedPosition);
		_offSavedPlayRate.SetValue(c_SavedPlayRate);
	}
}
// ScriptStruct Engine.LevelSimplificationDetails
// 0x0104
public class FLevelSimplificationDetails : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbCreatePackagePerAsset                                     = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDetailsPercentage                                          = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialProxySettings>             _offStaticMeshMaterialSettings                                 = new ExternalOffset<FMaterialProxySettings>(0x0008, false);   // 0x0008(0x0074) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbOverrideLandscapeExportLOD                                = new ExternalOffset<byte/*(bool)*/>(0x007C);                  // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLandscapeExportLOD                                         = new ExternalOffset<int>(0x0080);                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialProxySettings>             _offLandscapeMaterialSettings                                  = new ExternalOffset<FMaterialProxySettings>(0x0084, false);   // 0x0084(0x0074) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbBakeFoliageToLandscape                                    = new ExternalOffset<byte/*(bool)*/>(0x00F8);                  // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbBakeGrassToLandscape                                      = new ExternalOffset<byte/*(bool)*/>(0x00F9);                  // 0x00F9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbGenerateMeshNormalMap                                     = new ExternalOffset<byte/*(bool)*/>(0x00FA);                  // 0x00FA(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbGenerateMeshMetallicMap                                   = new ExternalOffset<byte/*(bool)*/>(0x00FB);                  // 0x00FB(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbGenerateMeshRoughnessMap                                  = new ExternalOffset<byte/*(bool)*/>(0x00FC);                  // 0x00FC(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbGenerateMeshSpecularMap                                   = new ExternalOffset<byte/*(bool)*/>(0x00FD);                  // 0x00FD(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbGenerateLandscapeNormalMap                                = new ExternalOffset<byte/*(bool)*/>(0x00FE);                  // 0x00FE(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbGenerateLandscapeMetallicMap                              = new ExternalOffset<byte/*(bool)*/>(0x00FF);                  // 0x00FF(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbGenerateLandscapeRoughnessMap                             = new ExternalOffset<byte/*(bool)*/>(0x0100);                  // 0x0100(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbGenerateLandscapeSpecularMap                              = new ExternalOffset<byte/*(bool)*/>(0x0101);                  // 0x0101(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bCreatePackagePerAsset                                         => _offbCreatePackagePerAsset.GetValue();
	public float                                               DetailsPercentage                                              => _offDetailsPercentage.GetValue();
	public FMaterialProxySettings                              StaticMeshMaterialSettings                                     => _offStaticMeshMaterialSettings.GetValue();
	public byte/*(bool)*/                                      bOverrideLandscapeExportLOD                                    => _offbOverrideLandscapeExportLOD.GetValue();
	public int                                                 LandscapeExportLOD                                             => _offLandscapeExportLOD.GetValue();
	public FMaterialProxySettings                              LandscapeMaterialSettings                                      => _offLandscapeMaterialSettings.GetValue();
	public byte/*(bool)*/                                      bBakeFoliageToLandscape                                        => _offbBakeFoliageToLandscape.GetValue();
	public byte/*(bool)*/                                      bBakeGrassToLandscape                                          => _offbBakeGrassToLandscape.GetValue();
	public byte/*(bool)*/                                      bGenerateMeshNormalMap                                         => _offbGenerateMeshNormalMap.GetValue();
	public byte/*(bool)*/                                      bGenerateMeshMetallicMap                                       => _offbGenerateMeshMetallicMap.GetValue();
	public byte/*(bool)*/                                      bGenerateMeshRoughnessMap                                      => _offbGenerateMeshRoughnessMap.GetValue();
	public byte/*(bool)*/                                      bGenerateMeshSpecularMap                                       => _offbGenerateMeshSpecularMap.GetValue();
	public byte/*(bool)*/                                      bGenerateLandscapeNormalMap                                    => _offbGenerateLandscapeNormalMap.GetValue();
	public byte/*(bool)*/                                      bGenerateLandscapeMetallicMap                                  => _offbGenerateLandscapeMetallicMap.GetValue();
	public byte/*(bool)*/                                      bGenerateLandscapeRoughnessMap                                 => _offbGenerateLandscapeRoughnessMap.GetValue();
	public byte/*(bool)*/                                      bGenerateLandscapeSpecularMap                                  => _offbGenerateLandscapeSpecularMap.GetValue();
	#endregion

	public FLevelSimplificationDetails(byte/*(bool)*/ c_bCreatePackagePerAsset, float c_DetailsPercentage, FMaterialProxySettings c_StaticMeshMaterialSettings, byte/*(bool)*/ c_bOverrideLandscapeExportLOD, int c_LandscapeExportLOD, FMaterialProxySettings c_LandscapeMaterialSettings, byte/*(bool)*/ c_bBakeFoliageToLandscape, byte/*(bool)*/ c_bBakeGrassToLandscape, byte/*(bool)*/ c_bGenerateMeshNormalMap, byte/*(bool)*/ c_bGenerateMeshMetallicMap, byte/*(bool)*/ c_bGenerateMeshRoughnessMap, byte/*(bool)*/ c_bGenerateMeshSpecularMap, byte/*(bool)*/ c_bGenerateLandscapeNormalMap, byte/*(bool)*/ c_bGenerateLandscapeMetallicMap, byte/*(bool)*/ c_bGenerateLandscapeRoughnessMap, byte/*(bool)*/ c_bGenerateLandscapeSpecularMap) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbCreatePackagePerAsset.SetValue(c_bCreatePackagePerAsset);
		_offDetailsPercentage.SetValue(c_DetailsPercentage);
		_offStaticMeshMaterialSettings.SetValue(c_StaticMeshMaterialSettings);
		_offbOverrideLandscapeExportLOD.SetValue(c_bOverrideLandscapeExportLOD);
		_offLandscapeExportLOD.SetValue(c_LandscapeExportLOD);
		_offLandscapeMaterialSettings.SetValue(c_LandscapeMaterialSettings);
		_offbBakeFoliageToLandscape.SetValue(c_bBakeFoliageToLandscape);
		_offbBakeGrassToLandscape.SetValue(c_bBakeGrassToLandscape);
		_offbGenerateMeshNormalMap.SetValue(c_bGenerateMeshNormalMap);
		_offbGenerateMeshMetallicMap.SetValue(c_bGenerateMeshMetallicMap);
		_offbGenerateMeshRoughnessMap.SetValue(c_bGenerateMeshRoughnessMap);
		_offbGenerateMeshSpecularMap.SetValue(c_bGenerateMeshSpecularMap);
		_offbGenerateLandscapeNormalMap.SetValue(c_bGenerateLandscapeNormalMap);
		_offbGenerateLandscapeMetallicMap.SetValue(c_bGenerateLandscapeMetallicMap);
		_offbGenerateLandscapeRoughnessMap.SetValue(c_bGenerateLandscapeRoughnessMap);
		_offbGenerateLandscapeSpecularMap.SetValue(c_bGenerateLandscapeSpecularMap);
	}
}
// ScriptStruct Engine.StreamableTextureInstance
// 0x0028
public class FStreamableTextureInstance : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FStreamableTextureInstance() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.PoseSnapshot
// 0x0038
public class FPoseSnapshot : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FTransform>>                 _offLocalTransforms                                            = new ExternalOffset<TArray<FTransform>>(0x0000, false);       // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offBoneNames                                                  = new ExternalOffset<TArray<FName>>(0x0010, false);            // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offSkeletalMeshName                                           = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offSnapshotName                                               = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbIsValid                                                   = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FTransform>                                  LocalTransforms                                                => _offLocalTransforms.GetValue();
	public TArray<FName>                                       BoneNames                                                      => _offBoneNames.GetValue();
	public FName                                               SkeletalMeshName                                               => _offSkeletalMeshName.GetValue();
	public FName                                               SnapshotName                                                   => _offSnapshotName.GetValue();
	public byte/*(bool)*/                                      bIsValid                                                       => _offbIsValid.GetValue();
	#endregion

	public FPoseSnapshot(TArray<FTransform> c_LocalTransforms, TArray<FName> c_BoneNames, FName c_SkeletalMeshName, FName c_SnapshotName, byte/*(bool)*/ c_bIsValid) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocalTransforms.SetValue(c_LocalTransforms);
		_offBoneNames.SetValue(c_BoneNames);
		_offSkeletalMeshName.SetValue(c_SkeletalMeshName);
		_offSnapshotName.SetValue(c_SnapshotName);
		_offbIsValid.SetValue(c_bIsValid);
	}
}
// ScriptStruct Engine.DynamicTextureInstance
// 0x0010 (0x0038 - 0x0028)
public class FDynamicTextureInstance : FStreamableTextureInstance
{
	#region Offsets
	private ExternalOffset<UTexture2D>                         _offTexture                                                    = new ExternalOffset<UTexture2D>(0x0028, true);                // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbAttached                                                  = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOriginalRadius                                             = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTexture2D                                          Texture                                                        => _offTexture.GetValue();
	public byte/*(bool)*/                                      bAttached                                                      => _offbAttached.GetValue();
	public float                                               OriginalRadius                                                 => _offOriginalRadius.GetValue();
	#endregion

	public FDynamicTextureInstance(UTexture2D c_Texture, byte/*(bool)*/ c_bAttached, float c_OriginalRadius) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTexture.SetValue(c_Texture);
		_offbAttached.SetValue(c_bAttached);
		_offOriginalRadius.SetValue(c_OriginalRadius);
	}
}
// ScriptStruct Engine.PrecomputedLightInstanceData
// 0x0058 (0x0100 - 0x00A8)
public class FPrecomputedLightInstanceData : FSceneComponentInstanceData
{
	#region Offsets
	private ExternalOffset<FTransform>                         _offTransform                                                  = new ExternalOffset<FTransform>(0x00B0, false);               // 0x00B0(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offLightGuid                                                  = new ExternalOffset<FGuid>(0x00E0, false);                    // 0x00E0(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPreviewShadowMapChannel                                    = new ExternalOffset<int>(0x00F0);                             // 0x00F0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FTransform                                          Transform                                                      => _offTransform.GetValue();
	public FGuid                                               LightGuid                                                      => _offLightGuid.GetValue();
	public int                                                 PreviewShadowMapChannel                                        => _offPreviewShadowMapChannel.GetValue();
	#endregion

	public FPrecomputedLightInstanceData(FTransform c_Transform, FGuid c_LightGuid, int c_PreviewShadowMapChannel) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTransform.SetValue(c_Transform);
		_offLightGuid.SetValue(c_LightGuid);
		_offPreviewShadowMapChannel.SetValue(c_PreviewShadowMapChannel);
	}
}
// ScriptStruct Engine.BatchedPoint
// 0x0028
public class FBatchedPoint : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offPosition                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offColor                                                      = new ExternalOffset<FLinearColor>(0x000C, false);             // 0x000C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPointSize                                                  = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRemainingLifeTime                                          = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offDepthPriority                                              = new ExternalOffset<char>(0x0024, false);                     // 0x0024(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Position                                                       => _offPosition.GetValue();
	public FLinearColor                                        Color                                                          => _offColor.GetValue();
	public float                                               PointSize                                                      => _offPointSize.GetValue();
	public float                                               RemainingLifeTime                                              => _offRemainingLifeTime.GetValue();
	#endregion

	public FBatchedPoint(FVector c_Position, FLinearColor c_Color, float c_PointSize, float c_RemainingLifeTime) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPosition.SetValue(c_Position);
		_offColor.SetValue(c_Color);
		_offPointSize.SetValue(c_PointSize);
		_offRemainingLifeTime.SetValue(c_RemainingLifeTime);
	}
}
// ScriptStruct Engine.BatchedLine
// 0x0034
public class FBatchedLine : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offStart                                                      = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offEnd                                                        = new ExternalOffset<FVector>(0x000C, false);                  // 0x000C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offColor                                                      = new ExternalOffset<FLinearColor>(0x0018, false);             // 0x0018(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offThickness                                                  = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRemainingLifeTime                                          = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offDepthPriority                                              = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Start                                                          => _offStart.GetValue();
	public FVector                                             End                                                            => _offEnd.GetValue();
	public FLinearColor                                        Color                                                          => _offColor.GetValue();
	public float                                               Thickness                                                      => _offThickness.GetValue();
	public float                                               RemainingLifeTime                                              => _offRemainingLifeTime.GetValue();
	#endregion

	public FBatchedLine(FVector c_Start, FVector c_End, FLinearColor c_Color, float c_Thickness, float c_RemainingLifeTime) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStart.SetValue(c_Start);
		_offEnd.SetValue(c_End);
		_offColor.SetValue(c_Color);
		_offThickness.SetValue(c_Thickness);
		_offRemainingLifeTime.SetValue(c_RemainingLifeTime);
	}
}
// ScriptStruct Engine.ClientReceiveData
// 0x0040
public class FClientReceiveData : ExternalClass
{
	#region Offsets
	private ExternalOffset<APlayerController>                  _offLocalPC                                                    = new ExternalOffset<APlayerController>(0x0000, true);         // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offMessageType                                                = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMessageIndex                                               = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMessageString                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APlayerState>                       _offRelatedPlayerState_2                                       = new ExternalOffset<APlayerState>(0x0028, true);              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APlayerState>                       _offRelatedPlayerState_3                                       = new ExternalOffset<APlayerState>(0x0030, true);              // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                            _offOptionalObject                                             = new ExternalOffset<UObject>(0x0038, true);                   // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public APlayerController                                   LocalPC                                                        => _offLocalPC.GetValue();
	public FName                                               MessageType                                                    => _offMessageType.GetValue();
	public int                                                 MessageIndex                                                   => _offMessageIndex.GetValue();
	public FString                                             MessageString                                                  => _offMessageString.GetValue();
	public APlayerState                                        RelatedPlayerState_2                                           => _offRelatedPlayerState_2.GetValue();
	public APlayerState                                        RelatedPlayerState_3                                           => _offRelatedPlayerState_3.GetValue();
	public UObject                                             OptionalObject                                                 => _offOptionalObject.GetValue();
	#endregion

	public FClientReceiveData(APlayerController c_LocalPC, FName c_MessageType, int c_MessageIndex, FString c_MessageString, APlayerState c_RelatedPlayerState_2, APlayerState c_RelatedPlayerState_3, UObject c_OptionalObject) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocalPC.SetValue(c_LocalPC);
		_offMessageType.SetValue(c_MessageType);
		_offMessageIndex.SetValue(c_MessageIndex);
		_offMessageString.SetValue(c_MessageString);
		_offRelatedPlayerState_2.SetValue(c_RelatedPlayerState_2);
		_offRelatedPlayerState_3.SetValue(c_RelatedPlayerState_3);
		_offOptionalObject.SetValue(c_OptionalObject);
	}
}
// ScriptStruct Engine.ParameterGroupData
// 0x0018
public class FParameterGroupData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offGroupName                                                  = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offGroupSortPriority                                          = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             GroupName                                                      => _offGroupName.GetValue();
	public int                                                 GroupSortPriority                                              => _offGroupSortPriority.GetValue();
	#endregion

	public FParameterGroupData(FString c_GroupName, int c_GroupSortPriority) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroupName.SetValue(c_GroupName);
		_offGroupSortPriority.SetValue(c_GroupSortPriority);
	}
}
// ScriptStruct Engine.MaterialParameterCollectionInfo
// 0x0018
public class FMaterialParameterCollectionInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FGuid>                              _offStateId                                                    = new ExternalOffset<FGuid>(0x0000, false);                    // 0x0000(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialParameterCollection>       _offParameterCollection                                        = new ExternalOffset<UMaterialParameterCollection>(0x0010, true); // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FGuid                                               StateId                                                        => _offStateId.GetValue();
	public UMaterialParameterCollection                        ParameterCollection                                            => _offParameterCollection.GetValue();
	#endregion

	public FMaterialParameterCollectionInfo(FGuid c_StateId, UMaterialParameterCollection c_ParameterCollection) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStateId.SetValue(c_StateId);
		_offParameterCollection.SetValue(c_ParameterCollection);
	}
}
// ScriptStruct Engine.MaterialFunctionInfo
// 0x0018
public class FMaterialFunctionInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FGuid>                              _offStateId                                                    = new ExternalOffset<FGuid>(0x0000, false);                    // 0x0000(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialFunctionInterface>         _offFunction                                                   = new ExternalOffset<UMaterialFunctionInterface>(0x0010, true); // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FGuid                                               StateId                                                        => _offStateId.GetValue();
	public UMaterialFunctionInterface                          Function                                                       => _offFunction.GetValue();
	#endregion

	public FMaterialFunctionInfo(FGuid c_StateId, UMaterialFunctionInterface c_Function) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStateId.SetValue(c_StateId);
		_offFunction.SetValue(c_Function);
	}
}
// ScriptStruct Engine.MaterialSpriteElement
// 0x0028
public class FMaterialSpriteElement : ExternalClass
{
	#region Offsets
	private ExternalOffset<UMaterialInterface>                 _offMaterial                                                   = new ExternalOffset<UMaterialInterface>(0x0000, true);        // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offDistanceToOpacityCurve                                     = new ExternalOffset<UCurveFloat>(0x0008, true);               // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSizeIsInScreenSpace                                       = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBaseSizeX                                                  = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBaseSizeY                                                  = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offDistanceToSizeCurve                                        = new ExternalOffset<UCurveFloat>(0x0020, true);               // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialInterface                                  Material                                                       => _offMaterial.GetValue();
	public UCurveFloat                                         DistanceToOpacityCurve                                         => _offDistanceToOpacityCurve.GetValue();
	public float                                               BaseSizeX                                                      => _offBaseSizeX.GetValue();
	public float                                               BaseSizeY                                                      => _offBaseSizeY.GetValue();
	public UCurveFloat                                         DistanceToSizeCurve                                            => _offDistanceToSizeCurve.GetValue();
	#endregion

	public FMaterialSpriteElement(UMaterialInterface c_Material, UCurveFloat c_DistanceToOpacityCurve, float c_BaseSizeX, float c_BaseSizeY, UCurveFloat c_DistanceToSizeCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaterial.SetValue(c_Material);
		_offDistanceToOpacityCurve.SetValue(c_DistanceToOpacityCurve);
		_offBaseSizeX.SetValue(c_BaseSizeX);
		_offBaseSizeY.SetValue(c_BaseSizeY);
		_offDistanceToSizeCurve.SetValue(c_DistanceToSizeCurve);
	}
}
// ScriptStruct Engine.ExpressionInput
// 0x000C
public class FExpressionInput : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offOutputIndex                                                = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offExpressionName                                             = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 OutputIndex                                                    => _offOutputIndex.GetValue();
	public FName                                               ExpressionName                                                 => _offExpressionName.GetValue();
	#endregion

	public FExpressionInput(int c_OutputIndex, FName c_ExpressionName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOutputIndex.SetValue(c_OutputIndex);
		_offExpressionName.SetValue(c_ExpressionName);
	}
}
// ScriptStruct Engine.CustomInput
// 0x001C
public class FCustomInput : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offInputName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                   _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0008, false);         // 0x0008(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               InputName                                                      => _offInputName.GetValue();
	public FExpressionInput                                    Input                                                          => _offInput.GetValue();
	#endregion

	public FCustomInput(FName c_InputName, FExpressionInput c_Input) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInputName.SetValue(c_InputName);
		_offInput.SetValue(c_Input);
	}
}
// ScriptStruct Engine.ExpressionOutput
// 0x0008
public class FExpressionOutput : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offOutputName                                                 = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               OutputName                                                     => _offOutputName.GetValue();
	#endregion

	public FExpressionOutput(FName c_OutputName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOutputName.SetValue(c_OutputName);
	}
}
// ScriptStruct Engine.FunctionExpressionOutput
// 0x0020
public class FFunctionExpressionOutput : ExternalClass
{
	#region Offsets
	private ExternalOffset<UMaterialExpressionFunctionOutput>  _offExpressionOutput                                           = new ExternalOffset<UMaterialExpressionFunctionOutput>(0x0000, true); // 0x0000(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionOutputId                                         = new ExternalOffset<FGuid>(0x0008, false);                    // 0x0008(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionOutput>                  _offOutput                                                     = new ExternalOffset<FExpressionOutput>(0x0018, false);        // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialExpressionFunctionOutput                   ExpressionOutput                                               => _offExpressionOutput.GetValue();
	public FGuid                                               ExpressionOutputId                                             => _offExpressionOutputId.GetValue();
	public FExpressionOutput                                   Output                                                         => _offOutput.GetValue();
	#endregion

	public FFunctionExpressionOutput(UMaterialExpressionFunctionOutput c_ExpressionOutput, FGuid c_ExpressionOutputId, FExpressionOutput c_Output) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offExpressionOutput.SetValue(c_ExpressionOutput);
		_offExpressionOutputId.SetValue(c_ExpressionOutputId);
		_offOutput.SetValue(c_Output);
	}
}
// ScriptStruct Engine.FunctionExpressionInput
// 0x0030
public class FFunctionExpressionInput : ExternalClass
{
	#region Offsets
	private ExternalOffset<UMaterialExpressionFunctionInput>   _offExpressionInput                                            = new ExternalOffset<UMaterialExpressionFunctionInput>(0x0000, true); // 0x0000(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionInputId                                          = new ExternalOffset<FGuid>(0x0008, false);                    // 0x0008(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                   _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0018, false);         // 0x0018(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialExpressionFunctionInput                    ExpressionInput                                                => _offExpressionInput.GetValue();
	public FGuid                                               ExpressionInputId                                              => _offExpressionInputId.GetValue();
	public FExpressionInput                                    Input                                                          => _offInput.GetValue();
	#endregion

	public FFunctionExpressionInput(UMaterialExpressionFunctionInput c_ExpressionInput, FGuid c_ExpressionInputId, FExpressionInput c_Input) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offExpressionInput.SetValue(c_ExpressionInput);
		_offExpressionInputId.SetValue(c_ExpressionInputId);
		_offInput.SetValue(c_Input);
	}
}
// ScriptStruct Engine.MaterialParameterInfo
// 0x0010
public class FMaterialParameterInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialParameterAssociation>> _offAssociation                                                = new ExternalOffset<TEnumAsByte<EMaterialParameterAssociation>>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIndex                                                      = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public TEnumAsByte<EMaterialParameterAssociation>          Association                                                    => _offAssociation.GetValue();
	public int                                                 Index                                                          => _offIndex.GetValue();
	#endregion

	public FMaterialParameterInfo(FName c_Name, TEnumAsByte<EMaterialParameterAssociation> c_Association, int c_Index) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offAssociation.SetValue(c_Association);
		_offIndex.SetValue(c_Index);
	}
}
// ScriptStruct Engine.FontParameterValue
// 0x0030
public class FFontParameterValue : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMaterialParameterInfo>             _offParameterInfo                                              = new ExternalOffset<FMaterialParameterInfo>(0x0000, false);   // 0x0000(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UFont>                              _offFontValue                                                  = new ExternalOffset<UFont>(0x0010, true);                     // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offFontPage                                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x001C, false);                    // 0x001C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialParameterInfo                              ParameterInfo                                                  => _offParameterInfo.GetValue();
	public UFont                                               FontValue                                                      => _offFontValue.GetValue();
	public int                                                 FontPage                                                       => _offFontPage.GetValue();
	public FGuid                                               ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	#endregion

	public FFontParameterValue(FMaterialParameterInfo c_ParameterInfo, UFont c_FontValue, int c_FontPage, FGuid c_ExpressionGUID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterInfo.SetValue(c_ParameterInfo);
		_offFontValue.SetValue(c_FontValue);
		_offFontPage.SetValue(c_FontPage);
		_offExpressionGUID.SetValue(c_ExpressionGUID);
	}
}
// ScriptStruct Engine.TextureParameterValue
// 0x0028
public class FTextureParameterValue : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMaterialParameterInfo>             _offParameterInfo                                              = new ExternalOffset<FMaterialParameterInfo>(0x0000, false);   // 0x0000(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture>                           _offParameterValue                                             = new ExternalOffset<UTexture>(0x0010, true);                  // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0018, false);                    // 0x0018(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialParameterInfo                              ParameterInfo                                                  => _offParameterInfo.GetValue();
	public UTexture                                            ParameterValue                                                 => _offParameterValue.GetValue();
	public FGuid                                               ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	#endregion

	public FTextureParameterValue(FMaterialParameterInfo c_ParameterInfo, UTexture c_ParameterValue, FGuid c_ExpressionGUID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterInfo.SetValue(c_ParameterInfo);
		_offParameterValue.SetValue(c_ParameterValue);
		_offExpressionGUID.SetValue(c_ExpressionGUID);
	}
}
// ScriptStruct Engine.VectorParameterValue
// 0x0030
public class FVectorParameterValue : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMaterialParameterInfo>             _offParameterInfo                                              = new ExternalOffset<FMaterialParameterInfo>(0x0000, false);   // 0x0000(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offParameterValue                                             = new ExternalOffset<FLinearColor>(0x0010, false);             // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0020, false);                    // 0x0020(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialParameterInfo                              ParameterInfo                                                  => _offParameterInfo.GetValue();
	public FLinearColor                                        ParameterValue                                                 => _offParameterValue.GetValue();
	public FGuid                                               ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	#endregion

	public FVectorParameterValue(FMaterialParameterInfo c_ParameterInfo, FLinearColor c_ParameterValue, FGuid c_ExpressionGUID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterInfo.SetValue(c_ParameterInfo);
		_offParameterValue.SetValue(c_ParameterValue);
		_offExpressionGUID.SetValue(c_ExpressionGUID);
	}
}
// ScriptStruct Engine.ScalarParameterValue
// 0x0024
public class FScalarParameterValue : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMaterialParameterInfo>             _offParameterInfo                                              = new ExternalOffset<FMaterialParameterInfo>(0x0000, false);   // 0x0000(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offParameterValue                                             = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0014, false);                    // 0x0014(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialParameterInfo                              ParameterInfo                                                  => _offParameterInfo.GetValue();
	public float                                               ParameterValue                                                 => _offParameterValue.GetValue();
	public FGuid                                               ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	#endregion

	public FScalarParameterValue(FMaterialParameterInfo c_ParameterInfo, float c_ParameterValue, FGuid c_ExpressionGUID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterInfo.SetValue(c_ParameterInfo);
		_offParameterValue.SetValue(c_ParameterValue);
		_offExpressionGUID.SetValue(c_ExpressionGUID);
	}
}
// ScriptStruct Engine.ScalarParameterAtlasInstanceData
// 0x0058
public class FScalarParameterAtlasInstanceData : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbIsUsedAsAtlasPosition                                     = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bIsUsedAsAtlasPosition                                         => _offbIsUsedAsAtlasPosition.GetValue();
	#endregion

	public FScalarParameterAtlasInstanceData(byte/*(bool)*/ c_bIsUsedAsAtlasPosition) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbIsUsedAsAtlasPosition.SetValue(c_bIsUsedAsAtlasPosition);
	}
}
// ScriptStruct Engine.MaterialInstanceBasePropertyOverrides
// 0x0008
public class FMaterialInstanceBasePropertyOverrides : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbOverride_OpacityMaskClipValue                             = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_BlendMode                                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_ShadingModel                                     = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_DitheredLODTransition                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_CastDynamicShadowAsMasked                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverride_TwoSided                                         = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offTwoSided                                                   = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offDitheredLODTransition                                      = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCastDynamicShadowAsMasked                                 = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBlendMode>>            _offBlendMode                                                  = new ExternalOffset<TEnumAsByte<EBlendMode>>(0x0002, false);  // 0x0002(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialShadingModel>> _offShadingModel                                               = new ExternalOffset<TEnumAsByte<EMaterialShadingModel>>(0x0003, false); // 0x0003(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOpacityMaskClipValue                                       = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EBlendMode>                             BlendMode                                                      => _offBlendMode.GetValue();
	public TEnumAsByte<EMaterialShadingModel>                  ShadingModel                                                   => _offShadingModel.GetValue();
	public float                                               OpacityMaskClipValue                                           => _offOpacityMaskClipValue.GetValue();
	#endregion

	public FMaterialInstanceBasePropertyOverrides(TEnumAsByte<EBlendMode> c_BlendMode, TEnumAsByte<EMaterialShadingModel> c_ShadingModel, float c_OpacityMaskClipValue) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBlendMode.SetValue(c_BlendMode);
		_offShadingModel.SetValue(c_ShadingModel);
		_offOpacityMaskClipValue.SetValue(c_OpacityMaskClipValue);
	}
}
// ScriptStruct Engine.MaterialTextureInfo
// 0x0010
public class FMaterialTextureInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offSamplingScale                                              = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offUVChannelIndex                                             = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offTextureName                                                = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               SamplingScale                                                  => _offSamplingScale.GetValue();
	public int                                                 UVChannelIndex                                                 => _offUVChannelIndex.GetValue();
	public FName                                               TextureName                                                    => _offTextureName.GetValue();
	#endregion

	public FMaterialTextureInfo(float c_SamplingScale, int c_UVChannelIndex, FName c_TextureName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSamplingScale.SetValue(c_SamplingScale);
		_offUVChannelIndex.SetValue(c_UVChannelIndex);
		_offTextureName.SetValue(c_TextureName);
	}
}
// ScriptStruct Engine.LightmassMaterialInterfaceSettings
// 0x0014
public class FLightmassMaterialInterfaceSettings : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbCastShadowAsMasked                                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offEmissiveBoost                                              = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDiffuseBoost                                               = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offExportResolutionScale                                      = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideCastShadowAsMasked                                = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideEmissiveBoost                                     = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideDiffuseBoost                                      = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbOverrideExportResolutionScale                             = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               EmissiveBoost                                                  => _offEmissiveBoost.GetValue();
	public float                                               DiffuseBoost                                                   => _offDiffuseBoost.GetValue();
	public float                                               ExportResolutionScale                                          => _offExportResolutionScale.GetValue();
	#endregion

	public FLightmassMaterialInterfaceSettings(float c_EmissiveBoost, float c_DiffuseBoost, float c_ExportResolutionScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmissiveBoost.SetValue(c_EmissiveBoost);
		_offDiffuseBoost.SetValue(c_DiffuseBoost);
		_offExportResolutionScale.SetValue(c_ExportResolutionScale);
	}
}
// ScriptStruct Engine.MaterialLayersFunctions
// 0x0040
public class FMaterialLayersFunctions : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<UMaterialFunctionInterface>> _offLayers                                                     = new ExternalOffset<TArray<UMaterialFunctionInterface>>(0x0000, false); // 0x0000(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UMaterialFunctionInterface>> _offBlends                                                     = new ExternalOffset<TArray<UMaterialFunctionInterface>>(0x0010, false); // 0x0010(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<bool>>                       _offLayerStates                                                = new ExternalOffset<TArray<bool>>(0x0020, false);             // 0x0020(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeyString                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UMaterialFunctionInterface>                  Layers                                                         => _offLayers.GetValue();
	public TArray<UMaterialFunctionInterface>                  Blends                                                         => _offBlends.GetValue();
	public TArray<bool>                                        LayerStates                                                    => _offLayerStates.GetValue();
	public FString                                             KeyString                                                      => _offKeyString.GetValue();
	#endregion

	public FMaterialLayersFunctions(TArray<UMaterialFunctionInterface> c_Layers, TArray<UMaterialFunctionInterface> c_Blends, TArray<bool> c_LayerStates, FString c_KeyString) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLayers.SetValue(c_Layers);
		_offBlends.SetValue(c_Blends);
		_offLayerStates.SetValue(c_LayerStates);
		_offKeyString.SetValue(c_KeyString);
	}
}
// ScriptStruct Engine.CollectionParameterBase
// 0x0018
public class FCollectionParameterBase : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offParameterName                                              = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offID                                                         = new ExternalOffset<FGuid>(0x0008, false);                    // 0x0008(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ParameterName                                                  => _offParameterName.GetValue();
	public FGuid                                               ID                                                             => _offID.GetValue();
	#endregion

	public FCollectionParameterBase(FName c_ParameterName, FGuid c_ID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterName.SetValue(c_ParameterName);
		_offID.SetValue(c_ID);
	}
}
// ScriptStruct Engine.CollectionVectorParameter
// 0x0010 (0x0028 - 0x0018)
public class FCollectionVectorParameter : FCollectionParameterBase
{
	#region Offsets
	private ExternalOffset<FLinearColor>                       _offDefaultValue                                               = new ExternalOffset<FLinearColor>(0x0018, false);             // 0x0018(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FLinearColor                                        DefaultValue                                                   => _offDefaultValue.GetValue();
	#endregion

	public FCollectionVectorParameter(FLinearColor c_DefaultValue) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefaultValue.SetValue(c_DefaultValue);
	}
}
// ScriptStruct Engine.CollectionScalarParameter
// 0x0004 (0x001C - 0x0018)
public class FCollectionScalarParameter : FCollectionParameterBase
{
	#region Offsets
	private ExternalOffset<float>                              _offDefaultValue                                               = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               DefaultValue                                                   => _offDefaultValue.GetValue();
	#endregion

	public FCollectionScalarParameter(float c_DefaultValue) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefaultValue.SetValue(c_DefaultValue);
	}
}
// ScriptStruct Engine.InterpGroupActorInfo
// 0x0018
public class FInterpGroupActorInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offObjectName                                                 = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                     _offActors                                                     = new ExternalOffset<TArray<AActor>>(0x0008, false);           // 0x0008(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ObjectName                                                     => _offObjectName.GetValue();
	public TArray<AActor>                                      Actors                                                         => _offActors.GetValue();
	#endregion

	public FInterpGroupActorInfo(FName c_ObjectName, TArray<AActor> c_Actors) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offObjectName.SetValue(c_ObjectName);
		_offActors.SetValue(c_Actors);
	}
}
// ScriptStruct Engine.CameraCutInfo
// 0x0010
public class FCameraCutInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offLocation                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTimestamp                                                  = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Location                                                       => _offLocation.GetValue();
	public float                                               Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FCameraCutInfo(FVector c_Location, float c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocation.SetValue(c_Location);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct Engine.MemberReference
// 0x0038
public class FMemberReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<UObject>                            _offMemberParent                                               = new ExternalOffset<UObject>(0x0000, true);                   // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FString>                            _offMemberScope                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FName>                              _offMemberName                                                 = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FGuid>                              _offMemberGuid                                                 = new ExternalOffset<FGuid>(0x0020, false);                    // 0x0020(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                     _offbSelfContext                                               = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                     _offbWasDeprecated                                             = new ExternalOffset<byte/*(bool)*/>(0x0031);                  // 0x0031(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UObject                                             MemberParent                                                   => _offMemberParent.GetValue();
	public FString                                             MemberScope                                                    => _offMemberScope.GetValue();
	public FName                                               MemberName                                                     => _offMemberName.GetValue();
	public FGuid                                               MemberGuid                                                     => _offMemberGuid.GetValue();
	public byte/*(bool)*/                                      bSelfContext                                                   => _offbSelfContext.GetValue();
	public byte/*(bool)*/                                      bWasDeprecated                                                 => _offbWasDeprecated.GetValue();
	#endregion

	public FMemberReference(UObject c_MemberParent, FString c_MemberScope, FName c_MemberName, FGuid c_MemberGuid, byte/*(bool)*/ c_bSelfContext, byte/*(bool)*/ c_bWasDeprecated) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMemberParent.SetValue(c_MemberParent);
		_offMemberScope.SetValue(c_MemberScope);
		_offMemberName.SetValue(c_MemberName);
		_offMemberGuid.SetValue(c_MemberGuid);
		_offbSelfContext.SetValue(c_bSelfContext);
		_offbWasDeprecated.SetValue(c_bWasDeprecated);
	}
}
// ScriptStruct Engine.MeshInstancingSettings
// 0x0018
public class FMeshInstancingSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<UClass>                             _offActorClassToUse                                            = new ExternalOffset<UClass>(0x0000, true);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offInstanceReplacementThreshold                               = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EMeshInstancingReplacementMethod>   _offMeshReplacementMethod                                      = new ExternalOffset<EMeshInstancingReplacementMethod>(0x000C, false); // 0x000C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbSkipMeshesWithVertexColors                                = new ExternalOffset<byte/*(bool)*/>(0x000D);                  // 0x000D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbUseHLODVolumes                                            = new ExternalOffset<byte/*(bool)*/>(0x000E);                  // 0x000E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                             _offISMComponentToUse                                          = new ExternalOffset<UClass>(0x0010, true);                    // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                              ActorClassToUse                                                => _offActorClassToUse.GetValue();
	public int                                                 InstanceReplacementThreshold                                   => _offInstanceReplacementThreshold.GetValue();
	public EMeshInstancingReplacementMethod                    MeshReplacementMethod                                          => _offMeshReplacementMethod.GetValue();
	public byte/*(bool)*/                                      bSkipMeshesWithVertexColors                                    => _offbSkipMeshesWithVertexColors.GetValue();
	public byte/*(bool)*/                                      bUseHLODVolumes                                                => _offbUseHLODVolumes.GetValue();
	public UClass                                              ISMComponentToUse                                              => _offISMComponentToUse.GetValue();
	#endregion

	public FMeshInstancingSettings(UClass c_ActorClassToUse, int c_InstanceReplacementThreshold, EMeshInstancingReplacementMethod c_MeshReplacementMethod, byte/*(bool)*/ c_bSkipMeshesWithVertexColors, byte/*(bool)*/ c_bUseHLODVolumes, UClass c_ISMComponentToUse) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActorClassToUse.SetValue(c_ActorClassToUse);
		_offInstanceReplacementThreshold.SetValue(c_InstanceReplacementThreshold);
		_offMeshReplacementMethod.SetValue(c_MeshReplacementMethod);
		_offbSkipMeshesWithVertexColors.SetValue(c_bSkipMeshesWithVertexColors);
		_offbUseHLODVolumes.SetValue(c_bUseHLODVolumes);
		_offISMComponentToUse.SetValue(c_ISMComponentToUse);
	}
}
// ScriptStruct Engine.MeshReductionSettings
// 0x0024
public class FMeshReductionSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offPercentTriangles                                           = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPercentVertices                                            = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxDeviation                                               = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPixelError                                                 = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWeldingThreshold                                           = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHardAngleThreshold                                         = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offBaseLODModel                                               = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMeshFeatureImportance>> _offSilhouetteImportance                                       = new ExternalOffset<TEnumAsByte<EMeshFeatureImportance>>(0x001C, false); // 0x001C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMeshFeatureImportance>> _offTextureImportance                                          = new ExternalOffset<TEnumAsByte<EMeshFeatureImportance>>(0x001D, false); // 0x001D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMeshFeatureImportance>> _offShadingImportance                                          = new ExternalOffset<TEnumAsByte<EMeshFeatureImportance>>(0x001E, false); // 0x001E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRecalculateNormals                                        = new ExternalOffset<char>(0x001F, false);                     // 0x001F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGenerateUniqueLightmapUVs                                 = new ExternalOffset<char>(0x001F, false);                     // 0x001F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbKeepSymmetry                                              = new ExternalOffset<char>(0x001F, false);                     // 0x001F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbVisibilityAided                                           = new ExternalOffset<char>(0x001F, false);                     // 0x001F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCullOccluded                                              = new ExternalOffset<char>(0x001F, false);                     // 0x001F(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EStaticMeshReductionTerimationCriterion> _offTerminationCriterion                                       = new ExternalOffset<EStaticMeshReductionTerimationCriterion>(0x0020, false); // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMeshFeatureImportance>> _offVisibilityAggressiveness                                   = new ExternalOffset<TEnumAsByte<EMeshFeatureImportance>>(0x0021, false); // 0x0021(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMeshFeatureImportance>> _offVertexColorImportance                                      = new ExternalOffset<TEnumAsByte<EMeshFeatureImportance>>(0x0022, false); // 0x0022(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               PercentTriangles                                               => _offPercentTriangles.GetValue();
	public float                                               PercentVertices                                                => _offPercentVertices.GetValue();
	public float                                               MaxDeviation                                                   => _offMaxDeviation.GetValue();
	public float                                               PixelError                                                     => _offPixelError.GetValue();
	public float                                               WeldingThreshold                                               => _offWeldingThreshold.GetValue();
	public float                                               HardAngleThreshold                                             => _offHardAngleThreshold.GetValue();
	public int                                                 BaseLODModel                                                   => _offBaseLODModel.GetValue();
	public TEnumAsByte<EMeshFeatureImportance>                 SilhouetteImportance                                           => _offSilhouetteImportance.GetValue();
	public TEnumAsByte<EMeshFeatureImportance>                 TextureImportance                                              => _offTextureImportance.GetValue();
	public TEnumAsByte<EMeshFeatureImportance>                 ShadingImportance                                              => _offShadingImportance.GetValue();
	public EStaticMeshReductionTerimationCriterion             TerminationCriterion                                           => _offTerminationCriterion.GetValue();
	public TEnumAsByte<EMeshFeatureImportance>                 VisibilityAggressiveness                                       => _offVisibilityAggressiveness.GetValue();
	public TEnumAsByte<EMeshFeatureImportance>                 VertexColorImportance                                          => _offVertexColorImportance.GetValue();
	#endregion

	public FMeshReductionSettings(float c_PercentTriangles, float c_PercentVertices, float c_MaxDeviation, float c_PixelError, float c_WeldingThreshold, float c_HardAngleThreshold, int c_BaseLODModel, TEnumAsByte<EMeshFeatureImportance> c_SilhouetteImportance, TEnumAsByte<EMeshFeatureImportance> c_TextureImportance, TEnumAsByte<EMeshFeatureImportance> c_ShadingImportance, EStaticMeshReductionTerimationCriterion c_TerminationCriterion, TEnumAsByte<EMeshFeatureImportance> c_VisibilityAggressiveness, TEnumAsByte<EMeshFeatureImportance> c_VertexColorImportance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPercentTriangles.SetValue(c_PercentTriangles);
		_offPercentVertices.SetValue(c_PercentVertices);
		_offMaxDeviation.SetValue(c_MaxDeviation);
		_offPixelError.SetValue(c_PixelError);
		_offWeldingThreshold.SetValue(c_WeldingThreshold);
		_offHardAngleThreshold.SetValue(c_HardAngleThreshold);
		_offBaseLODModel.SetValue(c_BaseLODModel);
		_offSilhouetteImportance.SetValue(c_SilhouetteImportance);
		_offTextureImportance.SetValue(c_TextureImportance);
		_offShadingImportance.SetValue(c_ShadingImportance);
		_offTerminationCriterion.SetValue(c_TerminationCriterion);
		_offVisibilityAggressiveness.SetValue(c_VisibilityAggressiveness);
		_offVertexColorImportance.SetValue(c_VertexColorImportance);
	}
}
// ScriptStruct Engine.PurchaseInfo
// 0x0040
public class FPurchaseInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offIdentifier                                                 = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDisplayName                                                = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDisplayDescription                                         = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDisplayPrice                                               = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Identifier                                                     => _offIdentifier.GetValue();
	public FString                                             DisplayName                                                    => _offDisplayName.GetValue();
	public FString                                             DisplayDescription                                             => _offDisplayDescription.GetValue();
	public FString                                             DisplayPrice                                                   => _offDisplayPrice.GetValue();
	#endregion

	public FPurchaseInfo(FString c_Identifier, FString c_DisplayName, FString c_DisplayDescription, FString c_DisplayPrice) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIdentifier.SetValue(c_Identifier);
		_offDisplayName.SetValue(c_DisplayName);
		_offDisplayDescription.SetValue(c_DisplayDescription);
		_offDisplayPrice.SetValue(c_DisplayPrice);
	}
}
// ScriptStruct Engine.NameCurveKey
// 0x000C
public class FNameCurveKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offValue                                                      = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public FName                                               Value                                                          => _offValue.GetValue();
	#endregion

	public FNameCurveKey(float c_Time, FName c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct Engine.NameCurve
// 0x0010 (0x0078 - 0x0068)
public class FNameCurve : FIndexedCurve
{
	#region Offsets
	private ExternalOffset<TArray<FNameCurveKey>>              _offKeys                                                       = new ExternalOffset<TArray<FNameCurveKey>>(0x0068, false);    // 0x0068(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FNameCurveKey>                               Keys                                                           => _offKeys.GetValue();
	#endregion

	public FNameCurve(TArray<FNameCurveKey> c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct Engine.NavAvoidanceMask
// 0x0004
public class FNavAvoidanceMask : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbGroup0                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup1                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup2                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup3                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup4                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup5                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup6                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup7                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup8                                                    = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup9                                                    = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup10                                                   = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup11                                                   = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup12                                                   = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup13                                                   = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup14                                                   = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup15                                                   = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup16                                                   = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup17                                                   = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup18                                                   = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup19                                                   = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup20                                                   = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup21                                                   = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup22                                                   = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup23                                                   = new ExternalOffset<char>(0x0002, false);                     // 0x0002(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup24                                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup25                                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup26                                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup27                                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup28                                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup29                                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup30                                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGroup31                                                   = new ExternalOffset<char>(0x0003, false);                     // 0x0003(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FNavAvoidanceMask() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.MovementProperties
// 0x0001
public class FMovementProperties : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbCanCrouch                                                 = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCanJump                                                   = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCanWalk                                                   = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCanSwim                                                   = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCanFly                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FMovementProperties() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.NavAgentProperties
// 0x002F (0x0030 - 0x0001)
public class FNavAgentProperties : FMovementProperties
{
	#region Offsets
	private ExternalOffset<float>                              _offAgentRadius                                                = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAgentHeight                                                = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAgentStepHeight                                            = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNavWalkingSearchHeightScale                                = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                     _offPreferredNavData                                           = new ExternalOffset<FSoftClassPath>(0x0018, false);           // 0x0018(0x0018) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               AgentRadius                                                    => _offAgentRadius.GetValue();
	public float                                               AgentHeight                                                    => _offAgentHeight.GetValue();
	public float                                               AgentStepHeight                                                => _offAgentStepHeight.GetValue();
	public float                                               NavWalkingSearchHeightScale                                    => _offNavWalkingSearchHeightScale.GetValue();
	public FSoftClassPath                                      PreferredNavData                                               => _offPreferredNavData.GetValue();
	#endregion

	public FNavAgentProperties(float c_AgentRadius, float c_AgentHeight, float c_AgentStepHeight, float c_NavWalkingSearchHeightScale, FSoftClassPath c_PreferredNavData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAgentRadius.SetValue(c_AgentRadius);
		_offAgentHeight.SetValue(c_AgentHeight);
		_offAgentStepHeight.SetValue(c_AgentStepHeight);
		_offNavWalkingSearchHeightScale.SetValue(c_NavWalkingSearchHeightScale);
		_offPreferredNavData.SetValue(c_PreferredNavData);
	}
}
// ScriptStruct Engine.NavDataConfig
// 0x0038 (0x0068 - 0x0030)
public class FNavDataConfig : FNavAgentProperties
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offColor                                                      = new ExternalOffset<FColor>(0x0038, false);                   // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offDefaultQueryExtent                                         = new ExternalOffset<FVector>(0x003C, false);                  // 0x003C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                             _offNavigationDataClass                                        = new ExternalOffset<UClass>(0x0048, true);                    // 0x0048(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                     _offNavigationDataClassName                                    = new ExternalOffset<FSoftClassPath>(0x0050, false);           // 0x0050(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public FColor                                              Color                                                          => _offColor.GetValue();
	public FVector                                             DefaultQueryExtent                                             => _offDefaultQueryExtent.GetValue();
	public UClass                                              NavigationDataClass                                            => _offNavigationDataClass.GetValue();
	public FSoftClassPath                                      NavigationDataClassName                                        => _offNavigationDataClassName.GetValue();
	#endregion

	public FNavDataConfig(FName c_Name, FColor c_Color, FVector c_DefaultQueryExtent, UClass c_NavigationDataClass, FSoftClassPath c_NavigationDataClassName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offColor.SetValue(c_Color);
		_offDefaultQueryExtent.SetValue(c_DefaultQueryExtent);
		_offNavigationDataClass.SetValue(c_NavigationDataClass);
		_offNavigationDataClassName.SetValue(c_NavigationDataClassName);
	}
}
// ScriptStruct Engine.MarkerSyncAnimPosition
// 0x0014
public class FMarkerSyncAnimPosition : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offPreviousMarkerName                                         = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offNextMarkerName                                             = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPositionBetweenMarkers                                     = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               PreviousMarkerName                                             => _offPreviousMarkerName.GetValue();
	public FName                                               NextMarkerName                                                 => _offNextMarkerName.GetValue();
	public float                                               PositionBetweenMarkers                                         => _offPositionBetweenMarkers.GetValue();
	#endregion

	public FMarkerSyncAnimPosition(FName c_PreviousMarkerName, FName c_NextMarkerName, float c_PositionBetweenMarkers) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPreviousMarkerName.SetValue(c_PreviousMarkerName);
		_offNextMarkerName.SetValue(c_NextMarkerName);
		_offPositionBetweenMarkers.SetValue(c_PositionBetweenMarkers);
	}
}
// ScriptStruct Engine.NavAgentSelector
// 0x0004
public class FNavAgentSelector : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbSupportsAgent0                                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent1                                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent2                                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent3                                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent4                                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent5                                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent6                                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent7                                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent8                                            = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent9                                            = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent10                                           = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent11                                           = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent12                                           = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent13                                           = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent14                                           = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent15                                           = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FNavAgentSelector() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.NavigationLinkBase
// 0x0038
public class FNavigationLinkBase : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offLeftProjectHeight                                          = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxFallDownLength                                          = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ENavLinkDirection>>     _offDirection                                                  = new ExternalOffset<TEnumAsByte<ENavLinkDirection>>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSnapRadius                                                 = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSnapHeight                                                 = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FNavAgentSelector>                  _offSupportedAgents                                            = new ExternalOffset<FNavAgentSelector>(0x0018, false);        // 0x0018(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent0                                            = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent1                                            = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent2                                            = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent3                                            = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent4                                            = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent5                                            = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent6                                            = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent7                                            = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent8                                            = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent9                                            = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent10                                           = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent11                                           = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent12                                           = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent13                                           = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent14                                           = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportsAgent15                                           = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseSnapHeight                                             = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSnapToCheapestArea                                        = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCustomFlag0                                               = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCustomFlag1                                               = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCustomFlag2                                               = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCustomFlag3                                               = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCustomFlag4                                               = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCustomFlag5                                               = new ExternalOffset<char>(0x0020, false);                     // 0x0020(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCustomFlag6                                               = new ExternalOffset<char>(0x0021, false);                     // 0x0021(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCustomFlag7                                               = new ExternalOffset<char>(0x0021, false);                     // 0x0021(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                             _offAreaClass                                                  = new ExternalOffset<UClass>(0x0028, true);                    // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public float                                               LeftProjectHeight                                              => _offLeftProjectHeight.GetValue();
	public float                                               MaxFallDownLength                                              => _offMaxFallDownLength.GetValue();
	public TEnumAsByte<ENavLinkDirection>                      Direction                                                      => _offDirection.GetValue();
	public float                                               SnapRadius                                                     => _offSnapRadius.GetValue();
	public float                                               SnapHeight                                                     => _offSnapHeight.GetValue();
	public FNavAgentSelector                                   SupportedAgents                                                => _offSupportedAgents.GetValue();
	public UClass                                              AreaClass                                                      => _offAreaClass.GetValue();
	#endregion

	public FNavigationLinkBase(float c_LeftProjectHeight, float c_MaxFallDownLength, TEnumAsByte<ENavLinkDirection> c_Direction, float c_SnapRadius, float c_SnapHeight, FNavAgentSelector c_SupportedAgents, UClass c_AreaClass) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeftProjectHeight.SetValue(c_LeftProjectHeight);
		_offMaxFallDownLength.SetValue(c_MaxFallDownLength);
		_offDirection.SetValue(c_Direction);
		_offSnapRadius.SetValue(c_SnapRadius);
		_offSnapHeight.SetValue(c_SnapHeight);
		_offSupportedAgents.SetValue(c_SupportedAgents);
		_offAreaClass.SetValue(c_AreaClass);
	}
}
// ScriptStruct Engine.NavigationSegmentLink
// 0x0030 (0x0068 - 0x0038)
public class FNavigationSegmentLink : FNavigationLinkBase
{
	#region Offsets
	private ExternalOffset<FVector>                            _offLeftStart                                                  = new ExternalOffset<FVector>(0x0038, false);                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offLeftEnd                                                    = new ExternalOffset<FVector>(0x0044, false);                  // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offRightStart                                                 = new ExternalOffset<FVector>(0x0050, false);                  // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offRightEnd                                                   = new ExternalOffset<FVector>(0x005C, false);                  // 0x005C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             LeftStart                                                      => _offLeftStart.GetValue();
	public FVector                                             LeftEnd                                                        => _offLeftEnd.GetValue();
	public FVector                                             RightStart                                                     => _offRightStart.GetValue();
	public FVector                                             RightEnd                                                       => _offRightEnd.GetValue();
	#endregion

	public FNavigationSegmentLink(FVector c_LeftStart, FVector c_LeftEnd, FVector c_RightStart, FVector c_RightEnd) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeftStart.SetValue(c_LeftStart);
		_offLeftEnd.SetValue(c_LeftEnd);
		_offRightStart.SetValue(c_RightStart);
		_offRightEnd.SetValue(c_RightEnd);
	}
}
// ScriptStruct Engine.NavigationLink
// 0x0018 (0x0050 - 0x0038)
public class FNavigationLink : FNavigationLinkBase
{
	#region Offsets
	private ExternalOffset<FVector>                            _offLeft                                                       = new ExternalOffset<FVector>(0x0038, false);                  // 0x0038(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offRight                                                      = new ExternalOffset<FVector>(0x0044, false);                  // 0x0044(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Left                                                           => _offLeft.GetValue();
	public FVector                                             Right                                                          => _offRight.GetValue();
	#endregion

	public FNavigationLink(FVector c_Left, FVector c_Right) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeft.SetValue(c_Left);
		_offRight.SetValue(c_Right);
	}
}
// ScriptStruct Engine.ChannelDefinition
// 0x0028
public class FChannelDefinition : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offChannelName                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offClassName                                                  = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                             _offChannelClass                                               = new ExternalOffset<UClass>(0x0010, true);                    // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStaticChannelIndex                                         = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbTickOnCreate                                              = new ExternalOffset<byte/*(bool)*/>(0x001C);                  // 0x001C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbServerOpen                                                = new ExternalOffset<byte/*(bool)*/>(0x001D);                  // 0x001D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbClientOpen                                                = new ExternalOffset<byte/*(bool)*/>(0x001E);                  // 0x001E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbInitialServer                                             = new ExternalOffset<byte/*(bool)*/>(0x001F);                  // 0x001F(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbInitialClient                                             = new ExternalOffset<byte/*(bool)*/>(0x0020);                  // 0x0020(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ChannelName                                                    => _offChannelName.GetValue();
	public FName                                               ClassName                                                      => _offClassName.GetValue();
	public UClass                                              ChannelClass                                                   => _offChannelClass.GetValue();
	public int                                                 StaticChannelIndex                                             => _offStaticChannelIndex.GetValue();
	public byte/*(bool)*/                                      bTickOnCreate                                                  => _offbTickOnCreate.GetValue();
	public byte/*(bool)*/                                      bServerOpen                                                    => _offbServerOpen.GetValue();
	public byte/*(bool)*/                                      bClientOpen                                                    => _offbClientOpen.GetValue();
	public byte/*(bool)*/                                      bInitialServer                                                 => _offbInitialServer.GetValue();
	public byte/*(bool)*/                                      bInitialClient                                                 => _offbInitialClient.GetValue();
	#endregion

	public FChannelDefinition(FName c_ChannelName, FName c_ClassName, UClass c_ChannelClass, int c_StaticChannelIndex, byte/*(bool)*/ c_bTickOnCreate, byte/*(bool)*/ c_bServerOpen, byte/*(bool)*/ c_bClientOpen, byte/*(bool)*/ c_bInitialServer, byte/*(bool)*/ c_bInitialClient) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offChannelName.SetValue(c_ChannelName);
		_offClassName.SetValue(c_ClassName);
		_offChannelClass.SetValue(c_ChannelClass);
		_offStaticChannelIndex.SetValue(c_StaticChannelIndex);
		_offbTickOnCreate.SetValue(c_bTickOnCreate);
		_offbServerOpen.SetValue(c_bServerOpen);
		_offbClientOpen.SetValue(c_bClientOpen);
		_offbInitialServer.SetValue(c_bInitialServer);
		_offbInitialClient.SetValue(c_bInitialClient);
	}
}
// ScriptStruct Engine.PacketSimulationSettings
// 0x001C
public class FPacketSimulationSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offPktLoss                                                    = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPktLossMaxSize                                             = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPktLossMinSize                                             = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPktOrder                                                   = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPktDup                                                     = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPktLag                                                     = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPktLagVariance                                             = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PktLoss                                                        => _offPktLoss.GetValue();
	public int                                                 PktLossMaxSize                                                 => _offPktLossMaxSize.GetValue();
	public int                                                 PktLossMinSize                                                 => _offPktLossMinSize.GetValue();
	public int                                                 PktOrder                                                       => _offPktOrder.GetValue();
	public int                                                 PktDup                                                         => _offPktDup.GetValue();
	public int                                                 PktLag                                                         => _offPktLag.GetValue();
	public int                                                 PktLagVariance                                                 => _offPktLagVariance.GetValue();
	#endregion

	public FPacketSimulationSettings(int c_PktLoss, int c_PktLossMaxSize, int c_PktLossMinSize, int c_PktOrder, int c_PktDup, int c_PktLag, int c_PktLagVariance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPktLoss.SetValue(c_PktLoss);
		_offPktLossMaxSize.SetValue(c_PktLossMaxSize);
		_offPktLossMinSize.SetValue(c_PktLossMinSize);
		_offPktOrder.SetValue(c_PktOrder);
		_offPktDup.SetValue(c_PktDup);
		_offPktLag.SetValue(c_PktLag);
		_offPktLagVariance.SetValue(c_PktLagVariance);
	}
}
// ScriptStruct Engine.NodeItem
// 0x0040
public class FNodeItem : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offParentName                                                 = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FTransform>                         _offTransform                                                  = new ExternalOffset<FTransform>(0x0010, false);               // 0x0010(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ParentName                                                     => _offParentName.GetValue();
	public FTransform                                          Transform                                                      => _offTransform.GetValue();
	#endregion

	public FNodeItem(FName c_ParentName, FTransform c_Transform) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParentName.SetValue(c_ParentName);
		_offTransform.SetValue(c_Transform);
	}
}
// ScriptStruct Engine.ParticleBurst
// 0x000C
public class FParticleBurst : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offCount                                                      = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offCountLow                                                   = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Count                                                          => _offCount.GetValue();
	public int                                                 CountLow                                                       => _offCountLow.GetValue();
	public float                                               Time                                                           => _offTime.GetValue();
	#endregion

	public FParticleBurst(int c_Count, int c_CountLow, float c_Time) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCount.SetValue(c_Count);
		_offCountLow.SetValue(c_CountLow);
		_offTime.SetValue(c_Time);
	}
}
// ScriptStruct Engine.ParticleRandomSeedInfo
// 0x0020
public class FParticleRandomSeedInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offParameterName                                              = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbGetSeedFromInstance                                       = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbInstanceSeedIsIndex                                       = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbResetSeedOnEmitterLooping                                 = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRandomlySelectSeedArray                                   = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offRandomSeeds                                                = new ExternalOffset<TArray<int>>(0x0010, false);              // 0x0010(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ParameterName                                                  => _offParameterName.GetValue();
	public TArray<int>                                         RandomSeeds                                                    => _offRandomSeeds.GetValue();
	#endregion

	public FParticleRandomSeedInfo(FName c_ParameterName, TArray<int> c_RandomSeeds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterName.SetValue(c_ParameterName);
		_offRandomSeeds.SetValue(c_RandomSeeds);
	}
}
// ScriptStruct Engine.ParticleCurvePair
// 0x0018
public class FParticleCurvePair : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offCurveName                                                  = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                            _offCurveObject                                                = new ExternalOffset<UObject>(0x0010, true);                   // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CurveName                                                      => _offCurveName.GetValue();
	public UObject                                             CurveObject                                                    => _offCurveObject.GetValue();
	#endregion

	public FParticleCurvePair(FString c_CurveName, UObject c_CurveObject) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCurveName.SetValue(c_CurveName);
		_offCurveObject.SetValue(c_CurveObject);
	}
}
// ScriptStruct Engine.BeamModifierOptions
// 0x0004
public class FBeamModifierOptions : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbModify                                                    = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbScale                                                     = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLock                                                      = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FBeamModifierOptions() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.ParticleEvent_GenerateInfo
// 0x0028
public class FParticleEvent_GenerateInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EParticleEventType>>    _offType                                                       = new ExternalOffset<TEnumAsByte<EParticleEventType>>(0x0000, false); // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offFrequency                                                  = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offParticleFrequency                                          = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offFirstTimeOnly                                              = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offLastTimeOnly                                               = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offUseReflectedImpactVector                                   = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseOrbitOffset                                            = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offCustomName                                                 = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleModuleEventSendToGame>> _offParticleModuleEventsToSendToGame                           = new ExternalOffset<TArray<UParticleModuleEventSendToGame>>(0x0018, false); // 0x0018(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EParticleEventType>                     Type                                                           => _offType.GetValue();
	public int                                                 Frequency                                                      => _offFrequency.GetValue();
	public int                                                 ParticleFrequency                                              => _offParticleFrequency.GetValue();
	public FName                                               CustomName                                                     => _offCustomName.GetValue();
	public TArray<UParticleModuleEventSendToGame>              ParticleModuleEventsToSendToGame                               => _offParticleModuleEventsToSendToGame.GetValue();
	#endregion

	public FParticleEvent_GenerateInfo(TEnumAsByte<EParticleEventType> c_Type, int c_Frequency, int c_ParticleFrequency, FName c_CustomName, TArray<UParticleModuleEventSendToGame> c_ParticleModuleEventsToSendToGame) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offType.SetValue(c_Type);
		_offFrequency.SetValue(c_Frequency);
		_offParticleFrequency.SetValue(c_ParticleFrequency);
		_offCustomName.SetValue(c_CustomName);
		_offParticleModuleEventsToSendToGame.SetValue(c_ParticleModuleEventsToSendToGame);
	}
}
// ScriptStruct Engine.LocationBoneSocketInfo
// 0x0014
public class FLocationBoneSocketInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offBoneSocketName                                             = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOffset                                                     = new ExternalOffset<FVector>(0x0008, false);                  // 0x0008(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               BoneSocketName                                                 => _offBoneSocketName.GetValue();
	public FVector                                             Offset                                                         => _offOffset.GetValue();
	#endregion

	public FLocationBoneSocketInfo(FName c_BoneSocketName, FVector c_Offset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneSocketName.SetValue(c_BoneSocketName);
		_offOffset.SetValue(c_Offset);
	}
}
// ScriptStruct Engine.OrbitOptions
// 0x0004
public class FOrbitOptions : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offbProcessDuringSpawn                                        = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbProcessDuringUpdate                                       = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseEmitterTime                                            = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FOrbitOptions() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.EmitterDynamicParameter
// 0x0050
public class FEmitterDynamicParameter : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offParamName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseEmitterTime                                            = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSpawnTimeOnly                                             = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EEmitterDynamicParameterValue>> _offValueMethod                                                = new ExternalOffset<TEnumAsByte<EEmitterDynamicParameterValue>>(0x000C, false); // 0x000C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbScaleVelocityByParamValue                                 = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>              _offParamValue                                                 = new ExternalOffset<FRawDistributionFloat>(0x0018, false);    // 0x0018(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ParamName                                                      => _offParamName.GetValue();
	public TEnumAsByte<EEmitterDynamicParameterValue>          ValueMethod                                                    => _offValueMethod.GetValue();
	public FRawDistributionFloat                               ParamValue                                                     => _offParamValue.GetValue();
	#endregion

	public FEmitterDynamicParameter(FName c_ParamName, TEnumAsByte<EEmitterDynamicParameterValue> c_ValueMethod, FRawDistributionFloat c_ParamValue) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParamName.SetValue(c_ParamName);
		_offValueMethod.SetValue(c_ValueMethod);
		_offParamValue.SetValue(c_ParamValue);
	}
}
// ScriptStruct Engine.BeamTargetData
// 0x000C
public class FBeamTargetData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offTargetName                                                 = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTargetPercentage                                           = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               TargetName                                                     => _offTargetName.GetValue();
	public float                                               TargetPercentage                                               => _offTargetPercentage.GetValue();
	#endregion

	public FBeamTargetData(FName c_TargetName, float c_TargetPercentage) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTargetName.SetValue(c_TargetName);
		_offTargetPercentage.SetValue(c_TargetPercentage);
	}
}
// ScriptStruct Engine.GPUSpriteResourceData
// 0x0160
public class FGPUSpriteResourceData : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FColor>>                     _offQuantizedColorSamples                                      = new ExternalOffset<TArray<FColor>>(0x0000, false);           // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FColor>>                     _offQuantizedMiscSamples                                       = new ExternalOffset<TArray<FColor>>(0x0010, false);           // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FColor>>                     _offQuantizedSimulationAttrSamples                             = new ExternalOffset<TArray<FColor>>(0x0020, false);           // 0x0020(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorScale                                                 = new ExternalOffset<FVector4>(0x0030, false);                 // 0x0030(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offColorBias                                                  = new ExternalOffset<FVector4>(0x0040, false);                 // 0x0040(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offMiscScale                                                  = new ExternalOffset<FVector4>(0x0050, false);                 // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offMiscBias                                                   = new ExternalOffset<FVector4>(0x0060, false);                 // 0x0060(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offSimulationAttrCurveScale                                   = new ExternalOffset<FVector4>(0x0070, false);                 // 0x0070(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offSimulationAttrCurveBias                                    = new ExternalOffset<FVector4>(0x0080, false);                 // 0x0080(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offSubImageSize                                               = new ExternalOffset<FVector4>(0x0090, false);                 // 0x0090(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offSizeBySpeed                                                = new ExternalOffset<FVector4>(0x00A0, false);                 // 0x00A0(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offConstantAcceleration                                       = new ExternalOffset<FVector>(0x00B0, false);                  // 0x00B0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrbitOffsetBase                                            = new ExternalOffset<FVector>(0x00BC, false);                  // 0x00BC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrbitOffsetRange                                           = new ExternalOffset<FVector>(0x00C8, false);                  // 0x00C8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrbitFrequencyBase                                         = new ExternalOffset<FVector>(0x00D4, false);                  // 0x00D4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrbitFrequencyRange                                        = new ExternalOffset<FVector>(0x00E0, false);                  // 0x00E0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrbitPhaseBase                                             = new ExternalOffset<FVector>(0x00EC, false);                  // 0x00EC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrbitPhaseRange                                            = new ExternalOffset<FVector>(0x00F8, false);                  // 0x00F8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGlobalVectorFieldScale                                     = new ExternalOffset<float>(0x0104);                           // 0x0104(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGlobalVectorFieldTightness                                 = new ExternalOffset<float>(0x0108);                           // 0x0108(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPerParticleVectorFieldScale                                = new ExternalOffset<float>(0x010C);                           // 0x010C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPerParticleVectorFieldBias                                 = new ExternalOffset<float>(0x0110);                           // 0x0110(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDragCoefficientScale                                       = new ExternalOffset<float>(0x0114);                           // 0x0114(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDragCoefficientBias                                        = new ExternalOffset<float>(0x0118);                           // 0x0118(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offResilienceScale                                            = new ExternalOffset<float>(0x011C);                           // 0x011C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offResilienceBias                                             = new ExternalOffset<float>(0x0120);                           // 0x0120(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCollisionRadiusScale                                       = new ExternalOffset<float>(0x0124);                           // 0x0124(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCollisionRadiusBias                                        = new ExternalOffset<float>(0x0128);                           // 0x0128(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCollisionTimeBias                                          = new ExternalOffset<float>(0x012C);                           // 0x012C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCollisionRandomSpread                                      = new ExternalOffset<float>(0x0130);                           // 0x0130(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCollisionRandomDistribution                                = new ExternalOffset<float>(0x0134);                           // 0x0134(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOneMinusFriction                                           = new ExternalOffset<float>(0x0138);                           // 0x0138(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRotationRateScale                                          = new ExternalOffset<float>(0x013C);                           // 0x013C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCameraMotionBlurAmount                                     = new ExternalOffset<float>(0x0140);                           // 0x0140(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleScreenAlignment>> _offScreenAlignment                                            = new ExternalOffset<TEnumAsByte<EParticleScreenAlignment>>(0x0144, false); // 0x0144(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleAxisLock>>     _offLockAxisFlag                                               = new ExternalOffset<TEnumAsByte<EParticleAxisLock>>(0x0145, false); // 0x0145(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offPivotOffset                                                = new ExternalOffset<FVector2D>(0x0148, false);                // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRemoveHMDRoll                                             = new ExternalOffset<char>(0x0150, false);                     // 0x0150(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinFacingCameraBlendDistance                               = new ExternalOffset<float>(0x0154);                           // 0x0154(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxFacingCameraBlendDistance                               = new ExternalOffset<float>(0x0158);                           // 0x0158(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FColor>                                      QuantizedColorSamples                                          => _offQuantizedColorSamples.GetValue();
	public TArray<FColor>                                      QuantizedMiscSamples                                           => _offQuantizedMiscSamples.GetValue();
	public TArray<FColor>                                      QuantizedSimulationAttrSamples                                 => _offQuantizedSimulationAttrSamples.GetValue();
	public FVector4                                            ColorScale                                                     => _offColorScale.GetValue();
	public FVector4                                            ColorBias                                                      => _offColorBias.GetValue();
	public FVector4                                            MiscScale                                                      => _offMiscScale.GetValue();
	public FVector4                                            MiscBias                                                       => _offMiscBias.GetValue();
	public FVector4                                            SimulationAttrCurveScale                                       => _offSimulationAttrCurveScale.GetValue();
	public FVector4                                            SimulationAttrCurveBias                                        => _offSimulationAttrCurveBias.GetValue();
	public FVector4                                            SubImageSize                                                   => _offSubImageSize.GetValue();
	public FVector4                                            SizeBySpeed                                                    => _offSizeBySpeed.GetValue();
	public FVector                                             ConstantAcceleration                                           => _offConstantAcceleration.GetValue();
	public FVector                                             OrbitOffsetBase                                                => _offOrbitOffsetBase.GetValue();
	public FVector                                             OrbitOffsetRange                                               => _offOrbitOffsetRange.GetValue();
	public FVector                                             OrbitFrequencyBase                                             => _offOrbitFrequencyBase.GetValue();
	public FVector                                             OrbitFrequencyRange                                            => _offOrbitFrequencyRange.GetValue();
	public FVector                                             OrbitPhaseBase                                                 => _offOrbitPhaseBase.GetValue();
	public FVector                                             OrbitPhaseRange                                                => _offOrbitPhaseRange.GetValue();
	public float                                               GlobalVectorFieldScale                                         => _offGlobalVectorFieldScale.GetValue();
	public float                                               GlobalVectorFieldTightness                                     => _offGlobalVectorFieldTightness.GetValue();
	public float                                               PerParticleVectorFieldScale                                    => _offPerParticleVectorFieldScale.GetValue();
	public float                                               PerParticleVectorFieldBias                                     => _offPerParticleVectorFieldBias.GetValue();
	public float                                               DragCoefficientScale                                           => _offDragCoefficientScale.GetValue();
	public float                                               DragCoefficientBias                                            => _offDragCoefficientBias.GetValue();
	public float                                               ResilienceScale                                                => _offResilienceScale.GetValue();
	public float                                               ResilienceBias                                                 => _offResilienceBias.GetValue();
	public float                                               CollisionRadiusScale                                           => _offCollisionRadiusScale.GetValue();
	public float                                               CollisionRadiusBias                                            => _offCollisionRadiusBias.GetValue();
	public float                                               CollisionTimeBias                                              => _offCollisionTimeBias.GetValue();
	public float                                               CollisionRandomSpread                                          => _offCollisionRandomSpread.GetValue();
	public float                                               CollisionRandomDistribution                                    => _offCollisionRandomDistribution.GetValue();
	public float                                               OneMinusFriction                                               => _offOneMinusFriction.GetValue();
	public float                                               RotationRateScale                                              => _offRotationRateScale.GetValue();
	public float                                               CameraMotionBlurAmount                                         => _offCameraMotionBlurAmount.GetValue();
	public TEnumAsByte<EParticleScreenAlignment>               ScreenAlignment                                                => _offScreenAlignment.GetValue();
	public TEnumAsByte<EParticleAxisLock>                      LockAxisFlag                                                   => _offLockAxisFlag.GetValue();
	public FVector2D                                           PivotOffset                                                    => _offPivotOffset.GetValue();
	public float                                               MinFacingCameraBlendDistance                                   => _offMinFacingCameraBlendDistance.GetValue();
	public float                                               MaxFacingCameraBlendDistance                                   => _offMaxFacingCameraBlendDistance.GetValue();
	#endregion

	public FGPUSpriteResourceData(TArray<FColor> c_QuantizedColorSamples, TArray<FColor> c_QuantizedMiscSamples, TArray<FColor> c_QuantizedSimulationAttrSamples, FVector4 c_ColorScale, FVector4 c_ColorBias, FVector4 c_MiscScale, FVector4 c_MiscBias, FVector4 c_SimulationAttrCurveScale, FVector4 c_SimulationAttrCurveBias, FVector4 c_SubImageSize, FVector4 c_SizeBySpeed, FVector c_ConstantAcceleration, FVector c_OrbitOffsetBase, FVector c_OrbitOffsetRange, FVector c_OrbitFrequencyBase, FVector c_OrbitFrequencyRange, FVector c_OrbitPhaseBase, FVector c_OrbitPhaseRange, float c_GlobalVectorFieldScale, float c_GlobalVectorFieldTightness, float c_PerParticleVectorFieldScale, float c_PerParticleVectorFieldBias, float c_DragCoefficientScale, float c_DragCoefficientBias, float c_ResilienceScale, float c_ResilienceBias, float c_CollisionRadiusScale, float c_CollisionRadiusBias, float c_CollisionTimeBias, float c_CollisionRandomSpread, float c_CollisionRandomDistribution, float c_OneMinusFriction, float c_RotationRateScale, float c_CameraMotionBlurAmount, TEnumAsByte<EParticleScreenAlignment> c_ScreenAlignment, TEnumAsByte<EParticleAxisLock> c_LockAxisFlag, FVector2D c_PivotOffset, float c_MinFacingCameraBlendDistance, float c_MaxFacingCameraBlendDistance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offQuantizedColorSamples.SetValue(c_QuantizedColorSamples);
		_offQuantizedMiscSamples.SetValue(c_QuantizedMiscSamples);
		_offQuantizedSimulationAttrSamples.SetValue(c_QuantizedSimulationAttrSamples);
		_offColorScale.SetValue(c_ColorScale);
		_offColorBias.SetValue(c_ColorBias);
		_offMiscScale.SetValue(c_MiscScale);
		_offMiscBias.SetValue(c_MiscBias);
		_offSimulationAttrCurveScale.SetValue(c_SimulationAttrCurveScale);
		_offSimulationAttrCurveBias.SetValue(c_SimulationAttrCurveBias);
		_offSubImageSize.SetValue(c_SubImageSize);
		_offSizeBySpeed.SetValue(c_SizeBySpeed);
		_offConstantAcceleration.SetValue(c_ConstantAcceleration);
		_offOrbitOffsetBase.SetValue(c_OrbitOffsetBase);
		_offOrbitOffsetRange.SetValue(c_OrbitOffsetRange);
		_offOrbitFrequencyBase.SetValue(c_OrbitFrequencyBase);
		_offOrbitFrequencyRange.SetValue(c_OrbitFrequencyRange);
		_offOrbitPhaseBase.SetValue(c_OrbitPhaseBase);
		_offOrbitPhaseRange.SetValue(c_OrbitPhaseRange);
		_offGlobalVectorFieldScale.SetValue(c_GlobalVectorFieldScale);
		_offGlobalVectorFieldTightness.SetValue(c_GlobalVectorFieldTightness);
		_offPerParticleVectorFieldScale.SetValue(c_PerParticleVectorFieldScale);
		_offPerParticleVectorFieldBias.SetValue(c_PerParticleVectorFieldBias);
		_offDragCoefficientScale.SetValue(c_DragCoefficientScale);
		_offDragCoefficientBias.SetValue(c_DragCoefficientBias);
		_offResilienceScale.SetValue(c_ResilienceScale);
		_offResilienceBias.SetValue(c_ResilienceBias);
		_offCollisionRadiusScale.SetValue(c_CollisionRadiusScale);
		_offCollisionRadiusBias.SetValue(c_CollisionRadiusBias);
		_offCollisionTimeBias.SetValue(c_CollisionTimeBias);
		_offCollisionRandomSpread.SetValue(c_CollisionRandomSpread);
		_offCollisionRandomDistribution.SetValue(c_CollisionRandomDistribution);
		_offOneMinusFriction.SetValue(c_OneMinusFriction);
		_offRotationRateScale.SetValue(c_RotationRateScale);
		_offCameraMotionBlurAmount.SetValue(c_CameraMotionBlurAmount);
		_offScreenAlignment.SetValue(c_ScreenAlignment);
		_offLockAxisFlag.SetValue(c_LockAxisFlag);
		_offPivotOffset.SetValue(c_PivotOffset);
		_offMinFacingCameraBlendDistance.SetValue(c_MinFacingCameraBlendDistance);
		_offMaxFacingCameraBlendDistance.SetValue(c_MaxFacingCameraBlendDistance);
	}
}
// ScriptStruct Engine.GPUSpriteLocalVectorFieldInfo
// 0x0070
public class FGPUSpriteLocalVectorFieldInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<UVectorField>                       _offField                                                      = new ExternalOffset<UVectorField>(0x0000, true);              // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FTransform>                         _offTransform                                                  = new ExternalOffset<FTransform>(0x0010, false);               // 0x0010(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offMinInitialRotation                                         = new ExternalOffset<FRotator>(0x0040, false);                 // 0x0040(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offMaxInitialRotation                                         = new ExternalOffset<FRotator>(0x004C, false);                 // 0x004C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotationRate                                               = new ExternalOffset<FRotator>(0x0058, false);                 // 0x0058(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offIntensity                                                  = new ExternalOffset<float>(0x0064);                           // 0x0064(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTightness                                                  = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIgnoreComponentTransform                                  = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbTileX                                                     = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbTileY                                                     = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbTileZ                                                     = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseFixDT                                                  = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UVectorField                                        Field                                                          => _offField.GetValue();
	public FTransform                                          Transform                                                      => _offTransform.GetValue();
	public FRotator                                            MinInitialRotation                                             => _offMinInitialRotation.GetValue();
	public FRotator                                            MaxInitialRotation                                             => _offMaxInitialRotation.GetValue();
	public FRotator                                            RotationRate                                                   => _offRotationRate.GetValue();
	public float                                               Intensity                                                      => _offIntensity.GetValue();
	public float                                               Tightness                                                      => _offTightness.GetValue();
	#endregion

	public FGPUSpriteLocalVectorFieldInfo(UVectorField c_Field, FTransform c_Transform, FRotator c_MinInitialRotation, FRotator c_MaxInitialRotation, FRotator c_RotationRate, float c_Intensity, float c_Tightness) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offField.SetValue(c_Field);
		_offTransform.SetValue(c_Transform);
		_offMinInitialRotation.SetValue(c_MinInitialRotation);
		_offMaxInitialRotation.SetValue(c_MaxInitialRotation);
		_offRotationRate.SetValue(c_RotationRate);
		_offIntensity.SetValue(c_Intensity);
		_offTightness.SetValue(c_Tightness);
	}
}
// ScriptStruct Engine.FloatDistribution
// 0x0028
public class FFloatDistribution : ExternalClass
{
	#region Offsets
	private ExternalOffset<FDistributionLookupTable>           _offtable                                                      = new ExternalOffset<FDistributionLookupTable>(0x0000, false); // 0x0000(0x0028) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FDistributionLookupTable                            table                                                          => _offtable.GetValue();
	#endregion

	public FFloatDistribution(FDistributionLookupTable c_table) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offtable.SetValue(c_table);
	}
}
// ScriptStruct Engine.GPUSpriteEmitterInfo
// 0x02C0
public class FGPUSpriteEmitterInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<UParticleModuleRequired>            _offRequiredModule                                             = new ExternalOffset<UParticleModuleRequired>(0x0000, true);   // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UParticleModuleSpawn>               _offSpawnModule                                                = new ExternalOffset<UParticleModuleSpawn>(0x0008, true);      // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UParticleModuleSpawnPerUnit>        _offSpawnPerUnitModule                                         = new ExternalOffset<UParticleModuleSpawnPerUnit>(0x0010, true); // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleModule>>            _offSpawnModules                                               = new ExternalOffset<TArray<UParticleModule>>(0x0018, false);  // 0x0018(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FGPUSpriteLocalVectorFieldInfo>     _offLocalVectorField                                           = new ExternalOffset<FGPUSpriteLocalVectorFieldInfo>(0x0030, false); // 0x0030(0x0070) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FFloatDistribution>                 _offVectorFieldScale                                           = new ExternalOffset<FFloatDistribution>(0x00A0, false);       // 0x00A0(0x0028) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FFloatDistribution>                 _offDragCoefficient                                            = new ExternalOffset<FFloatDistribution>(0x00C8, false);       // 0x00C8(0x0028) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FFloatDistribution>                 _offPointAttractorStrength                                     = new ExternalOffset<FFloatDistribution>(0x00F0, false);       // 0x00F0(0x0028) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FFloatDistribution>                 _offResilience                                                 = new ExternalOffset<FFloatDistribution>(0x0118, false);       // 0x0118(0x0028) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offConstantAcceleration                                       = new ExternalOffset<FVector>(0x0140, false);                  // 0x0140(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offPointAttractorPosition                                     = new ExternalOffset<FVector>(0x014C, false);                  // 0x014C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPointAttractorRadiusSq                                     = new ExternalOffset<float>(0x0158);                           // 0x0158(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrbitOffsetBase                                            = new ExternalOffset<FVector>(0x015C, false);                  // 0x015C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offOrbitOffsetRange                                           = new ExternalOffset<FVector>(0x0168, false);                  // 0x0168(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offInvMaxSize                                                 = new ExternalOffset<FVector2D>(0x0174, false);                // 0x0174(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInvRotationRateScale                                       = new ExternalOffset<float>(0x017C);                           // 0x017C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxLifetime                                                = new ExternalOffset<float>(0x0180);                           // 0x0180(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxParticleCount                                           = new ExternalOffset<int>(0x0184);                             // 0x0184(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleScreenAlignment>> _offScreenAlignment                                            = new ExternalOffset<TEnumAsByte<EParticleScreenAlignment>>(0x0188, false); // 0x0188(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleAxisLock>>     _offLockAxisFlag                                               = new ExternalOffset<TEnumAsByte<EParticleAxisLock>>(0x0189, false); // 0x0189(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableCollision                                           = new ExternalOffset<char>(0x018C, false);                     // 0x018C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleCollisionMode>> _offCollisionMode                                              = new ExternalOffset<TEnumAsByte<EParticleCollisionMode>>(0x0190, false); // 0x0190(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRemoveHMDRoll                                             = new ExternalOffset<char>(0x0194, false);                     // 0x0194(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinFacingCameraBlendDistance                               = new ExternalOffset<float>(0x0198);                           // 0x0198(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxFacingCameraBlendDistance                               = new ExternalOffset<float>(0x019C);                           // 0x019C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>             _offDynamicColor                                               = new ExternalOffset<FRawDistributionVector>(0x01A0, false);   // 0x01A0(0x0050) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>              _offDynamicAlpha                                               = new ExternalOffset<FRawDistributionFloat>(0x01F0, false);    // 0x01F0(0x0038) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>             _offDynamicColorScale                                          = new ExternalOffset<FRawDistributionVector>(0x0228, false);   // 0x0228(0x0050) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>              _offDynamicAlphaScale                                          = new ExternalOffset<FRawDistributionFloat>(0x0278, false);    // 0x0278(0x0038) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UParticleModuleRequired                             RequiredModule                                                 => _offRequiredModule.GetValue();
	public UParticleModuleSpawn                                SpawnModule                                                    => _offSpawnModule.GetValue();
	public UParticleModuleSpawnPerUnit                         SpawnPerUnitModule                                             => _offSpawnPerUnitModule.GetValue();
	public TArray<UParticleModule>                             SpawnModules                                                   => _offSpawnModules.GetValue();
	public FGPUSpriteLocalVectorFieldInfo                      LocalVectorField                                               => _offLocalVectorField.GetValue();
	public FFloatDistribution                                  VectorFieldScale                                               => _offVectorFieldScale.GetValue();
	public FFloatDistribution                                  DragCoefficient                                                => _offDragCoefficient.GetValue();
	public FFloatDistribution                                  PointAttractorStrength                                         => _offPointAttractorStrength.GetValue();
	public FFloatDistribution                                  Resilience                                                     => _offResilience.GetValue();
	public FVector                                             ConstantAcceleration                                           => _offConstantAcceleration.GetValue();
	public FVector                                             PointAttractorPosition                                         => _offPointAttractorPosition.GetValue();
	public float                                               PointAttractorRadiusSq                                         => _offPointAttractorRadiusSq.GetValue();
	public FVector                                             OrbitOffsetBase                                                => _offOrbitOffsetBase.GetValue();
	public FVector                                             OrbitOffsetRange                                               => _offOrbitOffsetRange.GetValue();
	public FVector2D                                           InvMaxSize                                                     => _offInvMaxSize.GetValue();
	public float                                               InvRotationRateScale                                           => _offInvRotationRateScale.GetValue();
	public float                                               MaxLifetime                                                    => _offMaxLifetime.GetValue();
	public int                                                 MaxParticleCount                                               => _offMaxParticleCount.GetValue();
	public TEnumAsByte<EParticleScreenAlignment>               ScreenAlignment                                                => _offScreenAlignment.GetValue();
	public TEnumAsByte<EParticleAxisLock>                      LockAxisFlag                                                   => _offLockAxisFlag.GetValue();
	public TEnumAsByte<EParticleCollisionMode>                 CollisionMode                                                  => _offCollisionMode.GetValue();
	public float                                               MinFacingCameraBlendDistance                                   => _offMinFacingCameraBlendDistance.GetValue();
	public float                                               MaxFacingCameraBlendDistance                                   => _offMaxFacingCameraBlendDistance.GetValue();
	public FRawDistributionVector                              DynamicColor                                                   => _offDynamicColor.GetValue();
	public FRawDistributionFloat                               DynamicAlpha                                                   => _offDynamicAlpha.GetValue();
	public FRawDistributionVector                              DynamicColorScale                                              => _offDynamicColorScale.GetValue();
	public FRawDistributionFloat                               DynamicAlphaScale                                              => _offDynamicAlphaScale.GetValue();
	#endregion

	public FGPUSpriteEmitterInfo(UParticleModuleRequired c_RequiredModule, UParticleModuleSpawn c_SpawnModule, UParticleModuleSpawnPerUnit c_SpawnPerUnitModule, TArray<UParticleModule> c_SpawnModules, FGPUSpriteLocalVectorFieldInfo c_LocalVectorField, FFloatDistribution c_VectorFieldScale, FFloatDistribution c_DragCoefficient, FFloatDistribution c_PointAttractorStrength, FFloatDistribution c_Resilience, FVector c_ConstantAcceleration, FVector c_PointAttractorPosition, float c_PointAttractorRadiusSq, FVector c_OrbitOffsetBase, FVector c_OrbitOffsetRange, FVector2D c_InvMaxSize, float c_InvRotationRateScale, float c_MaxLifetime, int c_MaxParticleCount, TEnumAsByte<EParticleScreenAlignment> c_ScreenAlignment, TEnumAsByte<EParticleAxisLock> c_LockAxisFlag, TEnumAsByte<EParticleCollisionMode> c_CollisionMode, float c_MinFacingCameraBlendDistance, float c_MaxFacingCameraBlendDistance, FRawDistributionVector c_DynamicColor, FRawDistributionFloat c_DynamicAlpha, FRawDistributionVector c_DynamicColorScale, FRawDistributionFloat c_DynamicAlphaScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRequiredModule.SetValue(c_RequiredModule);
		_offSpawnModule.SetValue(c_SpawnModule);
		_offSpawnPerUnitModule.SetValue(c_SpawnPerUnitModule);
		_offSpawnModules.SetValue(c_SpawnModules);
		_offLocalVectorField.SetValue(c_LocalVectorField);
		_offVectorFieldScale.SetValue(c_VectorFieldScale);
		_offDragCoefficient.SetValue(c_DragCoefficient);
		_offPointAttractorStrength.SetValue(c_PointAttractorStrength);
		_offResilience.SetValue(c_Resilience);
		_offConstantAcceleration.SetValue(c_ConstantAcceleration);
		_offPointAttractorPosition.SetValue(c_PointAttractorPosition);
		_offPointAttractorRadiusSq.SetValue(c_PointAttractorRadiusSq);
		_offOrbitOffsetBase.SetValue(c_OrbitOffsetBase);
		_offOrbitOffsetRange.SetValue(c_OrbitOffsetRange);
		_offInvMaxSize.SetValue(c_InvMaxSize);
		_offInvRotationRateScale.SetValue(c_InvRotationRateScale);
		_offMaxLifetime.SetValue(c_MaxLifetime);
		_offMaxParticleCount.SetValue(c_MaxParticleCount);
		_offScreenAlignment.SetValue(c_ScreenAlignment);
		_offLockAxisFlag.SetValue(c_LockAxisFlag);
		_offCollisionMode.SetValue(c_CollisionMode);
		_offMinFacingCameraBlendDistance.SetValue(c_MinFacingCameraBlendDistance);
		_offMaxFacingCameraBlendDistance.SetValue(c_MaxFacingCameraBlendDistance);
		_offDynamicColor.SetValue(c_DynamicColor);
		_offDynamicAlpha.SetValue(c_DynamicAlpha);
		_offDynamicColorScale.SetValue(c_DynamicColorScale);
		_offDynamicAlphaScale.SetValue(c_DynamicAlphaScale);
	}
}
// ScriptStruct Engine.NamedEmitterMaterial
// 0x0010
public class FNamedEmitterMaterial : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInterface>                 _offMaterial                                                   = new ExternalOffset<UMaterialInterface>(0x0008, true);        // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public UMaterialInterface                                  Material                                                       => _offMaterial.GetValue();
	#endregion

	public FNamedEmitterMaterial(FName c_Name, UMaterialInterface c_Material) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offMaterial.SetValue(c_Material);
	}
}
// ScriptStruct Engine.LODSoloTrack
// 0x0010
public class FLODSoloTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<char>>                       _offSoloEnableSetting                                          = new ExternalOffset<TArray<char>>(0x0000, false);             // 0x0000(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<char>                                        SoloEnableSetting                                              => _offSoloEnableSetting.GetValue();
	#endregion

	public FLODSoloTrack(TArray<char> c_SoloEnableSetting) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSoloEnableSetting.SetValue(c_SoloEnableSetting);
	}
}
// ScriptStruct Engine.ParticleSystemLOD
// 0x0001
public class FParticleSystemLOD : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FParticleSystemLOD() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.ParticleSysParam
// 0x0080
public class FParticleSysParam : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleSysParamType>> _offParamType                                                  = new ExternalOffset<TEnumAsByte<EParticleSysParamType>>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offScalar                                                     = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offScalar_Low                                                 = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offVector                                                     = new ExternalOffset<FVector>(0x0014, false);                  // 0x0014(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offVector_Low                                                 = new ExternalOffset<FVector>(0x0020, false);                  // 0x0020(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offColor                                                      = new ExternalOffset<FColor>(0x002C, false);                   // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                             _offActor                                                      = new ExternalOffset<AActor>(0x0030, true);                    // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInterface>                 _offMaterial                                                   = new ExternalOffset<UMaterialInterface>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public TEnumAsByte<EParticleSysParamType>                  ParamType                                                      => _offParamType.GetValue();
	public float                                               Scalar                                                         => _offScalar.GetValue();
	public float                                               Scalar_Low                                                     => _offScalar_Low.GetValue();
	public FVector                                             Vector                                                         => _offVector.GetValue();
	public FVector                                             Vector_Low                                                     => _offVector_Low.GetValue();
	public FColor                                              Color                                                          => _offColor.GetValue();
	public AActor                                              Actor                                                          => _offActor.GetValue();
	public UMaterialInterface                                  Material                                                       => _offMaterial.GetValue();
	#endregion

	public FParticleSysParam(FName c_Name, TEnumAsByte<EParticleSysParamType> c_ParamType, float c_Scalar, float c_Scalar_Low, FVector c_Vector, FVector c_Vector_Low, FColor c_Color, AActor c_Actor, UMaterialInterface c_Material) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offParamType.SetValue(c_ParamType);
		_offScalar.SetValue(c_Scalar);
		_offScalar_Low.SetValue(c_Scalar_Low);
		_offVector.SetValue(c_Vector);
		_offVector_Low.SetValue(c_Vector_Low);
		_offColor.SetValue(c_Color);
		_offActor.SetValue(c_Actor);
		_offMaterial.SetValue(c_Material);
	}
}
// ScriptStruct Engine.ParticleSystemWorldManagerTickFunction
// 0x0008 (0x0058 - 0x0050)
public class FParticleSystemWorldManagerTickFunction : FTickFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FParticleSystemWorldManagerTickFunction() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.ParticleSystemReplayFrame
// 0x0010
public class FParticleSystemReplayFrame : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FParticleSystemReplayFrame() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.ParticleEmitterReplayFrame
// 0x0010
public class FParticleEmitterReplayFrame : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FParticleEmitterReplayFrame() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.PhysicalAnimationData
// 0x0024
public class FPhysicalAnimationData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offBodyName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsLocalSimulation                                         = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOrientationStrength                                        = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAngularVelocityStrength                                    = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPositionStrength                                           = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVelocityStrength                                           = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxLinearForce                                             = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxAngularForce                                            = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               BodyName                                                       => _offBodyName.GetValue();
	public float                                               OrientationStrength                                            => _offOrientationStrength.GetValue();
	public float                                               AngularVelocityStrength                                        => _offAngularVelocityStrength.GetValue();
	public float                                               PositionStrength                                               => _offPositionStrength.GetValue();
	public float                                               VelocityStrength                                               => _offVelocityStrength.GetValue();
	public float                                               MaxLinearForce                                                 => _offMaxLinearForce.GetValue();
	public float                                               MaxAngularForce                                                => _offMaxAngularForce.GetValue();
	#endregion

	public FPhysicalAnimationData(FName c_BodyName, float c_OrientationStrength, float c_AngularVelocityStrength, float c_PositionStrength, float c_VelocityStrength, float c_MaxLinearForce, float c_MaxAngularForce) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBodyName.SetValue(c_BodyName);
		_offOrientationStrength.SetValue(c_OrientationStrength);
		_offAngularVelocityStrength.SetValue(c_AngularVelocityStrength);
		_offPositionStrength.SetValue(c_PositionStrength);
		_offVelocityStrength.SetValue(c_VelocityStrength);
		_offMaxLinearForce.SetValue(c_MaxLinearForce);
		_offMaxAngularForce.SetValue(c_MaxAngularForce);
	}
}
// ScriptStruct Engine.TireFrictionScalePair
// 0x0010
public class FTireFrictionScalePair : ExternalClass
{
	#region Offsets
	private ExternalOffset<UTireType>                          _offTireType                                                   = new ExternalOffset<UTireType>(0x0000, true);                 // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFrictionScale                                              = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTireType                                           TireType                                                       => _offTireType.GetValue();
	public float                                               FrictionScale                                                  => _offFrictionScale.GetValue();
	#endregion

	public FTireFrictionScalePair(UTireType c_TireType, float c_FrictionScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTireType.SetValue(c_TireType);
		_offFrictionScale.SetValue(c_FrictionScale);
	}
}
// ScriptStruct Engine.PhysicalAnimationProfile
// 0x002C
public class FPhysicalAnimationProfile : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offProfileName                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPhysicalAnimationData>             _offPhysicalAnimationData                                      = new ExternalOffset<FPhysicalAnimationData>(0x0008, false);   // 0x0008(0x0024) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ProfileName                                                    => _offProfileName.GetValue();
	public FPhysicalAnimationData                              PhysicalAnimationData                                          => _offPhysicalAnimationData.GetValue();
	#endregion

	public FPhysicalAnimationProfile(FName c_ProfileName, FPhysicalAnimationData c_PhysicalAnimationData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offProfileName.SetValue(c_ProfileName);
		_offPhysicalAnimationData.SetValue(c_PhysicalAnimationData);
	}
}
// ScriptStruct Engine.PhysicsConstraintProfileHandle
// 0x010C
public class FPhysicsConstraintProfileHandle : ExternalClass
{
	#region Offsets
	private ExternalOffset<FConstraintProfileProperties>       _offProfileProperties                                          = new ExternalOffset<FConstraintProfileProperties>(0x0000, false); // 0x0000(0x0104) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offProfileName                                                = new ExternalOffset<FName>(0x0104, false);                    // 0x0104(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FConstraintProfileProperties                        ProfileProperties                                              => _offProfileProperties.GetValue();
	public FName                                               ProfileName                                                    => _offProfileName.GetValue();
	#endregion

	public FPhysicsConstraintProfileHandle(FConstraintProfileProperties c_ProfileProperties, FName c_ProfileName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offProfileProperties.SetValue(c_ProfileProperties);
		_offProfileName.SetValue(c_ProfileName);
	}
}
// ScriptStruct Engine.ChaosPhysicsSettings
// 0x0003
public class FChaosPhysicsSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<EChaosThreadingMode>                _offDefaultThreadingModel                                      = new ExternalOffset<EChaosThreadingMode>(0x0000, false);      // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EChaosSolverTickMode>               _offDedicatedThreadTickMode                                    = new ExternalOffset<EChaosSolverTickMode>(0x0001, false);     // 0x0001(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EChaosBufferMode>                   _offDedicatedThreadBufferMode                                  = new ExternalOffset<EChaosBufferMode>(0x0002, false);         // 0x0002(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public EChaosThreadingMode                                 DefaultThreadingModel                                          => _offDefaultThreadingModel.GetValue();
	public EChaosSolverTickMode                                DedicatedThreadTickMode                                        => _offDedicatedThreadTickMode.GetValue();
	public EChaosBufferMode                                    DedicatedThreadBufferMode                                      => _offDedicatedThreadBufferMode.GetValue();
	#endregion

	public FChaosPhysicsSettings(EChaosThreadingMode c_DefaultThreadingModel, EChaosSolverTickMode c_DedicatedThreadTickMode, EChaosBufferMode c_DedicatedThreadBufferMode) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefaultThreadingModel.SetValue(c_DefaultThreadingModel);
		_offDedicatedThreadTickMode.SetValue(c_DedicatedThreadTickMode);
		_offDedicatedThreadBufferMode.SetValue(c_DedicatedThreadBufferMode);
	}
}
// ScriptStruct Engine.PhysicalSurfaceName
// 0x000C
public class FPhysicalSurfaceName : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EPhysicalSurface>>      _offType                                                       = new ExternalOffset<TEnumAsByte<EPhysicalSurface>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EPhysicalSurface>                       Type                                                           => _offType.GetValue();
	public FName                                               Name                                                           => _offName.GetValue();
	#endregion

	public FPhysicalSurfaceName(TEnumAsByte<EPhysicalSurface> c_Type, FName c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offType.SetValue(c_Type);
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct Engine.DelegateArray
// 0x0010
public class FDelegateArray : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FScriptDelegate>>            _offDelegates                                                  = new ExternalOffset<TArray<FScriptDelegate>>(0x0000, false);  // 0x0000(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FScriptDelegate>                             Delegates                                                      => _offDelegates.GetValue();
	#endregion

	public FDelegateArray(TArray<FScriptDelegate> c_Delegates) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDelegates.SetValue(c_Delegates);
	}
}
// ScriptStruct Engine.TViewTarget
// 0x05E0
public class FTViewTarget : ExternalClass
{
	#region Offsets
	private ExternalOffset<AActor>                             _offTarget                                                     = new ExternalOffset<AActor>(0x0000, true);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMinimalViewInfo>                   _offPOV                                                        = new ExternalOffset<FMinimalViewInfo>(0x0010, false);         // 0x0010(0x05C0) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	private ExternalOffset<APlayerState>                       _offPlayerState                                                = new ExternalOffset<APlayerState>(0x05D0, true);              // 0x05D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public AActor                                              Target                                                         => _offTarget.GetValue();
	public FMinimalViewInfo                                    POV                                                            => _offPOV.GetValue();
	public APlayerState                                        PlayerState                                                    => _offPlayerState.GetValue();
	#endregion

	public FTViewTarget(AActor c_Target, FMinimalViewInfo c_POV, APlayerState c_PlayerState) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTarget.SetValue(c_Target);
		_offPOV.SetValue(c_POV);
		_offPlayerState.SetValue(c_PlayerState);
	}
}
// ScriptStruct Engine.CameraCacheEntry
// 0x05D0
public class FCameraCacheEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTimestamp                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMinimalViewInfo>                   _offPOV                                                        = new ExternalOffset<FMinimalViewInfo>(0x0010, false);         // 0x0010(0x05C0) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Timestamp                                                      => _offTimestamp.GetValue();
	public FMinimalViewInfo                                    POV                                                            => _offPOV.GetValue();
	#endregion

	public FCameraCacheEntry(float c_Timestamp, FMinimalViewInfo c_POV) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTimestamp.SetValue(c_Timestamp);
		_offPOV.SetValue(c_POV);
	}
}
// ScriptStruct Engine.InputActionSpeechMapping
// 0x0010
public class FInputActionSpeechMapping : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offActionName                                                 = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                              _offSpeechKeyword                                              = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FName                                               ActionName                                                     => _offActionName.GetValue();
	public FName                                               SpeechKeyword                                                  => _offSpeechKeyword.GetValue();
	#endregion

	public FInputActionSpeechMapping(FName c_ActionName, FName c_SpeechKeyword) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActionName.SetValue(c_ActionName);
		_offSpeechKeyword.SetValue(c_SpeechKeyword);
	}
}
// ScriptStruct Engine.InputAxisKeyMapping
// 0x0028
public class FInputAxisKeyMapping : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offAxisName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offScale                                                      = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FKey>                               _offKey                                                        = new ExternalOffset<FKey>(0x0010, false);                     // 0x0010(0x0018) (Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               AxisName                                                       => _offAxisName.GetValue();
	public float                                               Scale                                                          => _offScale.GetValue();
	public FKey                                                Key                                                            => _offKey.GetValue();
	#endregion

	public FInputAxisKeyMapping(FName c_AxisName, float c_Scale, FKey c_Key) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAxisName.SetValue(c_AxisName);
		_offScale.SetValue(c_Scale);
		_offKey.SetValue(c_Key);
	}
}
// ScriptStruct Engine.InputActionKeyMapping
// 0x0028
public class FInputActionKeyMapping : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offActionName                                                 = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbShift                                                     = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCtrl                                                      = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAlt                                                       = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCmd                                                       = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FKey>                               _offKey                                                        = new ExternalOffset<FKey>(0x0010, false);                     // 0x0010(0x0018) (Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ActionName                                                     => _offActionName.GetValue();
	public FKey                                                Key                                                            => _offKey.GetValue();
	#endregion

	public FInputActionKeyMapping(FName c_ActionName, FKey c_Key) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActionName.SetValue(c_ActionName);
		_offKey.SetValue(c_Key);
	}
}
// ScriptStruct Engine.InputAxisProperties
// 0x0010
public class FInputAxisProperties : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offDeadZone                                                   = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSensitivity                                                = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offExponent                                                   = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbInvert                                                    = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               DeadZone                                                       => _offDeadZone.GetValue();
	public float                                               Sensitivity                                                    => _offSensitivity.GetValue();
	public float                                               Exponent                                                       => _offExponent.GetValue();
	#endregion

	public FInputAxisProperties(float c_DeadZone, float c_Sensitivity, float c_Exponent) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDeadZone.SetValue(c_DeadZone);
		_offSensitivity.SetValue(c_Sensitivity);
		_offExponent.SetValue(c_Exponent);
	}
}
// ScriptStruct Engine.InputAxisConfigEntry
// 0x0018
public class FInputAxisConfigEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offAxisKeyName                                                = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInputAxisProperties>               _offAxisProperties                                             = new ExternalOffset<FInputAxisProperties>(0x0008, false);     // 0x0008(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               AxisKeyName                                                    => _offAxisKeyName.GetValue();
	public FInputAxisProperties                                AxisProperties                                                 => _offAxisProperties.GetValue();
	#endregion

	public FInputAxisConfigEntry(FName c_AxisKeyName, FInputAxisProperties c_AxisProperties) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAxisKeyName.SetValue(c_AxisKeyName);
		_offAxisProperties.SetValue(c_AxisProperties);
	}
}
// ScriptStruct Engine.KeyBind
// 0x0030
public class FKeyBind : ExternalClass
{
	#region Offsets
	private ExternalOffset<FKey>                               _offKey                                                        = new ExternalOffset<FKey>(0x0000, false);                     // 0x0000(0x0018) (Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCommand                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offControl                                                    = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offShift                                                      = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offAlt                                                        = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offCmd                                                        = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIgnoreCtrl                                                = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIgnoreShift                                               = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIgnoreAlt                                                 = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIgnoreCmd                                                 = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbDisabled                                                  = new ExternalOffset<char>(0x0029, false);                     // 0x0029(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FKey                                                Key                                                            => _offKey.GetValue();
	public FString                                             Command                                                        => _offCommand.GetValue();
	#endregion

	public FKeyBind(FKey c_Key, FString c_Command) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKey.SetValue(c_Key);
		_offCommand.SetValue(c_Command);
	}
}
// ScriptStruct Engine.PlayerMuteList
// 0x0038
public class FPlayerMuteList : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbHasVoiceHandshakeCompleted                                = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVoiceChannelIdx                                            = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bHasVoiceHandshakeCompleted                                    => _offbHasVoiceHandshakeCompleted.GetValue();
	public int                                                 VoiceChannelIdx                                                => _offVoiceChannelIdx.GetValue();
	#endregion

	public FPlayerMuteList(byte/*(bool)*/ c_bHasVoiceHandshakeCompleted, int c_VoiceChannelIdx) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbHasVoiceHandshakeCompleted.SetValue(c_bHasVoiceHandshakeCompleted);
		_offVoiceChannelIdx.SetValue(c_VoiceChannelIdx);
	}
}
// ScriptStruct Engine.PoseData
// 0x0070
public class FPoseData : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FTransform>>                 _offLocalSpacePose                                             = new ExternalOffset<TArray<FTransform>>(0x0000, false);       // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private TMap<int, int>                                     _offTrackToBufferIndex                                         = new ExternalOffset<TMap<int>>(0x0010, false);                // 0x0010(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                      _offCurveData                                                  = new ExternalOffset<TArray<float>>(0x0060, false);            // 0x0060(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FTransform>                                  LocalSpacePose                                                 => _offLocalSpacePose.GetValue();
	public TArray<float>                                       CurveData                                                      => _offCurveData.GetValue();
	#endregion

	public FPoseData(TArray<FTransform> c_LocalSpacePose, TArray<float> c_CurveData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocalSpacePose.SetValue(c_LocalSpacePose);
		_offCurveData.SetValue(c_CurveData);
	}
}
// ScriptStruct Engine.PoseDataContainer
// 0x0090
public class FPoseDataContainer : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FSmartName>>                 _offPoseNames                                                  = new ExternalOffset<TArray<FSmartName>>(0x0000, false);       // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FName>>                      _offTracks                                                     = new ExternalOffset<TArray<FName>>(0x0010, false);            // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
//	private TMap<struct FName, int>                            _offTrackMap                                                   = new ExternalOffset<TMap<int>>(0x0020, false);                // 0x0020(0x0050) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FPoseData>>                  _offPoses                                                      = new ExternalOffset<TArray<FPoseData>>(0x0070, false);        // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FAnimCurveBase>>             _offCurves                                                     = new ExternalOffset<TArray<FAnimCurveBase>>(0x0080, false);   // 0x0080(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FSmartName>                                  PoseNames                                                      => _offPoseNames.GetValue();
	public TArray<FName>                                       Tracks                                                         => _offTracks.GetValue();
	public TArray<FPoseData>                                   Poses                                                          => _offPoses.GetValue();
	public TArray<FAnimCurveBase>                              Curves                                                         => _offCurves.GetValue();
	#endregion

	public FPoseDataContainer(TArray<FSmartName> c_PoseNames, TArray<FName> c_Tracks, TArray<FPoseData> c_Poses, TArray<FAnimCurveBase> c_Curves) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPoseNames.SetValue(c_PoseNames);
		_offTracks.SetValue(c_Tracks);
		_offPoses.SetValue(c_Poses);
		_offCurves.SetValue(c_Curves);
	}
}
// ScriptStruct Engine.PreviewAttachedObjectPair
// 0x0038
public class FPreviewAttachedObjectPair : ExternalClass
{
	#region Offsets
	private ExternalOffset<UObject>                            _offObject                                                     = new ExternalOffset<UObject>(0x0028, true);                   // 0x0028(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                              _offAttachedTo                                                 = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UObject                                             Object                                                         => _offObject.GetValue();
	public FName                                               AttachedTo                                                     => _offAttachedTo.GetValue();
	#endregion

	public FPreviewAttachedObjectPair(UObject c_Object, FName c_AttachedTo) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offObject.SetValue(c_Object);
		_offAttachedTo.SetValue(c_AttachedTo);
	}
}
// ScriptStruct Engine.PreviewAssetAttachContainer
// 0x0010
public class FPreviewAssetAttachContainer : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FPreviewAttachedObjectPair>> _offAttachedObjects                                            = new ExternalOffset<TArray<FPreviewAttachedObjectPair>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FPreviewAttachedObjectPair>                  AttachedObjects                                                => _offAttachedObjects.GetValue();
	#endregion

	public FPreviewAssetAttachContainer(TArray<FPreviewAttachedObjectPair> c_AttachedObjects) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAttachedObjects.SetValue(c_AttachedObjects);
	}
}
// ScriptStruct Engine.PreviewMeshCollectionEntry
// 0x0028
public class FPreviewMeshCollectionEntry : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FPreviewMeshCollectionEntry() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.PrimitiveComponentInstanceData
// 0x0048 (0x00F0 - 0x00A8)
public class FPrimitiveComponentInstanceData : FSceneComponentInstanceData
{
	#region Offsets
	private ExternalOffset<FTransform>                         _offComponentTransform                                         = new ExternalOffset<FTransform>(0x00B0, false);               // 0x00B0(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                                _offVisibilityId                                               = new ExternalOffset<int>(0x00E0);                             // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UPrimitiveComponent>                _offLODParent                                                  = new ExternalOffset<UPrimitiveComponent>(0x00E8, true);       // 0x00E8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FTransform                                          ComponentTransform                                             => _offComponentTransform.GetValue();
	public int                                                 VisibilityId                                                   => _offVisibilityId.GetValue();
	public UPrimitiveComponent                                 LODParent                                                      => _offLODParent.GetValue();
	#endregion

	public FPrimitiveComponentInstanceData(FTransform c_ComponentTransform, int c_VisibilityId, UPrimitiveComponent c_LODParent) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offComponentTransform.SetValue(c_ComponentTransform);
		_offVisibilityId.SetValue(c_VisibilityId);
		_offLODParent.SetValue(c_LODParent);
	}
}
// ScriptStruct Engine.SpriteCategoryInfo
// 0x0038
public class FSpriteCategoryInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offCategory                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FText>                              _offDisplayName                                                = new ExternalOffset<FText>(0x0008, false);                    // 0x0008(0x0018) (NativeAccessSpecifierPublic)
	private ExternalOffset<FText>                              _offDescription                                                = new ExternalOffset<FText>(0x0020, false);                    // 0x0020(0x0018) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Category                                                       => _offCategory.GetValue();
	public FText                                               DisplayName                                                    => _offDisplayName.GetValue();
	public FText                                               Description                                                    => _offDescription.GetValue();
	#endregion

	public FSpriteCategoryInfo(FName c_Category, FText c_DisplayName, FText c_Description) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCategory.SetValue(c_Category);
		_offDisplayName.SetValue(c_DisplayName);
		_offDescription.SetValue(c_Description);
	}
}
// ScriptStruct Engine.CompressedRichCurve
// 0x0018
public class FCompressedRichCurve : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FCompressedRichCurve() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.RigTransformConstraint
// 0x0010
public class FRigTransformConstraint : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EConstraintTransform>>  _offTranformType                                               = new ExternalOffset<TEnumAsByte<EConstraintTransform>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offParentSpace                                                = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWeight                                                     = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EConstraintTransform>                   TranformType                                                   => _offTranformType.GetValue();
	public FName                                               ParentSpace                                                    => _offParentSpace.GetValue();
	public float                                               Weight                                                         => _offWeight.GetValue();
	#endregion

	public FRigTransformConstraint(TEnumAsByte<EConstraintTransform> c_TranformType, FName c_ParentSpace, float c_Weight) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTranformType.SetValue(c_TranformType);
		_offParentSpace.SetValue(c_ParentSpace);
		_offWeight.SetValue(c_Weight);
	}
}
// ScriptStruct Engine.TransformBaseConstraint
// 0x0010
public class FTransformBaseConstraint : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FRigTransformConstraint>>    _offTransformConstraints                                       = new ExternalOffset<TArray<FRigTransformConstraint>>(0x0000, false); // 0x0000(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FRigTransformConstraint>                     TransformConstraints                                           => _offTransformConstraints.GetValue();
	#endregion

	public FTransformBaseConstraint(TArray<FRigTransformConstraint> c_TransformConstraints) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTransformConstraints.SetValue(c_TransformConstraints);
	}
}
// ScriptStruct Engine.TransformBase
// 0x0028
public class FTransformBase : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offNode                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<FTransformBaseConstraint>           _offConstraints[0x2]                                           = new ExternalOffset<FTransformBaseConstraint>(0x0008, false); // 0x0008(0x0010) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Node                                                           => _offNode.GetValue();
	#endregion

	public FTransformBase(FName c_Node) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNode.SetValue(c_Node);
	}
}
// ScriptStruct Engine.Node
// 0x0060
public class FNode : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offParentName                                                 = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FTransform>                         _offTransform                                                  = new ExternalOffset<FTransform>(0x0010, false);               // 0x0010(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDisplayName                                                = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbAdvanced                                                  = new ExternalOffset<byte/*(bool)*/>(0x0050);                  // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public FName                                               ParentName                                                     => _offParentName.GetValue();
	public FTransform                                          Transform                                                      => _offTransform.GetValue();
	public FString                                             DisplayName                                                    => _offDisplayName.GetValue();
	public byte/*(bool)*/                                      bAdvanced                                                      => _offbAdvanced.GetValue();
	#endregion

	public FNode(FName c_Name, FName c_ParentName, FTransform c_Transform, FString c_DisplayName, byte/*(bool)*/ c_bAdvanced) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offParentName.SetValue(c_ParentName);
		_offTransform.SetValue(c_Transform);
		_offDisplayName.SetValue(c_DisplayName);
		_offbAdvanced.SetValue(c_bAdvanced);
	}
}
// ScriptStruct Engine.RootMotionSourceStatus
// 0x0001
public class FRootMotionSourceStatus : ExternalClass
{
	#region Offsets
//	private ExternalOffset<char>                               _offFlags                                                      = new ExternalOffset<char>(0x0000, false);                     // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FRootMotionSourceStatus() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.RootMotionFinishVelocitySettings
// 0x0014
public class FRootMotionFinishVelocitySettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<ERootMotionFinishVelocityMode>      _offMode                                                       = new ExternalOffset<ERootMotionFinishVelocityMode>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offSetVelocity                                                = new ExternalOffset<FVector>(0x0004, false);                  // 0x0004(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offClampVelocity                                              = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ERootMotionFinishVelocityMode                       Mode                                                           => _offMode.GetValue();
	public FVector                                             SetVelocity                                                    => _offSetVelocity.GetValue();
	public float                                               ClampVelocity                                                  => _offClampVelocity.GetValue();
	#endregion

	public FRootMotionFinishVelocitySettings(ERootMotionFinishVelocityMode c_Mode, FVector c_SetVelocity, float c_ClampVelocity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMode.SetValue(c_Mode);
		_offSetVelocity.SetValue(c_SetVelocity);
		_offClampVelocity.SetValue(c_ClampVelocity);
	}
}
// ScriptStruct Engine.RootMotionSource
// 0x00A0
public class FRootMotionSource : ExternalClass
{
	#region Offsets
	private ExternalOffset<ushort>                             _offPriority                                                   = new ExternalOffset<ushort>(0x0010);                          // 0x0010(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ushort>                             _offLocalID                                                    = new ExternalOffset<ushort>(0x0012);                          // 0x0012(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERootMotionAccumulateMode>          _offAccumulateMode                                             = new ExternalOffset<ERootMotionAccumulateMode>(0x0014, false); // 0x0014(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offInstanceName                                               = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStartTime                                                  = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCurrentTime                                                = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPreviousTime                                               = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDuration                                                   = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionSourceStatus>            _offStatus                                                     = new ExternalOffset<FRootMotionSourceStatus>(0x0030, false);  // 0x0030(0x0001) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionSourceSettings>          _offSettings                                                   = new ExternalOffset<FRootMotionSourceSettings>(0x0031, false); // 0x0031(0x0001) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbInLocalSpace                                              = new ExternalOffset<byte/*(bool)*/>(0x0032);                  // 0x0032(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionMovementParams>          _offRootMotionParams                                           = new ExternalOffset<FRootMotionMovementParams>(0x0040, false); // 0x0040(0x0040) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionFinishVelocitySettings>  _offFinishVelocityParams                                       = new ExternalOffset<FRootMotionFinishVelocitySettings>(0x0080, false); // 0x0080(0x0014) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ushort                                              Priority                                                       => _offPriority.GetValue();
	public ushort                                              LocalID                                                        => _offLocalID.GetValue();
	public ERootMotionAccumulateMode                           AccumulateMode                                                 => _offAccumulateMode.GetValue();
	public FName                                               InstanceName                                                   => _offInstanceName.GetValue();
	public float                                               StartTime                                                      => _offStartTime.GetValue();
	public float                                               CurrentTime                                                    => _offCurrentTime.GetValue();
	public float                                               PreviousTime                                                   => _offPreviousTime.GetValue();
	public float                                               Duration                                                       => _offDuration.GetValue();
	public FRootMotionSourceStatus                             Status                                                         => _offStatus.GetValue();
	public FRootMotionSourceSettings                           Settings                                                       => _offSettings.GetValue();
	public byte/*(bool)*/                                      bInLocalSpace                                                  => _offbInLocalSpace.GetValue();
	public FRootMotionMovementParams                           RootMotionParams                                               => _offRootMotionParams.GetValue();
	public FRootMotionFinishVelocitySettings                   FinishVelocityParams                                           => _offFinishVelocityParams.GetValue();
	#endregion

	public FRootMotionSource(ushort c_Priority, ushort c_LocalID, ERootMotionAccumulateMode c_AccumulateMode, FName c_InstanceName, float c_StartTime, float c_CurrentTime, float c_PreviousTime, float c_Duration, FRootMotionSourceStatus c_Status, FRootMotionSourceSettings c_Settings, byte/*(bool)*/ c_bInLocalSpace, FRootMotionMovementParams c_RootMotionParams, FRootMotionFinishVelocitySettings c_FinishVelocityParams) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPriority.SetValue(c_Priority);
		_offLocalID.SetValue(c_LocalID);
		_offAccumulateMode.SetValue(c_AccumulateMode);
		_offInstanceName.SetValue(c_InstanceName);
		_offStartTime.SetValue(c_StartTime);
		_offCurrentTime.SetValue(c_CurrentTime);
		_offPreviousTime.SetValue(c_PreviousTime);
		_offDuration.SetValue(c_Duration);
		_offStatus.SetValue(c_Status);
		_offSettings.SetValue(c_Settings);
		_offbInLocalSpace.SetValue(c_bInLocalSpace);
		_offRootMotionParams.SetValue(c_RootMotionParams);
		_offFinishVelocityParams.SetValue(c_FinishVelocityParams);
	}
}
// ScriptStruct Engine.RootMotionSource_JumpForce
// 0x0030 (0x00D0 - 0x00A0)
public class FRootMotionSource_JumpForce : FRootMotionSource
{
	#region Offsets
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x0098, false);                 // 0x0098(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offdistance                                                   = new ExternalOffset<float>(0x00A4);                           // 0x00A4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHeight                                                     = new ExternalOffset<float>(0x00A8);                           // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbDisableTimeout                                            = new ExternalOffset<byte/*(bool)*/>(0x00AC);                  // 0x00AC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveVector>                       _offPathOffsetCurve                                            = new ExternalOffset<UCurveVector>(0x00B0, true);              // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offTimeMappingCurve                                           = new ExternalOffset<UCurveFloat>(0x00B8, true);               // 0x00B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public float                                               distance                                                       => _offdistance.GetValue();
	public float                                               Height                                                         => _offHeight.GetValue();
	public byte/*(bool)*/                                      bDisableTimeout                                                => _offbDisableTimeout.GetValue();
	public UCurveVector                                        PathOffsetCurve                                                => _offPathOffsetCurve.GetValue();
	public UCurveFloat                                         TimeMappingCurve                                               => _offTimeMappingCurve.GetValue();
	#endregion

	public FRootMotionSource_JumpForce(FRotator c_Rotation, float c_distance, float c_Height, byte/*(bool)*/ c_bDisableTimeout, UCurveVector c_PathOffsetCurve, UCurveFloat c_TimeMappingCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRotation.SetValue(c_Rotation);
		_offdistance.SetValue(c_distance);
		_offHeight.SetValue(c_Height);
		_offbDisableTimeout.SetValue(c_bDisableTimeout);
		_offPathOffsetCurve.SetValue(c_PathOffsetCurve);
		_offTimeMappingCurve.SetValue(c_TimeMappingCurve);
	}
}
// ScriptStruct Engine.RootMotionSource_MoveToDynamicForce
// 0x0030 (0x00D0 - 0x00A0)
public class FRootMotionSource_MoveToDynamicForce : FRootMotionSource
{
	#region Offsets
	private ExternalOffset<FVector>                            _offStartLocation                                              = new ExternalOffset<FVector>(0x0098, false);                  // 0x0098(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offInitialTargetLocation                                      = new ExternalOffset<FVector>(0x00A4, false);                  // 0x00A4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offTargetLocation                                             = new ExternalOffset<FVector>(0x00B0, false);                  // 0x00B0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbRestrictSpeedToExpected                                   = new ExternalOffset<byte/*(bool)*/>(0x00BC);                  // 0x00BC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveVector>                       _offPathOffsetCurve                                            = new ExternalOffset<UCurveVector>(0x00C0, true);              // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offTimeMappingCurve                                           = new ExternalOffset<UCurveFloat>(0x00C8, true);               // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             StartLocation                                                  => _offStartLocation.GetValue();
	public FVector                                             InitialTargetLocation                                          => _offInitialTargetLocation.GetValue();
	public FVector                                             TargetLocation                                                 => _offTargetLocation.GetValue();
	public byte/*(bool)*/                                      bRestrictSpeedToExpected                                       => _offbRestrictSpeedToExpected.GetValue();
	public UCurveVector                                        PathOffsetCurve                                                => _offPathOffsetCurve.GetValue();
	public UCurveFloat                                         TimeMappingCurve                                               => _offTimeMappingCurve.GetValue();
	#endregion

	public FRootMotionSource_MoveToDynamicForce(FVector c_StartLocation, FVector c_InitialTargetLocation, FVector c_TargetLocation, byte/*(bool)*/ c_bRestrictSpeedToExpected, UCurveVector c_PathOffsetCurve, UCurveFloat c_TimeMappingCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStartLocation.SetValue(c_StartLocation);
		_offInitialTargetLocation.SetValue(c_InitialTargetLocation);
		_offTargetLocation.SetValue(c_TargetLocation);
		_offbRestrictSpeedToExpected.SetValue(c_bRestrictSpeedToExpected);
		_offPathOffsetCurve.SetValue(c_PathOffsetCurve);
		_offTimeMappingCurve.SetValue(c_TimeMappingCurve);
	}
}
// ScriptStruct Engine.RootMotionSource_MoveToForce
// 0x0020 (0x00C0 - 0x00A0)
public class FRootMotionSource_MoveToForce : FRootMotionSource
{
	#region Offsets
	private ExternalOffset<FVector>                            _offStartLocation                                              = new ExternalOffset<FVector>(0x0098, false);                  // 0x0098(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offTargetLocation                                             = new ExternalOffset<FVector>(0x00A4, false);                  // 0x00A4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbRestrictSpeedToExpected                                   = new ExternalOffset<byte/*(bool)*/>(0x00B0);                  // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveVector>                       _offPathOffsetCurve                                            = new ExternalOffset<UCurveVector>(0x00B8, true);              // 0x00B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             StartLocation                                                  => _offStartLocation.GetValue();
	public FVector                                             TargetLocation                                                 => _offTargetLocation.GetValue();
	public byte/*(bool)*/                                      bRestrictSpeedToExpected                                       => _offbRestrictSpeedToExpected.GetValue();
	public UCurveVector                                        PathOffsetCurve                                                => _offPathOffsetCurve.GetValue();
	#endregion

	public FRootMotionSource_MoveToForce(FVector c_StartLocation, FVector c_TargetLocation, byte/*(bool)*/ c_bRestrictSpeedToExpected, UCurveVector c_PathOffsetCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStartLocation.SetValue(c_StartLocation);
		_offTargetLocation.SetValue(c_TargetLocation);
		_offbRestrictSpeedToExpected.SetValue(c_bRestrictSpeedToExpected);
		_offPathOffsetCurve.SetValue(c_PathOffsetCurve);
	}
}
// ScriptStruct Engine.FastArraySerializerItem
// 0x000C
public class FFastArraySerializerItem : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offReplicationID                                              = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offReplicationKey                                             = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMostRecentArrayReplicationKey                              = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 ReplicationID                                                  => _offReplicationID.GetValue();
	public int                                                 ReplicationKey                                                 => _offReplicationKey.GetValue();
	public int                                                 MostRecentArrayReplicationKey                                  => _offMostRecentArrayReplicationKey.GetValue();
	#endregion

	public FFastArraySerializerItem(int c_ReplicationID, int c_ReplicationKey, int c_MostRecentArrayReplicationKey) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offReplicationID.SetValue(c_ReplicationID);
		_offReplicationKey.SetValue(c_ReplicationKey);
		_offMostRecentArrayReplicationKey.SetValue(c_MostRecentArrayReplicationKey);
	}
}
// ScriptStruct Engine.CurveTableRowHandle
// 0x0010
public class FCurveTableRowHandle : ExternalClass
{
	#region Offsets
	private ExternalOffset<UCurveTable>                        _offCurveTable                                                 = new ExternalOffset<UCurveTable>(0x0000, true);               // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offRowName                                                    = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCurveTable                                         CurveTable                                                     => _offCurveTable.GetValue();
	public FName                                               RowName                                                        => _offRowName.GetValue();
	#endregion

	public FCurveTableRowHandle(UCurveTable c_CurveTable, FName c_RowName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCurveTable.SetValue(c_CurveTable);
		_offRowName.SetValue(c_RowName);
	}
}
// ScriptStruct Engine.RootMotionSource_RadialForce
// 0x0040 (0x00E0 - 0x00A0)
public class FRootMotionSource_RadialForce : FRootMotionSource
{
	#region Offsets
	private ExternalOffset<FVector>                            _offLocation                                                   = new ExternalOffset<FVector>(0x0098, false);                  // 0x0098(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                             _offLocationActor                                              = new ExternalOffset<AActor>(0x00A8, true);                    // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRadius                                                     = new ExternalOffset<float>(0x00B0);                           // 0x00B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStrength                                                   = new ExternalOffset<float>(0x00B4);                           // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbIsPush                                                    = new ExternalOffset<byte/*(bool)*/>(0x00B8);                  // 0x00B8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbNoZForce                                                  = new ExternalOffset<byte/*(bool)*/>(0x00B9);                  // 0x00B9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offStrengthDistanceFalloff                                    = new ExternalOffset<UCurveFloat>(0x00C0, true);               // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offStrengthOverTime                                           = new ExternalOffset<UCurveFloat>(0x00C8, true);               // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbUseFixedWorldDirection                                    = new ExternalOffset<byte/*(bool)*/>(0x00D0);                  // 0x00D0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offFixedWorldDirection                                        = new ExternalOffset<FRotator>(0x00D4, false);                 // 0x00D4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Location                                                       => _offLocation.GetValue();
	public AActor                                              LocationActor                                                  => _offLocationActor.GetValue();
	public float                                               Radius                                                         => _offRadius.GetValue();
	public float                                               Strength                                                       => _offStrength.GetValue();
	public byte/*(bool)*/                                      bIsPush                                                        => _offbIsPush.GetValue();
	public byte/*(bool)*/                                      bNoZForce                                                      => _offbNoZForce.GetValue();
	public UCurveFloat                                         StrengthDistanceFalloff                                        => _offStrengthDistanceFalloff.GetValue();
	public UCurveFloat                                         StrengthOverTime                                               => _offStrengthOverTime.GetValue();
	public byte/*(bool)*/                                      bUseFixedWorldDirection                                        => _offbUseFixedWorldDirection.GetValue();
	public FRotator                                            FixedWorldDirection                                            => _offFixedWorldDirection.GetValue();
	#endregion

	public FRootMotionSource_RadialForce(FVector c_Location, AActor c_LocationActor, float c_Radius, float c_Strength, byte/*(bool)*/ c_bIsPush, byte/*(bool)*/ c_bNoZForce, UCurveFloat c_StrengthDistanceFalloff, UCurveFloat c_StrengthOverTime, byte/*(bool)*/ c_bUseFixedWorldDirection, FRotator c_FixedWorldDirection) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLocation.SetValue(c_Location);
		_offLocationActor.SetValue(c_LocationActor);
		_offRadius.SetValue(c_Radius);
		_offStrength.SetValue(c_Strength);
		_offbIsPush.SetValue(c_bIsPush);
		_offbNoZForce.SetValue(c_bNoZForce);
		_offStrengthDistanceFalloff.SetValue(c_StrengthDistanceFalloff);
		_offStrengthOverTime.SetValue(c_StrengthOverTime);
		_offbUseFixedWorldDirection.SetValue(c_bUseFixedWorldDirection);
		_offFixedWorldDirection.SetValue(c_FixedWorldDirection);
	}
}
// ScriptStruct Engine.FastArraySerializer
// 0x0108
public class FFastArraySerializer : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offArrayReplicationKey                                        = new ExternalOffset<int>(0x0054);                             // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EFastArraySerializerDeltaFlags>     _offDeltaFlags                                                 = new ExternalOffset<EFastArraySerializerDeltaFlags>(0x0100, false); // 0x0100(0x0001) (ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public int                                                 ArrayReplicationKey                                            => _offArrayReplicationKey.GetValue();
	public EFastArraySerializerDeltaFlags                      DeltaFlags                                                     => _offDeltaFlags.GetValue();
	#endregion

	public FFastArraySerializer(int c_ArrayReplicationKey, EFastArraySerializerDeltaFlags c_DeltaFlags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offArrayReplicationKey.SetValue(c_ArrayReplicationKey);
		_offDeltaFlags.SetValue(c_DeltaFlags);
	}
}
// ScriptStruct Engine.RootMotionSource_ConstantForce
// 0x0010 (0x00B0 - 0x00A0)
public class FRootMotionSource_ConstantForce : FRootMotionSource
{
	#region Offsets
	private ExternalOffset<FVector>                            _offForce                                                      = new ExternalOffset<FVector>(0x0098, false);                  // 0x0098(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offStrengthOverTime                                           = new ExternalOffset<UCurveFloat>(0x00A8, true);               // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Force                                                          => _offForce.GetValue();
	public UCurveFloat                                         StrengthOverTime                                               => _offStrengthOverTime.GetValue();
	#endregion

	public FRootMotionSource_ConstantForce(FVector c_Force, UCurveFloat c_StrengthOverTime) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForce.SetValue(c_Force);
		_offStrengthOverTime.SetValue(c_StrengthOverTime);
	}
}
// ScriptStruct Engine.InputAlphaBoolBlend
// 0x0048
public class FInputAlphaBoolBlend : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offBlendInTime                                                = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offblendOutTime                                               = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAlphaBlendOption>                  _offBlendOption                                                = new ExternalOffset<EAlphaBlendOption>(0x0008, false);        // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbInitialized                                               = new ExternalOffset<byte/*(bool)*/>(0x0009);                  // 0x0009(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offCustomCurve                                                = new ExternalOffset<UCurveFloat>(0x0010, true);               // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FAlphaBlend>                        _offAlphaBlend                                                 = new ExternalOffset<FAlphaBlend>(0x0018, false);              // 0x0018(0x0030) (Transient, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               BlendInTime                                                    => _offBlendInTime.GetValue();
	public float                                               blendOutTime                                                   => _offblendOutTime.GetValue();
	public EAlphaBlendOption                                   BlendOption                                                    => _offBlendOption.GetValue();
	public byte/*(bool)*/                                      bInitialized                                                   => _offbInitialized.GetValue();
	public UCurveFloat                                         CustomCurve                                                    => _offCustomCurve.GetValue();
	public FAlphaBlend                                         AlphaBlend                                                     => _offAlphaBlend.GetValue();
	#endregion

	public FInputAlphaBoolBlend(float c_BlendInTime, float c_blendOutTime, EAlphaBlendOption c_BlendOption, byte/*(bool)*/ c_bInitialized, UCurveFloat c_CustomCurve, FAlphaBlend c_AlphaBlend) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBlendInTime.SetValue(c_BlendInTime);
		_offblendOutTime.SetValue(c_blendOutTime);
		_offBlendOption.SetValue(c_BlendOption);
		_offbInitialized.SetValue(c_bInitialized);
		_offCustomCurve.SetValue(c_CustomCurve);
		_offAlphaBlend.SetValue(c_AlphaBlend);
	}
}
// ScriptStruct Engine.TableRowBase
// 0x0008
public class FTableRowBase : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FTableRowBase() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.PerPlatformFloat
// 0x0004
public class FPerPlatformFloat : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offDefault                                                    = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Default                                                        => _offDefault.GetValue();
	#endregion

	public FPerPlatformFloat(float c_Default) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefault.SetValue(c_Default);
	}
}
// ScriptStruct Engine.CameraExposureSettings
// 0x0038
public class FCameraExposureSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EAutoExposureMethod>>   _offMethod                                                     = new ExternalOffset<TEnumAsByte<EAutoExposureMethod>>(0x0000, false); // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLowPercent                                                 = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHighPercent                                                = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinBrightness                                              = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxBrightness                                              = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSpeedUp                                                    = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSpeedDown                                                  = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBias                                                       = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveFloat>                        _offBiasCurve                                                  = new ExternalOffset<UCurveFloat>(0x0020, true);               // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHistogramLogMin                                            = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHistogramLogMax                                            = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offCalibrationConstant                                        = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EAutoExposureMethod>                    Method                                                         => _offMethod.GetValue();
	public float                                               LowPercent                                                     => _offLowPercent.GetValue();
	public float                                               HighPercent                                                    => _offHighPercent.GetValue();
	public float                                               MinBrightness                                                  => _offMinBrightness.GetValue();
	public float                                               MaxBrightness                                                  => _offMaxBrightness.GetValue();
	public float                                               SpeedUp                                                        => _offSpeedUp.GetValue();
	public float                                               SpeedDown                                                      => _offSpeedDown.GetValue();
	public float                                               Bias                                                           => _offBias.GetValue();
	public UCurveFloat                                         BiasCurve                                                      => _offBiasCurve.GetValue();
	public float                                               HistogramLogMin                                                => _offHistogramLogMin.GetValue();
	public float                                               HistogramLogMax                                                => _offHistogramLogMax.GetValue();
	public float                                               CalibrationConstant                                            => _offCalibrationConstant.GetValue();
	#endregion

	public FCameraExposureSettings(TEnumAsByte<EAutoExposureMethod> c_Method, float c_LowPercent, float c_HighPercent, float c_MinBrightness, float c_MaxBrightness, float c_SpeedUp, float c_SpeedDown, float c_Bias, UCurveFloat c_BiasCurve, float c_HistogramLogMin, float c_HistogramLogMax, float c_CalibrationConstant) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMethod.SetValue(c_Method);
		_offLowPercent.SetValue(c_LowPercent);
		_offHighPercent.SetValue(c_HighPercent);
		_offMinBrightness.SetValue(c_MinBrightness);
		_offMaxBrightness.SetValue(c_MaxBrightness);
		_offSpeedUp.SetValue(c_SpeedUp);
		_offSpeedDown.SetValue(c_SpeedDown);
		_offBias.SetValue(c_Bias);
		_offBiasCurve.SetValue(c_BiasCurve);
		_offHistogramLogMin.SetValue(c_HistogramLogMin);
		_offHistogramLogMax.SetValue(c_HistogramLogMax);
		_offCalibrationConstant.SetValue(c_CalibrationConstant);
	}
}
// ScriptStruct Engine.PerPlatformInt
// 0x0004
public class FPerPlatformInt : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offDefault                                                    = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Default                                                        => _offDefault.GetValue();
	#endregion

	public FPerPlatformInt(int c_Default) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefault.SetValue(c_Default);
	}
}
// ScriptStruct Engine.PerPlatformBool
// 0x0001
public class FPerPlatformBool : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offDefault                                                    = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      Default                                                        => _offDefault.GetValue();
	#endregion

	public FPerPlatformBool(byte/*(bool)*/ c_Default) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefault.SetValue(c_Default);
	}
}
// ScriptStruct Engine.KeyHandleLookupTable
// 0x0060
public class FKeyHandleLookupTable : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FKeyHandleLookupTable() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.BranchFilter
// 0x000C
public class FBranchFilter : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offBoneName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offBlendDepth                                                 = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               BoneName                                                       => _offBoneName.GetValue();
	public int                                                 BlendDepth                                                     => _offBlendDepth.GetValue();
	#endregion

	public FBranchFilter(FName c_BoneName, int c_BlendDepth) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneName.SetValue(c_BoneName);
		_offBlendDepth.SetValue(c_BlendDepth);
	}
}
// ScriptStruct Engine.InputBlendPose
// 0x0010
public class FInputBlendPose : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FBranchFilter>>              _offBranchFilters                                              = new ExternalOffset<TArray<FBranchFilter>>(0x0000, false);    // 0x0000(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBranchFilter>                               BranchFilters                                                  => _offBranchFilters.GetValue();
	#endregion

	public FInputBlendPose(TArray<FBranchFilter> c_BranchFilters) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBranchFilters.SetValue(c_BranchFilters);
	}
}
// ScriptStruct Engine.AnimNode_Root
// 0x0020 (0x0030 - 0x0010)
public class FAnimNode_Root : FAnimNode_Base
{
	#region Offsets
	private ExternalOffset<FPoseLink>                          _offResult                                                     = new ExternalOffset<FPoseLink>(0x0010, false);                // 0x0010(0x0010) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offGroup                                                      = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPoseLink                                           Result                                                         => _offResult.GetValue();
	public FName                                               Name                                                           => _offName.GetValue();
	public FName                                               Group                                                          => _offGroup.GetValue();
	#endregion

	public FAnimNode_Root(FPoseLink c_Result, FName c_Name, FName c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offResult.SetValue(c_Result);
		_offName.SetValue(c_Name);
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct Engine.GaussianSumBloomSettings
// 0x0084
public class FGaussianSumBloomSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offIntensity                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offThreshold                                                  = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSizeScale                                                  = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilter1Size                                                = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilter2Size                                                = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilter3Size                                                = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilter4Size                                                = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilter5Size                                                = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFilter6Size                                                = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilter1Tint                                                = new ExternalOffset<FLinearColor>(0x0024, false);             // 0x0024(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilter2Tint                                                = new ExternalOffset<FLinearColor>(0x0034, false);             // 0x0034(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilter3Tint                                                = new ExternalOffset<FLinearColor>(0x0044, false);             // 0x0044(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilter4Tint                                                = new ExternalOffset<FLinearColor>(0x0054, false);             // 0x0054(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilter5Tint                                                = new ExternalOffset<FLinearColor>(0x0064, false);             // 0x0064(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFilter6Tint                                                = new ExternalOffset<FLinearColor>(0x0074, false);             // 0x0074(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Intensity                                                      => _offIntensity.GetValue();
	public float                                               Threshold                                                      => _offThreshold.GetValue();
	public float                                               SizeScale                                                      => _offSizeScale.GetValue();
	public float                                               Filter1Size                                                    => _offFilter1Size.GetValue();
	public float                                               Filter2Size                                                    => _offFilter2Size.GetValue();
	public float                                               Filter3Size                                                    => _offFilter3Size.GetValue();
	public float                                               Filter4Size                                                    => _offFilter4Size.GetValue();
	public float                                               Filter5Size                                                    => _offFilter5Size.GetValue();
	public float                                               Filter6Size                                                    => _offFilter6Size.GetValue();
	public FLinearColor                                        Filter1Tint                                                    => _offFilter1Tint.GetValue();
	public FLinearColor                                        Filter2Tint                                                    => _offFilter2Tint.GetValue();
	public FLinearColor                                        Filter3Tint                                                    => _offFilter3Tint.GetValue();
	public FLinearColor                                        Filter4Tint                                                    => _offFilter4Tint.GetValue();
	public FLinearColor                                        Filter5Tint                                                    => _offFilter5Tint.GetValue();
	public FLinearColor                                        Filter6Tint                                                    => _offFilter6Tint.GetValue();
	#endregion

	public FGaussianSumBloomSettings(float c_Intensity, float c_Threshold, float c_SizeScale, float c_Filter1Size, float c_Filter2Size, float c_Filter3Size, float c_Filter4Size, float c_Filter5Size, float c_Filter6Size, FLinearColor c_Filter1Tint, FLinearColor c_Filter2Tint, FLinearColor c_Filter3Tint, FLinearColor c_Filter4Tint, FLinearColor c_Filter5Tint, FLinearColor c_Filter6Tint) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIntensity.SetValue(c_Intensity);
		_offThreshold.SetValue(c_Threshold);
		_offSizeScale.SetValue(c_SizeScale);
		_offFilter1Size.SetValue(c_Filter1Size);
		_offFilter2Size.SetValue(c_Filter2Size);
		_offFilter3Size.SetValue(c_Filter3Size);
		_offFilter4Size.SetValue(c_Filter4Size);
		_offFilter5Size.SetValue(c_Filter5Size);
		_offFilter6Size.SetValue(c_Filter6Size);
		_offFilter1Tint.SetValue(c_Filter1Tint);
		_offFilter2Tint.SetValue(c_Filter2Tint);
		_offFilter3Tint.SetValue(c_Filter3Tint);
		_offFilter4Tint.SetValue(c_Filter4Tint);
		_offFilter5Tint.SetValue(c_Filter5Tint);
		_offFilter6Tint.SetValue(c_Filter6Tint);
	}
}
// ScriptStruct Engine.AnimCurveParam
// 0x000C
public class FAnimCurveParam : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	#endregion

	public FAnimCurveParam(FName c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct Engine.KShapeElem
// 0x0030
public class FKShapeElem : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offRestOffset                                                 = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x000C, false);                    // 0x000C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                               _offbContributeToMass                                          = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public float                                               RestOffset                                                     => _offRestOffset.GetValue();
	public FName                                               Name                                                           => _offName.GetValue();
	#endregion

	public FKShapeElem(float c_RestOffset, FName c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRestOffset.SetValue(c_RestOffset);
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct Engine.KSphereElem
// 0x0010 (0x0040 - 0x0030)
public class FKSphereElem : FKShapeElem
{
	#region Offsets
	private ExternalOffset<FVector>                            _offCenter                                                     = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRadius                                                     = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Center                                                         => _offCenter.GetValue();
	public float                                               Radius                                                         => _offRadius.GetValue();
	#endregion

	public FKSphereElem(FVector c_Center, float c_Radius) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCenter.SetValue(c_Center);
		_offRadius.SetValue(c_Radius);
	}
}
// ScriptStruct Engine.ConvolutionBloomSettings
// 0x0028
public class FConvolutionBloomSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<UTexture2D>                         _offTexture                                                    = new ExternalOffset<UTexture2D>(0x0000, true);                // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSize                                                       = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offCenterUV                                                   = new ExternalOffset<FVector2D>(0x000C, false);                // 0x000C(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPreFilterMin                                               = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPreFilterMax                                               = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPreFilterMult                                              = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBufferScale                                                = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTexture2D                                          Texture                                                        => _offTexture.GetValue();
	public float                                               Size                                                           => _offSize.GetValue();
	public FVector2D                                           CenterUV                                                       => _offCenterUV.GetValue();
	public float                                               PreFilterMin                                                   => _offPreFilterMin.GetValue();
	public float                                               PreFilterMax                                                   => _offPreFilterMax.GetValue();
	public float                                               PreFilterMult                                                  => _offPreFilterMult.GetValue();
	public float                                               BufferScale                                                    => _offBufferScale.GetValue();
	#endregion

	public FConvolutionBloomSettings(UTexture2D c_Texture, float c_Size, FVector2D c_CenterUV, float c_PreFilterMin, float c_PreFilterMax, float c_PreFilterMult, float c_BufferScale) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTexture.SetValue(c_Texture);
		_offSize.SetValue(c_Size);
		_offCenterUV.SetValue(c_CenterUV);
		_offPreFilterMin.SetValue(c_PreFilterMin);
		_offPreFilterMax.SetValue(c_PreFilterMax);
		_offPreFilterMult.SetValue(c_PreFilterMult);
		_offBufferScale.SetValue(c_BufferScale);
	}
}
// ScriptStruct Engine.KBoxElem
// 0x0028 (0x0058 - 0x0030)
public class FKBoxElem : FKShapeElem
{
	#region Offsets
	private ExternalOffset<FVector>                            _offCenter                                                     = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x003C, false);                 // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offX                                                          = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offY                                                          = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offZ                                                          = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Center                                                         => _offCenter.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public float                                               X                                                              => _offX.GetValue();
	public float                                               Y                                                              => _offY.GetValue();
	public float                                               Z                                                              => _offZ.GetValue();
	#endregion

	public FKBoxElem(FVector c_Center, FRotator c_Rotation, float c_X, float c_Y, float c_Z) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCenter.SetValue(c_Center);
		_offRotation.SetValue(c_Rotation);
		_offX.SetValue(c_X);
		_offY.SetValue(c_Y);
		_offZ.SetValue(c_Z);
	}
}
// ScriptStruct Engine.LensBloomSettings
// 0x00B8
public class FLensBloomSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FGaussianSumBloomSettings>          _offGaussianSum                                                = new ExternalOffset<FGaussianSumBloomSettings>(0x0000, false); // 0x0000(0x0084) (Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FConvolutionBloomSettings>          _offConvolution                                                = new ExternalOffset<FConvolutionBloomSettings>(0x0088, false); // 0x0088(0x0028) (Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBloomMethod>>          _offMethod                                                     = new ExternalOffset<TEnumAsByte<EBloomMethod>>(0x00B0, false); // 0x00B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FGaussianSumBloomSettings                           GaussianSum                                                    => _offGaussianSum.GetValue();
	public FConvolutionBloomSettings                           Convolution                                                    => _offConvolution.GetValue();
	public TEnumAsByte<EBloomMethod>                           Method                                                         => _offMethod.GetValue();
	#endregion

	public FLensBloomSettings(FGaussianSumBloomSettings c_GaussianSum, FConvolutionBloomSettings c_Convolution, TEnumAsByte<EBloomMethod> c_Method) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGaussianSum.SetValue(c_GaussianSum);
		_offConvolution.SetValue(c_Convolution);
		_offMethod.SetValue(c_Method);
	}
}
// ScriptStruct Engine.KSphylElem
// 0x0020 (0x0050 - 0x0030)
public class FKSphylElem : FKShapeElem
{
	#region Offsets
	private ExternalOffset<FVector>                            _offCenter                                                     = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x003C, false);                 // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRadius                                                     = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLength                                                     = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Center                                                         => _offCenter.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public float                                               Radius                                                         => _offRadius.GetValue();
	public float                                               Length                                                         => _offLength.GetValue();
	#endregion

	public FKSphylElem(FVector c_Center, FRotator c_Rotation, float c_Radius, float c_Length) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCenter.SetValue(c_Center);
		_offRotation.SetValue(c_Rotation);
		_offRadius.SetValue(c_Radius);
		_offLength.SetValue(c_Length);
	}
}
// ScriptStruct Engine.LensImperfectionSettings
// 0x0020
public class FLensImperfectionSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<UTexture>                           _offDirtMask                                                   = new ExternalOffset<UTexture>(0x0000, true);                  // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDirtMaskIntensity                                          = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offDirtMaskTint                                               = new ExternalOffset<FLinearColor>(0x000C, false);             // 0x000C(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTexture                                            DirtMask                                                       => _offDirtMask.GetValue();
	public float                                               DirtMaskIntensity                                              => _offDirtMaskIntensity.GetValue();
	public FLinearColor                                        DirtMaskTint                                                   => _offDirtMaskTint.GetValue();
	#endregion

	public FLensImperfectionSettings(UTexture c_DirtMask, float c_DirtMaskIntensity, FLinearColor c_DirtMaskTint) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDirtMask.SetValue(c_DirtMask);
		_offDirtMaskIntensity.SetValue(c_DirtMaskIntensity);
		_offDirtMaskTint.SetValue(c_DirtMaskTint);
	}
}
// ScriptStruct Engine.KConvexElem
// 0x0070 (0x00A0 - 0x0030)
public class FKConvexElem : FKShapeElem
{
	#region Offsets
	private ExternalOffset<TArray<FVector>>                    _offVertexData                                                 = new ExternalOffset<TArray<FVector>>(0x0030, false);          // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FBox>                               _offElemBox                                                    = new ExternalOffset<FBox>(0x0040, false);                     // 0x0040(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FTransform>                         _offTransform                                                  = new ExternalOffset<FTransform>(0x0060, false);               // 0x0060(0x0030) (IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FVector>                                     VertexData                                                     => _offVertexData.GetValue();
	public FBox                                                ElemBox                                                        => _offElemBox.GetValue();
	public FTransform                                          Transform                                                      => _offTransform.GetValue();
	#endregion

	public FKConvexElem(TArray<FVector> c_VertexData, FBox c_ElemBox, FTransform c_Transform) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVertexData.SetValue(c_VertexData);
		_offElemBox.SetValue(c_ElemBox);
		_offTransform.SetValue(c_Transform);
	}
}
// ScriptStruct Engine.LensSettings
// 0x00E0
public class FLensSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FLensBloomSettings>                 _offBloom                                                      = new ExternalOffset<FLensBloomSettings>(0x0000, false);       // 0x0000(0x00B8) (Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FLensImperfectionSettings>          _offImperfections                                              = new ExternalOffset<FLensImperfectionSettings>(0x00B8, false); // 0x00B8(0x0020) (Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offChromaticAberration                                        = new ExternalOffset<float>(0x00D8);                           // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FLensBloomSettings                                  Bloom                                                          => _offBloom.GetValue();
	public FLensImperfectionSettings                           Imperfections                                                  => _offImperfections.GetValue();
	public float                                               ChromaticAberration                                            => _offChromaticAberration.GetValue();
	#endregion

	public FLensSettings(FLensBloomSettings c_Bloom, FLensImperfectionSettings c_Imperfections, float c_ChromaticAberration) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBloom.SetValue(c_Bloom);
		_offImperfections.SetValue(c_Imperfections);
		_offChromaticAberration.SetValue(c_ChromaticAberration);
	}
}
// ScriptStruct Engine.KTaperedCapsuleElem
// 0x0028 (0x0058 - 0x0030)
public class FKTaperedCapsuleElem : FKShapeElem
{
	#region Offsets
	private ExternalOffset<FVector>                            _offCenter                                                     = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x003C, false);                 // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRadius0                                                    = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRadius1                                                    = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLength                                                     = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Center                                                         => _offCenter.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public float                                               Radius0                                                        => _offRadius0.GetValue();
	public float                                               Radius1                                                        => _offRadius1.GetValue();
	public float                                               Length                                                         => _offLength.GetValue();
	#endregion

	public FKTaperedCapsuleElem(FVector c_Center, FRotator c_Rotation, float c_Radius0, float c_Radius1, float c_Length) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCenter.SetValue(c_Center);
		_offRotation.SetValue(c_Rotation);
		_offRadius0.SetValue(c_Radius0);
		_offRadius1.SetValue(c_Radius1);
		_offLength.SetValue(c_Length);
	}
}
// ScriptStruct Engine.FilmStockSettings
// 0x0014
public class FFilmStockSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offSlope                                                      = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offToe                                                        = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offShoulder                                                   = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBlackClip                                                  = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWhiteClip                                                  = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Slope                                                          => _offSlope.GetValue();
	public float                                               Toe                                                            => _offToe.GetValue();
	public float                                               Shoulder                                                       => _offShoulder.GetValue();
	public float                                               BlackClip                                                      => _offBlackClip.GetValue();
	public float                                               WhiteClip                                                      => _offWhiteClip.GetValue();
	#endregion

	public FFilmStockSettings(float c_Slope, float c_Toe, float c_Shoulder, float c_BlackClip, float c_WhiteClip) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSlope.SetValue(c_Slope);
		_offToe.SetValue(c_Toe);
		_offShoulder.SetValue(c_Shoulder);
		_offBlackClip.SetValue(c_BlackClip);
		_offWhiteClip.SetValue(c_WhiteClip);
	}
}
// ScriptStruct Engine.KAggregateGeom
// 0x0058
public class FKAggregateGeom : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FKSphereElem>>               _offSphereElems                                                = new ExternalOffset<TArray<FKSphereElem>>(0x0000, false);     // 0x0000(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FKBoxElem>>                  _offBoxElems                                                   = new ExternalOffset<TArray<FKBoxElem>>(0x0010, false);        // 0x0010(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FKSphylElem>>                _offSphylElems                                                 = new ExternalOffset<TArray<FKSphylElem>>(0x0020, false);      // 0x0020(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FKConvexElem>>               _offConvexElems                                                = new ExternalOffset<TArray<FKConvexElem>>(0x0030, false);     // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FKTaperedCapsuleElem>>       _offTaperedCapsuleElems                                        = new ExternalOffset<TArray<FKTaperedCapsuleElem>>(0x0040, false); // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FKSphereElem>                                SphereElems                                                    => _offSphereElems.GetValue();
	public TArray<FKBoxElem>                                   BoxElems                                                       => _offBoxElems.GetValue();
	public TArray<FKSphylElem>                                 SphylElems                                                     => _offSphylElems.GetValue();
	public TArray<FKConvexElem>                                ConvexElems                                                    => _offConvexElems.GetValue();
	public TArray<FKTaperedCapsuleElem>                        TaperedCapsuleElems                                            => _offTaperedCapsuleElems.GetValue();
	#endregion

	public FKAggregateGeom(TArray<FKSphereElem> c_SphereElems, TArray<FKBoxElem> c_BoxElems, TArray<FKSphylElem> c_SphylElems, TArray<FKConvexElem> c_ConvexElems, TArray<FKTaperedCapsuleElem> c_TaperedCapsuleElems) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSphereElems.SetValue(c_SphereElems);
		_offBoxElems.SetValue(c_BoxElems);
		_offSphylElems.SetValue(c_SphylElems);
		_offConvexElems.SetValue(c_ConvexElems);
		_offTaperedCapsuleElems.SetValue(c_TaperedCapsuleElems);
	}
}
// ScriptStruct Engine.ColorGradePerRangeSettings
// 0x0050
public class FColorGradePerRangeSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector4>                           _offSaturation                                                 = new ExternalOffset<FVector4>(0x0000, false);                 // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offContrast                                                   = new ExternalOffset<FVector4>(0x0010, false);                 // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offGamma                                                      = new ExternalOffset<FVector4>(0x0020, false);                 // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offGain                                                       = new ExternalOffset<FVector4>(0x0030, false);                 // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offOffset                                                     = new ExternalOffset<FVector4>(0x0040, false);                 // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector4                                            Saturation                                                     => _offSaturation.GetValue();
	public FVector4                                            Contrast                                                       => _offContrast.GetValue();
	public FVector4                                            Gamma                                                          => _offGamma.GetValue();
	public FVector4                                            Gain                                                           => _offGain.GetValue();
	public FVector4                                            Offset                                                         => _offOffset.GetValue();
	#endregion

	public FColorGradePerRangeSettings(FVector4 c_Saturation, FVector4 c_Contrast, FVector4 c_Gamma, FVector4 c_Gain, FVector4 c_Offset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSaturation.SetValue(c_Saturation);
		_offContrast.SetValue(c_Contrast);
		_offGamma.SetValue(c_Gamma);
		_offGain.SetValue(c_Gain);
		_offOffset.SetValue(c_Offset);
	}
}
// ScriptStruct Engine.AnimationGroupReference
// 0x000C
public class FAnimationGroupReference : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offGroupName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAnimGroupRole>>        _offGroupRole                                                  = new ExternalOffset<TEnumAsByte<EAnimGroupRole>>(0x0008, false); // 0x0008(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               GroupName                                                      => _offGroupName.GetValue();
	public TEnumAsByte<EAnimGroupRole>                         GroupRole                                                      => _offGroupRole.GetValue();
	#endregion

	public FAnimationGroupReference(FName c_GroupName, TEnumAsByte<EAnimGroupRole> c_GroupRole) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroupName.SetValue(c_GroupName);
		_offGroupRole.SetValue(c_GroupRole);
	}
}
// ScriptStruct Engine.AnimGroupInstance
// 0x0070
public class FAnimGroupInstance : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAnimGroupInstance() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.ColorGradingSettings
// 0x0150
public class FColorGradingSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FColorGradePerRangeSettings>        _offGlobal                                                     = new ExternalOffset<FColorGradePerRangeSettings>(0x0000, false); // 0x0000(0x0050) (Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FColorGradePerRangeSettings>        _offShadows                                                    = new ExternalOffset<FColorGradePerRangeSettings>(0x0050, false); // 0x0050(0x0050) (Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FColorGradePerRangeSettings>        _offMidtones                                                   = new ExternalOffset<FColorGradePerRangeSettings>(0x00A0, false); // 0x00A0(0x0050) (Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FColorGradePerRangeSettings>        _offHighlights                                                 = new ExternalOffset<FColorGradePerRangeSettings>(0x00F0, false); // 0x00F0(0x0050) (Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offShadowsMax                                                 = new ExternalOffset<float>(0x0140);                           // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHighlightsMin                                              = new ExternalOffset<float>(0x0144);                           // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FColorGradePerRangeSettings                         Global                                                         => _offGlobal.GetValue();
	public FColorGradePerRangeSettings                         Shadows                                                        => _offShadows.GetValue();
	public FColorGradePerRangeSettings                         Midtones                                                       => _offMidtones.GetValue();
	public FColorGradePerRangeSettings                         Highlights                                                     => _offHighlights.GetValue();
	public float                                               ShadowsMax                                                     => _offShadowsMax.GetValue();
	public float                                               HighlightsMin                                                  => _offHighlightsMin.GetValue();
	#endregion

	public FColorGradingSettings(FColorGradePerRangeSettings c_Global, FColorGradePerRangeSettings c_Shadows, FColorGradePerRangeSettings c_Midtones, FColorGradePerRangeSettings c_Highlights, float c_ShadowsMax, float c_HighlightsMin) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGlobal.SetValue(c_Global);
		_offShadows.SetValue(c_Shadows);
		_offMidtones.SetValue(c_Midtones);
		_offHighlights.SetValue(c_Highlights);
		_offShadowsMax.SetValue(c_ShadowsMax);
		_offHighlightsMin.SetValue(c_HighlightsMin);
	}
}
// ScriptStruct Engine.AnimTickRecord
// 0x0048
public class FAnimTickRecord : ExternalClass
{
	#region Offsets
	private ExternalOffset<UAnimationAsset>                    _offSourceAsset                                                = new ExternalOffset<UAnimationAsset>(0x0000, true);           // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimationAsset                                     SourceAsset                                                    => _offSourceAsset.GetValue();
	#endregion

	public FAnimTickRecord(UAnimationAsset c_SourceAsset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourceAsset.SetValue(c_SourceAsset);
	}
}
// ScriptStruct Engine.EngineShowFlagsSetting
// 0x0018
public class FEngineShowFlagsSetting : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offShowFlagName                                               = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offEnabled                                                    = new ExternalOffset<byte/*(bool)*/>(0x0010);                  // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ShowFlagName                                                   => _offShowFlagName.GetValue();
	public byte/*(bool)*/                                      Enabled                                                        => _offEnabled.GetValue();
	#endregion

	public FEngineShowFlagsSetting(FString c_ShowFlagName, byte/*(bool)*/ c_Enabled) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offShowFlagName.SetValue(c_ShowFlagName);
		_offEnabled.SetValue(c_Enabled);
	}
}
// ScriptStruct Engine.BlendFilter
// 0x0078
public class FBlendFilter : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FBlendFilter() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SimpleCurveKey
// 0x0008
public class FSimpleCurveKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offValue                                                      = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public float                                               Value                                                          => _offValue.GetValue();
	#endregion

	public FSimpleCurveKey(float c_Time, float c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct Engine.BlendSampleData
// 0x0040
public class FBlendSampleData : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offSampleDataIndex                                            = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimSequence>                      _offAnimation                                                  = new ExternalOffset<UAnimSequence>(0x0008, true);             // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTotalWeight                                                = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPreviousTime                                               = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSamplePlayRate                                             = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 SampleDataIndex                                                => _offSampleDataIndex.GetValue();
	public UAnimSequence                                       Animation                                                      => _offAnimation.GetValue();
	public float                                               TotalWeight                                                    => _offTotalWeight.GetValue();
	public float                                               Time                                                           => _offTime.GetValue();
	public float                                               PreviousTime                                                   => _offPreviousTime.GetValue();
	public float                                               SamplePlayRate                                                 => _offSamplePlayRate.GetValue();
	#endregion

	public FBlendSampleData(int c_SampleDataIndex, UAnimSequence c_Animation, float c_TotalWeight, float c_Time, float c_PreviousTime, float c_SamplePlayRate) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSampleDataIndex.SetValue(c_SampleDataIndex);
		_offAnimation.SetValue(c_Animation);
		_offTotalWeight.SetValue(c_TotalWeight);
		_offTime.SetValue(c_Time);
		_offPreviousTime.SetValue(c_PreviousTime);
		_offSamplePlayRate.SetValue(c_SamplePlayRate);
	}
}
// ScriptStruct Engine.SimpleCurve
// 0x0018 (0x0088 - 0x0070)
public class FSimpleCurve : FRealCurve
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ERichCurveInterpMode>>  _offInterpMode                                                 = new ExternalOffset<TEnumAsByte<ERichCurveInterpMode>>(0x0070, false); // 0x0070(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSimpleCurveKey>>            _offKeys                                                       = new ExternalOffset<TArray<FSimpleCurveKey>>(0x0078, false);  // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ERichCurveInterpMode>                   InterpMode                                                     => _offInterpMode.GetValue();
	public TArray<FSimpleCurveKey>                             Keys                                                           => _offKeys.GetValue();
	#endregion

	public FSimpleCurve(TEnumAsByte<ERichCurveInterpMode> c_InterpMode, TArray<FSimpleCurveKey> c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInterpMode.SetValue(c_InterpMode);
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct Engine.SkeletalMaterial
// 0x0028
public class FSkeletalMaterial : ExternalClass
{
	#region Offsets
	private ExternalOffset<UMaterialInterface>                 _offMaterialInterface                                          = new ExternalOffset<UMaterialInterface>(0x0000, true);        // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offMaterialSlotName                                           = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMeshUVChannelInfo>                 _offUVChannelData                                              = new ExternalOffset<FMeshUVChannelInfo>(0x0010, false);       // 0x0010(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialInterface                                  MaterialInterface                                              => _offMaterialInterface.GetValue();
	public FName                                               MaterialSlotName                                               => _offMaterialSlotName.GetValue();
	public FMeshUVChannelInfo                                  UVChannelData                                                  => _offUVChannelData.GetValue();
	#endregion

	public FSkeletalMaterial(UMaterialInterface c_MaterialInterface, FName c_MaterialSlotName, FMeshUVChannelInfo c_UVChannelData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaterialInterface.SetValue(c_MaterialInterface);
		_offMaterialSlotName.SetValue(c_MaterialSlotName);
		_offUVChannelData.SetValue(c_UVChannelData);
	}
}
// ScriptStruct Engine.AnimationRecordingSettings
// 0x0010
public class FAnimationRecordingSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbRecordInWorldSpace                                        = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbRemoveRootAnimation                                       = new ExternalOffset<byte/*(bool)*/>(0x0001);                  // 0x0001(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbAutoSaveAsset                                             = new ExternalOffset<byte/*(bool)*/>(0x0002);                  // 0x0002(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSampleRate                                                 = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLength                                                     = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERichCurveInterpMode>>  _offInterpMode                                                 = new ExternalOffset<TEnumAsByte<ERichCurveInterpMode>>(0x000C, false); // 0x000C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERichCurveTangentMode>> _offTangentMode                                                = new ExternalOffset<TEnumAsByte<ERichCurveTangentMode>>(0x000D, false); // 0x000D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bRecordInWorldSpace                                            => _offbRecordInWorldSpace.GetValue();
	public byte/*(bool)*/                                      bRemoveRootAnimation                                           => _offbRemoveRootAnimation.GetValue();
	public byte/*(bool)*/                                      bAutoSaveAsset                                                 => _offbAutoSaveAsset.GetValue();
	public float                                               SampleRate                                                     => _offSampleRate.GetValue();
	public float                                               Length                                                         => _offLength.GetValue();
	public TEnumAsByte<ERichCurveInterpMode>                   InterpMode                                                     => _offInterpMode.GetValue();
	public TEnumAsByte<ERichCurveTangentMode>                  TangentMode                                                    => _offTangentMode.GetValue();
	#endregion

	public FAnimationRecordingSettings(byte/*(bool)*/ c_bRecordInWorldSpace, byte/*(bool)*/ c_bRemoveRootAnimation, byte/*(bool)*/ c_bAutoSaveAsset, float c_SampleRate, float c_Length, TEnumAsByte<ERichCurveInterpMode> c_InterpMode, TEnumAsByte<ERichCurveTangentMode> c_TangentMode) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbRecordInWorldSpace.SetValue(c_bRecordInWorldSpace);
		_offbRemoveRootAnimation.SetValue(c_bRemoveRootAnimation);
		_offbAutoSaveAsset.SetValue(c_bAutoSaveAsset);
		_offSampleRate.SetValue(c_SampleRate);
		_offLength.SetValue(c_Length);
		_offInterpMode.SetValue(c_InterpMode);
		_offTangentMode.SetValue(c_TangentMode);
	}
}
// ScriptStruct Engine.ClothPhysicsProperties_Legacy
// 0x0050
public class FClothPhysicsProperties_Legacy : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offVerticalResistance                                         = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHorizontalResistance                                       = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBendResistance                                             = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offShearResistance                                            = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFriction                                                   = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDamping                                                    = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTetherStiffness                                            = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTetherLimit                                                = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDrag                                                       = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStiffnessFrequency                                         = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGravityScale                                               = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMassScale                                                  = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offInertiaBlend                                               = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSelfCollisionThickness                                     = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSelfCollisionSquashScale                                   = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSelfCollisionStiffness                                     = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSolverFrequency                                            = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFiberCompression                                           = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFiberExpansion                                             = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFiberResistance                                            = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               VerticalResistance                                             => _offVerticalResistance.GetValue();
	public float                                               HorizontalResistance                                           => _offHorizontalResistance.GetValue();
	public float                                               BendResistance                                                 => _offBendResistance.GetValue();
	public float                                               ShearResistance                                                => _offShearResistance.GetValue();
	public float                                               Friction                                                       => _offFriction.GetValue();
	public float                                               Damping                                                        => _offDamping.GetValue();
	public float                                               TetherStiffness                                                => _offTetherStiffness.GetValue();
	public float                                               TetherLimit                                                    => _offTetherLimit.GetValue();
	public float                                               Drag                                                           => _offDrag.GetValue();
	public float                                               StiffnessFrequency                                             => _offStiffnessFrequency.GetValue();
	public float                                               GravityScale                                                   => _offGravityScale.GetValue();
	public float                                               MassScale                                                      => _offMassScale.GetValue();
	public float                                               InertiaBlend                                                   => _offInertiaBlend.GetValue();
	public float                                               SelfCollisionThickness                                         => _offSelfCollisionThickness.GetValue();
	public float                                               SelfCollisionSquashScale                                       => _offSelfCollisionSquashScale.GetValue();
	public float                                               SelfCollisionStiffness                                         => _offSelfCollisionStiffness.GetValue();
	public float                                               SolverFrequency                                                => _offSolverFrequency.GetValue();
	public float                                               FiberCompression                                               => _offFiberCompression.GetValue();
	public float                                               FiberExpansion                                                 => _offFiberExpansion.GetValue();
	public float                                               FiberResistance                                                => _offFiberResistance.GetValue();
	#endregion

	public FClothPhysicsProperties_Legacy(float c_VerticalResistance, float c_HorizontalResistance, float c_BendResistance, float c_ShearResistance, float c_Friction, float c_Damping, float c_TetherStiffness, float c_TetherLimit, float c_Drag, float c_StiffnessFrequency, float c_GravityScale, float c_MassScale, float c_InertiaBlend, float c_SelfCollisionThickness, float c_SelfCollisionSquashScale, float c_SelfCollisionStiffness, float c_SolverFrequency, float c_FiberCompression, float c_FiberExpansion, float c_FiberResistance) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVerticalResistance.SetValue(c_VerticalResistance);
		_offHorizontalResistance.SetValue(c_HorizontalResistance);
		_offBendResistance.SetValue(c_BendResistance);
		_offShearResistance.SetValue(c_ShearResistance);
		_offFriction.SetValue(c_Friction);
		_offDamping.SetValue(c_Damping);
		_offTetherStiffness.SetValue(c_TetherStiffness);
		_offTetherLimit.SetValue(c_TetherLimit);
		_offDrag.SetValue(c_Drag);
		_offStiffnessFrequency.SetValue(c_StiffnessFrequency);
		_offGravityScale.SetValue(c_GravityScale);
		_offMassScale.SetValue(c_MassScale);
		_offInertiaBlend.SetValue(c_InertiaBlend);
		_offSelfCollisionThickness.SetValue(c_SelfCollisionThickness);
		_offSelfCollisionSquashScale.SetValue(c_SelfCollisionSquashScale);
		_offSelfCollisionStiffness.SetValue(c_SelfCollisionStiffness);
		_offSolverFrequency.SetValue(c_SolverFrequency);
		_offFiberCompression.SetValue(c_FiberCompression);
		_offFiberExpansion.SetValue(c_FiberExpansion);
		_offFiberResistance.SetValue(c_FiberResistance);
	}
}
// ScriptStruct Engine.ClothingAssetData_Legacy
// 0x0078
public class FClothingAssetData_Legacy : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offAssetName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offApexFileName                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbClothPropertiesChanged                                    = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FClothPhysicsProperties_Legacy>     _offPhysicsProperties                                          = new ExternalOffset<FClothPhysicsProperties_Legacy>(0x001C, false); // 0x001C(0x0050) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               AssetName                                                      => _offAssetName.GetValue();
	public FString                                             ApexFileName                                                   => _offApexFileName.GetValue();
	public byte/*(bool)*/                                      bClothPropertiesChanged                                        => _offbClothPropertiesChanged.GetValue();
	public FClothPhysicsProperties_Legacy                      PhysicsProperties                                              => _offPhysicsProperties.GetValue();
	#endregion

	public FClothingAssetData_Legacy(FName c_AssetName, FString c_ApexFileName, byte/*(bool)*/ c_bClothPropertiesChanged, FClothPhysicsProperties_Legacy c_PhysicsProperties) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAssetName.SetValue(c_AssetName);
		_offApexFileName.SetValue(c_ApexFileName);
		_offbClothPropertiesChanged.SetValue(c_bClothPropertiesChanged);
		_offPhysicsProperties.SetValue(c_PhysicsProperties);
	}
}
// ScriptStruct Engine.SkeletalMeshOptimizationSettings
// 0x003C
public class FSkeletalMeshOptimizationSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ESkeletalMeshTerminationCriterion>> _offTerminationCriterion                                       = new ExternalOffset<TEnumAsByte<ESkeletalMeshTerminationCriterion>>(0x0000, false); // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNumOfTrianglesPercentage                                   = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNumOfVertPercentage                                        = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                               _offMaxNumOfTriangles                                          = new ExternalOffset<uint>(0x000C);                            // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                               _offMaxNumOfVerts                                              = new ExternalOffset<uint>(0x0010);                            // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxDeviationPercentage                                     = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationType>> _offReductionMethod                                            = new ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationType>>(0x0018, false); // 0x0018(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationImportance>> _offSilhouetteImportance                                       = new ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationImportance>>(0x0019, false); // 0x0019(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationImportance>> _offTextureImportance                                          = new ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationImportance>>(0x001A, false); // 0x001A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationImportance>> _offShadingImportance                                          = new ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationImportance>>(0x001B, false); // 0x001B(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationImportance>> _offSkinningImportance                                         = new ExternalOffset<TEnumAsByte<ESkeletalMeshOptimizationImportance>>(0x001C, false); // 0x001C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRemapMorphTargets                                         = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbRecalcNormals                                             = new ExternalOffset<char>(0x001D, false);                     // 0x001D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWeldingThreshold                                           = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNormalsThreshold                                           = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxBonesPerVertex                                          = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnforceBoneBoundaries                                     = new ExternalOffset<char>(0x002C, false);                     // 0x002C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolumeImportance                                           = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLockEdges                                                 = new ExternalOffset<char>(0x0034, false);                     // 0x0034(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offBaseLOD                                                    = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ESkeletalMeshTerminationCriterion>      TerminationCriterion                                           => _offTerminationCriterion.GetValue();
	public float                                               NumOfTrianglesPercentage                                       => _offNumOfTrianglesPercentage.GetValue();
	public float                                               NumOfVertPercentage                                            => _offNumOfVertPercentage.GetValue();
	public uint                                                MaxNumOfTriangles                                              => _offMaxNumOfTriangles.GetValue();
	public uint                                                MaxNumOfVerts                                                  => _offMaxNumOfVerts.GetValue();
	public float                                               MaxDeviationPercentage                                         => _offMaxDeviationPercentage.GetValue();
	public TEnumAsByte<ESkeletalMeshOptimizationType>          ReductionMethod                                                => _offReductionMethod.GetValue();
	public TEnumAsByte<ESkeletalMeshOptimizationImportance>    SilhouetteImportance                                           => _offSilhouetteImportance.GetValue();
	public TEnumAsByte<ESkeletalMeshOptimizationImportance>    TextureImportance                                              => _offTextureImportance.GetValue();
	public TEnumAsByte<ESkeletalMeshOptimizationImportance>    ShadingImportance                                              => _offShadingImportance.GetValue();
	public TEnumAsByte<ESkeletalMeshOptimizationImportance>    SkinningImportance                                             => _offSkinningImportance.GetValue();
	public float                                               WeldingThreshold                                               => _offWeldingThreshold.GetValue();
	public float                                               NormalsThreshold                                               => _offNormalsThreshold.GetValue();
	public int                                                 MaxBonesPerVertex                                              => _offMaxBonesPerVertex.GetValue();
	public float                                               VolumeImportance                                               => _offVolumeImportance.GetValue();
	public int                                                 BaseLOD                                                        => _offBaseLOD.GetValue();
	#endregion

	public FSkeletalMeshOptimizationSettings(TEnumAsByte<ESkeletalMeshTerminationCriterion> c_TerminationCriterion, float c_NumOfTrianglesPercentage, float c_NumOfVertPercentage, uint c_MaxNumOfTriangles, uint c_MaxNumOfVerts, float c_MaxDeviationPercentage, TEnumAsByte<ESkeletalMeshOptimizationType> c_ReductionMethod, TEnumAsByte<ESkeletalMeshOptimizationImportance> c_SilhouetteImportance, TEnumAsByte<ESkeletalMeshOptimizationImportance> c_TextureImportance, TEnumAsByte<ESkeletalMeshOptimizationImportance> c_ShadingImportance, TEnumAsByte<ESkeletalMeshOptimizationImportance> c_SkinningImportance, float c_WeldingThreshold, float c_NormalsThreshold, int c_MaxBonesPerVertex, float c_VolumeImportance, int c_BaseLOD) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTerminationCriterion.SetValue(c_TerminationCriterion);
		_offNumOfTrianglesPercentage.SetValue(c_NumOfTrianglesPercentage);
		_offNumOfVertPercentage.SetValue(c_NumOfVertPercentage);
		_offMaxNumOfTriangles.SetValue(c_MaxNumOfTriangles);
		_offMaxNumOfVerts.SetValue(c_MaxNumOfVerts);
		_offMaxDeviationPercentage.SetValue(c_MaxDeviationPercentage);
		_offReductionMethod.SetValue(c_ReductionMethod);
		_offSilhouetteImportance.SetValue(c_SilhouetteImportance);
		_offTextureImportance.SetValue(c_TextureImportance);
		_offShadingImportance.SetValue(c_ShadingImportance);
		_offSkinningImportance.SetValue(c_SkinningImportance);
		_offWeldingThreshold.SetValue(c_WeldingThreshold);
		_offNormalsThreshold.SetValue(c_NormalsThreshold);
		_offMaxBonesPerVertex.SetValue(c_MaxBonesPerVertex);
		_offVolumeImportance.SetValue(c_VolumeImportance);
		_offBaseLOD.SetValue(c_BaseLOD);
	}
}
// ScriptStruct Engine.SkeletalMeshLODInfo
// 0x00A8
public class FSkeletalMeshLODInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FPerPlatformFloat>                  _offScreenSize                                                 = new ExternalOffset<FPerPlatformFloat>(0x0000, false);        // 0x0000(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLODHysteresis                                              = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offLODMaterialMap                                             = new ExternalOffset<TArray<int>>(0x0008, false);              // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FSkeletalMeshOptimizationSettings>  _offReductionSettings                                          = new ExternalOffset<FSkeletalMeshOptimizationSettings>(0x0018, false); // 0x0018(0x003C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBoneReference>>             _offBonesToRemove                                              = new ExternalOffset<TArray<FBoneReference>>(0x0058, false);   // 0x0058(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBoneReference>>             _offBonesToPrioritize                                          = new ExternalOffset<TArray<FBoneReference>>(0x0068, false);   // 0x0068(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWeightOfPrioritization                                     = new ExternalOffset<float>(0x0078);                           // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimSequence>                      _offBakePose                                                   = new ExternalOffset<UAnimSequence>(0x0080, true);             // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimSequence>                      _offBakePoseOverride                                           = new ExternalOffset<UAnimSequence>(0x0088, true);             // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSourceImportFilename                                       = new ExternalOffset<FString>(0x0090, false);                  // 0x0090(0x0010) (Edit, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbHasBeenSimplified                                         = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbHasPerLODVertexColors                                     = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAllowCPUAccess                                            = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportUniformlyDistributedSampling                       = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPerPlatformFloat                                   ScreenSize                                                     => _offScreenSize.GetValue();
	public float                                               LODHysteresis                                                  => _offLODHysteresis.GetValue();
	public TArray<int>                                         LODMaterialMap                                                 => _offLODMaterialMap.GetValue();
	public FSkeletalMeshOptimizationSettings                   ReductionSettings                                              => _offReductionSettings.GetValue();
	public TArray<FBoneReference>                              BonesToRemove                                                  => _offBonesToRemove.GetValue();
	public TArray<FBoneReference>                              BonesToPrioritize                                              => _offBonesToPrioritize.GetValue();
	public float                                               WeightOfPrioritization                                         => _offWeightOfPrioritization.GetValue();
	public UAnimSequence                                       BakePose                                                       => _offBakePose.GetValue();
	public UAnimSequence                                       BakePoseOverride                                               => _offBakePoseOverride.GetValue();
	public FString                                             SourceImportFilename                                           => _offSourceImportFilename.GetValue();
	#endregion

	public FSkeletalMeshLODInfo(FPerPlatformFloat c_ScreenSize, float c_LODHysteresis, TArray<int> c_LODMaterialMap, FSkeletalMeshOptimizationSettings c_ReductionSettings, TArray<FBoneReference> c_BonesToRemove, TArray<FBoneReference> c_BonesToPrioritize, float c_WeightOfPrioritization, UAnimSequence c_BakePose, UAnimSequence c_BakePoseOverride, FString c_SourceImportFilename) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offScreenSize.SetValue(c_ScreenSize);
		_offLODHysteresis.SetValue(c_LODHysteresis);
		_offLODMaterialMap.SetValue(c_LODMaterialMap);
		_offReductionSettings.SetValue(c_ReductionSettings);
		_offBonesToRemove.SetValue(c_BonesToRemove);
		_offBonesToPrioritize.SetValue(c_BonesToPrioritize);
		_offWeightOfPrioritization.SetValue(c_WeightOfPrioritization);
		_offBakePose.SetValue(c_BakePose);
		_offBakePoseOverride.SetValue(c_BakePoseOverride);
		_offSourceImportFilename.SetValue(c_SourceImportFilename);
	}
}
// ScriptStruct Engine.SkeletalMeshClothBuildParams
// 0x0058
public class FSkeletalMeshClothBuildParams : ExternalClass
{
	#region Offsets
	private ExternalOffset<TWeakObjectPtr<UClothingAssetBase>> _offTargetAsset                                                = new ExternalOffset<TWeakObjectPtr<UClothingAssetBase>>(0x0000, false); // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTargetLod                                                  = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbRemapParameters                                           = new ExternalOffset<byte/*(bool)*/>(0x000C);                  // 0x000C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offAssetName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLODIndex                                                   = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSourceSection                                              = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbRemoveFromMesh                                            = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TWeakObjectPtr<UClothingAssetBase>                  TargetAsset                                                    => _offTargetAsset.GetValue();
	public int                                                 TargetLod                                                      => _offTargetLod.GetValue();
	public byte/*(bool)*/                                      bRemapParameters                                               => _offbRemapParameters.GetValue();
	public FString                                             AssetName                                                      => _offAssetName.GetValue();
	public int                                                 LODIndex                                                       => _offLODIndex.GetValue();
	public int                                                 SourceSection                                                  => _offSourceSection.GetValue();
	public byte/*(bool)*/                                      bRemoveFromMesh                                                => _offbRemoveFromMesh.GetValue();
	#endregion

	public FSkeletalMeshClothBuildParams(TWeakObjectPtr<UClothingAssetBase> c_TargetAsset, int c_TargetLod, byte/*(bool)*/ c_bRemapParameters, FString c_AssetName, int c_LODIndex, int c_SourceSection, byte/*(bool)*/ c_bRemoveFromMesh) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTargetAsset.SetValue(c_TargetAsset);
		_offTargetLod.SetValue(c_TargetLod);
		_offbRemapParameters.SetValue(c_bRemapParameters);
		_offAssetName.SetValue(c_AssetName);
		_offLODIndex.SetValue(c_LODIndex);
		_offSourceSection.SetValue(c_SourceSection);
		_offbRemoveFromMesh.SetValue(c_bRemoveFromMesh);
	}
}
// ScriptStruct Engine.BoneMirrorExport
// 0x0014
public class FBoneMirrorExport : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offBoneName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offSourceBoneName                                             = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAxis>>                 _offBoneFlipAxis                                               = new ExternalOffset<TEnumAsByte<EAxis>>(0x0010, false);       // 0x0010(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               BoneName                                                       => _offBoneName.GetValue();
	public FName                                               SourceBoneName                                                 => _offSourceBoneName.GetValue();
	public TEnumAsByte<EAxis>                                  BoneFlipAxis                                                   => _offBoneFlipAxis.GetValue();
	#endregion

	public FBoneMirrorExport(FName c_BoneName, FName c_SourceBoneName, TEnumAsByte<EAxis> c_BoneFlipAxis) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneName.SetValue(c_BoneName);
		_offSourceBoneName.SetValue(c_SourceBoneName);
		_offBoneFlipAxis.SetValue(c_BoneFlipAxis);
	}
}
// ScriptStruct Engine.BoneMirrorInfo
// 0x0008
public class FBoneMirrorInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offSourceIndex                                                = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAxis>>                 _offBoneFlipAxis                                               = new ExternalOffset<TEnumAsByte<EAxis>>(0x0004, false);       // 0x0004(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 SourceIndex                                                    => _offSourceIndex.GetValue();
	public TEnumAsByte<EAxis>                                  BoneFlipAxis                                                   => _offBoneFlipAxis.GetValue();
	#endregion

	public FBoneMirrorInfo(int c_SourceIndex, TEnumAsByte<EAxis> c_BoneFlipAxis) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourceIndex.SetValue(c_SourceIndex);
		_offBoneFlipAxis.SetValue(c_BoneFlipAxis);
	}
}
// ScriptStruct Engine.SkeletalMeshComponentClothTickFunction
// 0x0008 (0x0058 - 0x0050)
public class FSkeletalMeshComponentClothTickFunction : FTickFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FSkeletalMeshComponentClothTickFunction() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SkeletalMeshComponentEndPhysicsTickFunction
// 0x0008 (0x0058 - 0x0050)
public class FSkeletalMeshComponentEndPhysicsTickFunction : FTickFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FSkeletalMeshComponentEndPhysicsTickFunction() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.BoneFilter
// 0x000C
public class FBoneFilter : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbExcludeSelf                                               = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offBoneName                                                   = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bExcludeSelf                                                   => _offbExcludeSelf.GetValue();
	public FName                                               BoneName                                                       => _offBoneName.GetValue();
	#endregion

	public FBoneFilter(byte/*(bool)*/ c_bExcludeSelf, FName c_BoneName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbExcludeSelf.SetValue(c_bExcludeSelf);
		_offBoneName.SetValue(c_BoneName);
	}
}
// ScriptStruct Engine.SkeletalMeshLODGroupSettings
// 0x0080
public class FSkeletalMeshLODGroupSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<FPerPlatformFloat>                  _offScreenSize                                                 = new ExternalOffset<FPerPlatformFloat>(0x0000, false);        // 0x0000(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLODHysteresis                                              = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EBoneFilterActionOption>            _offBoneFilterActionOption                                     = new ExternalOffset<EBoneFilterActionOption>(0x0008, false);  // 0x0008(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBoneFilter>>                _offBoneList                                                   = new ExternalOffset<TArray<FBoneFilter>>(0x0010, false);      // 0x0010(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offBonesToPrioritize                                          = new ExternalOffset<TArray<FName>>(0x0020, false);            // 0x0020(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWeightOfPrioritization                                     = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimSequence>                      _offBakePose                                                   = new ExternalOffset<UAnimSequence>(0x0038, true);             // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSkeletalMeshOptimizationSettings>  _offReductionSettings                                          = new ExternalOffset<FSkeletalMeshOptimizationSettings>(0x0040, false); // 0x0040(0x003C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPerPlatformFloat                                   ScreenSize                                                     => _offScreenSize.GetValue();
	public float                                               LODHysteresis                                                  => _offLODHysteresis.GetValue();
	public EBoneFilterActionOption                             BoneFilterActionOption                                         => _offBoneFilterActionOption.GetValue();
	public TArray<FBoneFilter>                                 BoneList                                                       => _offBoneList.GetValue();
	public TArray<FName>                                       BonesToPrioritize                                              => _offBonesToPrioritize.GetValue();
	public float                                               WeightOfPrioritization                                         => _offWeightOfPrioritization.GetValue();
	public UAnimSequence                                       BakePose                                                       => _offBakePose.GetValue();
	public FSkeletalMeshOptimizationSettings                   ReductionSettings                                              => _offReductionSettings.GetValue();
	#endregion

	public FSkeletalMeshLODGroupSettings(FPerPlatformFloat c_ScreenSize, float c_LODHysteresis, EBoneFilterActionOption c_BoneFilterActionOption, TArray<FBoneFilter> c_BoneList, TArray<FName> c_BonesToPrioritize, float c_WeightOfPrioritization, UAnimSequence c_BakePose, FSkeletalMeshOptimizationSettings c_ReductionSettings) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offScreenSize.SetValue(c_ScreenSize);
		_offLODHysteresis.SetValue(c_LODHysteresis);
		_offBoneFilterActionOption.SetValue(c_BoneFilterActionOption);
		_offBoneList.SetValue(c_BoneList);
		_offBonesToPrioritize.SetValue(c_BonesToPrioritize);
		_offWeightOfPrioritization.SetValue(c_WeightOfPrioritization);
		_offBakePose.SetValue(c_BakePose);
		_offReductionSettings.SetValue(c_ReductionSettings);
	}
}
// ScriptStruct Engine.SkeletalMeshSamplingRegionMaterialFilter
// 0x0008
public class FSkeletalMeshSamplingRegionMaterialFilter : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offMaterialName                                               = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               MaterialName                                                   => _offMaterialName.GetValue();
	#endregion

	public FSkeletalMeshSamplingRegionMaterialFilter(FName c_MaterialName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaterialName.SetValue(c_MaterialName);
	}
}
// ScriptStruct Engine.SkeletalMeshSamplingRegionBoneFilter
// 0x000C
public class FSkeletalMeshSamplingRegionBoneFilter : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offBoneName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIncludeOrExclude                                          = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbApplyToChildren                                           = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               BoneName                                                       => _offBoneName.GetValue();
	#endregion

	public FSkeletalMeshSamplingRegionBoneFilter(FName c_BoneName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBoneName.SetValue(c_BoneName);
	}
}
// ScriptStruct Engine.SkeletalMeshSamplingRegion
// 0x0030
public class FSkeletalMeshSamplingRegion : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLODIndex                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSupportUniformlyDistributedSampling                       = new ExternalOffset<char>(0x000C, false);                     // 0x000C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSkeletalMeshSamplingRegionMaterialFilter>> _offMaterialFilters                                            = new ExternalOffset<TArray<FSkeletalMeshSamplingRegionMaterialFilter>>(0x0010, false); // 0x0010(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSkeletalMeshSamplingRegionBoneFilter>> _offBoneFilters                                                = new ExternalOffset<TArray<FSkeletalMeshSamplingRegionBoneFilter>>(0x0020, false); // 0x0020(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public int                                                 LODIndex                                                       => _offLODIndex.GetValue();
	public TArray<FSkeletalMeshSamplingRegionMaterialFilter>   MaterialFilters                                                => _offMaterialFilters.GetValue();
	public TArray<FSkeletalMeshSamplingRegionBoneFilter>       BoneFilters                                                    => _offBoneFilters.GetValue();
	#endregion

	public FSkeletalMeshSamplingRegion(FName c_Name, int c_LODIndex, TArray<FSkeletalMeshSamplingRegionMaterialFilter> c_MaterialFilters, TArray<FSkeletalMeshSamplingRegionBoneFilter> c_BoneFilters) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offLODIndex.SetValue(c_LODIndex);
		_offMaterialFilters.SetValue(c_MaterialFilters);
		_offBoneFilters.SetValue(c_BoneFilters);
	}
}
// ScriptStruct Engine.SkeletalMeshSamplingLODBuiltData
// 0x0048
public class FSkeletalMeshSamplingLODBuiltData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FSkeletalMeshSamplingLODBuiltData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SkeletalMeshSamplingRegionBuiltData
// 0x0078
public class FSkeletalMeshSamplingRegionBuiltData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FSkeletalMeshSamplingRegionBuiltData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SkeletalMeshSamplingBuiltData
// 0x0020
public class FSkeletalMeshSamplingBuiltData : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FSkeletalMeshSamplingLODBuiltData>> _offWholeMeshBuiltData                                         = new ExternalOffset<TArray<FSkeletalMeshSamplingLODBuiltData>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSkeletalMeshSamplingRegionBuiltData>> _offRegionBuiltData                                            = new ExternalOffset<TArray<FSkeletalMeshSamplingRegionBuiltData>>(0x0010, false); // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FSkeletalMeshSamplingLODBuiltData>           WholeMeshBuiltData                                             => _offWholeMeshBuiltData.GetValue();
	public TArray<FSkeletalMeshSamplingRegionBuiltData>        RegionBuiltData                                                => _offRegionBuiltData.GetValue();
	#endregion

	public FSkeletalMeshSamplingBuiltData(TArray<FSkeletalMeshSamplingLODBuiltData> c_WholeMeshBuiltData, TArray<FSkeletalMeshSamplingRegionBuiltData> c_RegionBuiltData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offWholeMeshBuiltData.SetValue(c_WholeMeshBuiltData);
		_offRegionBuiltData.SetValue(c_RegionBuiltData);
	}
}
// ScriptStruct Engine.SkeletalMeshSamplingInfo
// 0x0030
public class FSkeletalMeshSamplingInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FSkeletalMeshSamplingRegion>> _offRegions                                                    = new ExternalOffset<TArray<FSkeletalMeshSamplingRegion>>(0x0000, false); // 0x0000(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FSkeletalMeshSamplingBuiltData>     _offBuiltData                                                  = new ExternalOffset<FSkeletalMeshSamplingBuiltData>(0x0010, false); // 0x0010(0x0020) (NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FSkeletalMeshSamplingRegion>                 Regions                                                        => _offRegions.GetValue();
	public FSkeletalMeshSamplingBuiltData                      BuiltData                                                      => _offBuiltData.GetValue();
	#endregion

	public FSkeletalMeshSamplingInfo(TArray<FSkeletalMeshSamplingRegion> c_Regions, FSkeletalMeshSamplingBuiltData c_BuiltData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRegions.SetValue(c_Regions);
		_offBuiltData.SetValue(c_BuiltData);
	}
}
// ScriptStruct Engine.VirtualBone
// 0x0018
public class FVirtualBone : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offSourceBoneName                                             = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offTargetBoneName                                             = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offVirtualBoneName                                            = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               SourceBoneName                                                 => _offSourceBoneName.GetValue();
	public FName                                               TargetBoneName                                                 => _offTargetBoneName.GetValue();
	public FName                                               VirtualBoneName                                                => _offVirtualBoneName.GetValue();
	#endregion

	public FVirtualBone(FName c_SourceBoneName, FName c_TargetBoneName, FName c_VirtualBoneName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourceBoneName.SetValue(c_SourceBoneName);
		_offTargetBoneName.SetValue(c_TargetBoneName);
		_offVirtualBoneName.SetValue(c_VirtualBoneName);
	}
}
// ScriptStruct Engine.AnimSlotGroup
// 0x0018
public class FAnimSlotGroup : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offGroupName                                                  = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                      _offSlotNames                                                  = new ExternalOffset<TArray<FName>>(0x0008, false);            // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               GroupName                                                      => _offGroupName.GetValue();
	public TArray<FName>                                       SlotNames                                                      => _offSlotNames.GetValue();
	#endregion

	public FAnimSlotGroup(FName c_GroupName, TArray<FName> c_SlotNames) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroupName.SetValue(c_GroupName);
		_offSlotNames.SetValue(c_SlotNames);
	}
}
// ScriptStruct Engine.NameMapping
// 0x0010
public class FNameMapping : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offNodeName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offBoneName                                                   = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               NodeName                                                       => _offNodeName.GetValue();
	public FName                                               BoneName                                                       => _offBoneName.GetValue();
	#endregion

	public FNameMapping(FName c_NodeName, FName c_BoneName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNodeName.SetValue(c_NodeName);
		_offBoneName.SetValue(c_BoneName);
	}
}
// ScriptStruct Engine.RigConfiguration
// 0x0018
public class FRigConfiguration : ExternalClass
{
	#region Offsets
	private ExternalOffset<URig>                               _offRig                                                        = new ExternalOffset<URig>(0x0000, true);                      // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FNameMapping>>               _offBoneMappingTable                                           = new ExternalOffset<TArray<FNameMapping>>(0x0008, false);     // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public URig                                                Rig                                                            => _offRig.GetValue();
	public TArray<FNameMapping>                                BoneMappingTable                                               => _offBoneMappingTable.GetValue();
	#endregion

	public FRigConfiguration(URig c_Rig, TArray<FNameMapping> c_BoneMappingTable) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRig.SetValue(c_Rig);
		_offBoneMappingTable.SetValue(c_BoneMappingTable);
	}
}
// ScriptStruct Engine.BoneReductionSetting
// 0x0010
public class FBoneReductionSetting : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FName>>                      _offBonesToRemove                                              = new ExternalOffset<TArray<FName>>(0x0000, false);            // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FName>                                       BonesToRemove                                                  => _offBonesToRemove.GetValue();
	#endregion

	public FBoneReductionSetting(TArray<FName> c_BonesToRemove) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBonesToRemove.SetValue(c_BonesToRemove);
	}
}
// ScriptStruct Engine.ReferencePose
// 0x0018
public class FReferencePose : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offPoseName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FTransform>>                 _offReferencePose                                              = new ExternalOffset<TArray<FTransform>>(0x0008, false);       // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               PoseName                                                       => _offPoseName.GetValue();
	public TArray<FTransform>                                  ReferencePose                                                  => _offReferencePose.GetValue();
	#endregion

	public FReferencePose(FName c_PoseName, TArray<FTransform> c_ReferencePose) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPoseName.SetValue(c_PoseName);
		_offReferencePose.SetValue(c_ReferencePose);
	}
}
// ScriptStruct Engine.BoneNode
// 0x0010
public class FBoneNode : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offParentIndex                                                = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBoneTranslationRetargetingMode>> _offTranslationRetargetingMode                                 = new ExternalOffset<TEnumAsByte<EBoneTranslationRetargetingMode>>(0x000C, false); // 0x000C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public int                                                 ParentIndex                                                    => _offParentIndex.GetValue();
	public TEnumAsByte<EBoneTranslationRetargetingMode>        TranslationRetargetingMode                                     => _offTranslationRetargetingMode.GetValue();
	#endregion

	public FBoneNode(FName c_Name, int c_ParentIndex, TEnumAsByte<EBoneTranslationRetargetingMode> c_TranslationRetargetingMode) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offParentIndex.SetValue(c_ParentIndex);
		_offTranslationRetargetingMode.SetValue(c_TranslationRetargetingMode);
	}
}
// ScriptStruct Engine.SkeletonToMeshLinkup
// 0x0020
public class FSkeletonToMeshLinkup : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<int>>                        _offSkeletonToMeshTable                                        = new ExternalOffset<TArray<int>>(0x0000, false);              // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offMeshToSkeletonTable                                        = new ExternalOffset<TArray<int>>(0x0010, false);              // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<int>                                         SkeletonToMeshTable                                            => _offSkeletonToMeshTable.GetValue();
	public TArray<int>                                         MeshToSkeletonTable                                            => _offMeshToSkeletonTable.GetValue();
	#endregion

	public FSkeletonToMeshLinkup(TArray<int> c_SkeletonToMeshTable, TArray<int> c_MeshToSkeletonTable) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSkeletonToMeshTable.SetValue(c_SkeletonToMeshTable);
		_offMeshToSkeletonTable.SetValue(c_MeshToSkeletonTable);
	}
}
// ScriptStruct Engine.SkinWeightProfileInfo
// 0x0010
public class FSkinWeightProfileInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPerPlatformBool>                   _offDefaultProfile                                             = new ExternalOffset<FPerPlatformBool>(0x0008, false);         // 0x0008(0x0001) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FPerPlatformInt>                    _offDefaultProfileFromLODIndex                                 = new ExternalOffset<FPerPlatformInt>(0x000C, false);          // 0x000C(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	public FPerPlatformBool                                    DefaultProfile                                                 => _offDefaultProfile.GetValue();
	public FPerPlatformInt                                     DefaultProfileFromLODIndex                                     => _offDefaultProfileFromLODIndex.GetValue();
	#endregion

	public FSkinWeightProfileInfo(FName c_Name, FPerPlatformBool c_DefaultProfile, FPerPlatformInt c_DefaultProfileFromLODIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
		_offDefaultProfile.SetValue(c_DefaultProfile);
		_offDefaultProfileFromLODIndex.SetValue(c_DefaultProfileFromLODIndex);
	}
}
// ScriptStruct Engine.PrecomputedSkyLightInstanceData
// 0x00B8 (0x0160 - 0x00A8)
public class FPrecomputedSkyLightInstanceData : FSceneComponentInstanceData
{
	#region Offsets
	private ExternalOffset<FGuid>                              _offLightGuid                                                  = new ExternalOffset<FGuid>(0x00A8, false);                    // 0x00A8(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offAverageBrightness                                          = new ExternalOffset<float>(0x00B8);                           // 0x00B8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FGuid                                               LightGuid                                                      => _offLightGuid.GetValue();
	public float                                               AverageBrightness                                              => _offAverageBrightness.GetValue();
	#endregion

	public FPrecomputedSkyLightInstanceData(FGuid c_LightGuid, float c_AverageBrightness) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLightGuid.SetValue(c_LightGuid);
		_offAverageBrightness.SetValue(c_AverageBrightness);
	}
}
// ScriptStruct Engine.SmartNameContainer
// 0x0050
public class FSmartNameContainer : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FSmartNameContainer() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SmartNameMapping
// 0x0060
public class FSmartNameMapping : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FSmartNameMapping() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.CurveMetaData
// 0x0020
public class FCurveMetaData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FCurveMetaData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SoundAttenuationPluginSettings
// 0x0030
public class FSoundAttenuationPluginSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<USpatializationPluginSourceSettingsBase>> _offSpatializationPluginSettingsArray                          = new ExternalOffset<TArray<USpatializationPluginSourceSettingsBase>>(0x0000, false); // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UOcclusionPluginSourceSettingsBase>> _offOcclusionPluginSettingsArray                               = new ExternalOffset<TArray<UOcclusionPluginSourceSettingsBase>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UReverbPluginSourceSettingsBase>> _offReverbPluginSettingsArray                                  = new ExternalOffset<TArray<UReverbPluginSourceSettingsBase>>(0x0020, false); // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<USpatializationPluginSourceSettingsBase>     SpatializationPluginSettingsArray                              => _offSpatializationPluginSettingsArray.GetValue();
	public TArray<UOcclusionPluginSourceSettingsBase>          OcclusionPluginSettingsArray                                   => _offOcclusionPluginSettingsArray.GetValue();
	public TArray<UReverbPluginSourceSettingsBase>             ReverbPluginSettingsArray                                      => _offReverbPluginSettingsArray.GetValue();
	#endregion

	public FSoundAttenuationPluginSettings(TArray<USpatializationPluginSourceSettingsBase> c_SpatializationPluginSettingsArray, TArray<UOcclusionPluginSourceSettingsBase> c_OcclusionPluginSettingsArray, TArray<UReverbPluginSourceSettingsBase> c_ReverbPluginSettingsArray) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSpatializationPluginSettingsArray.SetValue(c_SpatializationPluginSettingsArray);
		_offOcclusionPluginSettingsArray.SetValue(c_OcclusionPluginSettingsArray);
		_offReverbPluginSettingsArray.SetValue(c_ReverbPluginSettingsArray);
	}
}
// ScriptStruct Engine.SoundAttenuationSettings
// 0x0238 (0x02E8 - 0x00B0)
public class FSoundAttenuationSettings : FBaseAttenuationSettings
{
	#region Offsets
//	private ExternalOffset<char>                               _offbAttenuate                                                 = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbSpatialize                                                = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAttenuateWithLPF                                          = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableListenerFocus                                       = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableFocusInterpolation                                  = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableOcclusion                                           = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbUseComplexCollisionForOcclusion                           = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableReverbSend                                          = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbApplyNormalizationToStereoSounds                          = new ExternalOffset<char>(0x00B1, false);                     // 0x00B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbEnableLogFrequencyScaling                                 = new ExternalOffset<char>(0x00B1, false);                     // 0x00B1(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESoundSpatializationAlgorithm>> _offSpatializationAlgorithm                                    = new ExternalOffset<TEnumAsByte<ESoundSpatializationAlgorithm>>(0x00B2, false); // 0x00B2(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAirAbsorptionMethod>               _offAbsorptionMethod                                           = new ExternalOffset<EAirAbsorptionMethod>(0x00B3, false);     // 0x00B3(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionChannel>>     _offOcclusionTraceChannel                                      = new ExternalOffset<TEnumAsByte<ECollisionChannel>>(0x00B4, false); // 0x00B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EReverbSendMethod>                  _offReverbSendMethod                                           = new ExternalOffset<EReverbSendMethod>(0x00B5, false);        // 0x00B5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOmniRadius                                                 = new ExternalOffset<float>(0x00B8);                           // 0x00B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStereoSpread                                               = new ExternalOffset<float>(0x00BC);                           // 0x00BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPFRadiusMin                                               = new ExternalOffset<float>(0x00C0);                           // 0x00C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPFRadiusMax                                               = new ExternalOffset<float>(0x00C4);                           // 0x00C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                 _offCustomLowpassAirAbsorptionCurve                            = new ExternalOffset<FRuntimeFloatCurve>(0x00C8, false);       // 0x00C8(0x0088) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                 _offCustomHighpassAirAbsorptionCurve                           = new ExternalOffset<FRuntimeFloatCurve>(0x0150, false);       // 0x0150(0x0088) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPFFrequencyAtMin                                          = new ExternalOffset<float>(0x01D8);                           // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLPFFrequencyAtMax                                          = new ExternalOffset<float>(0x01DC);                           // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHPFFrequencyAtMin                                          = new ExternalOffset<float>(0x01E0);                           // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offHPFFrequencyAtMax                                          = new ExternalOffset<float>(0x01E4);                           // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFocusAzimuth                                               = new ExternalOffset<float>(0x01E8);                           // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNonFocusAzimuth                                            = new ExternalOffset<float>(0x01EC);                           // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFocusDistanceScale                                         = new ExternalOffset<float>(0x01F0);                           // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNonFocusDistanceScale                                      = new ExternalOffset<float>(0x01F4);                           // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFocusPriorityScale                                         = new ExternalOffset<float>(0x01F8);                           // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNonFocusPriorityScale                                      = new ExternalOffset<float>(0x01FC);                           // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFocusVolumeAttenuation                                     = new ExternalOffset<float>(0x0200);                           // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNonFocusVolumeAttenuation                                  = new ExternalOffset<float>(0x0204);                           // 0x0204(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFocusAttackInterpSpeed                                     = new ExternalOffset<float>(0x0208);                           // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFocusReleaseInterpSpeed                                    = new ExternalOffset<float>(0x020C);                           // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOcclusionLowPassFilterFrequency                            = new ExternalOffset<float>(0x0210);                           // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOcclusionVolumeAttenuation                                 = new ExternalOffset<float>(0x0214);                           // 0x0214(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offOcclusionInterpolationTime                                 = new ExternalOffset<float>(0x0218);                           // 0x0218(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offReverbWetLevelMin                                          = new ExternalOffset<float>(0x021C);                           // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offReverbWetLevelMax                                          = new ExternalOffset<float>(0x0220);                           // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offReverbDistanceMin                                          = new ExternalOffset<float>(0x0224);                           // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offReverbDistanceMax                                          = new ExternalOffset<float>(0x0228);                           // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offManualReverbSendLevel                                      = new ExternalOffset<float>(0x022C);                           // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                 _offCustomReverbSendCurve                                      = new ExternalOffset<FRuntimeFloatCurve>(0x0230, false);       // 0x0230(0x0088) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoundAttenuationPluginSettings>    _offPluginSettings                                             = new ExternalOffset<FSoundAttenuationPluginSettings>(0x02B8, false); // 0x02B8(0x0030) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ESoundSpatializationAlgorithm>          SpatializationAlgorithm                                        => _offSpatializationAlgorithm.GetValue();
	public EAirAbsorptionMethod                                AbsorptionMethod                                               => _offAbsorptionMethod.GetValue();
	public TEnumAsByte<ECollisionChannel>                      OcclusionTraceChannel                                          => _offOcclusionTraceChannel.GetValue();
	public EReverbSendMethod                                   ReverbSendMethod                                               => _offReverbSendMethod.GetValue();
	public float                                               OmniRadius                                                     => _offOmniRadius.GetValue();
	public float                                               StereoSpread                                                   => _offStereoSpread.GetValue();
	public float                                               LPFRadiusMin                                                   => _offLPFRadiusMin.GetValue();
	public float                                               LPFRadiusMax                                                   => _offLPFRadiusMax.GetValue();
	public FRuntimeFloatCurve                                  CustomLowpassAirAbsorptionCurve                                => _offCustomLowpassAirAbsorptionCurve.GetValue();
	public FRuntimeFloatCurve                                  CustomHighpassAirAbsorptionCurve                               => _offCustomHighpassAirAbsorptionCurve.GetValue();
	public float                                               LPFFrequencyAtMin                                              => _offLPFFrequencyAtMin.GetValue();
	public float                                               LPFFrequencyAtMax                                              => _offLPFFrequencyAtMax.GetValue();
	public float                                               HPFFrequencyAtMin                                              => _offHPFFrequencyAtMin.GetValue();
	public float                                               HPFFrequencyAtMax                                              => _offHPFFrequencyAtMax.GetValue();
	public float                                               FocusAzimuth                                                   => _offFocusAzimuth.GetValue();
	public float                                               NonFocusAzimuth                                                => _offNonFocusAzimuth.GetValue();
	public float                                               FocusDistanceScale                                             => _offFocusDistanceScale.GetValue();
	public float                                               NonFocusDistanceScale                                          => _offNonFocusDistanceScale.GetValue();
	public float                                               FocusPriorityScale                                             => _offFocusPriorityScale.GetValue();
	public float                                               NonFocusPriorityScale                                          => _offNonFocusPriorityScale.GetValue();
	public float                                               FocusVolumeAttenuation                                         => _offFocusVolumeAttenuation.GetValue();
	public float                                               NonFocusVolumeAttenuation                                      => _offNonFocusVolumeAttenuation.GetValue();
	public float                                               FocusAttackInterpSpeed                                         => _offFocusAttackInterpSpeed.GetValue();
	public float                                               FocusReleaseInterpSpeed                                        => _offFocusReleaseInterpSpeed.GetValue();
	public float                                               OcclusionLowPassFilterFrequency                                => _offOcclusionLowPassFilterFrequency.GetValue();
	public float                                               OcclusionVolumeAttenuation                                     => _offOcclusionVolumeAttenuation.GetValue();
	public float                                               OcclusionInterpolationTime                                     => _offOcclusionInterpolationTime.GetValue();
	public float                                               ReverbWetLevelMin                                              => _offReverbWetLevelMin.GetValue();
	public float                                               ReverbWetLevelMax                                              => _offReverbWetLevelMax.GetValue();
	public float                                               ReverbDistanceMin                                              => _offReverbDistanceMin.GetValue();
	public float                                               ReverbDistanceMax                                              => _offReverbDistanceMax.GetValue();
	public float                                               ManualReverbSendLevel                                          => _offManualReverbSendLevel.GetValue();
	public FRuntimeFloatCurve                                  CustomReverbSendCurve                                          => _offCustomReverbSendCurve.GetValue();
	public FSoundAttenuationPluginSettings                     PluginSettings                                                 => _offPluginSettings.GetValue();
	#endregion

	public FSoundAttenuationSettings(TEnumAsByte<ESoundSpatializationAlgorithm> c_SpatializationAlgorithm, EAirAbsorptionMethod c_AbsorptionMethod, TEnumAsByte<ECollisionChannel> c_OcclusionTraceChannel, EReverbSendMethod c_ReverbSendMethod, float c_OmniRadius, float c_StereoSpread, float c_LPFRadiusMin, float c_LPFRadiusMax, FRuntimeFloatCurve c_CustomLowpassAirAbsorptionCurve, FRuntimeFloatCurve c_CustomHighpassAirAbsorptionCurve, float c_LPFFrequencyAtMin, float c_LPFFrequencyAtMax, float c_HPFFrequencyAtMin, float c_HPFFrequencyAtMax, float c_FocusAzimuth, float c_NonFocusAzimuth, float c_FocusDistanceScale, float c_NonFocusDistanceScale, float c_FocusPriorityScale, float c_NonFocusPriorityScale, float c_FocusVolumeAttenuation, float c_NonFocusVolumeAttenuation, float c_FocusAttackInterpSpeed, float c_FocusReleaseInterpSpeed, float c_OcclusionLowPassFilterFrequency, float c_OcclusionVolumeAttenuation, float c_OcclusionInterpolationTime, float c_ReverbWetLevelMin, float c_ReverbWetLevelMax, float c_ReverbDistanceMin, float c_ReverbDistanceMax, float c_ManualReverbSendLevel, FRuntimeFloatCurve c_CustomReverbSendCurve, FSoundAttenuationPluginSettings c_PluginSettings) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSpatializationAlgorithm.SetValue(c_SpatializationAlgorithm);
		_offAbsorptionMethod.SetValue(c_AbsorptionMethod);
		_offOcclusionTraceChannel.SetValue(c_OcclusionTraceChannel);
		_offReverbSendMethod.SetValue(c_ReverbSendMethod);
		_offOmniRadius.SetValue(c_OmniRadius);
		_offStereoSpread.SetValue(c_StereoSpread);
		_offLPFRadiusMin.SetValue(c_LPFRadiusMin);
		_offLPFRadiusMax.SetValue(c_LPFRadiusMax);
		_offCustomLowpassAirAbsorptionCurve.SetValue(c_CustomLowpassAirAbsorptionCurve);
		_offCustomHighpassAirAbsorptionCurve.SetValue(c_CustomHighpassAirAbsorptionCurve);
		_offLPFFrequencyAtMin.SetValue(c_LPFFrequencyAtMin);
		_offLPFFrequencyAtMax.SetValue(c_LPFFrequencyAtMax);
		_offHPFFrequencyAtMin.SetValue(c_HPFFrequencyAtMin);
		_offHPFFrequencyAtMax.SetValue(c_HPFFrequencyAtMax);
		_offFocusAzimuth.SetValue(c_FocusAzimuth);
		_offNonFocusAzimuth.SetValue(c_NonFocusAzimuth);
		_offFocusDistanceScale.SetValue(c_FocusDistanceScale);
		_offNonFocusDistanceScale.SetValue(c_NonFocusDistanceScale);
		_offFocusPriorityScale.SetValue(c_FocusPriorityScale);
		_offNonFocusPriorityScale.SetValue(c_NonFocusPriorityScale);
		_offFocusVolumeAttenuation.SetValue(c_FocusVolumeAttenuation);
		_offNonFocusVolumeAttenuation.SetValue(c_NonFocusVolumeAttenuation);
		_offFocusAttackInterpSpeed.SetValue(c_FocusAttackInterpSpeed);
		_offFocusReleaseInterpSpeed.SetValue(c_FocusReleaseInterpSpeed);
		_offOcclusionLowPassFilterFrequency.SetValue(c_OcclusionLowPassFilterFrequency);
		_offOcclusionVolumeAttenuation.SetValue(c_OcclusionVolumeAttenuation);
		_offOcclusionInterpolationTime.SetValue(c_OcclusionInterpolationTime);
		_offReverbWetLevelMin.SetValue(c_ReverbWetLevelMin);
		_offReverbWetLevelMax.SetValue(c_ReverbWetLevelMax);
		_offReverbDistanceMin.SetValue(c_ReverbDistanceMin);
		_offReverbDistanceMax.SetValue(c_ReverbDistanceMax);
		_offManualReverbSendLevel.SetValue(c_ManualReverbSendLevel);
		_offCustomReverbSendCurve.SetValue(c_CustomReverbSendCurve);
		_offPluginSettings.SetValue(c_PluginSettings);
	}
}
// ScriptStruct Engine.PassiveSoundMixModifier
// 0x0010
public class FPassiveSoundMixModifier : ExternalClass
{
	#region Offsets
	private ExternalOffset<USoundMix>                          _offSoundMix                                                   = new ExternalOffset<USoundMix>(0x0000, true);                 // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinVolumeThreshold                                         = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxVolumeThreshold                                         = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundMix                                           SoundMix                                                       => _offSoundMix.GetValue();
	public float                                               MinVolumeThreshold                                             => _offMinVolumeThreshold.GetValue();
	public float                                               MaxVolumeThreshold                                             => _offMaxVolumeThreshold.GetValue();
	#endregion

	public FPassiveSoundMixModifier(USoundMix c_SoundMix, float c_MinVolumeThreshold, float c_MaxVolumeThreshold) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSoundMix.SetValue(c_SoundMix);
		_offMinVolumeThreshold.SetValue(c_MinVolumeThreshold);
		_offMaxVolumeThreshold.SetValue(c_MaxVolumeThreshold);
	}
}
// ScriptStruct Engine.SoundClassProperties
// 0x002C
public class FSoundClassProperties : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offVolume                                                     = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPitch                                                      = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStereoBleed                                                = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLFEBleed                                                   = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVoiceCenterChannelVolume                                   = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRadioFilterVolume                                          = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRadioFilterVolumeThreshold                                 = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbApplyEffects                                              = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAlwaysPlay                                                = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsUISound                                                 = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbIsMusic                                                   = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbReverb                                                    = new ExternalOffset<char>(0x001C, false);                     // 0x001C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDefault2DReverbSendAmount                                  = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbCenterChannelOnly                                         = new ExternalOffset<char>(0x0024, false);                     // 0x0024(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbApplyAmbientVolumes                                       = new ExternalOffset<char>(0x0024, false);                     // 0x0024(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAudioOutputTarget>>    _offOutputTarget                                               = new ExternalOffset<TEnumAsByte<EAudioOutputTarget>>(0x0028, false); // 0x0028(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Volume                                                         => _offVolume.GetValue();
	public float                                               Pitch                                                          => _offPitch.GetValue();
	public float                                               StereoBleed                                                    => _offStereoBleed.GetValue();
	public float                                               LFEBleed                                                       => _offLFEBleed.GetValue();
	public float                                               VoiceCenterChannelVolume                                       => _offVoiceCenterChannelVolume.GetValue();
	public float                                               RadioFilterVolume                                              => _offRadioFilterVolume.GetValue();
	public float                                               RadioFilterVolumeThreshold                                     => _offRadioFilterVolumeThreshold.GetValue();
	public float                                               Default2DReverbSendAmount                                      => _offDefault2DReverbSendAmount.GetValue();
	public TEnumAsByte<EAudioOutputTarget>                     OutputTarget                                                   => _offOutputTarget.GetValue();
	#endregion

	public FSoundClassProperties(float c_Volume, float c_Pitch, float c_StereoBleed, float c_LFEBleed, float c_VoiceCenterChannelVolume, float c_RadioFilterVolume, float c_RadioFilterVolumeThreshold, float c_Default2DReverbSendAmount, TEnumAsByte<EAudioOutputTarget> c_OutputTarget) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVolume.SetValue(c_Volume);
		_offPitch.SetValue(c_Pitch);
		_offStereoBleed.SetValue(c_StereoBleed);
		_offLFEBleed.SetValue(c_LFEBleed);
		_offVoiceCenterChannelVolume.SetValue(c_VoiceCenterChannelVolume);
		_offRadioFilterVolume.SetValue(c_RadioFilterVolume);
		_offRadioFilterVolumeThreshold.SetValue(c_RadioFilterVolumeThreshold);
		_offDefault2DReverbSendAmount.SetValue(c_Default2DReverbSendAmount);
		_offOutputTarget.SetValue(c_OutputTarget);
	}
}
// ScriptStruct Engine.SoundClassEditorData
// 0x0008
public class FSoundClassEditorData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FSoundClassEditorData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SoundConcurrencySettings
// 0x0020
public class FSoundConcurrencySettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offMaxCount                                                   = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbLimitToOwner                                              = new ExternalOffset<char>(0x0004, false);                     // 0x0004(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaxConcurrentResolutionRule>> _offResolutionRule                                             = new ExternalOffset<TEnumAsByte<EMaxConcurrentResolutionRule>>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolumeScale                                                = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offVolumeScaleAttackTime                                      = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbVolumeScaleCanRelease                                     = new ExternalOffset<char>(0x0014, false);                     // 0x0014(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolumeScaleReleaseTime                                     = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVoiceStealReleaseTime                                      = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MaxCount                                                       => _offMaxCount.GetValue();
	public TEnumAsByte<EMaxConcurrentResolutionRule>           ResolutionRule                                                 => _offResolutionRule.GetValue();
	public float                                               VolumeScale                                                    => _offVolumeScale.GetValue();
	public float                                               VolumeScaleAttackTime                                          => _offVolumeScaleAttackTime.GetValue();
	public float                                               VolumeScaleReleaseTime                                         => _offVolumeScaleReleaseTime.GetValue();
	public float                                               VoiceStealReleaseTime                                          => _offVoiceStealReleaseTime.GetValue();
	#endregion

	public FSoundConcurrencySettings(int c_MaxCount, TEnumAsByte<EMaxConcurrentResolutionRule> c_ResolutionRule, float c_VolumeScale, float c_VolumeScaleAttackTime, float c_VolumeScaleReleaseTime, float c_VoiceStealReleaseTime) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaxCount.SetValue(c_MaxCount);
		_offResolutionRule.SetValue(c_ResolutionRule);
		_offVolumeScale.SetValue(c_VolumeScale);
		_offVolumeScaleAttackTime.SetValue(c_VolumeScaleAttackTime);
		_offVolumeScaleReleaseTime.SetValue(c_VolumeScaleReleaseTime);
		_offVoiceStealReleaseTime.SetValue(c_VoiceStealReleaseTime);
	}
}
// ScriptStruct Engine.SoundNodeEditorData
// 0x0008
public class FSoundNodeEditorData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FSoundNodeEditorData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SourceEffectChainEntry
// 0x0010
public class FSourceEffectChainEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<USoundEffectSourcePreset>           _offPreset                                                     = new ExternalOffset<USoundEffectSourcePreset>(0x0000, true);  // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbBypass                                                    = new ExternalOffset<char>(0x0008, false);                     // 0x0008(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundEffectSourcePreset                            Preset                                                         => _offPreset.GetValue();
	#endregion

	public FSourceEffectChainEntry(USoundEffectSourcePreset c_Preset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPreset.SetValue(c_Preset);
	}
}
// ScriptStruct Engine.SoundGroup
// 0x0020
public class FSoundGroup : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ESoundGroup>>           _offSoundGroup                                                 = new ExternalOffset<TEnumAsByte<ESoundGroup>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDisplayName                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAlwaysDecompressOnLoad                                    = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDecompressedDuration                                       = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ESoundGroup>                            SoundGroup                                                     => _offSoundGroup.GetValue();
	public FString                                             DisplayName                                                    => _offDisplayName.GetValue();
	public float                                               DecompressedDuration                                           => _offDecompressedDuration.GetValue();
	#endregion

	public FSoundGroup(TEnumAsByte<ESoundGroup> c_SoundGroup, FString c_DisplayName, float c_DecompressedDuration) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSoundGroup.SetValue(c_SoundGroup);
		_offDisplayName.SetValue(c_DisplayName);
		_offDecompressedDuration.SetValue(c_DecompressedDuration);
	}
}
// ScriptStruct Engine.SoundClassAdjuster
// 0x0018
public class FSoundClassAdjuster : ExternalClass
{
	#region Offsets
	private ExternalOffset<USoundClass>                        _offSoundClassObject                                           = new ExternalOffset<USoundClass>(0x0000, true);               // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolumeAdjuster                                             = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPitchAdjuster                                              = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbApplyToChildren                                           = new ExternalOffset<char>(0x0010, false);                     // 0x0010(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVoiceCenterChannelVolumeAdjuster                           = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundClass                                         SoundClassObject                                               => _offSoundClassObject.GetValue();
	public float                                               VolumeAdjuster                                                 => _offVolumeAdjuster.GetValue();
	public float                                               PitchAdjuster                                                  => _offPitchAdjuster.GetValue();
	public float                                               VoiceCenterChannelVolumeAdjuster                               => _offVoiceCenterChannelVolumeAdjuster.GetValue();
	#endregion

	public FSoundClassAdjuster(USoundClass c_SoundClassObject, float c_VolumeAdjuster, float c_PitchAdjuster, float c_VoiceCenterChannelVolumeAdjuster) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSoundClassObject.SetValue(c_SoundClassObject);
		_offVolumeAdjuster.SetValue(c_VolumeAdjuster);
		_offPitchAdjuster.SetValue(c_PitchAdjuster);
		_offVoiceCenterChannelVolumeAdjuster.SetValue(c_VoiceCenterChannelVolumeAdjuster);
	}
}
// ScriptStruct Engine.AudioEQEffect
// 0x0038
public class FAudioEQEffect : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offFrequencyCenter0                                           = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGain0                                                      = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBandwidth0                                                 = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFrequencyCenter1                                           = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGain1                                                      = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBandwidth1                                                 = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFrequencyCenter2                                           = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGain2                                                      = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBandwidth2                                                 = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFrequencyCenter3                                           = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offGain3                                                      = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offBandwidth3                                                 = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               FrequencyCenter0                                               => _offFrequencyCenter0.GetValue();
	public float                                               Gain0                                                          => _offGain0.GetValue();
	public float                                               Bandwidth0                                                     => _offBandwidth0.GetValue();
	public float                                               FrequencyCenter1                                               => _offFrequencyCenter1.GetValue();
	public float                                               Gain1                                                          => _offGain1.GetValue();
	public float                                               Bandwidth1                                                     => _offBandwidth1.GetValue();
	public float                                               FrequencyCenter2                                               => _offFrequencyCenter2.GetValue();
	public float                                               Gain2                                                          => _offGain2.GetValue();
	public float                                               Bandwidth2                                                     => _offBandwidth2.GetValue();
	public float                                               FrequencyCenter3                                               => _offFrequencyCenter3.GetValue();
	public float                                               Gain3                                                          => _offGain3.GetValue();
	public float                                               Bandwidth3                                                     => _offBandwidth3.GetValue();
	#endregion

	public FAudioEQEffect(float c_FrequencyCenter0, float c_Gain0, float c_Bandwidth0, float c_FrequencyCenter1, float c_Gain1, float c_Bandwidth1, float c_FrequencyCenter2, float c_Gain2, float c_Bandwidth2, float c_FrequencyCenter3, float c_Gain3, float c_Bandwidth3) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFrequencyCenter0.SetValue(c_FrequencyCenter0);
		_offGain0.SetValue(c_Gain0);
		_offBandwidth0.SetValue(c_Bandwidth0);
		_offFrequencyCenter1.SetValue(c_FrequencyCenter1);
		_offGain1.SetValue(c_Gain1);
		_offBandwidth1.SetValue(c_Bandwidth1);
		_offFrequencyCenter2.SetValue(c_FrequencyCenter2);
		_offGain2.SetValue(c_Gain2);
		_offBandwidth2.SetValue(c_Bandwidth2);
		_offFrequencyCenter3.SetValue(c_FrequencyCenter3);
		_offGain3.SetValue(c_Gain3);
		_offBandwidth3.SetValue(c_Bandwidth3);
	}
}
// ScriptStruct Engine.DistanceDatum
// 0x0014
public class FDistanceDatum : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offFadeInDistanceStart                                        = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFadeInDistanceEnd                                          = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFadeOutDistanceStart                                       = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFadeOutDistanceEnd                                         = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offVolume                                                     = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               FadeInDistanceStart                                            => _offFadeInDistanceStart.GetValue();
	public float                                               FadeInDistanceEnd                                              => _offFadeInDistanceEnd.GetValue();
	public float                                               FadeOutDistanceStart                                           => _offFadeOutDistanceStart.GetValue();
	public float                                               FadeOutDistanceEnd                                             => _offFadeOutDistanceEnd.GetValue();
	public float                                               Volume                                                         => _offVolume.GetValue();
	#endregion

	public FDistanceDatum(float c_FadeInDistanceStart, float c_FadeInDistanceEnd, float c_FadeOutDistanceStart, float c_FadeOutDistanceEnd, float c_Volume) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFadeInDistanceStart.SetValue(c_FadeInDistanceStart);
		_offFadeInDistanceEnd.SetValue(c_FadeInDistanceEnd);
		_offFadeOutDistanceStart.SetValue(c_FadeOutDistanceStart);
		_offFadeOutDistanceEnd.SetValue(c_FadeOutDistanceEnd);
		_offVolume.SetValue(c_Volume);
	}
}
// ScriptStruct Engine.ModulatorContinuousParams
// 0x0020
public class FModulatorContinuousParams : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offParameterName                                              = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDefault                                                    = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinInput                                                   = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxInput                                                   = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinOutput                                                  = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxOutput                                                  = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EModulationParamMode>>  _offParamMode                                                  = new ExternalOffset<TEnumAsByte<EModulationParamMode>>(0x001C, false); // 0x001C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               ParameterName                                                  => _offParameterName.GetValue();
	public float                                               Default                                                        => _offDefault.GetValue();
	public float                                               MinInput                                                       => _offMinInput.GetValue();
	public float                                               MaxInput                                                       => _offMaxInput.GetValue();
	public float                                               MinOutput                                                      => _offMinOutput.GetValue();
	public float                                               MaxOutput                                                      => _offMaxOutput.GetValue();
	public TEnumAsByte<EModulationParamMode>                   ParamMode                                                      => _offParamMode.GetValue();
	#endregion

	public FModulatorContinuousParams(FName c_ParameterName, float c_Default, float c_MinInput, float c_MaxInput, float c_MinOutput, float c_MaxOutput, TEnumAsByte<EModulationParamMode> c_ParamMode) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterName.SetValue(c_ParameterName);
		_offDefault.SetValue(c_Default);
		_offMinInput.SetValue(c_MinInput);
		_offMaxInput.SetValue(c_MaxInput);
		_offMinOutput.SetValue(c_MinOutput);
		_offMaxOutput.SetValue(c_MaxOutput);
		_offParamMode.SetValue(c_ParamMode);
	}
}
// ScriptStruct Engine.SoundSourceBusSendInfo
// 0x00B0
public class FSoundSourceBusSendInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<ESourceBusSendLevelControlMethod>   _offSourceBusSendLevelControlMethod                            = new ExternalOffset<ESourceBusSendLevelControlMethod>(0x0000, false); // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundSourceBus>                    _offSoundSourceBus                                             = new ExternalOffset<USoundSourceBus>(0x0008, true);           // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSendLevel                                                  = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinSendLevel                                               = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxSendLevel                                               = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinSendDistance                                            = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxSendDistance                                            = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                 _offCustomSendLevelCurve                                       = new ExternalOffset<FRuntimeFloatCurve>(0x0028, false);       // 0x0028(0x0088) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ESourceBusSendLevelControlMethod                    SourceBusSendLevelControlMethod                                => _offSourceBusSendLevelControlMethod.GetValue();
	public USoundSourceBus                                     SoundSourceBus                                                 => _offSoundSourceBus.GetValue();
	public float                                               SendLevel                                                      => _offSendLevel.GetValue();
	public float                                               MinSendLevel                                                   => _offMinSendLevel.GetValue();
	public float                                               MaxSendLevel                                                   => _offMaxSendLevel.GetValue();
	public float                                               MinSendDistance                                                => _offMinSendDistance.GetValue();
	public float                                               MaxSendDistance                                                => _offMaxSendDistance.GetValue();
	public FRuntimeFloatCurve                                  CustomSendLevelCurve                                           => _offCustomSendLevelCurve.GetValue();
	#endregion

	public FSoundSourceBusSendInfo(ESourceBusSendLevelControlMethod c_SourceBusSendLevelControlMethod, USoundSourceBus c_SoundSourceBus, float c_SendLevel, float c_MinSendLevel, float c_MaxSendLevel, float c_MinSendDistance, float c_MaxSendDistance, FRuntimeFloatCurve c_CustomSendLevelCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSourceBusSendLevelControlMethod.SetValue(c_SourceBusSendLevelControlMethod);
		_offSoundSourceBus.SetValue(c_SoundSourceBus);
		_offSendLevel.SetValue(c_SendLevel);
		_offMinSendLevel.SetValue(c_MinSendLevel);
		_offMaxSendLevel.SetValue(c_MaxSendLevel);
		_offMinSendDistance.SetValue(c_MinSendDistance);
		_offMaxSendDistance.SetValue(c_MaxSendDistance);
		_offCustomSendLevelCurve.SetValue(c_CustomSendLevelCurve);
	}
}
// ScriptStruct Engine.SoundSubmixSendInfo
// 0x00B0
public class FSoundSubmixSendInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<ESendLevelControlMethod>            _offSendLevelControlMethod                                     = new ExternalOffset<ESendLevelControlMethod>(0x0000, false);  // 0x0000(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundSubmix>                       _offSoundSubmix                                                = new ExternalOffset<USoundSubmix>(0x0008, true);              // 0x0008(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offSendLevel                                                  = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinSendLevel                                               = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxSendLevel                                               = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinSendDistance                                            = new ExternalOffset<float>(0x001C);                           // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxSendDistance                                            = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                 _offCustomSendLevelCurve                                       = new ExternalOffset<FRuntimeFloatCurve>(0x0028, false);       // 0x0028(0x0088) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ESendLevelControlMethod                             SendLevelControlMethod                                         => _offSendLevelControlMethod.GetValue();
	public USoundSubmix                                        SoundSubmix                                                    => _offSoundSubmix.GetValue();
	public float                                               SendLevel                                                      => _offSendLevel.GetValue();
	public float                                               MinSendLevel                                                   => _offMinSendLevel.GetValue();
	public float                                               MaxSendLevel                                                   => _offMaxSendLevel.GetValue();
	public float                                               MinSendDistance                                                => _offMinSendDistance.GetValue();
	public float                                               MaxSendDistance                                                => _offMaxSendDistance.GetValue();
	public FRuntimeFloatCurve                                  CustomSendLevelCurve                                           => _offCustomSendLevelCurve.GetValue();
	#endregion

	public FSoundSubmixSendInfo(ESendLevelControlMethod c_SendLevelControlMethod, USoundSubmix c_SoundSubmix, float c_SendLevel, float c_MinSendLevel, float c_MaxSendLevel, float c_MinSendDistance, float c_MaxSendDistance, FRuntimeFloatCurve c_CustomSendLevelCurve) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSendLevelControlMethod.SetValue(c_SendLevelControlMethod);
		_offSoundSubmix.SetValue(c_SoundSubmix);
		_offSendLevel.SetValue(c_SendLevel);
		_offMinSendLevel.SetValue(c_MinSendLevel);
		_offMaxSendLevel.SetValue(c_MaxSendLevel);
		_offMinSendDistance.SetValue(c_MinSendDistance);
		_offMaxSendDistance.SetValue(c_MaxSendDistance);
		_offCustomSendLevelCurve.SetValue(c_CustomSendLevelCurve);
	}
}
// ScriptStruct Engine.SoundWaveEnvelopeTimeData
// 0x0008
public class FSoundWaveEnvelopeTimeData : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offAmplitude                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTimeSec                                                    = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Amplitude                                                      => _offAmplitude.GetValue();
	public float                                               TimeSec                                                        => _offTimeSec.GetValue();
	#endregion

	public FSoundWaveEnvelopeTimeData(float c_Amplitude, float c_TimeSec) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmplitude.SetValue(c_Amplitude);
		_offTimeSec.SetValue(c_TimeSec);
	}
}
// ScriptStruct Engine.SoundWaveSpectralDataEntry
// 0x0008
public class FSoundWaveSpectralDataEntry : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offMagnitude                                                  = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNormalizedMagnitude                                        = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Magnitude                                                      => _offMagnitude.GetValue();
	public float                                               NormalizedMagnitude                                            => _offNormalizedMagnitude.GetValue();
	#endregion

	public FSoundWaveSpectralDataEntry(float c_Magnitude, float c_NormalizedMagnitude) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMagnitude.SetValue(c_Magnitude);
		_offNormalizedMagnitude.SetValue(c_NormalizedMagnitude);
	}
}
// ScriptStruct Engine.SoundWaveSpectralTimeData
// 0x0018
public class FSoundWaveSpectralTimeData : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FSoundWaveSpectralDataEntry>> _offData                                                       = new ExternalOffset<TArray<FSoundWaveSpectralDataEntry>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTimeSec                                                    = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FSoundWaveSpectralDataEntry>                 Data                                                           => _offData.GetValue();
	public float                                               TimeSec                                                        => _offTimeSec.GetValue();
	#endregion

	public FSoundWaveSpectralTimeData(TArray<FSoundWaveSpectralDataEntry> c_Data, float c_TimeSec) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offTimeSec.SetValue(c_TimeSec);
	}
}
// ScriptStruct Engine.SoundWaveEnvelopeDataPerSound
// 0x0010
public class FSoundWaveEnvelopeDataPerSound : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offEnvelope                                                   = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPlaybackTime                                               = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundWave>                         _offSoundWave                                                  = new ExternalOffset<USoundWave>(0x0008, true);                // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Envelope                                                       => _offEnvelope.GetValue();
	public float                                               PlaybackTime                                                   => _offPlaybackTime.GetValue();
	public USoundWave                                          SoundWave                                                      => _offSoundWave.GetValue();
	#endregion

	public FSoundWaveEnvelopeDataPerSound(float c_Envelope, float c_PlaybackTime, USoundWave c_SoundWave) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEnvelope.SetValue(c_Envelope);
		_offPlaybackTime.SetValue(c_PlaybackTime);
		_offSoundWave.SetValue(c_SoundWave);
	}
}
// ScriptStruct Engine.SoundWaveSpectralData
// 0x000C
public class FSoundWaveSpectralData : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offFrequencyHz                                                = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMagnitude                                                  = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNormalizedMagnitude                                        = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               FrequencyHz                                                    => _offFrequencyHz.GetValue();
	public float                                               Magnitude                                                      => _offMagnitude.GetValue();
	public float                                               NormalizedMagnitude                                            => _offNormalizedMagnitude.GetValue();
	#endregion

	public FSoundWaveSpectralData(float c_FrequencyHz, float c_Magnitude, float c_NormalizedMagnitude) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFrequencyHz.SetValue(c_FrequencyHz);
		_offMagnitude.SetValue(c_Magnitude);
		_offNormalizedMagnitude.SetValue(c_NormalizedMagnitude);
	}
}
// ScriptStruct Engine.SoundWaveSpectralDataPerSound
// 0x0020
public class FSoundWaveSpectralDataPerSound : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FSoundWaveSpectralData>>     _offSpectralData                                               = new ExternalOffset<TArray<FSoundWaveSpectralData>>(0x0000, false); // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offPlaybackTime                                               = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundWave>                         _offSoundWave                                                  = new ExternalOffset<USoundWave>(0x0018, true);                // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FSoundWaveSpectralData>                      SpectralData                                                   => _offSpectralData.GetValue();
	public float                                               PlaybackTime                                                   => _offPlaybackTime.GetValue();
	public USoundWave                                          SoundWave                                                      => _offSoundWave.GetValue();
	#endregion

	public FSoundWaveSpectralDataPerSound(TArray<FSoundWaveSpectralData> c_SpectralData, float c_PlaybackTime, USoundWave c_SoundWave) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSpectralData.SetValue(c_SpectralData);
		_offPlaybackTime.SetValue(c_PlaybackTime);
		_offSoundWave.SetValue(c_SoundWave);
	}
}
// ScriptStruct Engine.StreamedAudioPlatformData
// 0x0020
public class FStreamedAudioPlatformData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FStreamedAudioPlatformData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SplineCurves
// 0x0068
public class FSplineCurves : ExternalClass
{
	#region Offsets
	private ExternalOffset<FInterpCurveVector>                 _offPosition                                                   = new ExternalOffset<FInterpCurveVector>(0x0000, false);       // 0x0000(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpCurveQuat>                   _offRotation                                                   = new ExternalOffset<FInterpCurveQuat>(0x0018, false);         // 0x0018(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpCurveVector>                 _offScale                                                      = new ExternalOffset<FInterpCurveVector>(0x0030, false);       // 0x0030(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpCurveFloat>                  _offReparamTable                                               = new ExternalOffset<FInterpCurveFloat>(0x0048, false);        // 0x0048(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USplineMetadata>                    _offMetaData                                                   = new ExternalOffset<USplineMetadata>(0x0060, true);           // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInterpCurveVector                                  Position                                                       => _offPosition.GetValue();
	public FInterpCurveQuat                                    Rotation                                                       => _offRotation.GetValue();
	public FInterpCurveVector                                  Scale                                                          => _offScale.GetValue();
	public FInterpCurveFloat                                   ReparamTable                                                   => _offReparamTable.GetValue();
	public USplineMetadata                                     MetaData                                                       => _offMetaData.GetValue();
	#endregion

	public FSplineCurves(FInterpCurveVector c_Position, FInterpCurveQuat c_Rotation, FInterpCurveVector c_Scale, FInterpCurveFloat c_ReparamTable, USplineMetadata c_MetaData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPosition.SetValue(c_Position);
		_offRotation.SetValue(c_Rotation);
		_offScale.SetValue(c_Scale);
		_offReparamTable.SetValue(c_ReparamTable);
		_offMetaData.SetValue(c_MetaData);
	}
}
// ScriptStruct Engine.SplineInstanceData
// 0x00D8 (0x0180 - 0x00A8)
public class FSplineInstanceData : FSceneComponentInstanceData
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbSplineHasBeenEdited                                       = new ExternalOffset<byte/*(bool)*/>(0x00A8);                  // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSplineCurves>                      _offSplineCurves                                               = new ExternalOffset<FSplineCurves>(0x00B0, false);            // 0x00B0(0x0068) (NativeAccessSpecifierPublic)
	private ExternalOffset<FSplineCurves>                      _offSplineCurvesPreUCS                                         = new ExternalOffset<FSplineCurves>(0x0118, false);            // 0x0118(0x0068) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bSplineHasBeenEdited                                           => _offbSplineHasBeenEdited.GetValue();
	public FSplineCurves                                       SplineCurves                                                   => _offSplineCurves.GetValue();
	public FSplineCurves                                       SplineCurvesPreUCS                                             => _offSplineCurvesPreUCS.GetValue();
	#endregion

	public FSplineInstanceData(byte/*(bool)*/ c_bSplineHasBeenEdited, FSplineCurves c_SplineCurves, FSplineCurves c_SplineCurvesPreUCS) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbSplineHasBeenEdited.SetValue(c_bSplineHasBeenEdited);
		_offSplineCurves.SetValue(c_SplineCurves);
		_offSplineCurvesPreUCS.SetValue(c_SplineCurvesPreUCS);
	}
}
// ScriptStruct Engine.StaticMeshComponentLODInfo
// 0x00A8
public class FStaticMeshComponentLODInfo : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FStaticMeshComponentLODInfo() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.SplinePoint
// 0x0044
public class FSplinePoint : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offInputKey                                                   = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offPosition                                                   = new ExternalOffset<FVector>(0x0004, false);                  // 0x0004(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offArriveTangent                                              = new ExternalOffset<FVector>(0x0010, false);                  // 0x0010(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offLeaveTangent                                               = new ExternalOffset<FVector>(0x001C, false);                  // 0x001C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offRotation                                                   = new ExternalOffset<FRotator>(0x0028, false);                 // 0x0028(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offScale                                                      = new ExternalOffset<FVector>(0x0034, false);                  // 0x0034(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESplinePointType>>      _offType                                                       = new ExternalOffset<TEnumAsByte<ESplinePointType>>(0x0040, false); // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               InputKey                                                       => _offInputKey.GetValue();
	public FVector                                             Position                                                       => _offPosition.GetValue();
	public FVector                                             ArriveTangent                                                  => _offArriveTangent.GetValue();
	public FVector                                             LeaveTangent                                                   => _offLeaveTangent.GetValue();
	public FRotator                                            Rotation                                                       => _offRotation.GetValue();
	public FVector                                             Scale                                                          => _offScale.GetValue();
	public TEnumAsByte<ESplinePointType>                       Type                                                           => _offType.GetValue();
	#endregion

	public FSplinePoint(float c_InputKey, FVector c_Position, FVector c_ArriveTangent, FVector c_LeaveTangent, FRotator c_Rotation, FVector c_Scale, TEnumAsByte<ESplinePointType> c_Type) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInputKey.SetValue(c_InputKey);
		_offPosition.SetValue(c_Position);
		_offArriveTangent.SetValue(c_ArriveTangent);
		_offLeaveTangent.SetValue(c_LeaveTangent);
		_offRotation.SetValue(c_Rotation);
		_offScale.SetValue(c_Scale);
		_offType.SetValue(c_Type);
	}
}
// ScriptStruct Engine.StreamingTextureBuildInfo
// 0x000C
public class FStreamingTextureBuildInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<uint>                               _offPackedRelativeBox                                          = new ExternalOffset<uint>(0x0000);                            // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTextureLevelIndex                                          = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTexelFactor                                                = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public uint                                                PackedRelativeBox                                              => _offPackedRelativeBox.GetValue();
	public int                                                 TextureLevelIndex                                              => _offTextureLevelIndex.GetValue();
	public float                                               TexelFactor                                                    => _offTexelFactor.GetValue();
	#endregion

	public FStreamingTextureBuildInfo(uint c_PackedRelativeBox, int c_TextureLevelIndex, float c_TexelFactor) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPackedRelativeBox.SetValue(c_PackedRelativeBox);
		_offTextureLevelIndex.SetValue(c_TextureLevelIndex);
		_offTexelFactor.SetValue(c_TexelFactor);
	}
}
// ScriptStruct Engine.SplineMeshInstanceData
// 0x0030 (0x00D8 - 0x00A8)
public class FSplineMeshInstanceData : FSceneComponentInstanceData
{
	#region Offsets
	private ExternalOffset<FVector>                            _offStartPos                                                   = new ExternalOffset<FVector>(0x00A8, false);                  // 0x00A8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offEndPos                                                     = new ExternalOffset<FVector>(0x00B4, false);                  // 0x00B4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offStartTangent                                               = new ExternalOffset<FVector>(0x00C0, false);                  // 0x00C0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offEndTangent                                                 = new ExternalOffset<FVector>(0x00CC, false);                  // 0x00CC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             StartPos                                                       => _offStartPos.GetValue();
	public FVector                                             EndPos                                                         => _offEndPos.GetValue();
	public FVector                                             StartTangent                                                   => _offStartTangent.GetValue();
	public FVector                                             EndTangent                                                     => _offEndTangent.GetValue();
	#endregion

	public FSplineMeshInstanceData(FVector c_StartPos, FVector c_EndPos, FVector c_StartTangent, FVector c_EndTangent) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStartPos.SetValue(c_StartPos);
		_offEndPos.SetValue(c_EndPos);
		_offStartTangent.SetValue(c_StartTangent);
		_offEndTangent.SetValue(c_EndTangent);
	}
}
// ScriptStruct Engine.SplineMeshParams
// 0x0058
public class FSplineMeshParams : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offStartPos                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offStartTangent                                               = new ExternalOffset<FVector>(0x000C, false);                  // 0x000C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offStartScale                                                 = new ExternalOffset<FVector2D>(0x0018, false);                // 0x0018(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offStartRoll                                                  = new ExternalOffset<float>(0x0020);                           // 0x0020(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offStartOffset                                                = new ExternalOffset<FVector2D>(0x0024, false);                // 0x0024(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offEndPos                                                     = new ExternalOffset<FVector>(0x002C, false);                  // 0x002C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offEndTangent                                                 = new ExternalOffset<FVector>(0x0038, false);                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offEndScale                                                   = new ExternalOffset<FVector2D>(0x0044, false);                // 0x0044(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offEndRoll                                                    = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                          _offEndOffset                                                  = new ExternalOffset<FVector2D>(0x0050, false);                // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             StartPos                                                       => _offStartPos.GetValue();
	public FVector                                             StartTangent                                                   => _offStartTangent.GetValue();
	public FVector2D                                           StartScale                                                     => _offStartScale.GetValue();
	public float                                               StartRoll                                                      => _offStartRoll.GetValue();
	public FVector2D                                           StartOffset                                                    => _offStartOffset.GetValue();
	public FVector                                             EndPos                                                         => _offEndPos.GetValue();
	public FVector                                             EndTangent                                                     => _offEndTangent.GetValue();
	public FVector2D                                           EndScale                                                       => _offEndScale.GetValue();
	public float                                               EndRoll                                                        => _offEndRoll.GetValue();
	public FVector2D                                           EndOffset                                                      => _offEndOffset.GetValue();
	#endregion

	public FSplineMeshParams(FVector c_StartPos, FVector c_StartTangent, FVector2D c_StartScale, float c_StartRoll, FVector2D c_StartOffset, FVector c_EndPos, FVector c_EndTangent, FVector2D c_EndScale, float c_EndRoll, FVector2D c_EndOffset) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStartPos.SetValue(c_StartPos);
		_offStartTangent.SetValue(c_StartTangent);
		_offStartScale.SetValue(c_StartScale);
		_offStartRoll.SetValue(c_StartRoll);
		_offStartOffset.SetValue(c_StartOffset);
		_offEndPos.SetValue(c_EndPos);
		_offEndTangent.SetValue(c_EndTangent);
		_offEndScale.SetValue(c_EndScale);
		_offEndRoll.SetValue(c_EndRoll);
		_offEndOffset.SetValue(c_EndOffset);
	}
}
// ScriptStruct Engine.MaterialRemapIndex
// 0x0018
public class FMaterialRemapIndex : ExternalClass
{
	#region Offsets
	private ExternalOffset<uint>                               _offImportVersionKey                                           = new ExternalOffset<uint>(0x0000);                            // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                        _offMaterialRemap                                              = new ExternalOffset<TArray<int>>(0x0008, false);              // 0x0008(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public uint                                                ImportVersionKey                                               => _offImportVersionKey.GetValue();
	public TArray<int>                                         MaterialRemap                                                  => _offMaterialRemap.GetValue();
	#endregion

	public FMaterialRemapIndex(uint c_ImportVersionKey, TArray<int> c_MaterialRemap) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offImportVersionKey.SetValue(c_ImportVersionKey);
		_offMaterialRemap.SetValue(c_MaterialRemap);
	}
}
// ScriptStruct Engine.StaticMaterial
// 0x0030
public class FStaticMaterial : ExternalClass
{
	#region Offsets
	private ExternalOffset<UMaterialInterface>                 _offMaterialInterface                                          = new ExternalOffset<UMaterialInterface>(0x0000, true);        // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offMaterialSlotName                                           = new ExternalOffset<FName>(0x0008, false);                    // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offImportedMaterialSlotName                                   = new ExternalOffset<FName>(0x0010, false);                    // 0x0010(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMeshUVChannelInfo>                 _offUVChannelData                                              = new ExternalOffset<FMeshUVChannelInfo>(0x0018, false);       // 0x0018(0x0014) (Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialInterface                                  MaterialInterface                                              => _offMaterialInterface.GetValue();
	public FName                                               MaterialSlotName                                               => _offMaterialSlotName.GetValue();
	public FName                                               ImportedMaterialSlotName                                       => _offImportedMaterialSlotName.GetValue();
	public FMeshUVChannelInfo                                  UVChannelData                                                  => _offUVChannelData.GetValue();
	#endregion

	public FStaticMaterial(UMaterialInterface c_MaterialInterface, FName c_MaterialSlotName, FName c_ImportedMaterialSlotName, FMeshUVChannelInfo c_UVChannelData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaterialInterface.SetValue(c_MaterialInterface);
		_offMaterialSlotName.SetValue(c_MaterialSlotName);
		_offImportedMaterialSlotName.SetValue(c_ImportedMaterialSlotName);
		_offUVChannelData.SetValue(c_UVChannelData);
	}
}
// ScriptStruct Engine.AssetEditorOrbitCameraPosition
// 0x0028
public class FAssetEditorOrbitCameraPosition : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbIsSet                                                     = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offCamOrbitPoint                                              = new ExternalOffset<FVector>(0x0004, false);                  // 0x0004(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                            _offCamOrbitZoom                                               = new ExternalOffset<FVector>(0x0010, false);                  // 0x0010(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                           _offCamOrbitRotation                                           = new ExternalOffset<FRotator>(0x001C, false);                 // 0x001C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bIsSet                                                         => _offbIsSet.GetValue();
	public FVector                                             CamOrbitPoint                                                  => _offCamOrbitPoint.GetValue();
	public FVector                                             CamOrbitZoom                                                   => _offCamOrbitZoom.GetValue();
	public FRotator                                            CamOrbitRotation                                               => _offCamOrbitRotation.GetValue();
	#endregion

	public FAssetEditorOrbitCameraPosition(byte/*(bool)*/ c_bIsSet, FVector c_CamOrbitPoint, FVector c_CamOrbitZoom, FRotator c_CamOrbitRotation) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbIsSet.SetValue(c_bIsSet);
		_offCamOrbitPoint.SetValue(c_CamOrbitPoint);
		_offCamOrbitZoom.SetValue(c_CamOrbitZoom);
		_offCamOrbitRotation.SetValue(c_CamOrbitRotation);
	}
}
// ScriptStruct Engine.MeshSectionInfo
// 0x0008
public class FMeshSectionInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offMaterialIndex                                              = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbEnableCollision                                           = new ExternalOffset<byte/*(bool)*/>(0x0004);                  // 0x0004(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbCastShadow                                                = new ExternalOffset<byte/*(bool)*/>(0x0005);                  // 0x0005(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MaterialIndex                                                  => _offMaterialIndex.GetValue();
	public byte/*(bool)*/                                      bEnableCollision                                               => _offbEnableCollision.GetValue();
	public byte/*(bool)*/                                      bCastShadow                                                    => _offbCastShadow.GetValue();
	#endregion

	public FMeshSectionInfo(int c_MaterialIndex, byte/*(bool)*/ c_bEnableCollision, byte/*(bool)*/ c_bCastShadow) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaterialIndex.SetValue(c_MaterialIndex);
		_offbEnableCollision.SetValue(c_bEnableCollision);
		_offbCastShadow.SetValue(c_bCastShadow);
	}
}
// ScriptStruct Engine.MeshSectionInfoMap
// 0x0050
public class FMeshSectionInfoMap : ExternalClass
{
	#region Offsets
//	private TMap<uint32_t, struct FMeshSectionInfo>            _offMap                                                        = new ExternalOffset<TMap<FMeshSectionInfo>>(0x0000, false);   // 0x0000(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion

	public FMeshSectionInfoMap() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.StaticMeshSourceModel
// 0x0070
public class FStaticMeshSourceModel : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMeshBuildSettings>                 _offBuildSettings                                              = new ExternalOffset<FMeshBuildSettings>(0x0000, false);       // 0x0000(0x0030) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FMeshReductionSettings>             _offReductionSettings                                          = new ExternalOffset<FMeshReductionSettings>(0x0030, false);   // 0x0030(0x0024) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLODDistance                                                = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPerPlatformFloat>                  _offScreenSize                                                 = new ExternalOffset<FPerPlatformFloat>(0x0058, false);        // 0x0058(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSourceImportFilename                                       = new ExternalOffset<FString>(0x0060, false);                  // 0x0060(0x0010) (Edit, ZeroConstructor, EditConst, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMeshBuildSettings                                  BuildSettings                                                  => _offBuildSettings.GetValue();
	public FMeshReductionSettings                              ReductionSettings                                              => _offReductionSettings.GetValue();
	public float                                               LODDistance                                                    => _offLODDistance.GetValue();
	public FPerPlatformFloat                                   ScreenSize                                                     => _offScreenSize.GetValue();
	public FString                                             SourceImportFilename                                           => _offSourceImportFilename.GetValue();
	#endregion

	public FStaticMeshSourceModel(FMeshBuildSettings c_BuildSettings, FMeshReductionSettings c_ReductionSettings, float c_LODDistance, FPerPlatformFloat c_ScreenSize, FString c_SourceImportFilename) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildSettings.SetValue(c_BuildSettings);
		_offReductionSettings.SetValue(c_ReductionSettings);
		_offLODDistance.SetValue(c_LODDistance);
		_offScreenSize.SetValue(c_ScreenSize);
		_offSourceImportFilename.SetValue(c_SourceImportFilename);
	}
}
// ScriptStruct Engine.StaticMeshOptimizationSettings
// 0x001C
public class FStaticMeshOptimizationSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EOptimizationType>>     _offReductionMethod                                            = new ExternalOffset<TEnumAsByte<EOptimizationType>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNumOfTrianglesPercentage                                   = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxDeviationPercentage                                     = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offWeldingThreshold                                           = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbRecalcNormals                                             = new ExternalOffset<byte/*(bool)*/>(0x0010);                  // 0x0010(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNormalsThreshold                                           = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offSilhouetteImportance                                       = new ExternalOffset<char>(0x0018, false);                     // 0x0018(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offTextureImportance                                          = new ExternalOffset<char>(0x0019, false);                     // 0x0019(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offShadingImportance                                          = new ExternalOffset<char>(0x001A, false);                     // 0x001A(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EOptimizationType>                      ReductionMethod                                                => _offReductionMethod.GetValue();
	public float                                               NumOfTrianglesPercentage                                       => _offNumOfTrianglesPercentage.GetValue();
	public float                                               MaxDeviationPercentage                                         => _offMaxDeviationPercentage.GetValue();
	public float                                               WeldingThreshold                                               => _offWeldingThreshold.GetValue();
	public byte/*(bool)*/                                      bRecalcNormals                                                 => _offbRecalcNormals.GetValue();
	public float                                               NormalsThreshold                                               => _offNormalsThreshold.GetValue();
	#endregion

	public FStaticMeshOptimizationSettings(TEnumAsByte<EOptimizationType> c_ReductionMethod, float c_NumOfTrianglesPercentage, float c_MaxDeviationPercentage, float c_WeldingThreshold, byte/*(bool)*/ c_bRecalcNormals, float c_NormalsThreshold) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offReductionMethod.SetValue(c_ReductionMethod);
		_offNumOfTrianglesPercentage.SetValue(c_NumOfTrianglesPercentage);
		_offMaxDeviationPercentage.SetValue(c_MaxDeviationPercentage);
		_offWeldingThreshold.SetValue(c_WeldingThreshold);
		_offbRecalcNormals.SetValue(c_bRecalcNormals);
		_offNormalsThreshold.SetValue(c_NormalsThreshold);
	}
}
// ScriptStruct Engine.PaintedVertex
// 0x0020
public class FPaintedVertex : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offPosition                                                   = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                             _offColor                                                      = new ExternalOffset<FColor>(0x000C, false);                   // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                           _offNormal                                                     = new ExternalOffset<FVector4>(0x0010, false);                 // 0x0010(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             Position                                                       => _offPosition.GetValue();
	public FColor                                              Color                                                          => _offColor.GetValue();
	public FVector4                                            Normal                                                         => _offNormal.GetValue();
	#endregion

	public FPaintedVertex(FVector c_Position, FColor c_Color, FVector4 c_Normal) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPosition.SetValue(c_Position);
		_offColor.SetValue(c_Color);
		_offNormal.SetValue(c_Normal);
	}
}
// ScriptStruct Engine.StaticMeshVertexColorLODData
// 0x0028
public class FStaticMeshVertexColorLODData : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FPaintedVertex>>             _offPaintedVertices                                            = new ExternalOffset<TArray<FPaintedVertex>>(0x0000, false);   // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FColor>>                     _offVertexBufferColors                                         = new ExternalOffset<TArray<FColor>>(0x0010, false);           // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                               _offLODIndex                                                   = new ExternalOffset<uint>(0x0020);                            // 0x0020(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FPaintedVertex>                              PaintedVertices                                                => _offPaintedVertices.GetValue();
	public TArray<FColor>                                      VertexBufferColors                                             => _offVertexBufferColors.GetValue();
	public uint                                                LODIndex                                                       => _offLODIndex.GetValue();
	#endregion

	public FStaticMeshVertexColorLODData(TArray<FPaintedVertex> c_PaintedVertices, TArray<FColor> c_VertexBufferColors, uint c_LODIndex) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPaintedVertices.SetValue(c_PaintedVertices);
		_offVertexBufferColors.SetValue(c_VertexBufferColors);
		_offLODIndex.SetValue(c_LODIndex);
	}
}
// ScriptStruct Engine.StaticMeshComponentInstanceData
// 0x0040 (0x0130 - 0x00F0)
public class FStaticMeshComponentInstanceData : FPrimitiveComponentInstanceData
{
	#region Offsets
	private ExternalOffset<UStaticMesh>                        _offStaticMesh                                                 = new ExternalOffset<UStaticMesh>(0x00F0, true);               // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStaticMeshVertexColorLODData>> _offVertexColorLODs                                            = new ExternalOffset<TArray<FStaticMeshVertexColorLODData>>(0x00F8, false); // 0x00F8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FGuid>>                      _offCachedStaticLighting                                       = new ExternalOffset<TArray<FGuid>>(0x0108, false);            // 0x0108(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStreamingTextureBuildInfo>> _offStreamingTextureData                                       = new ExternalOffset<TArray<FStreamingTextureBuildInfo>>(0x0118, false); // 0x0118(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UStaticMesh                                         StaticMesh                                                     => _offStaticMesh.GetValue();
	public TArray<FStaticMeshVertexColorLODData>               VertexColorLODs                                                => _offVertexColorLODs.GetValue();
	public TArray<FGuid>                                       CachedStaticLighting                                           => _offCachedStaticLighting.GetValue();
	public TArray<FStreamingTextureBuildInfo>                  StreamingTextureData                                           => _offStreamingTextureData.GetValue();
	#endregion

	public FStaticMeshComponentInstanceData(UStaticMesh c_StaticMesh, TArray<FStaticMeshVertexColorLODData> c_VertexColorLODs, TArray<FGuid> c_CachedStaticLighting, TArray<FStreamingTextureBuildInfo> c_StreamingTextureData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStaticMesh.SetValue(c_StaticMesh);
		_offVertexColorLODs.SetValue(c_VertexColorLODs);
		_offCachedStaticLighting.SetValue(c_CachedStaticLighting);
		_offStreamingTextureData.SetValue(c_StreamingTextureData);
	}
}
// ScriptStruct Engine.StaticSwitchParameter
// 0x0024
public class FStaticSwitchParameter : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMaterialParameterInfo>             _offParameterInfo                                              = new ExternalOffset<FMaterialParameterInfo>(0x0000, false);   // 0x0000(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offValue                                                      = new ExternalOffset<byte/*(bool)*/>(0x0010);                  // 0x0010(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbOverride                                                  = new ExternalOffset<byte/*(bool)*/>(0x0011);                  // 0x0011(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0014, false);                    // 0x0014(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialParameterInfo                              ParameterInfo                                                  => _offParameterInfo.GetValue();
	public byte/*(bool)*/                                      Value                                                          => _offValue.GetValue();
	public byte/*(bool)*/                                      bOverride                                                      => _offbOverride.GetValue();
	public FGuid                                               ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	#endregion

	public FStaticSwitchParameter(FMaterialParameterInfo c_ParameterInfo, byte/*(bool)*/ c_Value, byte/*(bool)*/ c_bOverride, FGuid c_ExpressionGUID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterInfo.SetValue(c_ParameterInfo);
		_offValue.SetValue(c_Value);
		_offbOverride.SetValue(c_bOverride);
		_offExpressionGUID.SetValue(c_ExpressionGUID);
	}
}
// ScriptStruct Engine.StaticComponentMaskParameter
// 0x0028
public class FStaticComponentMaskParameter : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMaterialParameterInfo>             _offParameterInfo                                              = new ExternalOffset<FMaterialParameterInfo>(0x0000, false);   // 0x0000(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offR                                                          = new ExternalOffset<byte/*(bool)*/>(0x0010);                  // 0x0010(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offG                                                          = new ExternalOffset<byte/*(bool)*/>(0x0011);                  // 0x0011(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offB                                                          = new ExternalOffset<byte/*(bool)*/>(0x0012);                  // 0x0012(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offA                                                          = new ExternalOffset<byte/*(bool)*/>(0x0013);                  // 0x0013(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbOverride                                                  = new ExternalOffset<byte/*(bool)*/>(0x0014);                  // 0x0014(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0018, false);                    // 0x0018(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialParameterInfo                              ParameterInfo                                                  => _offParameterInfo.GetValue();
	public byte/*(bool)*/                                      R                                                              => _offR.GetValue();
	public byte/*(bool)*/                                      G                                                              => _offG.GetValue();
	public byte/*(bool)*/                                      B                                                              => _offB.GetValue();
	public byte/*(bool)*/                                      A                                                              => _offA.GetValue();
	public byte/*(bool)*/                                      bOverride                                                      => _offbOverride.GetValue();
	public FGuid                                               ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	#endregion

	public FStaticComponentMaskParameter(FMaterialParameterInfo c_ParameterInfo, byte/*(bool)*/ c_R, byte/*(bool)*/ c_G, byte/*(bool)*/ c_B, byte/*(bool)*/ c_A, byte/*(bool)*/ c_bOverride, FGuid c_ExpressionGUID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterInfo.SetValue(c_ParameterInfo);
		_offR.SetValue(c_R);
		_offG.SetValue(c_G);
		_offB.SetValue(c_B);
		_offA.SetValue(c_A);
		_offbOverride.SetValue(c_bOverride);
		_offExpressionGUID.SetValue(c_ExpressionGUID);
	}
}
// ScriptStruct Engine.StaticTerrainLayerWeightParameter
// 0x002C
public class FStaticTerrainLayerWeightParameter : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMaterialParameterInfo>             _offParameterInfo                                              = new ExternalOffset<FMaterialParameterInfo>(0x0000, false);   // 0x0000(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbOverride                                                  = new ExternalOffset<byte/*(bool)*/>(0x0010);                  // 0x0010(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0014, false);                    // 0x0014(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offWeightmapIndex                                             = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbWeightBasedBlend                                          = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialParameterInfo                              ParameterInfo                                                  => _offParameterInfo.GetValue();
	public byte/*(bool)*/                                      bOverride                                                      => _offbOverride.GetValue();
	public FGuid                                               ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	public int                                                 WeightmapIndex                                                 => _offWeightmapIndex.GetValue();
	public byte/*(bool)*/                                      bWeightBasedBlend                                              => _offbWeightBasedBlend.GetValue();
	#endregion

	public FStaticTerrainLayerWeightParameter(FMaterialParameterInfo c_ParameterInfo, byte/*(bool)*/ c_bOverride, FGuid c_ExpressionGUID, int c_WeightmapIndex, byte/*(bool)*/ c_bWeightBasedBlend) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterInfo.SetValue(c_ParameterInfo);
		_offbOverride.SetValue(c_bOverride);
		_offExpressionGUID.SetValue(c_ExpressionGUID);
		_offWeightmapIndex.SetValue(c_WeightmapIndex);
		_offbWeightBasedBlend.SetValue(c_bWeightBasedBlend);
	}
}
// ScriptStruct Engine.StaticMaterialLayersParameter
// 0x0068
public class FStaticMaterialLayersParameter : ExternalClass
{
	#region Offsets
	private ExternalOffset<FMaterialParameterInfo>             _offParameterInfo                                              = new ExternalOffset<FMaterialParameterInfo>(0x0000, false);   // 0x0000(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialLayersFunctions>           _offValue                                                      = new ExternalOffset<FMaterialLayersFunctions>(0x0010, false); // 0x0010(0x0040) (NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbOverride                                                  = new ExternalOffset<byte/*(bool)*/>(0x0050);                  // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                              _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0054, false);                    // 0x0054(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialParameterInfo                              ParameterInfo                                                  => _offParameterInfo.GetValue();
	public FMaterialLayersFunctions                            Value                                                          => _offValue.GetValue();
	public byte/*(bool)*/                                      bOverride                                                      => _offbOverride.GetValue();
	public FGuid                                               ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	#endregion

	public FStaticMaterialLayersParameter(FMaterialParameterInfo c_ParameterInfo, FMaterialLayersFunctions c_Value, byte/*(bool)*/ c_bOverride, FGuid c_ExpressionGUID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameterInfo.SetValue(c_ParameterInfo);
		_offValue.SetValue(c_Value);
		_offbOverride.SetValue(c_bOverride);
		_offExpressionGUID.SetValue(c_ExpressionGUID);
	}
}
// ScriptStruct Engine.StaticParameterSet
// 0x0040
public class FStaticParameterSet : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<FStaticSwitchParameter>>     _offStaticSwitchParameters                                     = new ExternalOffset<TArray<FStaticSwitchParameter>>(0x0000, false); // 0x0000(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStaticComponentMaskParameter>> _offStaticComponentMaskParameters                              = new ExternalOffset<TArray<FStaticComponentMaskParameter>>(0x0010, false); // 0x0010(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStaticTerrainLayerWeightParameter>> _offTerrainLayerWeightParameters                               = new ExternalOffset<TArray<FStaticTerrainLayerWeightParameter>>(0x0020, false); // 0x0020(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStaticMaterialLayersParameter>> _offMaterialLayersParameters                                   = new ExternalOffset<TArray<FStaticMaterialLayersParameter>>(0x0030, false); // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FStaticSwitchParameter>                      StaticSwitchParameters                                         => _offStaticSwitchParameters.GetValue();
	public TArray<FStaticComponentMaskParameter>               StaticComponentMaskParameters                                  => _offStaticComponentMaskParameters.GetValue();
	public TArray<FStaticTerrainLayerWeightParameter>          TerrainLayerWeightParameters                                   => _offTerrainLayerWeightParameters.GetValue();
	public TArray<FStaticMaterialLayersParameter>              MaterialLayersParameters                                       => _offMaterialLayersParameters.GetValue();
	#endregion

	public FStaticParameterSet(TArray<FStaticSwitchParameter> c_StaticSwitchParameters, TArray<FStaticComponentMaskParameter> c_StaticComponentMaskParameters, TArray<FStaticTerrainLayerWeightParameter> c_TerrainLayerWeightParameters, TArray<FStaticMaterialLayersParameter> c_MaterialLayersParameters) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStaticSwitchParameters.SetValue(c_StaticSwitchParameters);
		_offStaticComponentMaskParameters.SetValue(c_StaticComponentMaskParameters);
		_offTerrainLayerWeightParameters.SetValue(c_TerrainLayerWeightParameters);
		_offMaterialLayersParameters.SetValue(c_MaterialLayersParameters);
	}
}
// ScriptStruct Engine.StringCurveKey
// 0x0018
public class FStringCurveKey : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offValue                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               Time                                                           => _offTime.GetValue();
	public FString                                             Value                                                          => _offValue.GetValue();
	#endregion

	public FStringCurveKey(float c_Time, FString c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct Engine.StringCurve
// 0x0020 (0x0088 - 0x0068)
public class FStringCurve : FIndexedCurve
{
	#region Offsets
	private ExternalOffset<FString>                            _offDefaultValue                                               = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStringCurveKey>>            _offKeys                                                       = new ExternalOffset<TArray<FStringCurveKey>>(0x0078, false);  // 0x0078(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DefaultValue                                                   => _offDefaultValue.GetValue();
	public TArray<FStringCurveKey>                             Keys                                                           => _offKeys.GetValue();
	#endregion

	public FStringCurve(FString c_DefaultValue, TArray<FStringCurveKey> c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDefaultValue.SetValue(c_DefaultValue);
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct Engine.SubsurfaceProfileStruct
// 0x0050
public class FSubsurfaceProfileStruct : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offScatterRadius                                              = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offSubsurfaceColor                                            = new ExternalOffset<FLinearColor>(0x0004, false);             // 0x0004(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offFalloffColor                                               = new ExternalOffset<FLinearColor>(0x0014, false);             // 0x0014(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                       _offBoundaryColorBleed                                         = new ExternalOffset<FLinearColor>(0x0024, false);             // 0x0024(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offExtinctionScale                                            = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offNormalScale                                                = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offScatteringDistribution                                     = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offIOR                                                        = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRoughness0                                                 = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offRoughness1                                                 = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offLobeMix                                                    = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               ScatterRadius                                                  => _offScatterRadius.GetValue();
	public FLinearColor                                        SubsurfaceColor                                                => _offSubsurfaceColor.GetValue();
	public FLinearColor                                        FalloffColor                                                   => _offFalloffColor.GetValue();
	public FLinearColor                                        BoundaryColorBleed                                             => _offBoundaryColorBleed.GetValue();
	public float                                               ExtinctionScale                                                => _offExtinctionScale.GetValue();
	public float                                               NormalScale                                                    => _offNormalScale.GetValue();
	public float                                               ScatteringDistribution                                         => _offScatteringDistribution.GetValue();
	public float                                               IOR                                                            => _offIOR.GetValue();
	public float                                               Roughness0                                                     => _offRoughness0.GetValue();
	public float                                               Roughness1                                                     => _offRoughness1.GetValue();
	public float                                               LobeMix                                                        => _offLobeMix.GetValue();
	#endregion

	public FSubsurfaceProfileStruct(float c_ScatterRadius, FLinearColor c_SubsurfaceColor, FLinearColor c_FalloffColor, FLinearColor c_BoundaryColorBleed, float c_ExtinctionScale, float c_NormalScale, float c_ScatteringDistribution, float c_IOR, float c_Roughness0, float c_Roughness1, float c_LobeMix) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offScatterRadius.SetValue(c_ScatterRadius);
		_offSubsurfaceColor.SetValue(c_SubsurfaceColor);
		_offFalloffColor.SetValue(c_FalloffColor);
		_offBoundaryColorBleed.SetValue(c_BoundaryColorBleed);
		_offExtinctionScale.SetValue(c_ExtinctionScale);
		_offNormalScale.SetValue(c_NormalScale);
		_offScatteringDistribution.SetValue(c_ScatteringDistribution);
		_offIOR.SetValue(c_IOR);
		_offRoughness0.SetValue(c_Roughness0);
		_offRoughness1.SetValue(c_Roughness1);
		_offLobeMix.SetValue(c_LobeMix);
	}
}
// ScriptStruct Engine.TextureFormatSettings
// 0x0002
public class FTextureFormatSettings : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ETextureCompressionSettings>> _offCompressionSettings                                        = new ExternalOffset<TEnumAsByte<ETextureCompressionSettings>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offCompressionNoAlpha                                         = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offCompressionNone                                            = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offSRGB                                                       = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ETextureCompressionSettings>            CompressionSettings                                            => _offCompressionSettings.GetValue();
	#endregion

	public FTextureFormatSettings(TEnumAsByte<ETextureCompressionSettings> c_CompressionSettings) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCompressionSettings.SetValue(c_CompressionSettings);
	}
}
// ScriptStruct Engine.TexturePlatformData
// 0x0028
public class FTexturePlatformData : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FTexturePlatformData() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.TextureSource
// 0x00A0
public class FTextureSource : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FTextureSource() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.TextureSourceBlock
// 0x0018
public class FTextureSourceBlock : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offBlockX                                                     = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offBlockY                                                     = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSizeX                                                      = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSizeY                                                      = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNumSlices                                                  = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNumMips                                                    = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 BlockX                                                         => _offBlockX.GetValue();
	public int                                                 BlockY                                                         => _offBlockY.GetValue();
	public int                                                 SizeX                                                          => _offSizeX.GetValue();
	public int                                                 SizeY                                                          => _offSizeY.GetValue();
	public int                                                 NumSlices                                                      => _offNumSlices.GetValue();
	public int                                                 NumMips                                                        => _offNumMips.GetValue();
	#endregion

	public FTextureSourceBlock(int c_BlockX, int c_BlockY, int c_SizeX, int c_SizeY, int c_NumSlices, int c_NumMips) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBlockX.SetValue(c_BlockX);
		_offBlockY.SetValue(c_BlockY);
		_offSizeX.SetValue(c_SizeX);
		_offSizeY.SetValue(c_SizeY);
		_offNumSlices.SetValue(c_NumSlices);
		_offNumMips.SetValue(c_NumMips);
	}
}
// ScriptStruct Engine.TextureLODGroup
// 0x0054
public class FTextureLODGroup : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ETextureGroup>>         _offGroup                                                      = new ExternalOffset<TEnumAsByte<ETextureGroup>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLODBias                                                    = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLODBias_Smaller                                            = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offLODBias_Smallest                                           = new ExternalOffset<int>(0x0014);                             // 0x0014(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offNumStreamedMips                                            = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureMipGenSettings>> _offMipGenSettings                                             = new ExternalOffset<TEnumAsByte<ETextureMipGenSettings>>(0x0020, false); // 0x0020(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMinLODSize                                                 = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxLODSize                                                 = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxLODSize_Smaller                                         = new ExternalOffset<int>(0x002C);                             // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxLODSize_Smallest                                        = new ExternalOffset<int>(0x0030);                             // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offOptionalLODBias                                            = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offOptionalMaxLODSize                                         = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offMinMagFilter                                               = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offMipFilter                                                  = new ExternalOffset<FName>(0x0048, false);                    // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ETextureMipLoadOptions>             _offMipLoadOptions                                             = new ExternalOffset<ETextureMipLoadOptions>(0x0050, false);   // 0x0050(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ETextureGroup>                          Group                                                          => _offGroup.GetValue();
	public int                                                 LODBias                                                        => _offLODBias.GetValue();
	public int                                                 LODBias_Smaller                                                => _offLODBias_Smaller.GetValue();
	public int                                                 LODBias_Smallest                                               => _offLODBias_Smallest.GetValue();
	public int                                                 NumStreamedMips                                                => _offNumStreamedMips.GetValue();
	public TEnumAsByte<ETextureMipGenSettings>                 MipGenSettings                                                 => _offMipGenSettings.GetValue();
	public int                                                 MinLODSize                                                     => _offMinLODSize.GetValue();
	public int                                                 MaxLODSize                                                     => _offMaxLODSize.GetValue();
	public int                                                 MaxLODSize_Smaller                                             => _offMaxLODSize_Smaller.GetValue();
	public int                                                 MaxLODSize_Smallest                                            => _offMaxLODSize_Smallest.GetValue();
	public int                                                 OptionalLODBias                                                => _offOptionalLODBias.GetValue();
	public int                                                 OptionalMaxLODSize                                             => _offOptionalMaxLODSize.GetValue();
	public FName                                               MinMagFilter                                                   => _offMinMagFilter.GetValue();
	public FName                                               MipFilter                                                      => _offMipFilter.GetValue();
	public ETextureMipLoadOptions                              MipLoadOptions                                                 => _offMipLoadOptions.GetValue();
	#endregion

	public FTextureLODGroup(TEnumAsByte<ETextureGroup> c_Group, int c_LODBias, int c_LODBias_Smaller, int c_LODBias_Smallest, int c_NumStreamedMips, TEnumAsByte<ETextureMipGenSettings> c_MipGenSettings, int c_MinLODSize, int c_MaxLODSize, int c_MaxLODSize_Smaller, int c_MaxLODSize_Smallest, int c_OptionalLODBias, int c_OptionalMaxLODSize, FName c_MinMagFilter, FName c_MipFilter, ETextureMipLoadOptions c_MipLoadOptions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
		_offLODBias.SetValue(c_LODBias);
		_offLODBias_Smaller.SetValue(c_LODBias_Smaller);
		_offLODBias_Smallest.SetValue(c_LODBias_Smallest);
		_offNumStreamedMips.SetValue(c_NumStreamedMips);
		_offMipGenSettings.SetValue(c_MipGenSettings);
		_offMinLODSize.SetValue(c_MinLODSize);
		_offMaxLODSize.SetValue(c_MaxLODSize);
		_offMaxLODSize_Smaller.SetValue(c_MaxLODSize_Smaller);
		_offMaxLODSize_Smallest.SetValue(c_MaxLODSize_Smallest);
		_offOptionalLODBias.SetValue(c_OptionalLODBias);
		_offOptionalMaxLODSize.SetValue(c_OptionalMaxLODSize);
		_offMinMagFilter.SetValue(c_MinMagFilter);
		_offMipFilter.SetValue(c_MipFilter);
		_offMipLoadOptions.SetValue(c_MipLoadOptions);
	}
}
// ScriptStruct Engine.StreamingRenderAssetPrimitiveInfo
// 0x0030
public class FStreamingRenderAssetPrimitiveInfo : ExternalClass
{
	#region Offsets
	private ExternalOffset<UStreamableRenderAsset>             _offRenderAsset                                                = new ExternalOffset<UStreamableRenderAsset>(0x0000, true);    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBoxSphereBounds>                   _offBounds                                                     = new ExternalOffset<FBoxSphereBounds>(0x0008, false);         // 0x0008(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTexelFactor                                                = new ExternalOffset<float>(0x0024);                           // 0x0024(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                               _offPackedRelativeBox                                          = new ExternalOffset<uint>(0x0028);                            // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                               _offbAllowInvalidTexelFactorWhenUnregistered                   = new ExternalOffset<char>(0x002C, false);                     // 0x002C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UStreamableRenderAsset                              RenderAsset                                                    => _offRenderAsset.GetValue();
	public FBoxSphereBounds                                    Bounds                                                         => _offBounds.GetValue();
	public float                                               TexelFactor                                                    => _offTexelFactor.GetValue();
	public uint                                                PackedRelativeBox                                              => _offPackedRelativeBox.GetValue();
	#endregion

	public FStreamingRenderAssetPrimitiveInfo(UStreamableRenderAsset c_RenderAsset, FBoxSphereBounds c_Bounds, float c_TexelFactor, uint c_PackedRelativeBox) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRenderAsset.SetValue(c_RenderAsset);
		_offBounds.SetValue(c_Bounds);
		_offTexelFactor.SetValue(c_TexelFactor);
		_offPackedRelativeBox.SetValue(c_PackedRelativeBox);
	}
}
// ScriptStruct Engine.TimelineLinearColorTrack
// 0x0040
public class FTimelineLinearColorTrack : ExternalClass
{
	#region Offsets
	private ExternalOffset<UCurveLinearColor>                  _offLinearColorCurve                                           = new ExternalOffset<UCurveLinearColor>(0x0000, true);         // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptDelegate>                    _offInterpFunc                                                 = new ExternalOffset<FScriptDelegate>(0x0008, false);          // 0x0008(0x0010) (ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offTrackName                                                  = new ExternalOffset<FName>(0x0018, false);                    // 0x0018(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offLinearColorPropertyName                                    = new ExternalOffset<FName>(0x0020, false);                    // 0x0020(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UStructProperty>                    _offLinearColorProperty                                        = new ExternalOffset<UStructProperty>(0x0028, true);           // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCurveLinearColor                                   LinearColorCurve                                               => _offLinearColorCurve.GetValue();
	public FScriptDelegate                                     InterpFunc                                                     => _offInterpFunc.GetValue();
	public FName                                               TrackName                                                      => _offTrackName.GetValue();
	public FName                                               LinearColorPropertyName                                        => _offLinearColorPropertyName.GetValue();
	public UStructProperty                                     LinearColorProperty                                            => _offLinearColorProperty.GetValue();
	#endregion

	public FTimelineLinearColorTrack(UCurveLinearColor c_LinearColorCurve, FScriptDelegate c_InterpFunc, FName c_TrackName, FName c_LinearColorPropertyName, UStructProperty c_LinearColorProperty) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLinearColorCurve.SetValue(c_LinearColorCurve);
		_offInterpFunc.SetValue(c_InterpFunc);
		_offTrackName.SetValue(c_TrackName);
		_offLinearColorPropertyName.SetValue(c_LinearColorPropertyName);
		_offLinearColorProperty.SetValue(c_LinearColorProperty);
	}
}
// ScriptStruct Engine.Timeline
// 0x0098
public class FTimeline : ExternalClass
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ETimelineLengthMode>>   _offLengthMode                                                 = new ExternalOffset<TEnumAsByte<ETimelineLengthMode>>(0x0000, false); // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                               _offbLooping                                                   = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                               _offbReversePlayback                                           = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                               _offbPlaying                                                   = new ExternalOffset<char>(0x0001, false);                     // 0x0001(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offLength                                                     = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offPlayRate                                                   = new ExternalOffset<float>(0x0008);                           // 0x0008(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offPosition                                                   = new ExternalOffset<float>(0x000C);                           // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FTimelineEventEntry>>        _offEvents                                                     = new ExternalOffset<TArray<FTimelineEventEntry>>(0x0010, false); // 0x0010(0x0010) (ZeroConstructor, RepSkip, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FTimelineVectorTrack>>       _offInterpVectors                                              = new ExternalOffset<TArray<FTimelineVectorTrack>>(0x0020, false); // 0x0020(0x0010) (ZeroConstructor, RepSkip, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FTimelineFloatTrack>>        _offInterpFloats                                               = new ExternalOffset<TArray<FTimelineFloatTrack>>(0x0030, false); // 0x0030(0x0010) (ZeroConstructor, RepSkip, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FTimelineLinearColorTrack>>  _offInterpLinearColors                                         = new ExternalOffset<TArray<FTimelineLinearColorTrack>>(0x0040, false); // 0x0040(0x0010) (ZeroConstructor, RepSkip, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<FScriptDelegate>                    _offTimelinePostUpdateFunc                                     = new ExternalOffset<FScriptDelegate>(0x0050, false);          // 0x0050(0x0010) (ZeroConstructor, InstancedReference, RepSkip, NoDestructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<FScriptDelegate>                    _offTimelineFinishedFunc                                       = new ExternalOffset<FScriptDelegate>(0x0060, false);          // 0x0060(0x0010) (ZeroConstructor, InstancedReference, RepSkip, NoDestructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TWeakObjectPtr<UObject>>            _offPropertySetObject                                          = new ExternalOffset<TWeakObjectPtr<UObject>>(0x0070, false);  // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                              _offDirectionPropertyName                                      = new ExternalOffset<FName>(0x0078, false);                    // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UProperty>                          _offDirectionProperty                                          = new ExternalOffset<UProperty>(0x0090, true);                 // 0x0090(0x0008) (ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TEnumAsByte<ETimelineLengthMode>                    LengthMode                                                     => _offLengthMode.GetValue();
	public float                                               Length                                                         => _offLength.GetValue();
	public float                                               PlayRate                                                       => _offPlayRate.GetValue();
	public float                                               Position                                                       => _offPosition.GetValue();
	public TArray<FTimelineEventEntry>                         Events                                                         => _offEvents.GetValue();
	public TArray<FTimelineVectorTrack>                        InterpVectors                                                  => _offInterpVectors.GetValue();
	public TArray<FTimelineFloatTrack>                         InterpFloats                                                   => _offInterpFloats.GetValue();
	public TArray<FTimelineLinearColorTrack>                   InterpLinearColors                                             => _offInterpLinearColors.GetValue();
	public FScriptDelegate                                     TimelinePostUpdateFunc                                         => _offTimelinePostUpdateFunc.GetValue();
	public FScriptDelegate                                     TimelineFinishedFunc                                           => _offTimelineFinishedFunc.GetValue();
	public TWeakObjectPtr<UObject>                             PropertySetObject                                              => _offPropertySetObject.GetValue();
	public FName                                               DirectionPropertyName                                          => _offDirectionPropertyName.GetValue();
	public UProperty                                           DirectionProperty                                              => _offDirectionProperty.GetValue();
	#endregion

	public FTimeline(TEnumAsByte<ETimelineLengthMode> c_LengthMode, float c_Length, float c_PlayRate, float c_Position, TArray<FTimelineEventEntry> c_Events, TArray<FTimelineVectorTrack> c_InterpVectors, TArray<FTimelineFloatTrack> c_InterpFloats, TArray<FTimelineLinearColorTrack> c_InterpLinearColors, FScriptDelegate c_TimelinePostUpdateFunc, FScriptDelegate c_TimelineFinishedFunc, TWeakObjectPtr<UObject> c_PropertySetObject, FName c_DirectionPropertyName, UProperty c_DirectionProperty) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLengthMode.SetValue(c_LengthMode);
		_offLength.SetValue(c_Length);
		_offPlayRate.SetValue(c_PlayRate);
		_offPosition.SetValue(c_Position);
		_offEvents.SetValue(c_Events);
		_offInterpVectors.SetValue(c_InterpVectors);
		_offInterpFloats.SetValue(c_InterpFloats);
		_offInterpLinearColors.SetValue(c_InterpLinearColors);
		_offTimelinePostUpdateFunc.SetValue(c_TimelinePostUpdateFunc);
		_offTimelineFinishedFunc.SetValue(c_TimelineFinishedFunc);
		_offPropertySetObject.SetValue(c_PropertySetObject);
		_offDirectionPropertyName.SetValue(c_DirectionPropertyName);
		_offDirectionProperty.SetValue(c_DirectionProperty);
	}
}
// ScriptStruct Engine.SubtitleCue
// 0x0020
public class FSubtitleCue : ExternalClass
{
	#region Offsets
	private ExternalOffset<FText>                              _offText                                                       = new ExternalOffset<FText>(0x0000, false);                    // 0x0000(0x0018) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offTime                                                       = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FText                                               Text                                                           => _offText.GetValue();
	public float                                               Time                                                           => _offTime.GetValue();
	#endregion

	public FSubtitleCue(FText c_Text, float c_Time) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offText.SetValue(c_Text);
		_offTime.SetValue(c_Time);
	}
}
// ScriptStruct Engine.InterpControlPoint
// 0x001C
public class FInterpControlPoint : ExternalClass
{
	#region Offsets
	private ExternalOffset<FVector>                            _offPositionControlPoint                                       = new ExternalOffset<FVector>(0x0000, false);                  // 0x0000(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbPositionIsRelative                                        = new ExternalOffset<byte/*(bool)*/>(0x000C);                  // 0x000C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                             PositionControlPoint                                           => _offPositionControlPoint.GetValue();
	public byte/*(bool)*/                                      bPositionIsRelative                                            => _offbPositionIsRelative.GetValue();
	#endregion

	public FInterpControlPoint(FVector c_PositionControlPoint, byte/*(bool)*/ c_bPositionIsRelative) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPositionControlPoint.SetValue(c_PositionControlPoint);
		_offbPositionIsRelative.SetValue(c_bPositionIsRelative);
	}
}
// ScriptStruct Engine.UserActivity
// 0x0018
public class FUserActivity : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offActionName                                                 = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ActionName                                                     => _offActionName.GetValue();
	#endregion

	public FUserActivity(FString c_ActionName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActionName.SetValue(c_ActionName);
	}
}
// ScriptStruct Engine.GenericStruct
// 0x0004
public class FGenericStruct : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offData                                                       = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Data                                                           => _offData.GetValue();
	#endregion

	public FGenericStruct(int c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct Engine.CollisionProfileName
// 0x0008
public class FCollisionProfileName : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offName                                                       = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               Name                                                           => _offName.GetValue();
	#endregion

	public FCollisionProfileName(FName c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct Engine.TimerHandle
// 0x0008
public class FTimerHandle : ExternalClass
{
	#region Offsets
	private ExternalOffset<ulong>                              _offHandle                                                     = new ExternalOffset<ulong>(0x0000);                           // 0x0000(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public ulong                                               Handle                                                         => _offHandle.GetValue();
	#endregion

	public FTimerHandle(ulong c_Handle) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offHandle.SetValue(c_Handle);
	}
}
// ScriptStruct Engine.DebugFloatHistory
// 0x0020
public class FDebugFloatHistory : ExternalClass
{
	#region Offsets
	private ExternalOffset<TArray<float>>                      _offSamples                                                    = new ExternalOffset<TArray<float>>(0x0000, false);            // 0x0000(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                              _offMaxSamples                                                 = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMinValue                                                   = new ExternalOffset<float>(0x0014);                           // 0x0014(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offMaxValue                                                   = new ExternalOffset<float>(0x0018);                           // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offbAutoAdjustMinMax                                          = new ExternalOffset<byte/*(bool)*/>(0x001C);                  // 0x001C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<float>                                       Samples                                                        => _offSamples.GetValue();
	public float                                               MaxSamples                                                     => _offMaxSamples.GetValue();
	public float                                               MinValue                                                       => _offMinValue.GetValue();
	public float                                               MaxValue                                                       => _offMaxValue.GetValue();
	public byte/*(bool)*/                                      bAutoAdjustMinMax                                              => _offbAutoAdjustMinMax.GetValue();
	#endregion

	public FDebugFloatHistory(TArray<float> c_Samples, float c_MaxSamples, float c_MinValue, float c_MaxValue, byte/*(bool)*/ c_bAutoAdjustMinMax) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSamples.SetValue(c_Samples);
		_offMaxSamples.SetValue(c_MaxSamples);
		_offMinValue.SetValue(c_MinValue);
		_offMaxValue.SetValue(c_MaxValue);
		_offbAutoAdjustMinMax.SetValue(c_bAutoAdjustMinMax);
	}
}
// ScriptStruct Engine.FormatArgumentData
// 0x0040
public class FFormatArgumentData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FString>                            _offArgumentName                                               = new ExternalOffset<FString>(0x0000, false);                  // 0x0000(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EFormatArgumentType>>   _offArgumentValueType                                          = new ExternalOffset<TEnumAsByte<EFormatArgumentType>>(0x0010, false); // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FText>                              _offArgumentValue                                              = new ExternalOffset<FText>(0x0018, false);                    // 0x0018(0x0018) (Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offArgumentValueInt                                           = new ExternalOffset<int>(0x0030);                             // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offArgumentValueFloat                                         = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ETextGender>                        _offArgumentValueGender                                        = new ExternalOffset<ETextGender>(0x0038, false);              // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ArgumentName                                                   => _offArgumentName.GetValue();
	public TEnumAsByte<EFormatArgumentType>                    ArgumentValueType                                              => _offArgumentValueType.GetValue();
	public FText                                               ArgumentValue                                                  => _offArgumentValue.GetValue();
	public int                                                 ArgumentValueInt                                               => _offArgumentValueInt.GetValue();
	public float                                               ArgumentValueFloat                                             => _offArgumentValueFloat.GetValue();
	public ETextGender                                         ArgumentValueGender                                            => _offArgumentValueGender.GetValue();
	#endregion

	public FFormatArgumentData(FString c_ArgumentName, TEnumAsByte<EFormatArgumentType> c_ArgumentValueType, FText c_ArgumentValue, int c_ArgumentValueInt, float c_ArgumentValueFloat, ETextGender c_ArgumentValueGender) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offArgumentName.SetValue(c_ArgumentName);
		_offArgumentValueType.SetValue(c_ArgumentValueType);
		_offArgumentValue.SetValue(c_ArgumentValue);
		_offArgumentValueInt.SetValue(c_ArgumentValueInt);
		_offArgumentValueFloat.SetValue(c_ArgumentValueFloat);
		_offArgumentValueGender.SetValue(c_ArgumentValueGender);
	}
}
// ScriptStruct Engine.MaterialInput
// 0x000C
public class FMaterialInput : ExternalClass
{
	#region Offsets
	private ExternalOffset<int>                                _offOutputIndex                                                = new ExternalOffset<int>(0x0000);                             // 0x0000(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                              _offExpressionName                                             = new ExternalOffset<FName>(0x0004, false);                    // 0x0004(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 OutputIndex                                                    => _offOutputIndex.GetValue();
	public FName                                               ExpressionName                                                 => _offExpressionName.GetValue();
	#endregion

	public FMaterialInput(int c_OutputIndex, FName c_ExpressionName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOutputIndex.SetValue(c_OutputIndex);
		_offExpressionName.SetValue(c_ExpressionName);
	}
}
// ScriptStruct Engine.ScalarMaterialInput
// 0x0000 (0x000C - 0x000C)
public class FScalarMaterialInput : FMaterialInput
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FScalarMaterialInput() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.VectorMaterialInput
// 0x0000 (0x000C - 0x000C)
public class FVectorMaterialInput : FMaterialInput
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FVectorMaterialInput() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.ColorMaterialInput
// 0x0000 (0x000C - 0x000C)
public class FColorMaterialInput : FMaterialInput
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FColorMaterialInput() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.MaterialAttributesInput
// 0x0004 (0x0010 - 0x000C)
public class FMaterialAttributesInput : FExpressionInput
{
	#region Offsets
	private ExternalOffset<int>                                _offPropertyConnectedBitmask                                   = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PropertyConnectedBitmask                                       => _offPropertyConnectedBitmask.GetValue();
	#endregion

	public FMaterialAttributesInput(int c_PropertyConnectedBitmask) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPropertyConnectedBitmask.SetValue(c_PropertyConnectedBitmask);
	}
}
// ScriptStruct Engine.ShadingModelMaterialInput
// 0x0000 (0x000C - 0x000C)
public class FShadingModelMaterialInput : FMaterialInput
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FShadingModelMaterialInput() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.VectorDistribution
// 0x0028
public class FVectorDistribution : ExternalClass
{
	#region Offsets
	private ExternalOffset<FDistributionLookupTable>           _offtable                                                      = new ExternalOffset<FDistributionLookupTable>(0x0000, false); // 0x0000(0x0028) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FDistributionLookupTable                            table                                                          => _offtable.GetValue();
	#endregion

	public FVectorDistribution(FDistributionLookupTable c_table) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offtable.SetValue(c_table);
	}
}
// ScriptStruct Engine.Vector4Distribution
// 0x0028
public class FVector4Distribution : ExternalClass
{
	#region Offsets
	private ExternalOffset<FDistributionLookupTable>           _offtable                                                      = new ExternalOffset<FDistributionLookupTable>(0x0000, false); // 0x0000(0x0028) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FDistributionLookupTable                            table                                                          => _offtable.GetValue();
	#endregion

	public FVector4Distribution(FDistributionLookupTable c_table) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offtable.SetValue(c_table);
	}
}
// ScriptStruct Engine.FloatRK4SpringInterpolator
// 0x0008
public class FFloatRK4SpringInterpolator : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offStiffnessConstant                                          = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDampeningRatio                                             = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               StiffnessConstant                                              => _offStiffnessConstant.GetValue();
	public float                                               DampeningRatio                                                 => _offDampeningRatio.GetValue();
	#endregion

	public FFloatRK4SpringInterpolator(float c_StiffnessConstant, float c_DampeningRatio) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStiffnessConstant.SetValue(c_StiffnessConstant);
		_offDampeningRatio.SetValue(c_DampeningRatio);
	}
}
// ScriptStruct Engine.VectorRK4SpringInterpolator
// 0x0008
public class FVectorRK4SpringInterpolator : ExternalClass
{
	#region Offsets
	private ExternalOffset<float>                              _offStiffnessConstant                                          = new ExternalOffset<float>(0x0000);                           // 0x0000(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offDampeningRatio                                             = new ExternalOffset<float>(0x0004);                           // 0x0004(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                               StiffnessConstant                                              => _offStiffnessConstant.GetValue();
	public float                                               DampeningRatio                                                 => _offDampeningRatio.GetValue();
	#endregion

	public FVectorRK4SpringInterpolator(float c_StiffnessConstant, float c_DampeningRatio) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStiffnessConstant.SetValue(c_StiffnessConstant);
		_offDampeningRatio.SetValue(c_DampeningRatio);
	}
}
// ScriptStruct Engine.Vector2MaterialInput
// 0x0000 (0x000C - 0x000C)
public class FVector2MaterialInput : FMaterialInput
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FVector2MaterialInput() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.BranchingPointNotifyPayload
// 0x0020
public class FBranchingPointNotifyPayload : ExternalClass
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FBranchingPointNotifyPayload() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct Engine.PlatformInterfaceData
// 0x0030
public class FPlatformInterfaceData : ExternalClass
{
	#region Offsets
	private ExternalOffset<FName>                              _offDataName                                                   = new ExternalOffset<FName>(0x0000, false);                    // 0x0000(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EPlatformInterfaceDataType>> _offType                                                       = new ExternalOffset<TEnumAsByte<EPlatformInterfaceDataType>>(0x0008, false); // 0x0008(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIntValue                                                   = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                              _offFloatValue                                                 = new ExternalOffset<float>(0x0010);                           // 0x0010(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStringValue                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                            _offObjectValue                                                = new ExternalOffset<UObject>(0x0028, true);                   // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                               DataName                                                       => _offDataName.GetValue();
	public TEnumAsByte<EPlatformInterfaceDataType>             Type                                                           => _offType.GetValue();
	public int                                                 IntValue                                                       => _offIntValue.GetValue();
	public float                                               FloatValue                                                     => _offFloatValue.GetValue();
	public FString                                             StringValue                                                    => _offStringValue.GetValue();
	public UObject                                             ObjectValue                                                    => _offObjectValue.GetValue();
	#endregion

	public FPlatformInterfaceData(FName c_DataName, TEnumAsByte<EPlatformInterfaceDataType> c_Type, int c_IntValue, float c_FloatValue, FString c_StringValue, UObject c_ObjectValue) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataName.SetValue(c_DataName);
		_offType.SetValue(c_Type);
		_offIntValue.SetValue(c_IntValue);
		_offFloatValue.SetValue(c_FloatValue);
		_offStringValue.SetValue(c_StringValue);
		_offObjectValue.SetValue(c_ObjectValue);
	}
}
// ScriptStruct Engine.PlatformInterfaceDelegateResult
// 0x0038
public class FPlatformInterfaceDelegateResult : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offbSuccessful                                                = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPlatformInterfaceData>             _offData                                                       = new ExternalOffset<FPlatformInterfaceData>(0x0008, false);   // 0x0008(0x0030) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      bSuccessful                                                    => _offbSuccessful.GetValue();
	public FPlatformInterfaceData                              Data                                                           => _offData.GetValue();
	#endregion

	public FPlatformInterfaceDelegateResult(byte/*(bool)*/ c_bSuccessful, FPlatformInterfaceData c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offbSuccessful.SetValue(c_bSuccessful);
		_offData.SetValue(c_Data);
	}
}

}