// Name: Sq, Version: b21

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace UFT
{
//---------------------------------------------------------------------------
// Enums
//---------------------------------------------------------------------------

// Enum PlayFab.EProtocolType
public enum EProtocolType : byte
{
	EProtocolType__pfenum_TCP      = 0,
	EProtocolType__pfenum_UDP      = 1,
	EProtocolType__pfenum_MAX      = 2
}

// Enum PlayFab.ECancellationReason
public enum ECancellationReason : byte
{
	ECancellationReason__pfenum_Requested = 0,
	ECancellationReason__pfenum_Internal = 1,
	ECancellationReason__pfenum_Timeout = 2,
	ECancellationReason__pfenum_MAX = 3
}

// Enum PlayFab.EAzureVmFamily
public enum EAzureVmFamily : byte
{
	EAzureVmFamily__pfenum_A       = 0,
	EAzureVmFamily__pfenum_Av2     = 1,
	EAzureVmFamily__pfenum_Dv2     = 2,
	EAzureVmFamily__pfenum_F       = 3,
	EAzureVmFamily__pfenum_Fsv2    = 4,
	EAzureVmFamily__pfenum_MAX     = 5
}

// Enum PlayFab.EMatchmakeStatus
public enum EMatchmakeStatus : byte
{
	EMatchmakeStatus__pfenum_Complete = 0,
	EMatchmakeStatus__pfenum_Waiting = 1,
	EMatchmakeStatus__pfenum_GameNotFound = 2,
	EMatchmakeStatus__pfenum_NoAvailableSlots = 3,
	EMatchmakeStatus__pfenum_SessionClosed = 4,
	EMatchmakeStatus__pfenum_MAX   = 5
}

// Enum PlayFab.EAzureRegion
public enum EAzureRegion : byte
{
	EAzureRegion__pfenum_AustraliaEast = 0,
	EAzureRegion__pfenum_AustraliaSoutheast = 1,
	EAzureRegion__pfenum_BrazilSouth = 2,
	EAzureRegion__pfenum_CentralUs = 3,
	EAzureRegion__pfenum_EastAsia  = 4,
	EAzureRegion__pfenum_EastUs    = 5,
	EAzureRegion__pfenum_EastUs2   = 6,
	EAzureRegion__pfenum_JapanEast = 7,
	EAzureRegion__pfenum_JapanWest = 8,
	EAzureRegion__pfenum_NorthCentralUs = 9,
	EAzureRegion__pfenum_NorthEurope = 10,
	EAzureRegion__pfenum_SouthCentralUs = 11,
	EAzureRegion__pfenum_SoutheastAsia = 12,
	EAzureRegion__pfenum_WestEurope = 13,
	EAzureRegion__pfenum_WestUs    = 14,
	EAzureRegion__pfenum_ChinaEast2 = 15,
	EAzureRegion__pfenum_ChinaNorth2 = 16,
	EAzureRegion__pfenum_SouthAfricaNorth = 17,
	EAzureRegion__pfenum_MAX       = 18
}

// Enum PlayFab.EOperationTypes
public enum EOperationTypes : byte
{
	EOperationTypes__pfenum_Created = 0,
	EOperationTypes__pfenum_Updated = 1,
	EOperationTypes__pfenum_Deleted = 2,
	EOperationTypes__pfenum_None   = 3,
	EOperationTypes__pfenum_MAX    = 4
}

// Enum PlayFab.EUserOrigination
public enum EUserOrigination : byte
{
	EUserOrigination__pfenum_Organic = 0,
	EUserOrigination__pfenum_Steam = 1,
	EUserOrigination__pfenum_Google = 2,
	EUserOrigination__pfenum_Amazon = 3,
	EUserOrigination__pfenum_Facebook = 4,
	EUserOrigination__pfenum_Kongregate = 5,
	EUserOrigination__pfenum_GamersFirst = 6,
	EUserOrigination__pfenum_Unknown = 7,
	EUserOrigination__pfenum_IOS   = 8,
	EUserOrigination__pfenum_LoadTest = 9,
	EUserOrigination__pfenum_Android = 10,
	EUserOrigination__pfenum_PSN   = 11,
	EUserOrigination__pfenum_GameCenter = 12,
	EUserOrigination__pfenum_CustomId = 13,
	EUserOrigination__pfenum_XboxLive = 14,
	EUserOrigination__pfenum_Parse = 15,
	EUserOrigination__pfenum_Twitch = 16,
	EUserOrigination__pfenum_WindowsHello = 17,
	EUserOrigination__pfenum_ServerCustomId = 18,
	EUserOrigination__pfenum_NintendoSwitchDeviceId = 19,
	EUserOrigination__pfenum_FacebookInstantGamesId = 20,
	EUserOrigination__pfenum_OpenIdConnect = 21,
	EUserOrigination__pfenum_MAX   = 22
}

// Enum PlayFab.ETransactionStatus
public enum ETransactionStatus : byte
{
	ETransactionStatus__pfenum_CreateCart = 0,
	ETransactionStatus__pfenum_Init = 1,
	ETransactionStatus__pfenum_Approved = 2,
	ETransactionStatus__pfenum_Succeeded = 3,
	ETransactionStatus__pfenum_FailedByProvider = 4,
	ETransactionStatus__pfenum_DisputePending = 5,
	ETransactionStatus__pfenum_RefundPending = 6,
	ETransactionStatus__pfenum_Refunded = 7,
	ETransactionStatus__pfenum_RefundFailed = 8,
	ETransactionStatus__pfenum_ChargedBack = 9,
	ETransactionStatus__pfenum_FailedByUber = 10,
	ETransactionStatus__pfenum_FailedByPlayFab = 11,
	ETransactionStatus__pfenum_Revoked = 12,
	ETransactionStatus__pfenum_TradePending = 13,
	ETransactionStatus__pfenum_Traded = 14,
	ETransactionStatus__pfenum_Upgraded = 15,
	ETransactionStatus__pfenum_StackPending = 16,
	ETransactionStatus__pfenum_Stacked = 17,
	ETransactionStatus__pfenum_Other = 18,
	ETransactionStatus__pfenum_Failed = 19,
	ETransactionStatus__pfenum_MAX = 20
}

// Enum PlayFab.ETitleActivationStatus
public enum ETitleActivationStatus : byte
{
	ETitleActivationStatus__pfenum_None = 0,
	ETitleActivationStatus__pfenum_ActivatedTitleKey = 1,
	ETitleActivationStatus__pfenum_PendingSteam = 2,
	ETitleActivationStatus__pfenum_ActivatedSteam = 3,
	ETitleActivationStatus__pfenum_RevokedSteam = 4,
	ETitleActivationStatus__pfenum_MAX = 5
}

// Enum PlayFab.ESubscriptionProviderStatus
public enum ESubscriptionProviderStatus : byte
{
	ESubscriptionProviderStatus__pfenum_NoError = 0,
	ESubscriptionProviderStatus__pfenum_Cancelled = 1,
	ESubscriptionProviderStatus__pfenum_UnknownError = 2,
	ESubscriptionProviderStatus__pfenum_BillingError = 3,
	ESubscriptionProviderStatus__pfenum_ProductUnavailable = 4,
	ESubscriptionProviderStatus__pfenum_CustomerDidNotAcceptPriceChange = 5,
	ESubscriptionProviderStatus__pfenum_FreeTrial = 6,
	ESubscriptionProviderStatus__pfenum_PaymentPending = 7,
	ESubscriptionProviderStatus__pfenum_MAX = 8
}

// Enum PlayFab.EStatisticVersionStatus
public enum EStatisticVersionStatus : byte
{
	EStatisticVersionStatus__pfenum_Active = 0,
	EStatisticVersionStatus__pfenum_SnapshotPending = 1,
	EStatisticVersionStatus__pfenum_Snapshot = 2,
	EStatisticVersionStatus__pfenum_ArchivalPending = 3,
	EStatisticVersionStatus__pfenum_Archived = 4,
	EStatisticVersionStatus__pfenum_MAX = 5
}

// Enum PlayFab.EStatisticVersionArchivalStatus
public enum EStatisticVersionArchivalStatus : byte
{
	EStatisticVersionArchivalStatus__pfenum_NotScheduled = 0,
	EStatisticVersionArchivalStatus__pfenum_Scheduled = 1,
	EStatisticVersionArchivalStatus__pfenum_Queued = 2,
	EStatisticVersionArchivalStatus__pfenum_InProgress = 3,
	EStatisticVersionArchivalStatus__pfenum_Complete = 4,
	EStatisticVersionArchivalStatus__pfenum_MAX = 5
}

// Enum PlayFab.EResultTableNodeType
public enum EResultTableNodeType : byte
{
	EResultTableNodeType__pfenum_ItemId = 0,
	EResultTableNodeType__pfenum_TableId = 1,
	EResultTableNodeType__pfenum_MAX = 2
}

// Enum PlayFab.EPushNotificationPlatform
public enum EPushNotificationPlatform : byte
{
	EPushNotificationPlatform__pfenum_ApplePushNotificationService = 0,
	EPushNotificationPlatform__pfenum_GoogleCloudMessaging = 1,
	EPushNotificationPlatform__pfenum_MAX = 2
}

// Enum PlayFab.EEmailVerificationStatus
public enum EEmailVerificationStatus : byte
{
	EEmailVerificationStatus__pfenum_Unverified = 0,
	EEmailVerificationStatus__pfenum_Pending = 1,
	EEmailVerificationStatus__pfenum_Confirmed = 2,
	EEmailVerificationStatus__pfenum_MAX = 3
}

// Enum PlayFab.EResolutionOutcome
public enum EResolutionOutcome : byte
{
	EResolutionOutcome__pfenum_Revoke = 0,
	EResolutionOutcome__pfenum_Reinstate = 1,
	EResolutionOutcome__pfenum_Manual = 2,
	EResolutionOutcome__pfenum_MAX = 3
}

// Enum PlayFab.EEffectType
public enum EEffectType : byte
{
	EEffectType__pfenum_Allow      = 0,
	EEffectType__pfenum_Deny       = 1,
	EEffectType__pfenum_MAX        = 2
}

// Enum PlayFab.EPushSetupPlatform
public enum EPushSetupPlatform : byte
{
	EPushSetupPlatform__pfenum_GCM = 0,
	EPushSetupPlatform__pfenum_APNS = 1,
	EPushSetupPlatform__pfenum_APNS_SANDBOX = 2,
	EPushSetupPlatform__pfenum_MAX = 3
}

// Enum PlayFab.EScheduledTaskType
public enum EScheduledTaskType : byte
{
	EScheduledTaskType__pfenum_CloudScript = 0,
	EScheduledTaskType__pfenum_ActionsOnPlayerSegment = 1,
	EScheduledTaskType__pfenum_CloudScriptAzureFunctions = 2,
	EScheduledTaskType__pfenum_MAX = 3
}

// Enum PlayFab.EUserDataPermission
public enum EUserDataPermission : byte
{
	EUserDataPermission__pfenum_Private = 0,
	EUserDataPermission__pfenum_Public = 1,
	EUserDataPermission__pfenum_MAX = 2
}

// Enum PlayFab.ELoginIdentityProvider
public enum ELoginIdentityProvider : byte
{
	ELoginIdentityProvider__pfenum_Unknown = 0,
	ELoginIdentityProvider__pfenum_PlayFab = 1,
	ELoginIdentityProvider__pfenum_Custom = 2,
	ELoginIdentityProvider__pfenum_GameCenter = 3,
	ELoginIdentityProvider__pfenum_GooglePlay = 4,
	ELoginIdentityProvider__pfenum_Steam = 5,
	ELoginIdentityProvider__pfenum_XBoxLive = 6,
	ELoginIdentityProvider__pfenum_PSN = 7,
	ELoginIdentityProvider__pfenum_Kongregate = 8,
	ELoginIdentityProvider__pfenum_Facebook = 9,
	ELoginIdentityProvider__pfenum_IOSDevice = 10,
	ELoginIdentityProvider__pfenum_AndroidDevice = 11,
	ELoginIdentityProvider__pfenum_Twitch = 12,
	ELoginIdentityProvider__pfenum_WindowsHello = 13,
	ELoginIdentityProvider__pfenum_GameServer = 14,
	ELoginIdentityProvider__pfenum_CustomServer = 15,
	ELoginIdentityProvider__pfenum_NintendoSwitch = 16,
	ELoginIdentityProvider__pfenum_FacebookInstantGames = 17,
	ELoginIdentityProvider__pfenum_OpenIdConnect = 18,
	ELoginIdentityProvider__pfenum_MAX = 19
}

// Enum PlayFab.ECurrency
public enum ECurrency : byte
{
	ECurrency__pfenum_AED          = 0,
	ECurrency__pfenum_AFN          = 1,
	ECurrency__pfenum_ALL          = 2,
	ECurrency__pfenum_AMD          = 3,
	ECurrency__pfenum_ANG          = 4,
	ECurrency__pfenum_AOA          = 5,
	ECurrency__pfenum_ARS          = 6,
	ECurrency__pfenum_AUD          = 7,
	ECurrency__pfenum_AWG          = 8,
	ECurrency__pfenum_AZN          = 9,
	ECurrency__pfenum_BAM          = 10,
	ECurrency__pfenum_BBD          = 11,
	ECurrency__pfenum_BDT          = 12,
	ECurrency__pfenum_BGN          = 13,
	ECurrency__pfenum_BHD          = 14,
	ECurrency__pfenum_BIF          = 15,
	ECurrency__pfenum_BMD          = 16,
	ECurrency__pfenum_BND          = 17,
	ECurrency__pfenum_BOB          = 18,
	ECurrency__pfenum_BRL          = 19,
	ECurrency__pfenum_BSD          = 20,
	ECurrency__pfenum_BTN          = 21,
	ECurrency__pfenum_BWP          = 22,
	ECurrency__pfenum_BYR          = 23,
	ECurrency__pfenum_BZD          = 24,
	ECurrency__pfenum_CAD          = 25,
	ECurrency__pfenum_CDF          = 26,
	ECurrency__pfenum_CHF          = 27,
	ECurrency__pfenum_CLP          = 28,
	ECurrency__pfenum_CNY          = 29,
	ECurrency__pfenum_COP          = 30,
	ECurrency__pfenum_CRC          = 31,
	ECurrency__pfenum_CUC          = 32,
	ECurrency__pfenum_CUP          = 33,
	ECurrency__pfenum_CVE          = 34,
	ECurrency__pfenum_CZK          = 35,
	ECurrency__pfenum_DJF          = 36,
	ECurrency__pfenum_DKK          = 37,
	ECurrency__pfenum_DOP          = 38,
	ECurrency__pfenum_DZD          = 39,
	ECurrency__pfenum_EGP          = 40,
	ECurrency__pfenum_ERN          = 41,
	ECurrency__pfenum_ETB          = 42,
	ECurrency__pfenum_EUR          = 43,
	ECurrency__pfenum_FJD          = 44,
	ECurrency__pfenum_FKP          = 45,
	ECurrency__pfenum_GBP          = 46,
	ECurrency__pfenum_GEL          = 47,
	ECurrency__pfenum_GGP          = 48,
	ECurrency__pfenum_GHS          = 49,
	ECurrency__pfenum_GIP          = 50,
	ECurrency__pfenum_GMD          = 51,
	ECurrency__pfenum_GNF          = 52,
	ECurrency__pfenum_GTQ          = 53,
	ECurrency__pfenum_GYD          = 54,
	ECurrency__pfenum_HKD          = 55,
	ECurrency__pfenum_HNL          = 56,
	ECurrency__pfenum_HRK          = 57,
	ECurrency__pfenum_HTG          = 58,
	ECurrency__pfenum_HUF          = 59,
	ECurrency__pfenum_IDR          = 60,
	ECurrency__pfenum_ILS          = 61,
	ECurrency__pfenum_IMP          = 62,
	ECurrency__pfenum_INR          = 63,
	ECurrency__pfenum_IQD          = 64,
	ECurrency__pfenum_IRR          = 65,
	ECurrency__pfenum_ISK          = 66,
	ECurrency__pfenum_JEP          = 67,
	ECurrency__pfenum_JMD          = 68,
	ECurrency__pfenum_JOD          = 69,
	ECurrency__pfenum_JPY          = 70,
	ECurrency__pfenum_KES          = 71,
	ECurrency__pfenum_KGS          = 72,
	ECurrency__pfenum_KHR          = 73,
	ECurrency__pfenum_KMF          = 74,
	ECurrency__pfenum_KPW          = 75,
	ECurrency__pfenum_KRW          = 76,
	ECurrency__pfenum_KWD          = 77,
	ECurrency__pfenum_KYD          = 78,
	ECurrency__pfenum_KZT          = 79,
	ECurrency__pfenum_LAK          = 80,
	ECurrency__pfenum_LBP          = 81,
	ECurrency__pfenum_LKR          = 82,
	ECurrency__pfenum_LRD          = 83,
	ECurrency__pfenum_LSL          = 84,
	ECurrency__pfenum_LYD          = 85,
	ECurrency__pfenum_MAD          = 86,
	ECurrency__pfenum_MDL          = 87,
	ECurrency__pfenum_MGA          = 88,
	ECurrency__pfenum_MKD          = 89,
	ECurrency__pfenum_MMK          = 90,
	ECurrency__pfenum_MNT          = 91,
	ECurrency__pfenum_MOP          = 92,
	ECurrency__pfenum_MRO          = 93,
	ECurrency__pfenum_MUR          = 94,
	ECurrency__pfenum_MVR          = 95,
	ECurrency__pfenum_MWK          = 96,
	ECurrency__pfenum_MXN          = 97,
	ECurrency__pfenum_MYR          = 98,
	ECurrency__pfenum_MZN          = 99,
	ECurrency__pfenum_NAD          = 100,
	ECurrency__pfenum_NGN          = 101,
	ECurrency__pfenum_NIO          = 102,
	ECurrency__pfenum_NOK          = 103,
	ECurrency__pfenum_NPR          = 104,
	ECurrency__pfenum_NZD          = 105,
	ECurrency__pfenum_OMR          = 106,
	ECurrency__pfenum_PAB          = 107,
	ECurrency__pfenum_PEN          = 108,
	ECurrency__pfenum_PGK          = 109,
	ECurrency__pfenum_PHP          = 110,
	ECurrency__pfenum_PKR          = 111,
	ECurrency__pfenum_PLN          = 112,
	ECurrency__pfenum_PYG          = 113,
	ECurrency__pfenum_QAR          = 114,
	ECurrency__pfenum_RON          = 115,
	ECurrency__pfenum_RSD          = 116,
	ECurrency__pfenum_RUB          = 117,
	ECurrency__pfenum_RWF          = 118,
	ECurrency__pfenum_SAR          = 119,
	ECurrency__pfenum_SBD          = 120,
	ECurrency__pfenum_SCR          = 121,
	ECurrency__pfenum_SDG          = 122,
	ECurrency__pfenum_SEK          = 123,
	ECurrency__pfenum_SGD          = 124,
	ECurrency__pfenum_SHP          = 125,
	ECurrency__pfenum_SLL          = 126,
	ECurrency__pfenum_SOS          = 127,
	ECurrency__pfenum_SPL          = 128,
	ECurrency__pfenum_SRD          = 129,
	ECurrency__pfenum_STD          = 130,
	ECurrency__pfenum_SVC          = 131,
	ECurrency__pfenum_SYP          = 132,
	ECurrency__pfenum_SZL          = 133,
	ECurrency__pfenum_THB          = 134,
	ECurrency__pfenum_TJS          = 135,
	ECurrency__pfenum_TMT          = 136,
	ECurrency__pfenum_TND          = 137,
	ECurrency__pfenum_TOP          = 138,
	ECurrency__pfenum_TRY          = 139,
	ECurrency__pfenum_TTD          = 140,
	ECurrency__pfenum_TVD          = 141,
	ECurrency__pfenum_TWD          = 142,
	ECurrency__pfenum_TZS          = 143,
	ECurrency__pfenum_UAH          = 144,
	ECurrency__pfenum_UGX          = 145,
	ECurrency__pfenum_USD          = 146,
	ECurrency__pfenum_UYU          = 147,
	ECurrency__pfenum_UZS          = 148,
	ECurrency__pfenum_VEF          = 149,
	ECurrency__pfenum_VND          = 150,
	ECurrency__pfenum_VUV          = 151,
	ECurrency__pfenum_WST          = 152,
	ECurrency__pfenum_XAF          = 153,
	ECurrency__pfenum_XCD          = 154,
	ECurrency__pfenum_XDR          = 155,
	ECurrency__pfenum_XOF          = 156,
	ECurrency__pfenum_XPF          = 157,
	ECurrency__pfenum_YER          = 158,
	ECurrency__pfenum_ZAR          = 159,
	ECurrency__pfenum_ZMW          = 160,
	ECurrency__pfenum_ZWD          = 161,
	ECurrency__pfenum_MAX          = 162
}

// Enum PlayFab.ECloudScriptRevisionOption
public enum ECloudScriptRevisionOption : byte
{
	ECloudScriptRevisionOption__pfenum_Live = 0,
	ECloudScriptRevisionOption__pfenum_Latest = 1,
	ECloudScriptRevisionOption__pfenum_Specific = 2,
	ECloudScriptRevisionOption__pfenum_MAX = 3
}

// Enum PlayFab.ECountryCode
public enum ECountryCode : byte
{
	ECountryCode__pfenum_AF        = 0,
	ECountryCode__pfenum_AX        = 1,
	ECountryCode__pfenum_AL        = 2,
	ECountryCode__pfenum_DZ        = 3,
	ECountryCode__pfenum_AS        = 4,
	ECountryCode__pfenum_AD        = 5,
	ECountryCode__pfenum_AO        = 6,
	ECountryCode__pfenum_AI        = 7,
	ECountryCode__pfenum_AQ        = 8,
	ECountryCode__pfenum_AG        = 9,
	ECountryCode__pfenum_AR        = 10,
	ECountryCode__pfenum_AM        = 11,
	ECountryCode__pfenum_AW        = 12,
	ECountryCode__pfenum_AU        = 13,
	ECountryCode__pfenum_AT        = 14,
	ECountryCode__pfenum_AZ        = 15,
	ECountryCode__pfenum_BS        = 16,
	ECountryCode__pfenum_BH        = 17,
	ECountryCode__pfenum_BD        = 18,
	ECountryCode__pfenum_BB        = 19,
	ECountryCode__pfenum_BY        = 20,
	ECountryCode__pfenum_BE        = 21,
	ECountryCode__pfenum_BZ        = 22,
	ECountryCode__pfenum_BJ        = 23,
	ECountryCode__pfenum_BM        = 24,
	ECountryCode__pfenum_BT        = 25,
	ECountryCode__pfenum_BO        = 26,
	ECountryCode__pfenum_BQ        = 27,
	ECountryCode__pfenum_BA        = 28,
	ECountryCode__pfenum_BW        = 29,
	ECountryCode__pfenum_BV        = 30,
	ECountryCode__pfenum_BR        = 31,
	ECountryCode__pfenum_IO        = 32,
	ECountryCode__pfenum_BN        = 33,
	ECountryCode__pfenum_BG        = 34,
	ECountryCode__pfenum_BF        = 35,
	ECountryCode__pfenum_BI        = 36,
	ECountryCode__pfenum_KH        = 37,
	ECountryCode__pfenum_CM        = 38,
	ECountryCode__pfenum_CA        = 39,
	ECountryCode__pfenum_CV        = 40,
	ECountryCode__pfenum_KY        = 41,
	ECountryCode__pfenum_CF        = 42,
	ECountryCode__pfenum_TD        = 43,
	ECountryCode__pfenum_CL        = 44,
	ECountryCode__pfenum_CN        = 45,
	ECountryCode__pfenum_CX        = 46,
	ECountryCode__pfenum_CC        = 47,
	ECountryCode__pfenum_CO        = 48,
	ECountryCode__pfenum_KM        = 49,
	ECountryCode__pfenum_CG        = 50,
	ECountryCode__pfenum_CD        = 51,
	ECountryCode__pfenum_CK        = 52,
	ECountryCode__pfenum_CR        = 53,
	ECountryCode__pfenum_CI        = 54,
	ECountryCode__pfenum_HR        = 55,
	ECountryCode__pfenum_CU        = 56,
	ECountryCode__pfenum_CW        = 57,
	ECountryCode__pfenum_CY        = 58,
	ECountryCode__pfenum_CZ        = 59,
	ECountryCode__pfenum_DK        = 60,
	ECountryCode__pfenum_DJ        = 61,
	ECountryCode__pfenum_DM        = 62,
	ECountryCode__pfenum_DO        = 63,
	ECountryCode__pfenum_EC        = 64,
	ECountryCode__pfenum_EG        = 65,
	ECountryCode__pfenum_SV        = 66,
	ECountryCode__pfenum_GQ        = 67,
	ECountryCode__pfenum_ER        = 68,
	ECountryCode__pfenum_EE        = 69,
	ECountryCode__pfenum_ET        = 70,
	ECountryCode__pfenum_FK        = 71,
	ECountryCode__pfenum_FO        = 72,
	ECountryCode__pfenum_FJ        = 73,
	ECountryCode__pfenum_FI        = 74,
	ECountryCode__pfenum_FR        = 75,
	ECountryCode__pfenum_GF        = 76,
	ECountryCode__pfenum_PF        = 77,
	ECountryCode__pfenum_TF        = 78,
	ECountryCode__pfenum_GA        = 79,
	ECountryCode__pfenum_GM        = 80,
	ECountryCode__pfenum_GE        = 81,
	ECountryCode__pfenum_DE        = 82,
	ECountryCode__pfenum_GH        = 83,
	ECountryCode__pfenum_GI        = 84,
	ECountryCode__pfenum_GR        = 85,
	ECountryCode__pfenum_GL        = 86,
	ECountryCode__pfenum_GD        = 87,
	ECountryCode__pfenum_GP        = 88,
	ECountryCode__pfenum_GU        = 89,
	ECountryCode__pfenum_GT        = 90,
	ECountryCode__pfenum_GG        = 91,
	ECountryCode__pfenum_GN        = 92,
	ECountryCode__pfenum_GW        = 93,
	ECountryCode__pfenum_GY        = 94,
	ECountryCode__pfenum_HT        = 95,
	ECountryCode__pfenum_HM        = 96,
	ECountryCode__pfenum_VA        = 97,
	ECountryCode__pfenum_HN        = 98,
	ECountryCode__pfenum_HK        = 99,
	ECountryCode__pfenum_HU        = 100,
	ECountryCode__pfenum_IS        = 101,
	ECountryCode__pfenum_IN        = 102,
	ECountryCode__pfenum_ID        = 103,
	ECountryCode__pfenum_IR        = 104,
	ECountryCode__pfenum_IQ        = 105,
	ECountryCode__pfenum_IE        = 106,
	ECountryCode__pfenum_IM        = 107,
	ECountryCode__pfenum_IL        = 108,
	ECountryCode__pfenum_IT        = 109,
	ECountryCode__pfenum_JM        = 110,
	ECountryCode__pfenum_JP        = 111,
	ECountryCode__pfenum_JE        = 112,
	ECountryCode__pfenum_JO        = 113,
	ECountryCode__pfenum_KZ        = 114,
	ECountryCode__pfenum_KE        = 115,
	ECountryCode__pfenum_KI        = 116,
	ECountryCode__pfenum_KP        = 117,
	ECountryCode__pfenum_KR        = 118,
	ECountryCode__pfenum_KW        = 119,
	ECountryCode__pfenum_KG        = 120,
	ECountryCode__pfenum_LA        = 121,
	ECountryCode__pfenum_LV        = 122,
	ECountryCode__pfenum_LB        = 123,
	ECountryCode__pfenum_LS        = 124,
	ECountryCode__pfenum_LR        = 125,
	ECountryCode__pfenum_LY        = 126,
	ECountryCode__pfenum_LI        = 127,
	ECountryCode__pfenum_LT        = 128,
	ECountryCode__pfenum_LU        = 129,
	ECountryCode__pfenum_MO        = 130,
	ECountryCode__pfenum_MK        = 131,
	ECountryCode__pfenum_MG        = 132,
	ECountryCode__pfenum_MW        = 133,
	ECountryCode__pfenum_MY        = 134,
	ECountryCode__pfenum_MV        = 135,
	ECountryCode__pfenum_ML        = 136,
	ECountryCode__pfenum_MT        = 137,
	ECountryCode__pfenum_MH        = 138,
	ECountryCode__pfenum_MQ        = 139,
	ECountryCode__pfenum_MR        = 140,
	ECountryCode__pfenum_MU        = 141,
	ECountryCode__pfenum_YT        = 142,
	ECountryCode__pfenum_MX        = 143,
	ECountryCode__pfenum_FM        = 144,
	ECountryCode__pfenum_MD        = 145,
	ECountryCode__pfenum_MC        = 146,
	ECountryCode__pfenum_MN        = 147,
	ECountryCode__pfenum_ME        = 148,
	ECountryCode__pfenum_MS        = 149,
	ECountryCode__pfenum_MA        = 150,
	ECountryCode__pfenum_MZ        = 151,
	ECountryCode__pfenum_MM        = 152,
	ECountryCode__pfenum_NA        = 153,
	ECountryCode__pfenum_NR        = 154,
	ECountryCode__pfenum_NP        = 155,
	ECountryCode__pfenum_NL        = 156,
	ECountryCode__pfenum_NC        = 157,
	ECountryCode__pfenum_NZ        = 158,
	ECountryCode__pfenum_NI        = 159,
	ECountryCode__pfenum_NE        = 160,
	ECountryCode__pfenum_NG        = 161,
	ECountryCode__pfenum_NU        = 162,
	ECountryCode__pfenum_NF        = 163,
	ECountryCode__pfenum_MP        = 164,
	ECountryCode__pfenum_NO        = 165,
	ECountryCode__pfenum_OM        = 166,
	ECountryCode__pfenum_PK        = 167,
	ECountryCode__pfenum_PW        = 168,
	ECountryCode__pfenum_PS        = 169,
	ECountryCode__pfenum_PA        = 170,
	ECountryCode__pfenum_PG        = 171,
	ECountryCode__pfenum_PY        = 172,
	ECountryCode__pfenum_PE        = 173,
	ECountryCode__pfenum_PH        = 174,
	ECountryCode__pfenum_PN        = 175,
	ECountryCode__pfenum_PL        = 176,
	ECountryCode__pfenum_PT        = 177,
	ECountryCode__pfenum_PR        = 178,
	ECountryCode__pfenum_QA        = 179,
	ECountryCode__pfenum_RE        = 180,
	ECountryCode__pfenum_RO        = 181,
	ECountryCode__pfenum_RU        = 182,
	ECountryCode__pfenum_RW        = 183,
	ECountryCode__pfenum_BL        = 184,
	ECountryCode__pfenum_SH        = 185,
	ECountryCode__pfenum_KN        = 186,
	ECountryCode__pfenum_LC        = 187,
	ECountryCode__pfenum_MF        = 188,
	ECountryCode__pfenum_PM        = 189,
	ECountryCode__pfenum_VC        = 190,
	ECountryCode__pfenum_WS        = 191,
	ECountryCode__pfenum_SM        = 192,
	ECountryCode__pfenum_ST        = 193,
	ECountryCode__pfenum_SA        = 194,
	ECountryCode__pfenum_SN        = 195,
	ECountryCode__pfenum_RS        = 196,
	ECountryCode__pfenum_SC        = 197,
	ECountryCode__pfenum_SL        = 198,
	ECountryCode__pfenum_SG        = 199,
	ECountryCode__pfenum_SX        = 200,
	ECountryCode__pfenum_SK        = 201,
	ECountryCode__pfenum_SI        = 202,
	ECountryCode__pfenum_SB        = 203,
	ECountryCode__pfenum_SO        = 204,
	ECountryCode__pfenum_ZA        = 205,
	ECountryCode__pfenum_GS        = 206,
	ECountryCode__pfenum_SS        = 207,
	ECountryCode__pfenum_ES        = 208,
	ECountryCode__pfenum_LK        = 209,
	ECountryCode__pfenum_SD        = 210,
	ECountryCode__pfenum_SR        = 211,
	ECountryCode__pfenum_SJ        = 212,
	ECountryCode__pfenum_SZ        = 213,
	ECountryCode__pfenum_SE        = 214,
	ECountryCode__pfenum_CH        = 215,
	ECountryCode__pfenum_SY        = 216,
	ECountryCode__pfenum_TW        = 217,
	ECountryCode__pfenum_TJ        = 218,
	ECountryCode__pfenum_TZ        = 219,
	ECountryCode__pfenum_TH        = 220,
	ECountryCode__pfenum_TL        = 221,
	ECountryCode__pfenum_TG        = 222,
	ECountryCode__pfenum_TK        = 223,
	ECountryCode__pfenum_TO        = 224,
	ECountryCode__pfenum_TT        = 225,
	ECountryCode__pfenum_TN        = 226,
	ECountryCode__pfenum_TR        = 227,
	ECountryCode__pfenum_TM        = 228,
	ECountryCode__pfenum_TC        = 229,
	ECountryCode__pfenum_TV        = 230,
	ECountryCode__pfenum_UG        = 231,
	ECountryCode__pfenum_UA        = 232,
	ECountryCode__pfenum_AE        = 233,
	ECountryCode__pfenum_GB        = 234,
	ECountryCode__pfenum_US        = 235,
	ECountryCode__pfenum_UM        = 236,
	ECountryCode__pfenum_UY        = 237,
	ECountryCode__pfenum_UZ        = 238,
	ECountryCode__pfenum_VU        = 239,
	ECountryCode__pfenum_VE        = 240,
	ECountryCode__pfenum_VN        = 241,
	ECountryCode__pfenum_VG        = 242,
	ECountryCode__pfenum_VI        = 243,
	ECountryCode__pfenum_WF        = 244,
	ECountryCode__pfenum_EH        = 245,
	ECountryCode__pfenum_YE        = 246,
	ECountryCode__pfenum_ZM        = 247,
	ECountryCode__pfenum_ZW        = 248,
	ECountryCode__pfenum_MAX       = 249
}

// Enum PlayFab.EContinentCode
public enum EContinentCode : byte
{
	EContinentCode__pfenum_AF      = 0,
	EContinentCode__pfenum_AN      = 1,
	EContinentCode__pfenum_AS      = 2,
	EContinentCode__pfenum_EU      = 3,
	EContinentCode__pfenum_NA      = 4,
	EContinentCode__pfenum_OC      = 5,
	EContinentCode__pfenum_SA      = 6,
	EContinentCode__pfenum_MAX     = 7
}

// Enum PlayFab.EConditionals
public enum EConditionals : byte
{
	EConditionals__pfenum_Any      = 0,
	EConditionals__pfenum_True     = 1,
	EConditionals__pfenum_False    = 2,
	EConditionals__pfenum_MAX      = 3
}

// Enum PlayFab.EGameInstanceState
public enum EGameInstanceState : byte
{
	EGameInstanceState__pfenum_Open = 0,
	EGameInstanceState__pfenum_Closed = 1,
	EGameInstanceState__pfenum_MAX = 2
}

// Enum PlayFab.EPFJson
public enum EPFJson : byte
{
	EPFJson__None                  = 0,
	EPFJson__Null                  = 1,
	EPFJson__String                = 2,
	EPFJson__Number                = 3,
	EPFJson__Boolean               = 4,
	EPFJson__Array                 = 5,
	EPFJson__Object                = 6,
	EPFJson__EPFJson_MAX           = 7
}

// Enum PlayFab.EAzureVmSize
public enum EAzureVmSize : byte
{
	EAzureVmSize__pfenum_Standard_D1_v2 = 0,
	EAzureVmSize__pfenum_Standard_D2_v2 = 1,
	EAzureVmSize__pfenum_Standard_D3_v2 = 2,
	EAzureVmSize__pfenum_Standard_D4_v2 = 3,
	EAzureVmSize__pfenum_Standard_D5_v2 = 4,
	EAzureVmSize__pfenum_Standard_A1_v2 = 5,
	EAzureVmSize__pfenum_Standard_A2_v2 = 6,
	EAzureVmSize__pfenum_Standard_A4_v2 = 7,
	EAzureVmSize__pfenum_Standard_A8_v2 = 8,
	EAzureVmSize__pfenum_Standard_F1 = 9,
	EAzureVmSize__pfenum_Standard_F2 = 10,
	EAzureVmSize__pfenum_Standard_F4 = 11,
	EAzureVmSize__pfenum_Standard_F8 = 12,
	EAzureVmSize__pfenum_Standard_F16 = 13,
	EAzureVmSize__pfenum_Standard_F2s_v2 = 14,
	EAzureVmSize__pfenum_Standard_F4s_v2 = 15,
	EAzureVmSize__pfenum_Standard_F8s_v2 = 16,
	EAzureVmSize__pfenum_Standard_F16s_v2 = 17,
	EAzureVmSize__pfenum_Standard_A1 = 18,
	EAzureVmSize__pfenum_Standard_A2 = 19,
	EAzureVmSize__pfenum_Standard_A3 = 20,
	EAzureVmSize__pfenum_Standard_A4 = 21,
	EAzureVmSize__pfenum_Standard_MAX = 22
}

// Enum PlayFab.EContainerFlavor
public enum EContainerFlavor : byte
{
	EContainerFlavor__pfenum_ManagedWindowsServerCore = 0,
	EContainerFlavor__pfenum_CustomLinux = 1,
	EContainerFlavor__pfenum_ManagedWindowsServerCorePreview = 2,
	EContainerFlavor__pfenum_MAX   = 3
}

// Enum PlayFab.ETradeStatus
public enum ETradeStatus : byte
{
	ETradeStatus__pfenum_Invalid   = 0,
	ETradeStatus__pfenum_Opening   = 1,
	ETradeStatus__pfenum_Open      = 2,
	ETradeStatus__pfenum_Accepting = 3,
	ETradeStatus__pfenum_Accepted  = 4,
	ETradeStatus__pfenum_Filled    = 5,
	ETradeStatus__pfenum_Cancelled = 6,
	ETradeStatus__pfenum_MAX       = 7
}

// Enum PlayFab.ETitleMultiplayerServerEnabledStatus
public enum ETitleMultiplayerServerEnabledStatus : byte
{
	ETitleMultiplayerServerEnabledStatus__pfenum_Initializing = 0,
	ETitleMultiplayerServerEnabledStatus__pfenum_Enabled = 1,
	ETitleMultiplayerServerEnabledStatus__pfenum_Disabled = 2,
	ETitleMultiplayerServerEnabledStatus__pfenum_MAX = 3
}

// Enum PlayFab.EPlayerConnectionState
public enum EPlayerConnectionState : byte
{
	EPlayerConnectionState__pfenum_Unassigned = 0,
	EPlayerConnectionState__pfenum_Connecting = 1,
	EPlayerConnectionState__pfenum_Participating = 2,
	EPlayerConnectionState__pfenum_Participated = 3,
	EPlayerConnectionState__pfenum_MAX = 4
}

// Enum PlayFab.EGameBuildStatus
public enum EGameBuildStatus : byte
{
	EGameBuildStatus__pfenum_Available = 0,
	EGameBuildStatus__pfenum_Validating = 1,
	EGameBuildStatus__pfenum_InvalidBuildPackage = 2,
	EGameBuildStatus__pfenum_Processing = 3,
	EGameBuildStatus__pfenum_FailedToProcess = 4,
	EGameBuildStatus__pfenum_MAX   = 5
}

// Enum PlayFab.EStatisticResetIntervalOption
public enum EStatisticResetIntervalOption : byte
{
	EStatisticResetIntervalOption__pfenum_Never = 0,
	EStatisticResetIntervalOption__pfenum_Hour = 1,
	EStatisticResetIntervalOption__pfenum_Day = 2,
	EStatisticResetIntervalOption__pfenum_Week = 3,
	EStatisticResetIntervalOption__pfenum_Month = 4,
	EStatisticResetIntervalOption__pfenum_MAX = 5
}

// Enum PlayFab.EStatisticAggregationMethod
public enum EStatisticAggregationMethod : byte
{
	EStatisticAggregationMethod__pfenum_Last = 0,
	EStatisticAggregationMethod__pfenum_Min = 1,
	EStatisticAggregationMethod__pfenum_Max = 2,
	EStatisticAggregationMethod__pfenum_Sum = 3
}

// Enum PlayFab.ERegion
public enum ERegion : byte
{
	ERegion__pfenum_USCentral      = 0,
	ERegion__pfenum_USEast         = 1,
	ERegion__pfenum_EUWest         = 2,
	ERegion__pfenum_Singapore      = 3,
	ERegion__pfenum_Japan          = 4,
	ERegion__pfenum_Brazil         = 5,
	ERegion__pfenum_Australia      = 6,
	ERegion__pfenum_MAX            = 7
}

// Enum PlayFab.EPfSourceType
public enum EPfSourceType : byte
{
	EPfSourceType__pfenum_Admin    = 0,
	EPfSourceType__pfenum_BackEnd  = 1,
	EPfSourceType__pfenum_GameClient = 2,
	EPfSourceType__pfenum_GameServer = 3,
	EPfSourceType__pfenum_Partner  = 4,
	EPfSourceType__pfenum_Custom   = 5,
	EPfSourceType__pfenum_API      = 6,
	EPfSourceType__pfenum_MAX      = 7
}

// Enum PlayFab.EAuthTokenType
public enum EAuthTokenType : byte
{
	EAuthTokenType__pfenum_Email   = 0,
	EAuthTokenType__pfenum_MAX     = 1
}

// Enum PlayFab.ETaskInstanceStatus
public enum ETaskInstanceStatus : byte
{
	ETaskInstanceStatus__pfenum_Succeeded = 0,
	ETaskInstanceStatus__pfenum_Starting = 1,
	ETaskInstanceStatus__pfenum_InProgress = 2,
	ETaskInstanceStatus__pfenum_Failed = 3,
	ETaskInstanceStatus__pfenum_Aborted = 4,
	ETaskInstanceStatus__pfenum_Stalled = 5,
	ETaskInstanceStatus__pfenum_MAX = 6
}

//---------------------------------------------------------------------------
// Script Structs
//---------------------------------------------------------------------------

// ScriptStruct PlayFab.PlayFabResultCommon
// 0x0008
public class FPlayFabResultCommon : ExternalClass
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offRequest                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0000, true);        // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Request                                                        => _offRequest.GetValue();
	#endregion

	public FPlayFabResultCommon(UPlayFabJsonObject c_Request) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRequest.SetValue(c_Request);
	}
}
// ScriptStruct PlayFab.PlayFabResultCommon
// 0x0008
public class FPlayFabResultCommon : ExternalClass
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offRequest                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0000, true);        // 0x0000(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Request                                                        => _offRequest.GetValue();
	#endregion

	public FPlayFabResultCommon(UPlayFabJsonObject c_Request) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRequest.SetValue(c_Request);
	}
}
// ScriptStruct PlayFab.PlayFabRequestCommon
// 0x0008
public class FPlayFabRequestCommon : ExternalClass
{
	#region Offsets
	private ExternalOffset<UPlayFabAuthenticationContext>      _offAuthenticationContext                                      = new ExternalOffset<UPlayFabAuthenticationContext>(0x0000, true); // 0x0000(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabAuthenticationContext                       AuthenticationContext                                          => _offAuthenticationContext.GetValue();
	#endregion

	public FPlayFabRequestCommon(UPlayFabAuthenticationContext c_AuthenticationContext) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthenticationContext.SetValue(c_AuthenticationContext);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerTagsRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerGetPlayerTagsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offNamespace                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Namespace                                                      => _offNamespace.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetPlayerTagsRequest(FString c_Namespace, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNamespace.SetValue(c_Namespace);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminIncrementLimitedEditionItemAvailabilityRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminIncrementLimitedEditionItemAvailabilityRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemId                                                     = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             ItemId                                                         => _offItemId.GetValue();
	#endregion

	public FAdminIncrementLimitedEditionItemAvailabilityRequest(int c_Amount, FString c_CatalogVersion, FString c_ItemId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offItemId.SetValue(c_ItemId);
	}
}
// ScriptStruct PlayFab.AdminUpdateUserTitleDisplayNameRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminUpdateUserTitleDisplayNameRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDisplayName                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DisplayName                                                    => _offDisplayName.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminUpdateUserTitleDisplayNameRequest(FString c_DisplayName, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisplayName.SetValue(c_DisplayName);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientLinkAndroidDeviceIDRequest
// 0x0038 (0x0040 - 0x0008)
public class FClientLinkAndroidDeviceIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAndroidDevice                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offAndroidDeviceId                                            = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOS                                                         = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AndroidDevice                                                  => _offAndroidDevice.GetValue();
	public FString                                             AndroidDeviceId                                                => _offAndroidDeviceId.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             OS                                                             => _offOS.GetValue();
	#endregion

	public FClientLinkAndroidDeviceIDRequest(FString c_AndroidDevice, FString c_AndroidDeviceId, byte/*(bool)*/ c_ForceLink, FString c_OS) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAndroidDevice.SetValue(c_AndroidDevice);
		_offAndroidDeviceId.SetValue(c_AndroidDeviceId);
		_offForceLink.SetValue(c_ForceLink);
		_offOS.SetValue(c_OS);
	}
}
// ScriptStruct PlayFab.MultiplayerMultiplayerEmptyRequest
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerMultiplayerEmptyRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerMultiplayerEmptyRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsListMembershipResponse
// 0x0010 (0x0018 - 0x0008)
public class FGroupsListMembershipResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGroups                                                     = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Groups                                                         => _offGroups.GetValue();
	#endregion

	public FGroupsListMembershipResponse(TArray<UPlayFabJsonObject> c_Groups) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroups.SetValue(c_Groups);
	}
}
// ScriptStruct PlayFab.AdminIncrementPlayerStatisticVersionRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminIncrementPlayerStatisticVersionRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FAdminIncrementPlayerStatisticVersionRequest(FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.ClientLinkCustomIDRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientLinkCustomIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCustomId                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CustomId                                                       => _offCustomId.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	#endregion

	public FClientLinkCustomIDRequest(FString c_CustomId, byte/*(bool)*/ c_ForceLink) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCustomId.SetValue(c_CustomId);
		_offForceLink.SetValue(c_ForceLink);
	}
}
// ScriptStruct PlayFab.MultiplayerListBuildSummariesRequest
// 0x0018 (0x0020 - 0x0008)
public class FMultiplayerListBuildSummariesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListBuildSummariesRequest(int c_PageSize, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.AdminListOpenIdConnectionRequest
// 0x0000 (0x0008 - 0x0008)
public class FAdminListOpenIdConnectionRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminListOpenIdConnectionRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFacebookInstantGamesIds                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FacebookInstantGamesIds                                        => _offFacebookInstantGamesIds.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromFacebookInstantGamesIdsRequest(FString c_FacebookInstantGamesIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFacebookInstantGamesIds.SetValue(c_FacebookInstantGamesIds);
	}
}
// ScriptStruct PlayFab.AdminUpdateUserDataRequest
// 0x0030 (0x0038 - 0x0008)
public class FAdminUpdateUserDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeysToRemove                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EUserDataPermission>                _offPermission                                                 = new ExternalOffset<EUserDataPermission>(0x0020, false);      // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             KeysToRemove                                                   => _offKeysToRemove.GetValue();
	public EUserDataPermission                                 Permission                                                     => _offPermission.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminUpdateUserDataRequest(UPlayFabJsonObject c_Data, FString c_KeysToRemove, EUserDataPermission c_Permission, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offKeysToRemove.SetValue(c_KeysToRemove);
		_offPermission.SetValue(c_Permission);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientLinkFacebookAccountRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientLinkFacebookAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAccessToken                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AccessToken                                                    => _offAccessToken.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	#endregion

	public FClientLinkFacebookAccountRequest(FString c_AccessToken, byte/*(bool)*/ c_ForceLink) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAccessToken.SetValue(c_AccessToken);
		_offForceLink.SetValue(c_ForceLink);
	}
}
// ScriptStruct PlayFab.ClientMatchmakeResult
// 0x0078 (0x0080 - 0x0008)
public class FClientMatchmakeResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offExpires                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPollWaitTimeMS                                             = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV4Address                                          = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV6Address                                          = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offServerPort                                                 = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerPublicDNSName                                        = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EMatchmakeStatus>                   _offStatus                                                     = new ExternalOffset<EMatchmakeStatus>(0x0068, false);         // 0x0068(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicket                                                     = new ExternalOffset<FString>(0x0070, false);                  // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Expires                                                        => _offExpires.GetValue();
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public int                                                 PollWaitTimeMS                                                 => _offPollWaitTimeMS.GetValue();
	public FString                                             ServerIPV4Address                                              => _offServerIPV4Address.GetValue();
	public FString                                             ServerIPV6Address                                              => _offServerIPV6Address.GetValue();
	public int                                                 ServerPort                                                     => _offServerPort.GetValue();
	public FString                                             ServerPublicDNSName                                            => _offServerPublicDNSName.GetValue();
	public EMatchmakeStatus                                    Status                                                         => _offStatus.GetValue();
	public FString                                             Ticket                                                         => _offTicket.GetValue();
	#endregion

	public FClientMatchmakeResult(FString c_Expires, FString c_LobbyId, int c_PollWaitTimeMS, FString c_ServerIPV4Address, FString c_ServerIPV6Address, int c_ServerPort, FString c_ServerPublicDNSName, EMatchmakeStatus c_Status, FString c_Ticket) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offExpires.SetValue(c_Expires);
		_offLobbyId.SetValue(c_LobbyId);
		_offPollWaitTimeMS.SetValue(c_PollWaitTimeMS);
		_offServerIPV4Address.SetValue(c_ServerIPV4Address);
		_offServerIPV6Address.SetValue(c_ServerIPV6Address);
		_offServerPort.SetValue(c_ServerPort);
		_offServerPublicDNSName.SetValue(c_ServerPublicDNSName);
		_offStatus.SetValue(c_Status);
		_offTicket.SetValue(c_Ticket);
	}
}
// ScriptStruct PlayFab.GroupsListMembershipOpportunitiesResponse
// 0x0020 (0x0028 - 0x0008)
public class FGroupsListMembershipOpportunitiesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offApplications                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offInvitations                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Applications                                                   => _offApplications.GetValue();
	public TArray<UPlayFabJsonObject>                          Invitations                                                    => _offInvitations.GetValue();
	#endregion

	public FGroupsListMembershipOpportunitiesResponse(TArray<UPlayFabJsonObject> c_Applications, TArray<UPlayFabJsonObject> c_Invitations) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offApplications.SetValue(c_Applications);
		_offInvitations.SetValue(c_Invitations);
	}
}
// ScriptStruct PlayFab.AdminListBuildsRequest
// 0x0000 (0x0008 - 0x0008)
public class FAdminListBuildsRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminListBuildsRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromGenericIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromGenericIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGenericIDs                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          GenericIDs                                                     => _offGenericIDs.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromGenericIDsRequest(TArray<UPlayFabJsonObject> c_GenericIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGenericIDs.SetValue(c_GenericIDs);
	}
}
// ScriptStruct PlayFab.ClientLinkFacebookInstantGamesIdRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientLinkFacebookInstantGamesIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFacebookInstantGamesSignature                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FacebookInstantGamesSignature                                  => _offFacebookInstantGamesSignature.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	#endregion

	public FClientLinkFacebookInstantGamesIdRequest(FString c_FacebookInstantGamesSignature, byte/*(bool)*/ c_ForceLink) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFacebookInstantGamesSignature.SetValue(c_FacebookInstantGamesSignature);
		_offForceLink.SetValue(c_ForceLink);
	}
}
// ScriptStruct PlayFab.AdminListVirtualCurrencyTypesRequest
// 0x0000 (0x0008 - 0x0008)
public class FAdminListVirtualCurrencyTypesRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminListVirtualCurrencyTypesRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerListContainerImagesRequest
// 0x0018 (0x0020 - 0x0008)
public class FMultiplayerListContainerImagesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListContainerImagesRequest(int c_PageSize, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.AdminUpdateUserInternalDataRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminUpdateUserInternalDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeysToRemove                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             KeysToRemove                                                   => _offKeysToRemove.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminUpdateUserInternalDataRequest(UPlayFabJsonObject c_Data, FString c_KeysToRemove, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offKeysToRemove.SetValue(c_KeysToRemove);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offNintendoSwitchDeviceIds                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             NintendoSwitchDeviceIds                                        => _offNintendoSwitchDeviceIds.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest(FString c_NintendoSwitchDeviceIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNintendoSwitchDeviceIds.SetValue(c_NintendoSwitchDeviceIds);
	}
}
// ScriptStruct PlayFab.ClientOpenTradeResponse
// 0x0008 (0x0010 - 0x0008)
public class FClientOpenTradeResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offTrade                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Trade                                                          => _offTrade.GetValue();
	#endregion

	public FClientOpenTradeResponse(UPlayFabJsonObject c_Trade) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTrade.SetValue(c_Trade);
	}
}
// ScriptStruct PlayFab.ClientLinkGameCenterAccountRequest
// 0x0058 (0x0060 - 0x0008)
public class FClientLinkGameCenterAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGameCenterId                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPublicKeyUrl                                               = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSalt                                                       = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSignature                                                  = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             GameCenterId                                                   => _offGameCenterId.GetValue();
	public FString                                             PublicKeyUrl                                                   => _offPublicKeyUrl.GetValue();
	public FString                                             Salt                                                           => _offSalt.GetValue();
	public FString                                             Signature                                                      => _offSignature.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FClientLinkGameCenterAccountRequest(byte/*(bool)*/ c_ForceLink, FString c_GameCenterId, FString c_PublicKeyUrl, FString c_Salt, FString c_Signature, FString c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForceLink.SetValue(c_ForceLink);
		_offGameCenterId.SetValue(c_GameCenterId);
		_offPublicKeyUrl.SetValue(c_PublicKeyUrl);
		_offSalt.SetValue(c_Salt);
		_offSignature.SetValue(c_Signature);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct PlayFab.AdminModifyMatchmakerGameModesRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminModifyMatchmakerGameModesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildVersion                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameModes                                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildVersion                                                   => _offBuildVersion.GetValue();
	public TArray<UPlayFabJsonObject>                          GameModes                                                      => _offGameModes.GetValue();
	#endregion

	public FAdminModifyMatchmakerGameModesRequest(FString c_BuildVersion, TArray<UPlayFabJsonObject> c_GameModes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildVersion.SetValue(c_BuildVersion);
		_offGameModes.SetValue(c_GameModes);
	}
}
// ScriptStruct PlayFab.GroupsUpdateGroupResponse
// 0x0018 (0x0020 - 0x0008)
public class FGroupsUpdateGroupResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offOperationReason                                            = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EOperationTypes>                    _offSetResult                                                  = new ExternalOffset<EOperationTypes>(0x001C, false);          // 0x001C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OperationReason                                                => _offOperationReason.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	public EOperationTypes                                     SetResult                                                      => _offSetResult.GetValue();
	#endregion

	public FGroupsUpdateGroupResponse(FString c_OperationReason, int c_ProfileVersion, EOperationTypes c_SetResult) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOperationReason.SetValue(c_OperationReason);
		_offProfileVersion.SetValue(c_ProfileVersion);
		_offSetResult.SetValue(c_SetResult);
	}
}
// ScriptStruct PlayFab.MultiplayerListContainerImageTagsRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerListContainerImageTagsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offImageName                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ImageName                                                      => _offImageName.GetValue();
	#endregion

	public FMultiplayerListContainerImageTagsRequest(FString c_ImageName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offImageName.SetValue(c_ImageName);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromPSNAccountIDsRequest
// 0x0018 (0x0020 - 0x0008)
public class FServerGetPlayFabIDsFromPSNAccountIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offIssuerId                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPSNAccountIDs                                              = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 IssuerId                                                       => _offIssuerId.GetValue();
	public FString                                             PSNAccountIDs                                                  => _offPSNAccountIDs.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromPSNAccountIDsRequest(int c_IssuerId, FString c_PSNAccountIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIssuerId.SetValue(c_IssuerId);
		_offPSNAccountIDs.SetValue(c_PSNAccountIDs);
	}
}
// ScriptStruct PlayFab.ClientLinkGoogleAccountRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientLinkGoogleAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerAuthCode                                             = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             ServerAuthCode                                                 => _offServerAuthCode.GetValue();
	#endregion

	public FClientLinkGoogleAccountRequest(byte/*(bool)*/ c_ForceLink, FString c_ServerAuthCode) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForceLink.SetValue(c_ForceLink);
		_offServerAuthCode.SetValue(c_ServerAuthCode);
	}
}
// ScriptStruct PlayFab.MultiplayerListMatchmakingTicketsForPlayerRequest
// 0x0018 (0x0020 - 0x0008)
public class FMultiplayerListMatchmakingTicketsForPlayerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	#endregion

	public FMultiplayerListMatchmakingTicketsForPlayerRequest(UPlayFabJsonObject c_Entity, FString c_QueueName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offQueueName.SetValue(c_QueueName);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromSteamIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromSteamIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSteamStringIDs                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SteamStringIDs                                                 => _offSteamStringIDs.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromSteamIDsRequest(FString c_SteamStringIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSteamStringIDs.SetValue(c_SteamStringIDs);
	}
}
// ScriptStruct PlayFab.AdminModifyServerBuildRequest
// 0x0068 (0x0070 - 0x0008)
public class FAdminModifyServerBuildRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offActiveRegions                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCommandLineTemplate                                        = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offComment                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offExecutablePath                                             = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxGamesPerHost                                            = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMinFreeGameSlots                                           = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0060, false);                  // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ActiveRegions                                                  => _offActiveRegions.GetValue();
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             CommandLineTemplate                                            => _offCommandLineTemplate.GetValue();
	public FString                                             Comment                                                        => _offComment.GetValue();
	public FString                                             ExecutablePath                                                 => _offExecutablePath.GetValue();
	public int                                                 MaxGamesPerHost                                                => _offMaxGamesPerHost.GetValue();
	public int                                                 MinFreeGameSlots                                               => _offMinFreeGameSlots.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FAdminModifyServerBuildRequest(FString c_ActiveRegions, FString c_BuildId, FString c_CommandLineTemplate, FString c_Comment, FString c_ExecutablePath, int c_MaxGamesPerHost, int c_MinFreeGameSlots, FString c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActiveRegions.SetValue(c_ActiveRegions);
		_offBuildId.SetValue(c_BuildId);
		_offCommandLineTemplate.SetValue(c_CommandLineTemplate);
		_offComment.SetValue(c_Comment);
		_offExecutablePath.SetValue(c_ExecutablePath);
		_offMaxGamesPerHost.SetValue(c_MaxGamesPerHost);
		_offMinFreeGameSlots.SetValue(c_MinFreeGameSlots);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct PlayFab.AdminUpdateTaskRequest
// 0x0050 (0x0058 - 0x0008)
public class FAdminUpdateTaskRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDescription                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offIdentifier                                                 = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIsActive                                                   = new ExternalOffset<byte/*(bool)*/>(0x0020);                  // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offName                                                       = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offParameter                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSchedule                                                   = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EScheduledTaskType>                 _offType                                                       = new ExternalOffset<EScheduledTaskType>(0x0050, false);       // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Description                                                    => _offDescription.GetValue();
	public UPlayFabJsonObject                                  Identifier                                                     => _offIdentifier.GetValue();
	public byte/*(bool)*/                                      IsActive                                                       => _offIsActive.GetValue();
	public FString                                             Name                                                           => _offName.GetValue();
	public UPlayFabJsonObject                                  Parameter                                                      => _offParameter.GetValue();
	public FString                                             Schedule                                                       => _offSchedule.GetValue();
	public EScheduledTaskType                                  Type                                                           => _offType.GetValue();
	#endregion

	public FAdminUpdateTaskRequest(FString c_Description, UPlayFabJsonObject c_Identifier, byte/*(bool)*/ c_IsActive, FString c_Name, UPlayFabJsonObject c_Parameter, FString c_Schedule, EScheduledTaskType c_Type) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDescription.SetValue(c_Description);
		_offIdentifier.SetValue(c_Identifier);
		_offIsActive.SetValue(c_IsActive);
		_offName.SetValue(c_Name);
		_offParameter.SetValue(c_Parameter);
		_offSchedule.SetValue(c_Schedule);
		_offType.SetValue(c_Type);
	}
}
// ScriptStruct PlayFab.ClientPayForPurchaseResult
// 0x0070 (0x0078 - 0x0008)
public class FClientPayForPurchaseResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offCreditApplied                                              = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offProviderData                                               = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offProviderToken                                              = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPurchaseConfirmationPageURL                                = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPurchaseCurrency                                           = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPurchasePrice                                              = new ExternalOffset<int>(0x0060);                             // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ETransactionStatus>                 _offStatus                                                     = new ExternalOffset<ETransactionStatus>(0x0064, false);       // 0x0064(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVCAmount                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0068, true);        // 0x0068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrency                                            = new ExternalOffset<UPlayFabJsonObject>(0x0070, true);        // 0x0070(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 CreditApplied                                                  => _offCreditApplied.GetValue();
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	public FString                                             ProviderData                                                   => _offProviderData.GetValue();
	public FString                                             ProviderToken                                                  => _offProviderToken.GetValue();
	public FString                                             PurchaseConfirmationPageURL                                    => _offPurchaseConfirmationPageURL.GetValue();
	public FString                                             PurchaseCurrency                                               => _offPurchaseCurrency.GetValue();
	public int                                                 PurchasePrice                                                  => _offPurchasePrice.GetValue();
	public ETransactionStatus                                  Status                                                         => _offStatus.GetValue();
	public UPlayFabJsonObject                                  VCAmount                                                       => _offVCAmount.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FClientPayForPurchaseResult(int c_CreditApplied, FString c_OrderId, FString c_ProviderData, FString c_ProviderToken, FString c_PurchaseConfirmationPageURL, FString c_PurchaseCurrency, int c_PurchasePrice, ETransactionStatus c_Status, UPlayFabJsonObject c_VCAmount, UPlayFabJsonObject c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreditApplied.SetValue(c_CreditApplied);
		_offOrderId.SetValue(c_OrderId);
		_offProviderData.SetValue(c_ProviderData);
		_offProviderToken.SetValue(c_ProviderToken);
		_offPurchaseConfirmationPageURL.SetValue(c_PurchaseConfirmationPageURL);
		_offPurchaseCurrency.SetValue(c_PurchaseCurrency);
		_offPurchasePrice.SetValue(c_PurchasePrice);
		_offStatus.SetValue(c_Status);
		_offVCAmount.SetValue(c_VCAmount);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.ClientLinkIOSDeviceIDRequest
// 0x0038 (0x0040 - 0x0008)
public class FClientLinkIOSDeviceIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDeviceID                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDeviceModel                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOS                                                         = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DeviceID                                                       => _offDeviceID.GetValue();
	public FString                                             DeviceModel                                                    => _offDeviceModel.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             OS                                                             => _offOS.GetValue();
	#endregion

	public FClientLinkIOSDeviceIDRequest(FString c_DeviceID, FString c_DeviceModel, byte/*(bool)*/ c_ForceLink, FString c_OS) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDeviceID.SetValue(c_DeviceID);
		_offDeviceModel.SetValue(c_DeviceModel);
		_offForceLink.SetValue(c_ForceLink);
		_offOS.SetValue(c_OS);
	}
}
// ScriptStruct PlayFab.GroupsUpdateGroupRoleResponse
// 0x0018 (0x0020 - 0x0008)
public class FGroupsUpdateGroupRoleResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offOperationReason                                            = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EOperationTypes>                    _offSetResult                                                  = new ExternalOffset<EOperationTypes>(0x001C, false);          // 0x001C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OperationReason                                                => _offOperationReason.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	public EOperationTypes                                     SetResult                                                      => _offSetResult.GetValue();
	#endregion

	public FGroupsUpdateGroupRoleResponse(FString c_OperationReason, int c_ProfileVersion, EOperationTypes c_SetResult) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOperationReason.SetValue(c_OperationReason);
		_offProfileVersion.SetValue(c_ProfileVersion);
		_offSetResult.SetValue(c_SetResult);
	}
}
// ScriptStruct PlayFab.MultiplayerListPartyQosServersRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerListPartyQosServersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offVersion                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Version                                                        => _offVersion.GetValue();
	#endregion

	public FMultiplayerListPartyQosServersRequest(FString c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromXboxLiveIDsRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerGetPlayFabIDsFromXboxLiveIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSandbox                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxLiveAccountIDs                                         = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Sandbox                                                        => _offSandbox.GetValue();
	public FString                                             XboxLiveAccountIDs                                             => _offXboxLiveAccountIDs.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromXboxLiveIDsRequest(FString c_Sandbox, FString c_XboxLiveAccountIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSandbox.SetValue(c_Sandbox);
		_offXboxLiveAccountIDs.SetValue(c_XboxLiveAccountIDs);
	}
}
// ScriptStruct PlayFab.AdminRefundPurchaseRequest
// 0x0030 (0x0038 - 0x0008)
public class FAdminRefundPurchaseRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReason                                                     = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             Reason                                                         => _offReason.GetValue();
	#endregion

	public FAdminRefundPurchaseRequest(FString c_OrderId, FString c_PlayFabId, FString c_Reason) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOrderId.SetValue(c_OrderId);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offReason.SetValue(c_Reason);
	}
}
// ScriptStruct PlayFab.ClientLinkKongregateAccountRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientLinkKongregateAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAuthTicket                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKongregateId                                               = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AuthTicket                                                     => _offAuthTicket.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             KongregateId                                                   => _offKongregateId.GetValue();
	#endregion

	public FClientLinkKongregateAccountRequest(FString c_AuthTicket, byte/*(bool)*/ c_ForceLink, FString c_KongregateId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthTicket.SetValue(c_AuthTicket);
		_offForceLink.SetValue(c_ForceLink);
		_offKongregateId.SetValue(c_KongregateId);
	}
}
// ScriptStruct PlayFab.MultiplayerListQosServersRequest
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerListQosServersRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerListQosServersRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminRemovePlayerTagRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminRemovePlayerTagRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTagName                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             TagName                                                        => _offTagName.GetValue();
	#endregion

	public FAdminRemovePlayerTagRequest(FString c_PlayFabId, FString c_TagName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTagName.SetValue(c_TagName);
	}
}
// ScriptStruct PlayFab.ServerGetPublisherDataRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPublisherDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Keys                                                           => _offKeys.GetValue();
	#endregion

	public FServerGetPublisherDataRequest(FString c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct PlayFab.AdminUpdateStoreItemsRequest
// 0x0038 (0x0040 - 0x0008)
public class FAdminUpdateStoreItemsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMarketingData                                              = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStore                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0020, false); // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public UPlayFabJsonObject                                  MarketingData                                                  => _offMarketingData.GetValue();
	public TArray<UPlayFabJsonObject>                          Store                                                          => _offStore.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	#endregion

	public FAdminUpdateStoreItemsRequest(FString c_CatalogVersion, UPlayFabJsonObject c_MarketingData, TArray<UPlayFabJsonObject> c_Store, FString c_StoreId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offMarketingData.SetValue(c_MarketingData);
		_offStore.SetValue(c_Store);
		_offStoreId.SetValue(c_StoreId);
	}
}
// ScriptStruct PlayFab.ClientLinkNintendoSwitchDeviceIdRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientLinkNintendoSwitchDeviceIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNintendoSwitchDeviceId                                     = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             NintendoSwitchDeviceId                                         => _offNintendoSwitchDeviceId.GetValue();
	#endregion

	public FClientLinkNintendoSwitchDeviceIdRequest(byte/*(bool)*/ c_ForceLink, FString c_NintendoSwitchDeviceId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForceLink.SetValue(c_ForceLink);
		_offNintendoSwitchDeviceId.SetValue(c_NintendoSwitchDeviceId);
	}
}
// ScriptStruct PlayFab.MultiplayerListQosServersForTitleRequest
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerListQosServersForTitleRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerListQosServersForTitleRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminRemoveServerBuildRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminRemoveServerBuildRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	#endregion

	public FAdminRemoveServerBuildRequest(FString c_BuildId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
	}
}
// ScriptStruct PlayFab.GroupsDeleteRoleRequest
// 0x0018 (0x0020 - 0x0008)
public class FGroupsDeleteRoleRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleId                                                     = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public FString                                             RoleId                                                         => _offRoleId.GetValue();
	#endregion

	public FGroupsDeleteRoleRequest(UPlayFabJsonObject c_Group, FString c_RoleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
		_offRoleId.SetValue(c_RoleId);
	}
}
// ScriptStruct PlayFab.ServerGetRandomResultTablesRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerGetRandomResultTablesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTableIDs                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             TableIDs                                                       => _offTableIDs.GetValue();
	#endregion

	public FServerGetRandomResultTablesRequest(FString c_CatalogVersion, FString c_TableIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offTableIDs.SetValue(c_TableIDs);
	}
}
// ScriptStruct PlayFab.ClientPurchaseItemResult
// 0x0010 (0x0018 - 0x0008)
public class FClientPurchaseItemResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItems                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Items                                                          => _offItems.GetValue();
	#endregion

	public FClientPurchaseItemResult(TArray<UPlayFabJsonObject> c_Items) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItems.SetValue(c_Items);
	}
}
// ScriptStruct PlayFab.MultiplayerListServerBackfillTicketsForPlayerRequest
// 0x0018 (0x0020 - 0x0008)
public class FMultiplayerListServerBackfillTicketsForPlayerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	#endregion

	public FMultiplayerListServerBackfillTicketsForPlayerRequest(UPlayFabJsonObject c_Entity, FString c_QueueName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offQueueName.SetValue(c_QueueName);
	}
}
// ScriptStruct PlayFab.ClientLinkOpenIdConnectRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientLinkOpenIdConnectRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offConnectionId                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offIdToken                                                    = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ConnectionId                                                   => _offConnectionId.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             IdToken                                                        => _offIdToken.GetValue();
	#endregion

	public FClientLinkOpenIdConnectRequest(FString c_ConnectionId, byte/*(bool)*/ c_ForceLink, FString c_IdToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConnectionId.SetValue(c_ConnectionId);
		_offForceLink.SetValue(c_ForceLink);
		_offIdToken.SetValue(c_IdToken);
	}
}
// ScriptStruct PlayFab.ServerGetServerCustomIDsFromPlayFabIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetServerCustomIDsFromPlayFabIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabIds                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabIds                                                     => _offPlayFabIds.GetValue();
	#endregion

	public FServerGetServerCustomIDsFromPlayFabIDsRequest(FString c_PlayFabIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabIds.SetValue(c_PlayFabIds);
	}
}
// ScriptStruct PlayFab.AdminRemoveVirtualCurrencyTypesRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminRemoveVirtualCurrencyTypesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offVirtualCurrencies                                          = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          VirtualCurrencies                                              => _offVirtualCurrencies.GetValue();
	#endregion

	public FAdminRemoveVirtualCurrencyTypesRequest(TArray<UPlayFabJsonObject> c_VirtualCurrencies) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVirtualCurrencies.SetValue(c_VirtualCurrencies);
	}
}
// ScriptStruct PlayFab.AdminUpdateRandomResultTablesRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminUpdateRandomResultTablesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offTables                                                     = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public TArray<UPlayFabJsonObject>                          Tables                                                         => _offTables.GetValue();
	#endregion

	public FAdminUpdateRandomResultTablesRequest(FString c_CatalogVersion, TArray<UPlayFabJsonObject> c_Tables) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offTables.SetValue(c_Tables);
	}
}
// ScriptStruct PlayFab.GroupsGetGroupRequest
// 0x0018 (0x0020 - 0x0008)
public class FGroupsGetGroupRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGroupName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public FString                                             GroupName                                                      => _offGroupName.GetValue();
	#endregion

	public FGroupsGetGroupRequest(UPlayFabJsonObject c_Group, FString c_GroupName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
		_offGroupName.SetValue(c_GroupName);
	}
}
// ScriptStruct PlayFab.ClientRedeemCouponResult
// 0x0010 (0x0018 - 0x0008)
public class FClientRedeemCouponResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGrantedItems                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          GrantedItems                                                   => _offGrantedItems.GetValue();
	#endregion

	public FClientRedeemCouponResult(TArray<UPlayFabJsonObject> c_GrantedItems) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGrantedItems.SetValue(c_GrantedItems);
	}
}
// ScriptStruct PlayFab.MultiplayerListVirtualMachineSummariesRequest
// 0x0038 (0x0040 - 0x0008)
public class FMultiplayerListVirtualMachineSummariesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListVirtualMachineSummariesRequest(FString c_BuildId, int c_PageSize, FString c_Region, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offPageSize.SetValue(c_PageSize);
		_offRegion.SetValue(c_Region);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.AdminResetCharacterStatisticsRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminResetCharacterStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminResetCharacterStatisticsRequest(FString c_CharacterId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientLinkPSNAccountRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientLinkPSNAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAuthCode                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIssuerId                                                   = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRedirectUri                                                = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AuthCode                                                       => _offAuthCode.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public int                                                 IssuerId                                                       => _offIssuerId.GetValue();
	public FString                                             RedirectUri                                                    => _offRedirectUri.GetValue();
	#endregion

	public FClientLinkPSNAccountRequest(FString c_AuthCode, byte/*(bool)*/ c_ForceLink, int c_IssuerId, FString c_RedirectUri) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthCode.SetValue(c_AuthCode);
		_offForceLink.SetValue(c_ForceLink);
		_offIssuerId.SetValue(c_IssuerId);
		_offRedirectUri.SetValue(c_RedirectUri);
	}
}
// ScriptStruct PlayFab.ServerGetSharedGroupDataRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerGetSharedGroupDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offGetMembers                                                 = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      GetMembers                                                     => _offGetMembers.GetValue();
	public FString                                             Keys                                                           => _offKeys.GetValue();
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FServerGetSharedGroupDataRequest(byte/*(bool)*/ c_GetMembers, FString c_Keys, FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGetMembers.SetValue(c_GetMembers);
		_offKeys.SetValue(c_Keys);
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.ClientEmptyResponse
// 0x0000 (0x0008 - 0x0008)
public class FClientEmptyResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientEmptyResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminUpdatePolicyRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminUpdatePolicyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offOverwritePolicy                                            = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPolicyName                                                 = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatements                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0020, false); // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      OverwritePolicy                                                => _offOverwritePolicy.GetValue();
	public FString                                             PolicyName                                                     => _offPolicyName.GetValue();
	public TArray<UPlayFabJsonObject>                          Statements                                                     => _offStatements.GetValue();
	#endregion

	public FAdminUpdatePolicyRequest(byte/*(bool)*/ c_OverwritePolicy, FString c_PolicyName, TArray<UPlayFabJsonObject> c_Statements) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOverwritePolicy.SetValue(c_OverwritePolicy);
		_offPolicyName.SetValue(c_PolicyName);
		_offStatements.SetValue(c_Statements);
	}
}
// ScriptStruct PlayFab.GroupsInviteToGroupRequest
// 0x0028 (0x0030 - 0x0008)
public class FGroupsInviteToGroupRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offAutoAcceptOutstandingApplication                           = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleId                                                     = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      AutoAcceptOutstandingApplication                               => _offAutoAcceptOutstandingApplication.GetValue();
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public FString                                             RoleId                                                         => _offRoleId.GetValue();
	#endregion

	public FGroupsInviteToGroupRequest(byte/*(bool)*/ c_AutoAcceptOutstandingApplication, UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Group, FString c_RoleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAutoAcceptOutstandingApplication.SetValue(c_AutoAcceptOutstandingApplication);
		_offEntity.SetValue(c_Entity);
		_offGroup.SetValue(c_Group);
		_offRoleId.SetValue(c_RoleId);
	}
}
// ScriptStruct PlayFab.AdminResetPasswordRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminResetPasswordRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPassword                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offToken                                                      = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Password                                                       => _offPassword.GetValue();
	public FString                                             Token                                                          => _offToken.GetValue();
	#endregion

	public FAdminResetPasswordRequest(FString c_Password, FString c_Token) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPassword.SetValue(c_Password);
		_offToken.SetValue(c_Token);
	}
}
// ScriptStruct PlayFab.ClientRegisterForIOSPushNotificationResult
// 0x0000 (0x0008 - 0x0008)
public class FClientRegisterForIOSPushNotificationResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientRegisterForIOSPushNotificationResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientLinkSteamAccountRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientLinkSteamAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSteamTicket                                                = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             SteamTicket                                                    => _offSteamTicket.GetValue();
	#endregion

	public FClientLinkSteamAccountRequest(byte/*(bool)*/ c_ForceLink, FString c_SteamTicket) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForceLink.SetValue(c_ForceLink);
		_offSteamTicket.SetValue(c_SteamTicket);
	}
}
// ScriptStruct PlayFab.ServerGetStoreItemsServerRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerGetStoreItemsServerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	#endregion

	public FServerGetStoreItemsServerRequest(FString c_CatalogVersion, FString c_PlayFabId, FString c_StoreId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offStoreId.SetValue(c_StoreId);
	}
}
// ScriptStruct PlayFab.MultiplayerRequestMultiplayerServerRequest
// 0x0058 (0x0060 - 0x0008)
public class FMultiplayerRequestMultiplayerServerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offBuildAliasParams                                           = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offInitialPlayers                                             = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPreferredRegions                                           = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSessionCookie                                              = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSessionId                                                  = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  BuildAliasParams                                               => _offBuildAliasParams.GetValue();
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             InitialPlayers                                                 => _offInitialPlayers.GetValue();
	public FString                                             PreferredRegions                                               => _offPreferredRegions.GetValue();
	public FString                                             SessionCookie                                                  => _offSessionCookie.GetValue();
	public FString                                             SessionId                                                      => _offSessionId.GetValue();
	#endregion

	public FMultiplayerRequestMultiplayerServerRequest(UPlayFabJsonObject c_BuildAliasParams, FString c_BuildId, FString c_InitialPlayers, FString c_PreferredRegions, FString c_SessionCookie, FString c_SessionId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildAliasParams.SetValue(c_BuildAliasParams);
		_offBuildId.SetValue(c_BuildId);
		_offInitialPlayers.SetValue(c_InitialPlayers);
		_offPreferredRegions.SetValue(c_PreferredRegions);
		_offSessionCookie.SetValue(c_SessionCookie);
		_offSessionId.SetValue(c_SessionId);
	}
}
// ScriptStruct PlayFab.AdminResetUserStatisticsRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminResetUserStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminResetUserStatisticsRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.GroupsIsMemberRequest
// 0x0020 (0x0028 - 0x0008)
public class FGroupsIsMemberRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleId                                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public FString                                             RoleId                                                         => _offRoleId.GetValue();
	#endregion

	public FGroupsIsMemberRequest(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Group, FString c_RoleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offGroup.SetValue(c_Group);
		_offRoleId.SetValue(c_RoleId);
	}
}
// ScriptStruct PlayFab.MultiplayerRolloverContainerRegistryCredentialsRequest
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerRolloverContainerRegistryCredentialsRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerRolloverContainerRegistryCredentialsRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetTimeRequest
// 0x0000 (0x0008 - 0x0008)
public class FServerGetTimeRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerGetTimeRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientRegisterPlayFabUserResult
// 0x0040 (0x0048 - 0x0008)
public class FClientRegisterPlayFabUserResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntityToken                                                = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSessionTicket                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offSettingsForUser                                            = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  EntityToken                                                    => _offEntityToken.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             SessionTicket                                                  => _offSessionTicket.GetValue();
	public UPlayFabJsonObject                                  SettingsForUser                                                => _offSettingsForUser.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FClientRegisterPlayFabUserResult(UPlayFabJsonObject c_EntityToken, FString c_PlayFabId, FString c_SessionTicket, UPlayFabJsonObject c_SettingsForUser, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntityToken.SetValue(c_EntityToken);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offSessionTicket.SetValue(c_SessionTicket);
		_offSettingsForUser.SetValue(c_SettingsForUser);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ClientLinkTwitchAccountRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientLinkTwitchAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAccessToken                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AccessToken                                                    => _offAccessToken.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	#endregion

	public FClientLinkTwitchAccountRequest(FString c_AccessToken, byte/*(bool)*/ c_ForceLink) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAccessToken.SetValue(c_AccessToken);
		_offForceLink.SetValue(c_ForceLink);
	}
}
// ScriptStruct PlayFab.GroupsListGroupApplicationsRequest
// 0x0008 (0x0010 - 0x0008)
public class FGroupsListGroupApplicationsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsListGroupApplicationsRequest(UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.ClientRemoveContactEmailResult
// 0x0000 (0x0008 - 0x0008)
public class FClientRemoveContactEmailResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientRemoveContactEmailResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetTitleDataRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetTitleDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Keys                                                           => _offKeys.GetValue();
	#endregion

	public FServerGetTitleDataRequest(FString c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct PlayFab.GroupsListGroupBlocksRequest
// 0x0008 (0x0010 - 0x0008)
public class FGroupsListGroupBlocksRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsListGroupBlocksRequest(UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.ClientLinkWindowsHelloAccountRequest
// 0x0038 (0x0040 - 0x0008)
public class FClientLinkWindowsHelloAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDeviceName                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPublicKey                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DeviceName                                                     => _offDeviceName.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             PublicKey                                                      => _offPublicKey.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FClientLinkWindowsHelloAccountRequest(FString c_DeviceName, byte/*(bool)*/ c_ForceLink, FString c_PublicKey, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDeviceName.SetValue(c_DeviceName);
		_offForceLink.SetValue(c_ForceLink);
		_offPublicKey.SetValue(c_PublicKey);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.AdminResolvePurchaseDisputeRequest
// 0x0038 (0x0040 - 0x0008)
public class FAdminResolvePurchaseDisputeRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EResolutionOutcome>                 _offOutcome                                                    = new ExternalOffset<EResolutionOutcome>(0x0018, false);       // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReason                                                     = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	public EResolutionOutcome                                  Outcome                                                        => _offOutcome.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             Reason                                                         => _offReason.GetValue();
	#endregion

	public FAdminResolvePurchaseDisputeRequest(FString c_OrderId, EResolutionOutcome c_Outcome, FString c_PlayFabId, FString c_Reason) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOrderId.SetValue(c_OrderId);
		_offOutcome.SetValue(c_Outcome);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offReason.SetValue(c_Reason);
	}
}
// ScriptStruct PlayFab.ClientRemoveFriendResult
// 0x0000 (0x0008 - 0x0008)
public class FClientRemoveFriendResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientRemoveFriendResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerShutdownMultiplayerServerRequest
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerShutdownMultiplayerServerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSessionId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             SessionId                                                      => _offSessionId.GetValue();
	#endregion

	public FMultiplayerShutdownMultiplayerServerRequest(FString c_BuildId, FString c_Region, FString c_SessionId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offRegion.SetValue(c_Region);
		_offSessionId.SetValue(c_SessionId);
	}
}
// ScriptStruct PlayFab.ServerGetTitleNewsRequest
// 0x0008 (0x0010 - 0x0008)
public class FServerGetTitleNewsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offCount                                                      = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Count                                                          => _offCount.GetValue();
	#endregion

	public FServerGetTitleNewsRequest(int c_Count) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCount.SetValue(c_Count);
	}
}
// ScriptStruct PlayFab.AdminUpdatePlayerStatisticDefinitionRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminUpdatePlayerStatisticDefinitionRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<EStatisticAggregationMethod>        _offAggregationMethod                                          = new ExternalOffset<EStatisticAggregationMethod>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EStatisticResetIntervalOption>      _offVersionChangeInterval                                      = new ExternalOffset<EStatisticResetIntervalOption>(0x0020, false); // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public EStatisticAggregationMethod                         AggregationMethod                                              => _offAggregationMethod.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public EStatisticResetIntervalOption                       VersionChangeInterval                                          => _offVersionChangeInterval.GetValue();
	#endregion

	public FAdminUpdatePlayerStatisticDefinitionRequest(EStatisticAggregationMethod c_AggregationMethod, FString c_StatisticName, EStatisticResetIntervalOption c_VersionChangeInterval) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAggregationMethod.SetValue(c_AggregationMethod);
		_offStatisticName.SetValue(c_StatisticName);
		_offVersionChangeInterval.SetValue(c_VersionChangeInterval);
	}
}
// ScriptStruct PlayFab.ClientLinkXboxAccountRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientLinkXboxAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FClientLinkXboxAccountRequest(byte/*(bool)*/ c_ForceLink, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForceLink.SetValue(c_ForceLink);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.GroupsListGroupInvitationsRequest
// 0x0008 (0x0010 - 0x0008)
public class FGroupsListGroupInvitationsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsListGroupInvitationsRequest(UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.AdminRevokeAllBansForUserRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminRevokeAllBansForUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminRevokeAllBansForUserRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.MultiplayerUntagContainerImageRequest
// 0x0020 (0x0028 - 0x0008)
public class FMultiplayerUntagContainerImageRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offImageName                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTag                                                        = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ImageName                                                      => _offImageName.GetValue();
	public FString                                             Tag                                                            => _offTag.GetValue();
	#endregion

	public FMultiplayerUntagContainerImageRequest(FString c_ImageName, FString c_Tag) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offImageName.SetValue(c_ImageName);
		_offTag.SetValue(c_Tag);
	}
}
// ScriptStruct PlayFab.ServerGetUserAccountInfoRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetUserAccountInfoRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetUserAccountInfoRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientRemoveGenericIDResult
// 0x0000 (0x0008 - 0x0008)
public class FClientRemoveGenericIDResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientRemoveGenericIDResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminUpdatePlayerSharedSecretRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminUpdatePlayerSharedSecretRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offDisabled                                                   = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFriendlyName                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSecretKey                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      Disabled                                                       => _offDisabled.GetValue();
	public FString                                             FriendlyName                                                   => _offFriendlyName.GetValue();
	public FString                                             SecretKey                                                      => _offSecretKey.GetValue();
	#endregion

	public FAdminUpdatePlayerSharedSecretRequest(byte/*(bool)*/ c_Disabled, FString c_FriendlyName, FString c_SecretKey) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisabled.SetValue(c_Disabled);
		_offFriendlyName.SetValue(c_FriendlyName);
		_offSecretKey.SetValue(c_SecretKey);
	}
}
// ScriptStruct PlayFab.GroupsListGroupMembersRequest
// 0x0008 (0x0010 - 0x0008)
public class FGroupsListGroupMembersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsListGroupMembersRequest(UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.ServerGetUserBansRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetUserBansRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetUserBansRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientLoginWithAndroidDeviceIDRequest
// 0x0060 (0x0068 - 0x0008)
public class FClientLoginWithAndroidDeviceIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAndroidDevice                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offAndroidDeviceId                                            = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0040, true);        // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOS                                                         = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AndroidDevice                                                  => _offAndroidDevice.GetValue();
	public FString                                             AndroidDeviceId                                                => _offAndroidDeviceId.GetValue();
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             OS                                                             => _offOS.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientLoginWithAndroidDeviceIDRequest(FString c_AndroidDevice, FString c_AndroidDeviceId, byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_OS, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAndroidDevice.SetValue(c_AndroidDevice);
		_offAndroidDeviceId.SetValue(c_AndroidDeviceId);
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offOS.SetValue(c_OS);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.AdminRevokeBansRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminRevokeBansRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBanIds                                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BanIds                                                         => _offBanIds.GetValue();
	#endregion

	public FAdminRevokeBansRequest(FString c_BanIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanIds.SetValue(c_BanIds);
	}
}
// ScriptStruct PlayFab.MultiplayerUpdateBuildAliasRequest
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerUpdateBuildAliasRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAliasId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offAliasName                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBuildSelectionCriteria                                     = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0028, false); // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AliasId                                                        => _offAliasId.GetValue();
	public FString                                             AliasName                                                      => _offAliasName.GetValue();
	public TArray<UPlayFabJsonObject>                          BuildSelectionCriteria                                         => _offBuildSelectionCriteria.GetValue();
	#endregion

	public FMultiplayerUpdateBuildAliasRequest(FString c_AliasId, FString c_AliasName, TArray<UPlayFabJsonObject> c_BuildSelectionCriteria) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAliasId.SetValue(c_AliasId);
		_offAliasName.SetValue(c_AliasName);
		_offBuildSelectionCriteria.SetValue(c_BuildSelectionCriteria);
	}
}
// ScriptStruct PlayFab.ClientRemoveSharedGroupMembersResult
// 0x0000 (0x0008 - 0x0008)
public class FClientRemoveSharedGroupMembersResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientRemoveSharedGroupMembersResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsListMembershipRequest
// 0x0008 (0x0010 - 0x0008)
public class FGroupsListMembershipRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	#endregion

	public FGroupsListMembershipRequest(UPlayFabJsonObject c_Entity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
	}
}
// ScriptStruct PlayFab.AdminUpdateOpenIdConnectionRequest
// 0x0048 (0x0050 - 0x0008)
public class FAdminUpdateOpenIdConnectionRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offClientId                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offClientSecret                                               = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offConnectionId                                               = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offIssuerDiscoveryUrl                                         = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offIssuerInformation                                          = new ExternalOffset<UPlayFabJsonObject>(0x0048, true);        // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ClientId                                                       => _offClientId.GetValue();
	public FString                                             ClientSecret                                                   => _offClientSecret.GetValue();
	public FString                                             ConnectionId                                                   => _offConnectionId.GetValue();
	public FString                                             IssuerDiscoveryUrl                                             => _offIssuerDiscoveryUrl.GetValue();
	public UPlayFabJsonObject                                  IssuerInformation                                              => _offIssuerInformation.GetValue();
	#endregion

	public FAdminUpdateOpenIdConnectionRequest(FString c_ClientId, FString c_ClientSecret, FString c_ConnectionId, FString c_IssuerDiscoveryUrl, UPlayFabJsonObject c_IssuerInformation) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offClientId.SetValue(c_ClientId);
		_offClientSecret.SetValue(c_ClientSecret);
		_offConnectionId.SetValue(c_ConnectionId);
		_offIssuerDiscoveryUrl.SetValue(c_IssuerDiscoveryUrl);
		_offIssuerInformation.SetValue(c_IssuerInformation);
	}
}
// ScriptStruct PlayFab.ClientReportPlayerClientResult
// 0x0008 (0x0010 - 0x0008)
public class FClientReportPlayerClientResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offSubmissionsRemaining                                       = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 SubmissionsRemaining                                           => _offSubmissionsRemaining.GetValue();
	#endregion

	public FClientReportPlayerClientResult(int c_SubmissionsRemaining) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSubmissionsRemaining.SetValue(c_SubmissionsRemaining);
	}
}
// ScriptStruct PlayFab.AdminRevokeInventoryItemRequest
// 0x0030 (0x0038 - 0x0008)
public class FAdminRevokeInventoryItemRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminRevokeInventoryItemRequest(FString c_CharacterId, FString c_ItemInstanceId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ServerGetUserDataRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerGetUserDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offIfChangedFromDataVersion                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 IfChangedFromDataVersion                                       => _offIfChangedFromDataVersion.GetValue();
	public FString                                             Keys                                                           => _offKeys.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetUserDataRequest(int c_IfChangedFromDataVersion, FString c_Keys, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIfChangedFromDataVersion.SetValue(c_IfChangedFromDataVersion);
		_offKeys.SetValue(c_Keys);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientLoginWithCustomIDRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientLoginWithCustomIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCustomId                                                   = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             CustomId                                                       => _offCustomId.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientLoginWithCustomIDRequest(byte/*(bool)*/ c_CreateAccount, FString c_CustomId, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offCustomId.SetValue(c_CustomId);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.MultiplayerUpdateBuildRegionsRequest
// 0x0020 (0x0028 - 0x0008)
public class FMultiplayerUpdateBuildRegionsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBuildRegions                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public TArray<UPlayFabJsonObject>                          BuildRegions                                                   => _offBuildRegions.GetValue();
	#endregion

	public FMultiplayerUpdateBuildRegionsRequest(FString c_BuildId, TArray<UPlayFabJsonObject> c_BuildRegions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offBuildRegions.SetValue(c_BuildRegions);
	}
}
// ScriptStruct PlayFab.GroupsListMembershipOpportunitiesRequest
// 0x0008 (0x0010 - 0x0008)
public class FGroupsListMembershipOpportunitiesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	#endregion

	public FGroupsListMembershipOpportunitiesRequest(UPlayFabJsonObject c_Entity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
	}
}
// ScriptStruct PlayFab.ClientRestoreIOSPurchasesResult
// 0x0010 (0x0018 - 0x0008)
public class FClientRestoreIOSPurchasesResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offFulfillments                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Fulfillments                                                   => _offFulfillments.GetValue();
	#endregion

	public FClientRestoreIOSPurchasesResult(TArray<UPlayFabJsonObject> c_Fulfillments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFulfillments.SetValue(c_Fulfillments);
	}
}
// ScriptStruct PlayFab.ServerGetUserInventoryRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetUserInventoryRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetUserInventoryRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminUpdateCloudScriptRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminUpdateCloudScriptRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDeveloperPlayFabId                                         = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offFiles                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offPublish                                                    = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DeveloperPlayFabId                                             => _offDeveloperPlayFabId.GetValue();
	public TArray<UPlayFabJsonObject>                          Files                                                          => _offFiles.GetValue();
	public byte/*(bool)*/                                      Publish                                                        => _offPublish.GetValue();
	#endregion

	public FAdminUpdateCloudScriptRequest(FString c_DeveloperPlayFabId, TArray<UPlayFabJsonObject> c_Files, byte/*(bool)*/ c_Publish) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDeveloperPlayFabId.SetValue(c_DeveloperPlayFabId);
		_offFiles.SetValue(c_Files);
		_offPublish.SetValue(c_Publish);
	}
}
// ScriptStruct PlayFab.MultiplayerUploadCertificateRequest
// 0x0008 (0x0010 - 0x0008)
public class FMultiplayerUploadCertificateRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGameCertificate                                            = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  GameCertificate                                                => _offGameCertificate.GetValue();
	#endregion

	public FMultiplayerUploadCertificateRequest(UPlayFabJsonObject c_GameCertificate) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGameCertificate.SetValue(c_GameCertificate);
	}
}
// ScriptStruct PlayFab.ClientLoginWithEmailAddressRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientLoginWithEmailAddressRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEmail                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPassword                                                   = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Email                                                          => _offEmail.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             Password                                                       => _offPassword.GetValue();
	#endregion

	public FClientLoginWithEmailAddressRequest(FString c_Email, UPlayFabJsonObject c_InfoRequestParameters, FString c_Password) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmail.SetValue(c_Email);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPassword.SetValue(c_Password);
	}
}
// ScriptStruct PlayFab.GroupsRemoveGroupApplicationRequest
// 0x0010 (0x0018 - 0x0008)
public class FGroupsRemoveGroupApplicationRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsRemoveGroupApplicationRequest(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.AdminRunTaskRequest
// 0x0008 (0x0010 - 0x0008)
public class FAdminRunTaskRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offIdentifier                                                 = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Identifier                                                     => _offIdentifier.GetValue();
	#endregion

	public FAdminRunTaskRequest(UPlayFabJsonObject c_Identifier) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIdentifier.SetValue(c_Identifier);
	}
}
// ScriptStruct PlayFab.ClientSendAccountRecoveryEmailResult
// 0x0000 (0x0008 - 0x0008)
public class FClientSendAccountRecoveryEmailResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientSendAccountRecoveryEmailResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGrantCharacterToUserRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerGrantCharacterToUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterName                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterType                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterName                                                  => _offCharacterName.GetValue();
	public FString                                             CharacterType                                                  => _offCharacterType.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGrantCharacterToUserRequest(FString c_CharacterName, FString c_CharacterType, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterName.SetValue(c_CharacterName);
		_offCharacterType.SetValue(c_CharacterType);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ProfilesGetGlobalPolicyResponse
// 0x0010 (0x0018 - 0x0008)
public class FProfilesGetGlobalPolicyResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPermissions                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Permissions                                                    => _offPermissions.GetValue();
	#endregion

	public FProfilesGetGlobalPolicyResponse(TArray<UPlayFabJsonObject> c_Permissions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPermissions.SetValue(c_Permissions);
	}
}
// ScriptStruct PlayFab.ClientSetFriendTagsResult
// 0x0000 (0x0008 - 0x0008)
public class FClientSetFriendTagsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientSetFriendTagsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsRemoveGroupInvitationRequest
// 0x0010 (0x0018 - 0x0008)
public class FGroupsRemoveGroupInvitationRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsRemoveGroupInvitationRequest(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.ProfilesGetEntityProfileResponse
// 0x0008 (0x0010 - 0x0008)
public class FProfilesGetEntityProfileResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offProfile                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Profile                                                        => _offProfile.GetValue();
	#endregion

	public FProfilesGetEntityProfileResponse(UPlayFabJsonObject c_Profile) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offProfile.SetValue(c_Profile);
	}
}
// ScriptStruct PlayFab.AdminSendAccountRecoveryEmailRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminSendAccountRecoveryEmailRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEmail                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEmailTemplateId                                            = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Email                                                          => _offEmail.GetValue();
	public FString                                             EmailTemplateId                                                => _offEmailTemplateId.GetValue();
	#endregion

	public FAdminSendAccountRecoveryEmailRequest(FString c_Email, FString c_EmailTemplateId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmail.SetValue(c_Email);
		_offEmailTemplateId.SetValue(c_EmailTemplateId);
	}
}
// ScriptStruct PlayFab.ClientLoginWithFacebookRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientLoginWithFacebookRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAccessToken                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AccessToken                                                    => _offAccessToken.GetValue();
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientLoginWithFacebookRequest(FString c_AccessToken, byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAccessToken.SetValue(c_AccessToken);
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.ServerGrantItemsToCharacterRequest
// 0x0050 (0x0058 - 0x0008)
public class FServerGrantItemsToCharacterRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAnnotation                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemIds                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Annotation                                                     => _offAnnotation.GetValue();
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ItemIds                                                        => _offItemIds.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGrantItemsToCharacterRequest(FString c_Annotation, FString c_CatalogVersion, FString c_CharacterId, FString c_ItemIds, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAnnotation.SetValue(c_Annotation);
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offItemIds.SetValue(c_ItemIds);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientSetPlayerSecretResult
// 0x0000 (0x0008 - 0x0008)
public class FClientSetPlayerSecretResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientSetPlayerSecretResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminUpdateCatalogItemsRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminUpdateCatalogItemsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offCatalog                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offSetAsDefaultCatalog                                        = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Catalog                                                        => _offCatalog.GetValue();
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public byte/*(bool)*/                                      SetAsDefaultCatalog                                            => _offSetAsDefaultCatalog.GetValue();
	#endregion

	public FAdminUpdateCatalogItemsRequest(TArray<UPlayFabJsonObject> c_Catalog, FString c_CatalogVersion, byte/*(bool)*/ c_SetAsDefaultCatalog) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalog.SetValue(c_Catalog);
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offSetAsDefaultCatalog.SetValue(c_SetAsDefaultCatalog);
	}
}
// ScriptStruct PlayFab.ProfilesGetEntityProfilesResponse
// 0x0010 (0x0018 - 0x0008)
public class FProfilesGetEntityProfilesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offProfiles                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Profiles                                                       => _offProfiles.GetValue();
	#endregion

	public FProfilesGetEntityProfilesResponse(TArray<UPlayFabJsonObject> c_Profiles) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offProfiles.SetValue(c_Profiles);
	}
}
// ScriptStruct PlayFab.AdminSetPlayerSecretRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminSetPlayerSecretRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminSetPlayerSecretRequest(FString c_PlayerSecret, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.GroupsRemoveMembersRequest
// 0x0028 (0x0030 - 0x0008)
public class FGroupsRemoveMembersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembers                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleId                                                     = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public TArray<UPlayFabJsonObject>                          Members                                                        => _offMembers.GetValue();
	public FString                                             RoleId                                                         => _offRoleId.GetValue();
	#endregion

	public FGroupsRemoveMembersRequest(UPlayFabJsonObject c_Group, TArray<UPlayFabJsonObject> c_Members, FString c_RoleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
		_offMembers.SetValue(c_Members);
		_offRoleId.SetValue(c_RoleId);
	}
}
// ScriptStruct PlayFab.AdminSetPublishedRevisionRequest
// 0x0008 (0x0010 - 0x0008)
public class FAdminSetPublishedRevisionRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offRevision                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Revision                                                       => _offRevision.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FAdminSetPublishedRevisionRequest(int c_Revision, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRevision.SetValue(c_Revision);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.ClientLoginWithFacebookInstantGamesIdRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientLoginWithFacebookInstantGamesIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFacebookInstantGamesSignature                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public FString                                             FacebookInstantGamesSignature                                  => _offFacebookInstantGamesSignature.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientLoginWithFacebookInstantGamesIdRequest(byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, FString c_FacebookInstantGamesSignature, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offFacebookInstantGamesSignature.SetValue(c_FacebookInstantGamesSignature);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.ServerGrantItemsToUserRequest
// 0x0040 (0x0048 - 0x0008)
public class FServerGrantItemsToUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAnnotation                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemIds                                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Annotation                                                     => _offAnnotation.GetValue();
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             ItemIds                                                        => _offItemIds.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGrantItemsToUserRequest(FString c_Annotation, FString c_CatalogVersion, FString c_ItemIds, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAnnotation.SetValue(c_Annotation);
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offItemIds.SetValue(c_ItemIds);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminSetPublisherDataRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminSetPublisherDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKey                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offValue                                                      = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Key                                                            => _offKey.GetValue();
	public FString                                             Value                                                          => _offValue.GetValue();
	#endregion

	public FAdminSetPublisherDataRequest(FString c_Key, FString c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKey.SetValue(c_Key);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct PlayFab.ClientStartGameResult
// 0x0078 (0x0080 - 0x0008)
public class FClientStartGameResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offExpires                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPassword                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV4Address                                          = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV6Address                                          = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offServerPort                                                 = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerPublicDNSName                                        = new ExternalOffset<FString>(0x0060, false);                  // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicket                                                     = new ExternalOffset<FString>(0x0070, false);                  // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Expires                                                        => _offExpires.GetValue();
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public FString                                             Password                                                       => _offPassword.GetValue();
	public FString                                             ServerIPV4Address                                              => _offServerIPV4Address.GetValue();
	public FString                                             ServerIPV6Address                                              => _offServerIPV6Address.GetValue();
	public int                                                 ServerPort                                                     => _offServerPort.GetValue();
	public FString                                             ServerPublicDNSName                                            => _offServerPublicDNSName.GetValue();
	public FString                                             Ticket                                                         => _offTicket.GetValue();
	#endregion

	public FClientStartGameResult(FString c_Expires, FString c_LobbyId, FString c_Password, FString c_ServerIPV4Address, FString c_ServerIPV6Address, int c_ServerPort, FString c_ServerPublicDNSName, FString c_Ticket) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offExpires.SetValue(c_Expires);
		_offLobbyId.SetValue(c_LobbyId);
		_offPassword.SetValue(c_Password);
		_offServerIPV4Address.SetValue(c_ServerIPV4Address);
		_offServerIPV6Address.SetValue(c_ServerIPV6Address);
		_offServerPort.SetValue(c_ServerPort);
		_offServerPublicDNSName.SetValue(c_ServerPublicDNSName);
		_offTicket.SetValue(c_Ticket);
	}
}
// ScriptStruct PlayFab.AdminUpdateBansRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminUpdateBansRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBans                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Bans                                                           => _offBans.GetValue();
	#endregion

	public FAdminUpdateBansRequest(TArray<UPlayFabJsonObject> c_Bans) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBans.SetValue(c_Bans);
	}
}
// ScriptStruct PlayFab.GroupsUnblockEntityRequest
// 0x0010 (0x0018 - 0x0008)
public class FGroupsUnblockEntityRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsUnblockEntityRequest(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.ProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse
// 0x0018 (0x0020 - 0x0008)
public class FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTitleId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offTitlePlayerAccounts                                        = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TitleId                                                        => _offTitleId.GetValue();
	public UPlayFabJsonObject                                  TitlePlayerAccounts                                            => _offTitlePlayerAccounts.GetValue();
	#endregion

	public FProfilesGetTitlePlayersFromMasterPlayerAccountIdsResponse(FString c_TitleId, UPlayFabJsonObject c_TitlePlayerAccounts) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTitleId.SetValue(c_TitleId);
		_offTitlePlayerAccounts.SetValue(c_TitlePlayerAccounts);
	}
}
// ScriptStruct PlayFab.AdminSetTitleDataRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminSetTitleDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKey                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offValue                                                      = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Key                                                            => _offKey.GetValue();
	public FString                                             Value                                                          => _offValue.GetValue();
	#endregion

	public FAdminSetTitleDataRequest(FString c_Key, FString c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKey.SetValue(c_Key);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct PlayFab.ServerGrantItemsToUsersRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerGrantItemsToUsersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItemGrants                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public TArray<UPlayFabJsonObject>                          ItemGrants                                                     => _offItemGrants.GetValue();
	#endregion

	public FServerGrantItemsToUsersRequest(FString c_CatalogVersion, TArray<UPlayFabJsonObject> c_ItemGrants) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offItemGrants.SetValue(c_ItemGrants);
	}
}
// ScriptStruct PlayFab.ClientLoginWithGameCenterRequest
// 0x0080 (0x0088 - 0x0008)
public class FClientLoginWithGameCenterRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerId                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPublicKeyUrl                                               = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSalt                                                       = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSignature                                                  = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerId                                                       => _offPlayerId.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public FString                                             PublicKeyUrl                                                   => _offPublicKeyUrl.GetValue();
	public FString                                             Salt                                                           => _offSalt.GetValue();
	public FString                                             Signature                                                      => _offSignature.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FClientLoginWithGameCenterRequest(byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerId, FString c_PlayerSecret, FString c_PublicKeyUrl, FString c_Salt, FString c_Signature, FString c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerId.SetValue(c_PlayerId);
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offPublicKeyUrl.SetValue(c_PublicKeyUrl);
		_offSalt.SetValue(c_Salt);
		_offSignature.SetValue(c_Signature);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct PlayFab.ProfilesSetGlobalPolicyResponse
// 0x0000 (0x0008 - 0x0008)
public class FProfilesSetGlobalPolicyResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FProfilesSetGlobalPolicyResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminSubtractUserVirtualCurrencyRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminSubtractUserVirtualCurrencyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FAdminSubtractUserVirtualCurrencyRequest(int c_Amount, FString c_PlayFabId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.ClientStartPurchaseResult
// 0x0038 (0x0040 - 0x0008)
public class FClientStartPurchaseResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offContents                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPaymentOptions                                             = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0028, false); // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrencyBalances                                    = new ExternalOffset<UPlayFabJsonObject>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Contents                                                       => _offContents.GetValue();
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	public TArray<UPlayFabJsonObject>                          PaymentOptions                                                 => _offPaymentOptions.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrencyBalances                                        => _offVirtualCurrencyBalances.GetValue();
	#endregion

	public FClientStartPurchaseResult(TArray<UPlayFabJsonObject> c_Contents, FString c_OrderId, TArray<UPlayFabJsonObject> c_PaymentOptions, UPlayFabJsonObject c_VirtualCurrencyBalances) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContents.SetValue(c_Contents);
		_offOrderId.SetValue(c_OrderId);
		_offPaymentOptions.SetValue(c_PaymentOptions);
		_offVirtualCurrencyBalances.SetValue(c_VirtualCurrencyBalances);
	}
}
// ScriptStruct PlayFab.GroupsUpdateGroupRequest
// 0x0040 (0x0048 - 0x0008)
public class FGroupsUpdateGroupRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAdminRoleId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExpectedProfileVersion                                     = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGroupName                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMemberRoleId                                               = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AdminRoleId                                                    => _offAdminRoleId.GetValue();
	public int                                                 ExpectedProfileVersion                                         => _offExpectedProfileVersion.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public FString                                             GroupName                                                      => _offGroupName.GetValue();
	public FString                                             MemberRoleId                                                   => _offMemberRoleId.GetValue();
	#endregion

	public FGroupsUpdateGroupRequest(FString c_AdminRoleId, int c_ExpectedProfileVersion, UPlayFabJsonObject c_Group, FString c_GroupName, FString c_MemberRoleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAdminRoleId.SetValue(c_AdminRoleId);
		_offExpectedProfileVersion.SetValue(c_ExpectedProfileVersion);
		_offGroup.SetValue(c_Group);
		_offGroupName.SetValue(c_GroupName);
		_offMemberRoleId.SetValue(c_MemberRoleId);
	}
}
// ScriptStruct PlayFab.ClientUnlinkAndroidDeviceIDResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkAndroidDeviceIDResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkAndroidDeviceIDResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerLinkPSNAccountRequest
// 0x0038 (0x0040 - 0x0008)
public class FServerLinkPSNAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAuthCode                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIssuerId                                                   = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRedirectUri                                                = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AuthCode                                                       => _offAuthCode.GetValue();
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public int                                                 IssuerId                                                       => _offIssuerId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             RedirectUri                                                    => _offRedirectUri.GetValue();
	#endregion

	public FServerLinkPSNAccountRequest(FString c_AuthCode, byte/*(bool)*/ c_ForceLink, int c_IssuerId, FString c_PlayFabId, FString c_RedirectUri) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthCode.SetValue(c_AuthCode);
		_offForceLink.SetValue(c_ForceLink);
		_offIssuerId.SetValue(c_IssuerId);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offRedirectUri.SetValue(c_RedirectUri);
	}
}
// ScriptStruct PlayFab.AdminSetupPushNotificationRequest
// 0x0038 (0x0040 - 0x0008)
public class FAdminSetupPushNotificationRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCredential                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKey                                                        = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offName                                                       = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offOverwriteOldARN                                            = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EPushSetupPlatform>                 _offPlatform                                                   = new ExternalOffset<EPushSetupPlatform>(0x0039, false);       // 0x0039(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Credential                                                     => _offCredential.GetValue();
	public FString                                             Key                                                            => _offKey.GetValue();
	public FString                                             Name                                                           => _offName.GetValue();
	public byte/*(bool)*/                                      OverwriteOldARN                                                => _offOverwriteOldARN.GetValue();
	public EPushSetupPlatform                                  Platform                                                       => _offPlatform.GetValue();
	#endregion

	public FAdminSetupPushNotificationRequest(FString c_Credential, FString c_Key, FString c_Name, byte/*(bool)*/ c_OverwriteOldARN, EPushSetupPlatform c_Platform) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCredential.SetValue(c_Credential);
		_offKey.SetValue(c_Key);
		_offName.SetValue(c_Name);
		_offOverwriteOldARN.SetValue(c_OverwriteOldARN);
		_offPlatform.SetValue(c_Platform);
	}
}
// ScriptStruct PlayFab.ClientLoginWithGoogleAccountRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientLoginWithGoogleAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerAuthCode                                             = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public FString                                             ServerAuthCode                                                 => _offServerAuthCode.GetValue();
	#endregion

	public FClientLoginWithGoogleAccountRequest(byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret, FString c_ServerAuthCode) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offServerAuthCode.SetValue(c_ServerAuthCode);
	}
}
// ScriptStruct PlayFab.ProfilesSetProfileLanguageResponse
// 0x0008 (0x0010 - 0x0008)
public class FProfilesSetProfileLanguageResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<EOperationTypes>                    _offOperationResult                                            = new ExternalOffset<EOperationTypes>(0x0008, false);          // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersionNumber                                              = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public EOperationTypes                                     OperationResult                                                => _offOperationResult.GetValue();
	public int                                                 VersionNumber                                                  => _offVersionNumber.GetValue();
	#endregion

	public FProfilesSetProfileLanguageResponse(EOperationTypes c_OperationResult, int c_VersionNumber) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOperationResult.SetValue(c_OperationResult);
		_offVersionNumber.SetValue(c_VersionNumber);
	}
}
// ScriptStruct PlayFab.ClientUnlinkCustomIDResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkCustomIDResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkCustomIDResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerLinkServerCustomIdRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerLinkServerCustomIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerCustomId                                             = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             ServerCustomId                                                 => _offServerCustomId.GetValue();
	#endregion

	public FServerLinkServerCustomIdRequest(byte/*(bool)*/ c_ForceLink, FString c_PlayFabId, FString c_ServerCustomId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForceLink.SetValue(c_ForceLink);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offServerCustomId.SetValue(c_ServerCustomId);
	}
}
// ScriptStruct PlayFab.GroupsUpdateGroupRoleRequest
// 0x0030 (0x0038 - 0x0008)
public class FGroupsUpdateGroupRoleRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offExpectedProfileVersion                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleId                                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleName                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 ExpectedProfileVersion                                         => _offExpectedProfileVersion.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public FString                                             RoleId                                                         => _offRoleId.GetValue();
	public FString                                             RoleName                                                       => _offRoleName.GetValue();
	#endregion

	public FGroupsUpdateGroupRoleRequest(int c_ExpectedProfileVersion, UPlayFabJsonObject c_Group, FString c_RoleId, FString c_RoleName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offExpectedProfileVersion.SetValue(c_ExpectedProfileVersion);
		_offGroup.SetValue(c_Group);
		_offRoleId.SetValue(c_RoleId);
		_offRoleName.SetValue(c_RoleName);
	}
}
// ScriptStruct PlayFab.ClientUnlinkFacebookAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkFacebookAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkFacebookAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerLinkXboxAccountRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerLinkXboxAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offForceLink                                                  = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      ForceLink                                                      => _offForceLink.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FServerLinkXboxAccountRequest(byte/*(bool)*/ c_ForceLink, FString c_PlayFabId, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForceLink.SetValue(c_ForceLink);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.LocalizationGetLanguageListResponse
// 0x0010 (0x0018 - 0x0008)
public class FLocalizationGetLanguageListResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLanguageList                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LanguageList                                                   => _offLanguageList.GetValue();
	#endregion

	public FLocalizationGetLanguageListResponse(FString c_LanguageList) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLanguageList.SetValue(c_LanguageList);
	}
}
// ScriptStruct PlayFab.ClientUnlinkFacebookInstantGamesIdResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkFacebookInstantGamesIdResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkFacebookInstantGamesIdResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ProfilesSetEntityProfilePolicyResponse
// 0x0010 (0x0018 - 0x0008)
public class FProfilesSetEntityProfilePolicyResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPermissions                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Permissions                                                    => _offPermissions.GetValue();
	#endregion

	public FProfilesSetEntityProfilePolicyResponse(TArray<UPlayFabJsonObject> c_Permissions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPermissions.SetValue(c_Permissions);
	}
}
// ScriptStruct PlayFab.ClientLoginWithIOSDeviceIDRequest
// 0x0060 (0x0068 - 0x0008)
public class FClientLoginWithIOSDeviceIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDeviceID                                                   = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDeviceModel                                                = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0040, true);        // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOS                                                         = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             DeviceID                                                       => _offDeviceID.GetValue();
	public FString                                             DeviceModel                                                    => _offDeviceModel.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             OS                                                             => _offOS.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientLoginWithIOSDeviceIDRequest(byte/*(bool)*/ c_CreateAccount, FString c_DeviceID, FString c_DeviceModel, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_OS, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offDeviceID.SetValue(c_DeviceID);
		_offDeviceModel.SetValue(c_DeviceModel);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offOS.SetValue(c_OS);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.AuthenticationGetEntityTokenResponse
// 0x0028 (0x0030 - 0x0008)
public class FAuthenticationGetEntityTokenResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEntityToken                                                = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTokenExpiration                                            = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             EntityToken                                                    => _offEntityToken.GetValue();
	public FString                                             TokenExpiration                                                => _offTokenExpiration.GetValue();
	#endregion

	public FAuthenticationGetEntityTokenResponse(UPlayFabJsonObject c_Entity, FString c_EntityToken, FString c_TokenExpiration) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offEntityToken.SetValue(c_EntityToken);
		_offTokenExpiration.SetValue(c_TokenExpiration);
	}
}
// ScriptStruct PlayFab.ClientUnlinkGameCenterAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkGameCenterAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkGameCenterAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ProfilesGetGlobalPolicyRequest
// 0x0000 (0x0008 - 0x0008)
public class FProfilesGetGlobalPolicyRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FProfilesGetGlobalPolicyRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.LocalizationGetLanguageListRequest
// 0x0000 (0x0008 - 0x0008)
public class FLocalizationGetLanguageListRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FLocalizationGetLanguageListRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientUnlinkGoogleAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkGoogleAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkGoogleAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerLoginWithServerCustomIdRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerLoginWithServerCustomIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerCustomId                                             = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public FString                                             ServerCustomId                                                 => _offServerCustomId.GetValue();
	#endregion

	public FServerLoginWithServerCustomIdRequest(byte/*(bool)*/ c_CreateAccount, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret, FString c_ServerCustomId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offServerCustomId.SetValue(c_ServerCustomId);
	}
}
// ScriptStruct PlayFab.ClientUnlinkIOSDeviceIDResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkIOSDeviceIDResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkIOSDeviceIDResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ProfilesGetEntityProfileRequest
// 0x0010 (0x0018 - 0x0008)
public class FProfilesGetEntityProfileRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offDataAsObject                                               = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      DataAsObject                                                   => _offDataAsObject.GetValue();
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	#endregion

	public FProfilesGetEntityProfileRequest(byte/*(bool)*/ c_DataAsObject, UPlayFabJsonObject c_Entity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataAsObject.SetValue(c_DataAsObject);
		_offEntity.SetValue(c_Entity);
	}
}
// ScriptStruct PlayFab.AuthenticationValidateEntityTokenResponse
// 0x0018 (0x0020 - 0x0008)
public class FAuthenticationValidateEntityTokenResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ELoginIdentityProvider>             _offIdentityProvider                                           = new ExternalOffset<ELoginIdentityProvider>(0x0010, false);   // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offLineage                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public ELoginIdentityProvider                              IdentityProvider                                               => _offIdentityProvider.GetValue();
	public UPlayFabJsonObject                                  Lineage                                                        => _offLineage.GetValue();
	#endregion

	public FAuthenticationValidateEntityTokenResponse(UPlayFabJsonObject c_Entity, ELoginIdentityProvider c_IdentityProvider, UPlayFabJsonObject c_Lineage) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offIdentityProvider.SetValue(c_IdentityProvider);
		_offLineage.SetValue(c_Lineage);
	}
}
// ScriptStruct PlayFab.ClientLoginWithKongregateRequest
// 0x0050 (0x0058 - 0x0008)
public class FClientLoginWithKongregateRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAuthTicket                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKongregateId                                               = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AuthTicket                                                     => _offAuthTicket.GetValue();
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             KongregateId                                                   => _offKongregateId.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientLoginWithKongregateRequest(FString c_AuthTicket, byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_KongregateId, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthTicket.SetValue(c_AuthTicket);
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offKongregateId.SetValue(c_KongregateId);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.ClientUnlinkKongregateAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkKongregateAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkKongregateAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MatchmakerAuthUserResponse
// 0x0018 (0x0020 - 0x0008)
public class FMatchmakerAuthUserResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offAuthorized                                                 = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      Authorized                                                     => _offAuthorized.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FMatchmakerAuthUserResponse(byte/*(bool)*/ c_Authorized, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthorized.SetValue(c_Authorized);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ServerLoginWithXboxRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerLoginWithXboxRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FServerLoginWithXboxRequest(byte/*(bool)*/ c_CreateAccount, UPlayFabJsonObject c_InfoRequestParameters, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.ClientUnlinkNintendoSwitchDeviceIdResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkNintendoSwitchDeviceIdResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkNintendoSwitchDeviceIdResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ProfilesGetEntityProfilesRequest
// 0x0018 (0x0020 - 0x0008)
public class FProfilesGetEntityProfilesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offDataAsObject                                               = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offEntities                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      DataAsObject                                                   => _offDataAsObject.GetValue();
	public TArray<UPlayFabJsonObject>                          Entities                                                       => _offEntities.GetValue();
	#endregion

	public FProfilesGetEntityProfilesRequest(byte/*(bool)*/ c_DataAsObject, TArray<UPlayFabJsonObject> c_Entities) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataAsObject.SetValue(c_DataAsObject);
		_offEntities.SetValue(c_Entities);
	}
}
// ScriptStruct PlayFab.ClientUnlinkPSNAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkPSNAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkPSNAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientLoginWithNintendoSwitchDeviceIdRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientLoginWithNintendoSwitchDeviceIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNintendoSwitchDeviceId                                     = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             NintendoSwitchDeviceId                                         => _offNintendoSwitchDeviceId.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientLoginWithNintendoSwitchDeviceIdRequest(byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_NintendoSwitchDeviceId, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offNintendoSwitchDeviceId.SetValue(c_NintendoSwitchDeviceId);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.MatchmakerAuthUserRequest
// 0x0010 (0x0018 - 0x0008)
public class FMatchmakerAuthUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAuthorizationTicket                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AuthorizationTicket                                            => _offAuthorizationTicket.GetValue();
	#endregion

	public FMatchmakerAuthUserRequest(FString c_AuthorizationTicket) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthorizationTicket.SetValue(c_AuthorizationTicket);
	}
}
// ScriptStruct PlayFab.ServerLoginWithXboxIdRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerLoginWithXboxIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSandbox                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxId                                                     = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             Sandbox                                                        => _offSandbox.GetValue();
	public FString                                             XboxId                                                         => _offXboxId.GetValue();
	#endregion

	public FServerLoginWithXboxIdRequest(byte/*(bool)*/ c_CreateAccount, UPlayFabJsonObject c_InfoRequestParameters, FString c_Sandbox, FString c_XboxId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offSandbox.SetValue(c_Sandbox);
		_offXboxId.SetValue(c_XboxId);
	}
}
// ScriptStruct PlayFab.ClientUnlinkSteamAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkSteamAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkSteamAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AuthenticationGetEntityTokenRequest
// 0x0008 (0x0010 - 0x0008)
public class FAuthenticationGetEntityTokenRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	#endregion

	public FAuthenticationGetEntityTokenRequest(UPlayFabJsonObject c_Entity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
	}
}
// ScriptStruct PlayFab.MatchmakerPlayerJoinedResponse
// 0x0000 (0x0008 - 0x0008)
public class FMatchmakerPlayerJoinedResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMatchmakerPlayerJoinedResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientUnlinkTwitchAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkTwitchAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkTwitchAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerModifyItemUsesRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerModifyItemUsesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offUsesToAdd                                                  = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public int                                                 UsesToAdd                                                      => _offUsesToAdd.GetValue();
	#endregion

	public FServerModifyItemUsesRequest(FString c_ItemInstanceId, FString c_PlayFabId, int c_UsesToAdd) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offUsesToAdd.SetValue(c_UsesToAdd);
	}
}
// ScriptStruct PlayFab.ClientLoginWithOpenIdConnectRequest
// 0x0050 (0x0058 - 0x0008)
public class FClientLoginWithOpenIdConnectRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offConnectionId                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offIdToken                                                    = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0040, true);        // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ConnectionId                                                   => _offConnectionId.GetValue();
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public FString                                             IdToken                                                        => _offIdToken.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientLoginWithOpenIdConnectRequest(FString c_ConnectionId, byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, FString c_IdToken, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConnectionId.SetValue(c_ConnectionId);
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offIdToken.SetValue(c_IdToken);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.ProfilesSetGlobalPolicyRequest
// 0x0010 (0x0018 - 0x0008)
public class FProfilesSetGlobalPolicyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPermissions                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Permissions                                                    => _offPermissions.GetValue();
	#endregion

	public FProfilesSetGlobalPolicyRequest(TArray<UPlayFabJsonObject> c_Permissions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPermissions.SetValue(c_Permissions);
	}
}
// ScriptStruct PlayFab.AuthenticationValidateEntityTokenRequest
// 0x0010 (0x0018 - 0x0008)
public class FAuthenticationValidateEntityTokenRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEntityToken                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             EntityToken                                                    => _offEntityToken.GetValue();
	#endregion

	public FAuthenticationValidateEntityTokenRequest(FString c_EntityToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntityToken.SetValue(c_EntityToken);
	}
}
// ScriptStruct PlayFab.ClientUnlinkWindowsHelloAccountResponse
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkWindowsHelloAccountResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkWindowsHelloAccountResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MatchmakerPlayerLeftResponse
// 0x0000 (0x0008 - 0x0008)
public class FMatchmakerPlayerLeftResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMatchmakerPlayerLeftResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.PlayFabError
// 0x0038
public class FPlayFabError : ExternalClass
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offHasError                                                   = new ExternalOffset<byte/*(bool)*/>(0x0000);                  // 0x0000(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offErrorCode                                                  = new ExternalOffset<int>(0x0004);                             // 0x0004(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offErrorName                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offerrorMessage                                               = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offErrorDetails                                               = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      HasError                                                       => _offHasError.GetValue();
	public int                                                 ErrorCode                                                      => _offErrorCode.GetValue();
	public FString                                             ErrorName                                                      => _offErrorName.GetValue();
	public FString                                             errorMessage                                                   => _offerrorMessage.GetValue();
	public FString                                             ErrorDetails                                                   => _offErrorDetails.GetValue();
	#endregion

	public FPlayFabError(byte/*(bool)*/ c_HasError, int c_ErrorCode, FString c_ErrorName, FString c_errorMessage, FString c_ErrorDetails) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offHasError.SetValue(c_HasError);
		_offErrorCode.SetValue(c_ErrorCode);
		_offErrorName.SetValue(c_ErrorName);
		_offerrorMessage.SetValue(c_errorMessage);
		_offErrorDetails.SetValue(c_ErrorDetails);
	}
}
// ScriptStruct PlayFab.ServerMoveItemToCharacterFromCharacterRequest
// 0x0040 (0x0048 - 0x0008)
public class FServerMoveItemToCharacterFromCharacterRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offGivingCharacterId                                          = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReceivingCharacterId                                       = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             GivingCharacterId                                              => _offGivingCharacterId.GetValue();
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             ReceivingCharacterId                                           => _offReceivingCharacterId.GetValue();
	#endregion

	public FServerMoveItemToCharacterFromCharacterRequest(FString c_GivingCharacterId, FString c_ItemInstanceId, FString c_PlayFabId, FString c_ReceivingCharacterId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGivingCharacterId.SetValue(c_GivingCharacterId);
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offReceivingCharacterId.SetValue(c_ReceivingCharacterId);
	}
}
// ScriptStruct PlayFab.ClientLoginWithPlayFabRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientLoginWithPlayFabRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPassword                                                   = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             Password                                                       => _offPassword.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FClientLoginWithPlayFabRequest(UPlayFabJsonObject c_InfoRequestParameters, FString c_Password, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPassword.SetValue(c_Password);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ClientUnlinkXboxAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkXboxAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkXboxAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.PlayFabBaseModel
// 0x0040
public class FPlayFabBaseModel : ExternalClass
{
	#region Offsets
	private ExternalOffset<FPlayFabError>                      _offresponseError                                              = new ExternalOffset<FPlayFabError>(0x0000, false);            // 0x0000(0x0038) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offresponseData                                               = new ExternalOffset<UPlayFabJsonObject>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPlayFabError                                       responseError                                                  => _offresponseError.GetValue();
	public UPlayFabJsonObject                                  responseData                                                   => _offresponseData.GetValue();
	#endregion

	public FPlayFabBaseModel(FPlayFabError c_responseError, UPlayFabJsonObject c_responseData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offresponseError.SetValue(c_responseError);
		_offresponseData.SetValue(c_responseData);
	}
}
// ScriptStruct PlayFab.ProfilesSetProfileLanguageRequest
// 0x0020 (0x0028 - 0x0008)
public class FProfilesSetProfileLanguageRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExpectedVersion                                            = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLanguage                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public int                                                 ExpectedVersion                                                => _offExpectedVersion.GetValue();
	public FString                                             Language                                                       => _offLanguage.GetValue();
	#endregion

	public FProfilesSetProfileLanguageRequest(UPlayFabJsonObject c_Entity, int c_ExpectedVersion, FString c_Language) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offExpectedVersion.SetValue(c_ExpectedVersion);
		_offLanguage.SetValue(c_Language);
	}
}
// ScriptStruct PlayFab.ClientAcceptTradeResponse
// 0x0008 (0x0010 - 0x0008)
public class FClientAcceptTradeResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offTrade                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Trade                                                          => _offTrade.GetValue();
	#endregion

	public FClientAcceptTradeResponse(UPlayFabJsonObject c_Trade) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTrade.SetValue(c_Trade);
	}
}
// ScriptStruct PlayFab.ServerMoveItemToCharacterFromUserRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerMoveItemToCharacterFromUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerMoveItemToCharacterFromUserRequest(FString c_CharacterId, FString c_ItemInstanceId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.MatchmakerStartGameResponse
// 0x0048 (0x0050 - 0x0008)
public class FMatchmakerStartGameResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offGameID                                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV4Address                                          = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV6Address                                          = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offServerPort                                                 = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerPublicDNSName                                        = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             GameID                                                         => _offGameID.GetValue();
	public FString                                             ServerIPV4Address                                              => _offServerIPV4Address.GetValue();
	public FString                                             ServerIPV6Address                                              => _offServerIPV6Address.GetValue();
	public int                                                 ServerPort                                                     => _offServerPort.GetValue();
	public FString                                             ServerPublicDNSName                                            => _offServerPublicDNSName.GetValue();
	#endregion

	public FMatchmakerStartGameResponse(FString c_GameID, FString c_ServerIPV4Address, FString c_ServerIPV6Address, int c_ServerPort, FString c_ServerPublicDNSName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGameID.SetValue(c_GameID);
		_offServerIPV4Address.SetValue(c_ServerIPV4Address);
		_offServerIPV6Address.SetValue(c_ServerIPV6Address);
		_offServerPort.SetValue(c_ServerPort);
		_offServerPublicDNSName.SetValue(c_ServerPublicDNSName);
	}
}
// ScriptStruct PlayFab.ProfilesSetEntityProfilePolicyRequest
// 0x0018 (0x0020 - 0x0008)
public class FProfilesSetEntityProfilePolicyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatements                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public TArray<UPlayFabJsonObject>                          Statements                                                     => _offStatements.GetValue();
	#endregion

	public FProfilesSetEntityProfilePolicyRequest(UPlayFabJsonObject c_Entity, TArray<UPlayFabJsonObject> c_Statements) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offStatements.SetValue(c_Statements);
	}
}
// ScriptStruct PlayFab.ClientUnlockContainerItemResult
// 0x0038 (0x0040 - 0x0008)
public class FClientUnlockContainerItemResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGrantedItems                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offUnlockedItemInstanceId                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offUnlockedWithItemInstanceId                                 = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrency                                            = new ExternalOffset<UPlayFabJsonObject>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          GrantedItems                                                   => _offGrantedItems.GetValue();
	public FString                                             UnlockedItemInstanceId                                         => _offUnlockedItemInstanceId.GetValue();
	public FString                                             UnlockedWithItemInstanceId                                     => _offUnlockedWithItemInstanceId.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FClientUnlockContainerItemResult(TArray<UPlayFabJsonObject> c_GrantedItems, FString c_UnlockedItemInstanceId, FString c_UnlockedWithItemInstanceId, UPlayFabJsonObject c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGrantedItems.SetValue(c_GrantedItems);
		_offUnlockedItemInstanceId.SetValue(c_UnlockedItemInstanceId);
		_offUnlockedWithItemInstanceId.SetValue(c_UnlockedWithItemInstanceId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.ServerMoveItemToUserFromCharacterRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerMoveItemToUserFromCharacterRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerMoveItemToUserFromCharacterRequest(FString c_CharacterId, FString c_ItemInstanceId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientUpdateCharacterDataResult
// 0x0008 (0x0010 - 0x0008)
public class FClientUpdateCharacterDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	#endregion

	public FClientUpdateCharacterDataResult(int c_DataVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataVersion.SetValue(c_DataVersion);
	}
}
// ScriptStruct PlayFab.ServerModifyCharacterVirtualCurrencyResult
// 0x0018 (0x0020 - 0x0008)
public class FServerModifyCharacterVirtualCurrencyResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offBalance                                                    = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Balance                                                        => _offBalance.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FServerModifyCharacterVirtualCurrencyResult(int c_Balance, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBalance.SetValue(c_Balance);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.ClientLoginWithPSNRequest
// 0x0058 (0x0060 - 0x0008)
public class FClientLoginWithPSNRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAuthCode                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIssuerId                                                   = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRedirectUri                                                = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AuthCode                                                       => _offAuthCode.GetValue();
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public int                                                 IssuerId                                                       => _offIssuerId.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public FString                                             RedirectUri                                                    => _offRedirectUri.GetValue();
	#endregion

	public FClientLoginWithPSNRequest(FString c_AuthCode, byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, int c_IssuerId, FString c_PlayerSecret, FString c_RedirectUri) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthCode.SetValue(c_AuthCode);
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offIssuerId.SetValue(c_IssuerId);
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offRedirectUri.SetValue(c_RedirectUri);
	}
}
// ScriptStruct PlayFab.ClientUpdateCharacterStatisticsResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUpdateCharacterStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUpdateCharacterStatisticsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientAddFriendResult
// 0x0008 (0x0010 - 0x0008)
public class FClientAddFriendResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreated                                                    = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      Created                                                        => _offCreated.GetValue();
	#endregion

	public FClientAddFriendResult(byte/*(bool)*/ c_Created) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreated.SetValue(c_Created);
	}
}
// ScriptStruct PlayFab.ServerNotifyMatchmakerPlayerLeftRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerNotifyMatchmakerPlayerLeftRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerNotifyMatchmakerPlayerLeftRequest(FString c_LobbyId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientUpdatePlayerStatisticsResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUpdatePlayerStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUpdatePlayerStatisticsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerAddCharacterVirtualCurrencyRequest
// 0x0038 (0x0040 - 0x0008)
public class FServerAddCharacterVirtualCurrencyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FServerAddCharacterVirtualCurrencyRequest(int c_Amount, FString c_CharacterId, FString c_PlayFabId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
		_offCharacterId.SetValue(c_CharacterId);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.MatchmakerUserInfoResponse
// 0x0068 (0x0070 - 0x0008)
public class FMatchmakerUserInfoResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offInventory                                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIsDeveloper                                                = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSteamId                                                    = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitleDisplayName                                           = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrency                                            = new ExternalOffset<UPlayFabJsonObject>(0x0060, true);        // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrencyRechargeTimes                               = new ExternalOffset<UPlayFabJsonObject>(0x0068, true);        // 0x0068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Inventory                                                      => _offInventory.GetValue();
	public byte/*(bool)*/                                      IsDeveloper                                                    => _offIsDeveloper.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             SteamId                                                        => _offSteamId.GetValue();
	public FString                                             TitleDisplayName                                               => _offTitleDisplayName.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrencyRechargeTimes                                   => _offVirtualCurrencyRechargeTimes.GetValue();
	#endregion

	public FMatchmakerUserInfoResponse(TArray<UPlayFabJsonObject> c_Inventory, byte/*(bool)*/ c_IsDeveloper, FString c_PlayFabId, FString c_SteamId, FString c_TitleDisplayName, FString c_username, UPlayFabJsonObject c_VirtualCurrency, UPlayFabJsonObject c_VirtualCurrencyRechargeTimes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInventory.SetValue(c_Inventory);
		_offIsDeveloper.SetValue(c_IsDeveloper);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offSteamId.SetValue(c_SteamId);
		_offTitleDisplayName.SetValue(c_TitleDisplayName);
		_offusername.SetValue(c_username);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
		_offVirtualCurrencyRechargeTimes.SetValue(c_VirtualCurrencyRechargeTimes);
	}
}
// ScriptStruct PlayFab.ServerRedeemCouponRequest
// 0x0040 (0x0048 - 0x0008)
public class FServerRedeemCouponRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCouponCode                                                 = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             CouponCode                                                     => _offCouponCode.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerRedeemCouponRequest(FString c_CatalogVersion, FString c_CharacterId, FString c_CouponCode, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offCouponCode.SetValue(c_CouponCode);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientAddFriendRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientAddFriendRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFriendEmail                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFriendPlayFabId                                            = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFriendTitleDisplayName                                     = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFriendUsername                                             = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FriendEmail                                                    => _offFriendEmail.GetValue();
	public FString                                             FriendPlayFabId                                                => _offFriendPlayFabId.GetValue();
	public FString                                             FriendTitleDisplayName                                         => _offFriendTitleDisplayName.GetValue();
	public FString                                             FriendUsername                                                 => _offFriendUsername.GetValue();
	#endregion

	public FClientAddFriendRequest(FString c_FriendEmail, FString c_FriendPlayFabId, FString c_FriendTitleDisplayName, FString c_FriendUsername) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFriendEmail.SetValue(c_FriendEmail);
		_offFriendPlayFabId.SetValue(c_FriendPlayFabId);
		_offFriendTitleDisplayName.SetValue(c_FriendTitleDisplayName);
		_offFriendUsername.SetValue(c_FriendUsername);
	}
}
// ScriptStruct PlayFab.ClientUpdateSharedGroupDataResult
// 0x0000 (0x0008 - 0x0008)
public class FClientUpdateSharedGroupDataResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUpdateSharedGroupDataResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerEmptyResponse
// 0x0000 (0x0008 - 0x0008)
public class FServerEmptyResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerEmptyResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientAddGenericIDResult
// 0x0000 (0x0008 - 0x0008)
public class FClientAddGenericIDResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientAddGenericIDResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerRedeemMatchmakerTicketRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerRedeemMatchmakerTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicket                                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public FString                                             Ticket                                                         => _offTicket.GetValue();
	#endregion

	public FServerRedeemMatchmakerTicketRequest(FString c_LobbyId, FString c_Ticket) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
		_offTicket.SetValue(c_Ticket);
	}
}
// ScriptStruct PlayFab.MatchmakerPlayerJoinedRequest
// 0x0020 (0x0028 - 0x0008)
public class FMatchmakerPlayerJoinedRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FMatchmakerPlayerJoinedRequest(FString c_LobbyId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientUpdateUserDataResult
// 0x0008 (0x0010 - 0x0008)
public class FClientUpdateUserDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	#endregion

	public FClientUpdateUserDataResult(int c_DataVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataVersion.SetValue(c_DataVersion);
	}
}
// ScriptStruct PlayFab.ClientLoginWithSteamRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientLoginWithSteamRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSteamTicket                                                = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public FString                                             SteamTicket                                                    => _offSteamTicket.GetValue();
	#endregion

	public FClientLoginWithSteamRequest(byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret, FString c_SteamTicket) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offSteamTicket.SetValue(c_SteamTicket);
	}
}
// ScriptStruct PlayFab.ServerRefreshGameServerInstanceHeartbeatRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerRefreshGameServerInstanceHeartbeatRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	#endregion

	public FServerRefreshGameServerInstanceHeartbeatRequest(FString c_LobbyId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
	}
}
// ScriptStruct PlayFab.ClientAddGenericIDRequest
// 0x0008 (0x0010 - 0x0008)
public class FClientAddGenericIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGenericId                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  GenericId                                                      => _offGenericId.GetValue();
	#endregion

	public FClientAddGenericIDRequest(UPlayFabJsonObject c_GenericId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGenericId.SetValue(c_GenericId);
	}
}
// ScriptStruct PlayFab.ClientUpdateUserTitleDisplayNameResult
// 0x0010 (0x0018 - 0x0008)
public class FClientUpdateUserTitleDisplayNameResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDisplayName                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DisplayName                                                    => _offDisplayName.GetValue();
	#endregion

	public FClientUpdateUserTitleDisplayNameResult(FString c_DisplayName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisplayName.SetValue(c_DisplayName);
	}
}
// ScriptStruct PlayFab.ServerAddFriendRequest
// 0x0050 (0x0058 - 0x0008)
public class FServerAddFriendRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFriendEmail                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFriendPlayFabId                                            = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFriendTitleDisplayName                                     = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFriendUsername                                             = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FriendEmail                                                    => _offFriendEmail.GetValue();
	public FString                                             FriendPlayFabId                                                => _offFriendPlayFabId.GetValue();
	public FString                                             FriendTitleDisplayName                                         => _offFriendTitleDisplayName.GetValue();
	public FString                                             FriendUsername                                                 => _offFriendUsername.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerAddFriendRequest(FString c_FriendEmail, FString c_FriendPlayFabId, FString c_FriendTitleDisplayName, FString c_FriendUsername, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFriendEmail.SetValue(c_FriendEmail);
		_offFriendPlayFabId.SetValue(c_FriendPlayFabId);
		_offFriendTitleDisplayName.SetValue(c_FriendTitleDisplayName);
		_offFriendUsername.SetValue(c_FriendUsername);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.MatchmakerPlayerLeftRequest
// 0x0020 (0x0028 - 0x0008)
public class FMatchmakerPlayerLeftRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FMatchmakerPlayerLeftRequest(FString c_LobbyId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientAddOrUpdateContactEmailResult
// 0x0000 (0x0008 - 0x0008)
public class FClientAddOrUpdateContactEmailResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientAddOrUpdateContactEmailResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerEmptyResult
// 0x0000 (0x0008 - 0x0008)
public class FServerEmptyResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerEmptyResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientLoginWithTwitchRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientLoginWithTwitchRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAccessToken                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AccessToken                                                    => _offAccessToken.GetValue();
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientLoginWithTwitchRequest(FString c_AccessToken, byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAccessToken.SetValue(c_AccessToken);
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.ClientValidateAmazonReceiptResult
// 0x0010 (0x0018 - 0x0008)
public class FClientValidateAmazonReceiptResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offFulfillments                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Fulfillments                                                   => _offFulfillments.GetValue();
	#endregion

	public FClientValidateAmazonReceiptResult(TArray<UPlayFabJsonObject> c_Fulfillments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFulfillments.SetValue(c_Fulfillments);
	}
}
// ScriptStruct PlayFab.ClientAddOrUpdateContactEmailRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientAddOrUpdateContactEmailRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEmailAddress                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             EmailAddress                                                   => _offEmailAddress.GetValue();
	#endregion

	public FClientAddOrUpdateContactEmailRequest(FString c_EmailAddress) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmailAddress.SetValue(c_EmailAddress);
	}
}
// ScriptStruct PlayFab.ServerAddGenericIDRequest
// 0x0018 (0x0020 - 0x0008)
public class FServerAddGenericIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGenericId                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  GenericId                                                      => _offGenericId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerAddGenericIDRequest(UPlayFabJsonObject c_GenericId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGenericId.SetValue(c_GenericId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ServerRegisterGameRequest
// 0x0080 (0x0088 - 0x0008)
public class FServerRegisterGameRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuild                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGameMode                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERegion>                            _offRegion                                                     = new ExternalOffset<ERegion>(0x0038, false);                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV4Address                                          = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV6Address                                          = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerPort                                                 = new ExternalOffset<FString>(0x0060, false);                  // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerPublicDNSName                                        = new ExternalOffset<FString>(0x0070, false);                  // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offTags                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0080, true);        // 0x0080(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Build                                                          => _offBuild.GetValue();
	public FString                                             GameMode                                                       => _offGameMode.GetValue();
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public ERegion                                             Region                                                         => _offRegion.GetValue();
	public FString                                             ServerIPV4Address                                              => _offServerIPV4Address.GetValue();
	public FString                                             ServerIPV6Address                                              => _offServerIPV6Address.GetValue();
	public FString                                             ServerPort                                                     => _offServerPort.GetValue();
	public FString                                             ServerPublicDNSName                                            => _offServerPublicDNSName.GetValue();
	public UPlayFabJsonObject                                  Tags                                                           => _offTags.GetValue();
	#endregion

	public FServerRegisterGameRequest(FString c_Build, FString c_GameMode, FString c_LobbyId, ERegion c_Region, FString c_ServerIPV4Address, FString c_ServerIPV6Address, FString c_ServerPort, FString c_ServerPublicDNSName, UPlayFabJsonObject c_Tags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuild.SetValue(c_Build);
		_offGameMode.SetValue(c_GameMode);
		_offLobbyId.SetValue(c_LobbyId);
		_offRegion.SetValue(c_Region);
		_offServerIPV4Address.SetValue(c_ServerIPV4Address);
		_offServerIPV6Address.SetValue(c_ServerIPV6Address);
		_offServerPort.SetValue(c_ServerPort);
		_offServerPublicDNSName.SetValue(c_ServerPublicDNSName);
		_offTags.SetValue(c_Tags);
	}
}
// ScriptStruct PlayFab.ClientAddSharedGroupMembersResult
// 0x0000 (0x0008 - 0x0008)
public class FClientAddSharedGroupMembersResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientAddSharedGroupMembersResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientValidateGooglePlayPurchaseResult
// 0x0010 (0x0018 - 0x0008)
public class FClientValidateGooglePlayPurchaseResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offFulfillments                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Fulfillments                                                   => _offFulfillments.GetValue();
	#endregion

	public FClientValidateGooglePlayPurchaseResult(TArray<UPlayFabJsonObject> c_Fulfillments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFulfillments.SetValue(c_Fulfillments);
	}
}
// ScriptStruct PlayFab.ClientLoginWithWindowsHelloRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientLoginWithWindowsHelloRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offChallengeSignature                                         = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPublicKeyHint                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ChallengeSignature                                             => _offChallengeSignature.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PublicKeyHint                                                  => _offPublicKeyHint.GetValue();
	#endregion

	public FClientLoginWithWindowsHelloRequest(FString c_ChallengeSignature, UPlayFabJsonObject c_InfoRequestParameters, FString c_PublicKeyHint) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offChallengeSignature.SetValue(c_ChallengeSignature);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPublicKeyHint.SetValue(c_PublicKeyHint);
	}
}
// ScriptStruct PlayFab.ServerAddPlayerTagResult
// 0x0000 (0x0008 - 0x0008)
public class FServerAddPlayerTagResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerAddPlayerTagResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MatchmakerStartGameRequest
// 0x0048 (0x0050 - 0x0008)
public class FMatchmakerStartGameRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuild                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCustomCommandLineData                                      = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offExternalMatchmakerEventEndpoint                            = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGameMode                                                   = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERegion>                            _offRegion                                                     = new ExternalOffset<ERegion>(0x0048, false);                  // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Build                                                          => _offBuild.GetValue();
	public FString                                             CustomCommandLineData                                          => _offCustomCommandLineData.GetValue();
	public FString                                             ExternalMatchmakerEventEndpoint                                => _offExternalMatchmakerEventEndpoint.GetValue();
	public FString                                             GameMode                                                       => _offGameMode.GetValue();
	public ERegion                                             Region                                                         => _offRegion.GetValue();
	#endregion

	public FMatchmakerStartGameRequest(FString c_Build, FString c_CustomCommandLineData, FString c_ExternalMatchmakerEventEndpoint, FString c_GameMode, ERegion c_Region) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuild.SetValue(c_Build);
		_offCustomCommandLineData.SetValue(c_CustomCommandLineData);
		_offExternalMatchmakerEventEndpoint.SetValue(c_ExternalMatchmakerEventEndpoint);
		_offGameMode.SetValue(c_GameMode);
		_offRegion.SetValue(c_Region);
	}
}
// ScriptStruct PlayFab.ServerRemoveFriendRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerRemoveFriendRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFriendPlayFabId                                            = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FriendPlayFabId                                                => _offFriendPlayFabId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerRemoveFriendRequest(FString c_FriendPlayFabId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFriendPlayFabId.SetValue(c_FriendPlayFabId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientAddSharedGroupMembersRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientAddSharedGroupMembersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabIds                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabIds                                                     => _offPlayFabIds.GetValue();
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FClientAddSharedGroupMembersRequest(FString c_PlayFabIds, FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabIds.SetValue(c_PlayFabIds);
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.ServerAddPlayerTagRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerAddPlayerTagRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTagName                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             TagName                                                        => _offTagName.GetValue();
	#endregion

	public FServerAddPlayerTagRequest(FString c_PlayFabId, FString c_TagName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTagName.SetValue(c_TagName);
	}
}
// ScriptStruct PlayFab.ServerAddSharedGroupMembersResult
// 0x0000 (0x0008 - 0x0008)
public class FServerAddSharedGroupMembersResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerAddSharedGroupMembersResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MatchmakerUserInfoRequest
// 0x0018 (0x0020 - 0x0008)
public class FMatchmakerUserInfoRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offMinCatalogVersion                                          = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MinCatalogVersion                                              => _offMinCatalogVersion.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FMatchmakerUserInfoRequest(int c_MinCatalogVersion, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMinCatalogVersion.SetValue(c_MinCatalogVersion);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientAddUsernamePasswordResult
// 0x0010 (0x0018 - 0x0008)
public class FClientAddUsernamePasswordResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FClientAddUsernamePasswordResult(FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ServerRemoveGenericIDRequest
// 0x0018 (0x0020 - 0x0008)
public class FServerRemoveGenericIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGenericId                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  GenericId                                                      => _offGenericId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerRemoveGenericIDRequest(UPlayFabJsonObject c_GenericId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGenericId.SetValue(c_GenericId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientLoginWithXboxRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientLoginWithXboxRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offCreateAccount                                              = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      CreateAccount                                                  => _offCreateAccount.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FClientLoginWithXboxRequest(byte/*(bool)*/ c_CreateAccount, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreateAccount.SetValue(c_CreateAccount);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.ServerAddSharedGroupMembersRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerAddSharedGroupMembersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabIds                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabIds                                                     => _offPlayFabIds.GetValue();
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FServerAddSharedGroupMembersRequest(FString c_PlayFabIds, FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabIds.SetValue(c_PlayFabIds);
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.ClientAddUsernamePasswordRequest
// 0x0030 (0x0038 - 0x0008)
public class FClientAddUsernamePasswordRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEmail                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPassword                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Email                                                          => _offEmail.GetValue();
	public FString                                             Password                                                       => _offPassword.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FClientAddUsernamePasswordRequest(FString c_Email, FString c_Password, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmail.SetValue(c_Email);
		_offPassword.SetValue(c_Password);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.MultiplayerCancelAllMatchmakingTicketsForPlayerResult
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerCancelAllMatchmakingTicketsForPlayerResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerCancelAllMatchmakingTicketsForPlayerResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientValidateWindowsReceiptResult
// 0x0010 (0x0018 - 0x0008)
public class FClientValidateWindowsReceiptResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offFulfillments                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Fulfillments                                                   => _offFulfillments.GetValue();
	#endregion

	public FClientValidateWindowsReceiptResult(TArray<UPlayFabJsonObject> c_Fulfillments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFulfillments.SetValue(c_Fulfillments);
	}
}
// ScriptStruct PlayFab.ServerRemovePlayerTagRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerRemovePlayerTagRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTagName                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             TagName                                                        => _offTagName.GetValue();
	#endregion

	public FServerRemovePlayerTagRequest(FString c_PlayFabId, FString c_TagName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTagName.SetValue(c_TagName);
	}
}
// ScriptStruct PlayFab.ClientModifyUserVirtualCurrencyResult
// 0x0028 (0x0030 - 0x0008)
public class FClientModifyUserVirtualCurrencyResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offBalance                                                    = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offBalanceChange                                              = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Balance                                                        => _offBalance.GetValue();
	public int                                                 BalanceChange                                                  => _offBalanceChange.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FClientModifyUserVirtualCurrencyResult(int c_Balance, int c_BalanceChange, FString c_PlayFabId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBalance.SetValue(c_Balance);
		_offBalanceChange.SetValue(c_BalanceChange);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.MultiplayerCancelAllMatchmakingTicketsForPlayerRequest
// 0x0018 (0x0020 - 0x0008)
public class FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	#endregion

	public FMultiplayerCancelAllMatchmakingTicketsForPlayerRequest(UPlayFabJsonObject c_Entity, FString c_QueueName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offQueueName.SetValue(c_QueueName);
	}
}
// ScriptStruct PlayFab.ServerModifyUserVirtualCurrencyResult
// 0x0028 (0x0030 - 0x0008)
public class FServerModifyUserVirtualCurrencyResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offBalance                                                    = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offBalanceChange                                              = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Balance                                                        => _offBalance.GetValue();
	public int                                                 BalanceChange                                                  => _offBalanceChange.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FServerModifyUserVirtualCurrencyResult(int c_Balance, int c_BalanceChange, FString c_PlayFabId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBalance.SetValue(c_Balance);
		_offBalanceChange.SetValue(c_BalanceChange);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.ClientWriteEventResponse
// 0x0010 (0x0018 - 0x0008)
public class FClientWriteEventResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEventId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             EventId                                                        => _offEventId.GetValue();
	#endregion

	public FClientWriteEventResponse(FString c_EventId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEventId.SetValue(c_EventId);
	}
}
// ScriptStruct PlayFab.ServerRemoveSharedGroupMembersRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerRemoveSharedGroupMembersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabIds                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabIds                                                     => _offPlayFabIds.GetValue();
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FServerRemoveSharedGroupMembersRequest(FString c_PlayFabIds, FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabIds.SetValue(c_PlayFabIds);
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.ClientMatchmakeRequest
// 0x0060 (0x0068 - 0x0008)
public class FClientMatchmakeRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildVersion                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGameMode                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERegion>                            _offRegion                                                     = new ExternalOffset<ERegion>(0x0048, false);                  // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offStartNewIfNoneFound                                        = new ExternalOffset<byte/*(bool)*/>(0x0049);                  // 0x0049(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offTagFilter                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0060, true);        // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildVersion                                                   => _offBuildVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             GameMode                                                       => _offGameMode.GetValue();
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public ERegion                                             Region                                                         => _offRegion.GetValue();
	public byte/*(bool)*/                                      StartNewIfNoneFound                                            => _offStartNewIfNoneFound.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public UPlayFabJsonObject                                  TagFilter                                                      => _offTagFilter.GetValue();
	#endregion

	public FClientMatchmakeRequest(FString c_BuildVersion, FString c_CharacterId, FString c_GameMode, FString c_LobbyId, ERegion c_Region, byte/*(bool)*/ c_StartNewIfNoneFound, FString c_StatisticName, UPlayFabJsonObject c_TagFilter) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildVersion.SetValue(c_BuildVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offGameMode.SetValue(c_GameMode);
		_offLobbyId.SetValue(c_LobbyId);
		_offRegion.SetValue(c_Region);
		_offStartNewIfNoneFound.SetValue(c_StartNewIfNoneFound);
		_offStatisticName.SetValue(c_StatisticName);
		_offTagFilter.SetValue(c_TagFilter);
	}
}
// ScriptStruct PlayFab.ClientAddUserVirtualCurrencyRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientAddUserVirtualCurrencyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FClientAddUserVirtualCurrencyRequest(int c_Amount, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.ServerAddUserVirtualCurrencyRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerAddUserVirtualCurrencyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FServerAddUserVirtualCurrencyRequest(int c_Amount, FString c_PlayFabId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.MultiplayerCancelAllServerBackfillTicketsForPlayerResult
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerCancelAllServerBackfillTicketsForPlayerResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerCancelAllServerBackfillTicketsForPlayerResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientAndroidDevicePushNotificationRegistrationResult
// 0x0000 (0x0008 - 0x0008)
public class FClientAndroidDevicePushNotificationRegistrationResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientAndroidDevicePushNotificationRegistrationResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerReportPlayerServerRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerReportPlayerServerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offComment                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReporteeId                                                 = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReporterId                                                 = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Comment                                                        => _offComment.GetValue();
	public FString                                             ReporteeId                                                     => _offReporteeId.GetValue();
	public FString                                             ReporterId                                                     => _offReporterId.GetValue();
	#endregion

	public FServerReportPlayerServerRequest(FString c_Comment, FString c_ReporteeId, FString c_ReporterId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offComment.SetValue(c_Comment);
		_offReporteeId.SetValue(c_ReporteeId);
		_offReporterId.SetValue(c_ReporterId);
	}
}
// ScriptStruct PlayFab.ServerAuthenticateSessionTicketResult
// 0x0008 (0x0010 - 0x0008)
public class FServerAuthenticateSessionTicketResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offUserInfo                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  UserInfo                                                       => _offUserInfo.GetValue();
	#endregion

	public FServerAuthenticateSessionTicketResult(UPlayFabJsonObject c_UserInfo) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offUserInfo.SetValue(c_UserInfo);
	}
}
// ScriptStruct PlayFab.MultiplayerCancelAllServerBackfillTicketsForPlayerRequest
// 0x0018 (0x0020 - 0x0008)
public class FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	#endregion

	public FMultiplayerCancelAllServerBackfillTicketsForPlayerRequest(UPlayFabJsonObject c_Entity, FString c_QueueName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offQueueName.SetValue(c_QueueName);
	}
}
// ScriptStruct PlayFab.ClientExecuteCloudScriptRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientExecuteCloudScriptRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFunctionName                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offFunctionParameter                                          = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offGeneratePlayStreamEvent                                    = new ExternalOffset<byte/*(bool)*/>(0x0020);                  // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ECloudScriptRevisionOption>         _offRevisionSelection                                          = new ExternalOffset<ECloudScriptRevisionOption>(0x0021, false); // 0x0021(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSpecificRevision                                           = new ExternalOffset<int>(0x0024);                             // 0x0024(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FunctionName                                                   => _offFunctionName.GetValue();
	public UPlayFabJsonObject                                  FunctionParameter                                              => _offFunctionParameter.GetValue();
	public byte/*(bool)*/                                      GeneratePlayStreamEvent                                        => _offGeneratePlayStreamEvent.GetValue();
	public ECloudScriptRevisionOption                          RevisionSelection                                              => _offRevisionSelection.GetValue();
	public int                                                 SpecificRevision                                               => _offSpecificRevision.GetValue();
	#endregion

	public FClientExecuteCloudScriptRequest(FString c_FunctionName, UPlayFabJsonObject c_FunctionParameter, byte/*(bool)*/ c_GeneratePlayStreamEvent, ECloudScriptRevisionOption c_RevisionSelection, int c_SpecificRevision) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFunctionName.SetValue(c_FunctionName);
		_offFunctionParameter.SetValue(c_FunctionParameter);
		_offGeneratePlayStreamEvent.SetValue(c_GeneratePlayStreamEvent);
		_offRevisionSelection.SetValue(c_RevisionSelection);
		_offSpecificRevision.SetValue(c_SpecificRevision);
	}
}
// ScriptStruct PlayFab.ClientOpenTradeRequest
// 0x0030 (0x0038 - 0x0008)
public class FClientOpenTradeRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAllowedPlayerIds                                           = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOfferedInventoryInstanceIds                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRequestedCatalogItemIds                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AllowedPlayerIds                                               => _offAllowedPlayerIds.GetValue();
	public FString                                             OfferedInventoryInstanceIds                                    => _offOfferedInventoryInstanceIds.GetValue();
	public FString                                             RequestedCatalogItemIds                                        => _offRequestedCatalogItemIds.GetValue();
	#endregion

	public FClientOpenTradeRequest(FString c_AllowedPlayerIds, FString c_OfferedInventoryInstanceIds, FString c_RequestedCatalogItemIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAllowedPlayerIds.SetValue(c_AllowedPlayerIds);
		_offOfferedInventoryInstanceIds.SetValue(c_OfferedInventoryInstanceIds);
		_offRequestedCatalogItemIds.SetValue(c_RequestedCatalogItemIds);
	}
}
// ScriptStruct PlayFab.ClientAndroidDevicePushNotificationRegistrationRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientAndroidDevicePushNotificationRegistrationRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offConfirmationMessage                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDeviceToken                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offSendPushNotificationConfirmation                           = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ConfirmationMessage                                            => _offConfirmationMessage.GetValue();
	public FString                                             DeviceToken                                                    => _offDeviceToken.GetValue();
	public byte/*(bool)*/                                      SendPushNotificationConfirmation                               => _offSendPushNotificationConfirmation.GetValue();
	#endregion

	public FClientAndroidDevicePushNotificationRegistrationRequest(FString c_ConfirmationMessage, FString c_DeviceToken, byte/*(bool)*/ c_SendPushNotificationConfirmation) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConfirmationMessage.SetValue(c_ConfirmationMessage);
		_offDeviceToken.SetValue(c_DeviceToken);
		_offSendPushNotificationConfirmation.SetValue(c_SendPushNotificationConfirmation);
	}
}
// ScriptStruct PlayFab.MultiplayerCancelMatchmakingTicketResult
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerCancelMatchmakingTicketResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerCancelMatchmakingTicketResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerAuthenticateSessionTicketRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerAuthenticateSessionTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSessionTicket                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SessionTicket                                                  => _offSessionTicket.GetValue();
	#endregion

	public FServerAuthenticateSessionTicketRequest(FString c_SessionTicket) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSessionTicket.SetValue(c_SessionTicket);
	}
}
// ScriptStruct PlayFab.ServerRevokeAllBansForUserRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerRevokeAllBansForUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerRevokeAllBansForUserRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientAttributeInstallResult
// 0x0000 (0x0008 - 0x0008)
public class FClientAttributeInstallResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientAttributeInstallResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetAccountInfoRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientGetAccountInfoRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEmail                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitleDisplayName                                           = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Email                                                          => _offEmail.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             TitleDisplayName                                               => _offTitleDisplayName.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FClientGetAccountInfoRequest(FString c_Email, FString c_PlayFabId, FString c_TitleDisplayName, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmail.SetValue(c_Email);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTitleDisplayName.SetValue(c_TitleDisplayName);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ServerRevokeBansRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerRevokeBansRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBanIds                                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BanIds                                                         => _offBanIds.GetValue();
	#endregion

	public FServerRevokeBansRequest(FString c_BanIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanIds.SetValue(c_BanIds);
	}
}
// ScriptStruct PlayFab.ClientPayForPurchaseRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientPayForPurchaseRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCurrency                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offProviderName                                               = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offProviderTransactionId                                      = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Currency                                                       => _offCurrency.GetValue();
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	public FString                                             ProviderName                                                   => _offProviderName.GetValue();
	public FString                                             ProviderTransactionId                                          => _offProviderTransactionId.GetValue();
	#endregion

	public FClientPayForPurchaseRequest(FString c_Currency, FString c_OrderId, FString c_ProviderName, FString c_ProviderTransactionId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCurrency.SetValue(c_Currency);
		_offOrderId.SetValue(c_OrderId);
		_offProviderName.SetValue(c_ProviderName);
		_offProviderTransactionId.SetValue(c_ProviderTransactionId);
	}
}
// ScriptStruct PlayFab.MultiplayerCancelMatchmakingTicketRequest
// 0x0020 (0x0028 - 0x0008)
public class FMultiplayerCancelMatchmakingTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicketId                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	public FString                                             TicketId                                                       => _offTicketId.GetValue();
	#endregion

	public FMultiplayerCancelMatchmakingTicketRequest(FString c_QueueName, FString c_TicketId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offQueueName.SetValue(c_QueueName);
		_offTicketId.SetValue(c_TicketId);
	}
}
// ScriptStruct PlayFab.ServerAwardSteamAchievementResult
// 0x0010 (0x0018 - 0x0008)
public class FServerAwardSteamAchievementResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offAchievementResults                                         = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          AchievementResults                                             => _offAchievementResults.GetValue();
	#endregion

	public FServerAwardSteamAchievementResult(TArray<UPlayFabJsonObject> c_AchievementResults) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAchievementResults.SetValue(c_AchievementResults);
	}
}
// ScriptStruct PlayFab.ClientListUsersCharactersRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientListUsersCharactersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FClientListUsersCharactersRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientAttributeInstallRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientAttributeInstallRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAdid                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offIdfa                                                       = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Adid                                                           => _offAdid.GetValue();
	public FString                                             Idfa                                                           => _offIdfa.GetValue();
	#endregion

	public FClientAttributeInstallRequest(FString c_Adid, FString c_Idfa) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAdid.SetValue(c_Adid);
		_offIdfa.SetValue(c_Idfa);
	}
}
// ScriptStruct PlayFab.ServerRevokeInventoryItemRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerRevokeInventoryItemRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerRevokeInventoryItemRequest(FString c_CharacterId, FString c_ItemInstanceId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.MultiplayerCancelServerBackfillTicketResult
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerCancelServerBackfillTicketResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerCancelServerBackfillTicketResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerAwardSteamAchievementRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerAwardSteamAchievementRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offAchievements                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Achievements                                                   => _offAchievements.GetValue();
	#endregion

	public FServerAwardSteamAchievementRequest(TArray<UPlayFabJsonObject> c_Achievements) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAchievements.SetValue(c_Achievements);
	}
}
// ScriptStruct PlayFab.ServerRevokeInventoryItemsRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerRevokeInventoryItemsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItems                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Items                                                          => _offItems.GetValue();
	#endregion

	public FServerRevokeInventoryItemsRequest(TArray<UPlayFabJsonObject> c_Items) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItems.SetValue(c_Items);
	}
}
// ScriptStruct PlayFab.ClientCancelTradeResponse
// 0x0008 (0x0010 - 0x0008)
public class FClientCancelTradeResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offTrade                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Trade                                                          => _offTrade.GetValue();
	#endregion

	public FClientCancelTradeResponse(UPlayFabJsonObject c_Trade) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTrade.SetValue(c_Trade);
	}
}
// ScriptStruct PlayFab.ClientGetCatalogItemsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetCatalogItemsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	#endregion

	public FClientGetCatalogItemsRequest(FString c_CatalogVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
	}
}
// ScriptStruct PlayFab.ClientPurchaseItemRequest
// 0x0058 (0x0060 - 0x0008)
public class FClientPurchaseItemRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemId                                                     = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPrice                                                      = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ItemId                                                         => _offItemId.GetValue();
	public int                                                 Price                                                          => _offPrice.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FClientPurchaseItemRequest(FString c_CatalogVersion, FString c_CharacterId, FString c_ItemId, int c_Price, FString c_StoreId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offItemId.SetValue(c_ItemId);
		_offPrice.SetValue(c_Price);
		_offStoreId.SetValue(c_StoreId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.AdminGrantItemsToUsersRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminGrantItemsToUsersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItemGrants                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public TArray<UPlayFabJsonObject>                          ItemGrants                                                     => _offItemGrants.GetValue();
	#endregion

	public FAdminGrantItemsToUsersRequest(FString c_CatalogVersion, TArray<UPlayFabJsonObject> c_ItemGrants) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offItemGrants.SetValue(c_ItemGrants);
	}
}
// ScriptStruct PlayFab.MultiplayerCancelServerBackfillTicketRequest
// 0x0020 (0x0028 - 0x0008)
public class FMultiplayerCancelServerBackfillTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicketId                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	public FString                                             TicketId                                                       => _offTicketId.GetValue();
	#endregion

	public FMultiplayerCancelServerBackfillTicketRequest(FString c_QueueName, FString c_TicketId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offQueueName.SetValue(c_QueueName);
		_offTicketId.SetValue(c_TicketId);
	}
}
// ScriptStruct PlayFab.ClientCancelTradeRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientCancelTradeRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTradeId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TradeId                                                        => _offTradeId.GetValue();
	#endregion

	public FClientCancelTradeRequest(FString c_TradeId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTradeId.SetValue(c_TradeId);
	}
}
// ScriptStruct PlayFab.ServerBanUsersResult
// 0x0010 (0x0018 - 0x0008)
public class FServerBanUsersResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FServerBanUsersResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.ClientRedeemCouponRequest
// 0x0030 (0x0038 - 0x0008)
public class FClientRedeemCouponRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCouponCode                                                 = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             CouponCode                                                     => _offCouponCode.GetValue();
	#endregion

	public FClientRedeemCouponRequest(FString c_CatalogVersion, FString c_CharacterId, FString c_CouponCode) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offCouponCode.SetValue(c_CouponCode);
	}
}
// ScriptStruct PlayFab.ServerSavePushNotificationTemplateRequest
// 0x0048 (0x0050 - 0x0008)
public class FServerSavePushNotificationTemplateRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAndroidPayload                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offID                                                         = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offIOSPayload                                                 = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offLocalizedPushNotificationTemplates                         = new ExternalOffset<UPlayFabJsonObject>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offName                                                       = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AndroidPayload                                                 => _offAndroidPayload.GetValue();
	public FString                                             ID                                                             => _offID.GetValue();
	public FString                                             IOSPayload                                                     => _offIOSPayload.GetValue();
	public UPlayFabJsonObject                                  LocalizedPushNotificationTemplates                             => _offLocalizedPushNotificationTemplates.GetValue();
	public FString                                             Name                                                           => _offName.GetValue();
	#endregion

	public FServerSavePushNotificationTemplateRequest(FString c_AndroidPayload, FString c_ID, FString c_IOSPayload, UPlayFabJsonObject c_LocalizedPushNotificationTemplates, FString c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAndroidPayload.SetValue(c_AndroidPayload);
		_offID.SetValue(c_ID);
		_offIOSPayload.SetValue(c_IOSPayload);
		_offLocalizedPushNotificationTemplates.SetValue(c_LocalizedPushNotificationTemplates);
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct PlayFab.ClientGetCharacterDataRequest
// 0x0038 (0x0040 - 0x0008)
public class FClientGetCharacterDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIfChangedFromDataVersion                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public int                                                 IfChangedFromDataVersion                                       => _offIfChangedFromDataVersion.GetValue();
	public FString                                             Keys                                                           => _offKeys.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FClientGetCharacterDataRequest(FString c_CharacterId, int c_IfChangedFromDataVersion, FString c_Keys, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offIfChangedFromDataVersion.SetValue(c_IfChangedFromDataVersion);
		_offKeys.SetValue(c_Keys);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ServerBanUsersRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerBanUsersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBans                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Bans                                                           => _offBans.GetValue();
	#endregion

	public FServerBanUsersRequest(TArray<UPlayFabJsonObject> c_Bans) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBans.SetValue(c_Bans);
	}
}
// ScriptStruct PlayFab.ClientConfirmPurchaseResult
// 0x0030 (0x0038 - 0x0008)
public class FClientConfirmPurchaseResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItems                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPurchaseDate                                               = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Items                                                          => _offItems.GetValue();
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	public FString                                             PurchaseDate                                                   => _offPurchaseDate.GetValue();
	#endregion

	public FClientConfirmPurchaseResult(TArray<UPlayFabJsonObject> c_Items, FString c_OrderId, FString c_PurchaseDate) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItems.SetValue(c_Items);
		_offOrderId.SetValue(c_OrderId);
		_offPurchaseDate.SetValue(c_PurchaseDate);
	}
}
// ScriptStruct PlayFab.AdminGetUserDataRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminGetUserDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offIfChangedFromDataVersion                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 IfChangedFromDataVersion                                       => _offIfChangedFromDataVersion.GetValue();
	public FString                                             Keys                                                           => _offKeys.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminGetUserDataRequest(int c_IfChangedFromDataVersion, FString c_Keys, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIfChangedFromDataVersion.SetValue(c_IfChangedFromDataVersion);
		_offKeys.SetValue(c_Keys);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ServerSendCustomAccountRecoveryEmailRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerSendCustomAccountRecoveryEmailRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEmail                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEmailTemplateId                                            = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Email                                                          => _offEmail.GetValue();
	public FString                                             EmailTemplateId                                                => _offEmailTemplateId.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FServerSendCustomAccountRecoveryEmailRequest(FString c_Email, FString c_EmailTemplateId, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmail.SetValue(c_Email);
		_offEmailTemplateId.SetValue(c_EmailTemplateId);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ClientRefreshPSNAuthTokenRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientRefreshPSNAuthTokenRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAuthCode                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIssuerId                                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRedirectUri                                                = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AuthCode                                                       => _offAuthCode.GetValue();
	public int                                                 IssuerId                                                       => _offIssuerId.GetValue();
	public FString                                             RedirectUri                                                    => _offRedirectUri.GetValue();
	#endregion

	public FClientRefreshPSNAuthTokenRequest(FString c_AuthCode, int c_IssuerId, FString c_RedirectUri) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthCode.SetValue(c_AuthCode);
		_offIssuerId.SetValue(c_IssuerId);
		_offRedirectUri.SetValue(c_RedirectUri);
	}
}
// ScriptStruct PlayFab.ServerConsumeItemResult
// 0x0018 (0x0020 - 0x0008)
public class FServerConsumeItemResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRemainingUses                                              = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public int                                                 RemainingUses                                                  => _offRemainingUses.GetValue();
	#endregion

	public FServerConsumeItemResult(FString c_ItemInstanceId, int c_RemainingUses) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offRemainingUses.SetValue(c_RemainingUses);
	}
}
// ScriptStruct PlayFab.MultiplayerBuildAliasDetailsResponse
// 0x0048 (0x0050 - 0x0008)
public class FMultiplayerBuildAliasDetailsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAliasId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offAliasName                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBuildSelectionCriteria                                     = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0028, false); // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AliasId                                                        => _offAliasId.GetValue();
	public FString                                             AliasName                                                      => _offAliasName.GetValue();
	public TArray<UPlayFabJsonObject>                          BuildSelectionCriteria                                         => _offBuildSelectionCriteria.GetValue();
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerBuildAliasDetailsResponse(FString c_AliasId, FString c_AliasName, TArray<UPlayFabJsonObject> c_BuildSelectionCriteria, int c_PageSize, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAliasId.SetValue(c_AliasId);
		_offAliasName.SetValue(c_AliasName);
		_offBuildSelectionCriteria.SetValue(c_BuildSelectionCriteria);
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.ClientConfirmPurchaseRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientConfirmPurchaseRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	#endregion

	public FClientConfirmPurchaseRequest(FString c_OrderId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOrderId.SetValue(c_OrderId);
	}
}
// ScriptStruct PlayFab.ServerSendEmailFromTemplateRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerSendEmailFromTemplateRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEmailTemplateId                                            = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             EmailTemplateId                                                => _offEmailTemplateId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerSendEmailFromTemplateRequest(FString c_EmailTemplateId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmailTemplateId.SetValue(c_EmailTemplateId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetUserInventoryRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetUserInventoryRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminGetUserInventoryRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientRegisterForIOSPushNotificationRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientRegisterForIOSPushNotificationRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offConfirmationMessage                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offDeviceToken                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offSendPushNotificationConfirmation                           = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ConfirmationMessage                                            => _offConfirmationMessage.GetValue();
	public FString                                             DeviceToken                                                    => _offDeviceToken.GetValue();
	public byte/*(bool)*/                                      SendPushNotificationConfirmation                               => _offSendPushNotificationConfirmation.GetValue();
	#endregion

	public FClientRegisterForIOSPushNotificationRequest(FString c_ConfirmationMessage, FString c_DeviceToken, byte/*(bool)*/ c_SendPushNotificationConfirmation) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConfirmationMessage.SetValue(c_ConfirmationMessage);
		_offDeviceToken.SetValue(c_DeviceToken);
		_offSendPushNotificationConfirmation.SetValue(c_SendPushNotificationConfirmation);
	}
}
// ScriptStruct PlayFab.ClientConsumeItemResult
// 0x0018 (0x0020 - 0x0008)
public class FClientConsumeItemResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRemainingUses                                              = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public int                                                 RemainingUses                                                  => _offRemainingUses.GetValue();
	#endregion

	public FClientConsumeItemResult(FString c_ItemInstanceId, int c_RemainingUses) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offRemainingUses.SetValue(c_RemainingUses);
	}
}
// ScriptStruct PlayFab.ClientGetCharacterLeaderboardRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientGetCharacterLeaderboardRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterType                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartPosition                                              = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterType                                                  => _offCharacterType.GetValue();
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public int                                                 StartPosition                                                  => _offStartPosition.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FClientGetCharacterLeaderboardRequest(FString c_CharacterType, int c_MaxResultsCount, int c_StartPosition, FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterType.SetValue(c_CharacterType);
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offStartPosition.SetValue(c_StartPosition);
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateBuildAliasRequest
// 0x0020 (0x0028 - 0x0008)
public class FMultiplayerCreateBuildAliasRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAliasName                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBuildSelectionCriteria                                     = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AliasName                                                      => _offAliasName.GetValue();
	public TArray<UPlayFabJsonObject>                          BuildSelectionCriteria                                         => _offBuildSelectionCriteria.GetValue();
	#endregion

	public FMultiplayerCreateBuildAliasRequest(FString c_AliasName, TArray<UPlayFabJsonObject> c_BuildSelectionCriteria) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAliasName.SetValue(c_AliasName);
		_offBuildSelectionCriteria.SetValue(c_BuildSelectionCriteria);
	}
}
// ScriptStruct PlayFab.ServerConsumeItemRequest
// 0x0038 (0x0040 - 0x0008)
public class FServerConsumeItemRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offConsumeCount                                               = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public int                                                 ConsumeCount                                                   => _offConsumeCount.GetValue();
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerConsumeItemRequest(FString c_CharacterId, int c_ConsumeCount, FString c_ItemInstanceId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offConsumeCount.SetValue(c_ConsumeCount);
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetUserBansRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetUserBansRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminGetUserBansRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetCharacterStatisticsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetCharacterStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	#endregion

	public FClientGetCharacterStatisticsRequest(FString c_CharacterId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
	}
}
// ScriptStruct PlayFab.ServerSendPushNotificationRequest
// 0x0058 (0x0060 - 0x0008)
public class FServerSendPushNotificationRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offAdvancedPlatformDelivery                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMessage                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offPackage                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0028, true);        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRecipient                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSubject                                                    = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTargetPlatforms                                            = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          AdvancedPlatformDelivery                                       => _offAdvancedPlatformDelivery.GetValue();
	public FString                                             Message                                                        => _offMessage.GetValue();
	public UPlayFabJsonObject                                  Package                                                        => _offPackage.GetValue();
	public FString                                             Recipient                                                      => _offRecipient.GetValue();
	public FString                                             Subject                                                        => _offSubject.GetValue();
	public FString                                             TargetPlatforms                                                => _offTargetPlatforms.GetValue();
	#endregion

	public FServerSendPushNotificationRequest(TArray<UPlayFabJsonObject> c_AdvancedPlatformDelivery, FString c_Message, UPlayFabJsonObject c_Package, FString c_Recipient, FString c_Subject, FString c_TargetPlatforms) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAdvancedPlatformDelivery.SetValue(c_AdvancedPlatformDelivery);
		_offMessage.SetValue(c_Message);
		_offPackage.SetValue(c_Package);
		_offRecipient.SetValue(c_Recipient);
		_offSubject.SetValue(c_Subject);
		_offTargetPlatforms.SetValue(c_TargetPlatforms);
	}
}
// ScriptStruct PlayFab.ClientConsumeItemRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientConsumeItemRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offConsumeCount                                               = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public int                                                 ConsumeCount                                                   => _offConsumeCount.GetValue();
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	#endregion

	public FClientConsumeItemRequest(FString c_CharacterId, int c_ConsumeCount, FString c_ItemInstanceId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offConsumeCount.SetValue(c_ConsumeCount);
		_offItemInstanceId.SetValue(c_ItemInstanceId);
	}
}
// ScriptStruct PlayFab.ClientRegisterPlayFabUserRequest
// 0x0070 (0x0078 - 0x0008)
public class FClientRegisterPlayFabUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDisplayName                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEmail                                                      = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPassword                                                   = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offRequireBothUsernameAndEmail                                = new ExternalOffset<byte/*(bool)*/>(0x0060);                  // 0x0060(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DisplayName                                                    => _offDisplayName.GetValue();
	public FString                                             Email                                                          => _offEmail.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             Password                                                       => _offPassword.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public byte/*(bool)*/                                      RequireBothUsernameAndEmail                                    => _offRequireBothUsernameAndEmail.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FClientRegisterPlayFabUserRequest(FString c_DisplayName, FString c_Email, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_Password, FString c_PlayerSecret, byte/*(bool)*/ c_RequireBothUsernameAndEmail, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisplayName.SetValue(c_DisplayName);
		_offEmail.SetValue(c_Email);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPassword.SetValue(c_Password);
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offRequireBothUsernameAndEmail.SetValue(c_RequireBothUsernameAndEmail);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ServerSendPushNotificationFromTemplateRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerSendPushNotificationFromTemplateRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPushNotificationTemplateId                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRecipient                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PushNotificationTemplateId                                     => _offPushNotificationTemplateId.GetValue();
	public FString                                             Recipient                                                      => _offRecipient.GetValue();
	#endregion

	public FServerSendPushNotificationFromTemplateRequest(FString c_PushNotificationTemplateId, FString c_Recipient) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPushNotificationTemplateId.SetValue(c_PushNotificationTemplateId);
		_offRecipient.SetValue(c_Recipient);
	}
}
// ScriptStruct PlayFab.ClientGetContentDownloadUrlRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientGetContentDownloadUrlRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offHttpMethod                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKey                                                        = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offThruCDN                                                    = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             HttpMethod                                                     => _offHttpMethod.GetValue();
	public FString                                             Key                                                            => _offKey.GetValue();
	public byte/*(bool)*/                                      ThruCDN                                                        => _offThruCDN.GetValue();
	#endregion

	public FClientGetContentDownloadUrlRequest(FString c_HttpMethod, FString c_Key, byte/*(bool)*/ c_ThruCDN) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offHttpMethod.SetValue(c_HttpMethod);
		_offKey.SetValue(c_Key);
		_offThruCDN.SetValue(c_ThruCDN);
	}
}
// ScriptStruct PlayFab.ClientConsumePSNEntitlementsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientConsumePSNEntitlementsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItemsGranted                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          ItemsGranted                                                   => _offItemsGranted.GetValue();
	#endregion

	public FClientConsumePSNEntitlementsResult(TArray<UPlayFabJsonObject> c_ItemsGranted) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemsGranted.SetValue(c_ItemsGranted);
	}
}
// ScriptStruct PlayFab.ServerCreateSharedGroupResult
// 0x0010 (0x0018 - 0x0008)
public class FServerCreateSharedGroupResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FServerCreateSharedGroupResult(FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.ServerSetFriendTagsRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerSetFriendTagsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFriendPlayFabId                                            = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTags                                                       = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FriendPlayFabId                                                => _offFriendPlayFabId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             Tags                                                           => _offTags.GetValue();
	#endregion

	public FServerSetFriendTagsRequest(FString c_FriendPlayFabId, FString c_PlayFabId, FString c_Tags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFriendPlayFabId.SetValue(c_FriendPlayFabId);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTags.SetValue(c_Tags);
	}
}
// ScriptStruct PlayFab.AdminLookupUserAccountInfoRequest
// 0x0040 (0x0048 - 0x0008)
public class FAdminLookupUserAccountInfoRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEmail                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitleDisplayName                                           = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Email                                                          => _offEmail.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             TitleDisplayName                                               => _offTitleDisplayName.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FAdminLookupUserAccountInfoRequest(FString c_Email, FString c_PlayFabId, FString c_TitleDisplayName, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmail.SetValue(c_Email);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTitleDisplayName.SetValue(c_TitleDisplayName);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ClientRegisterWithWindowsHelloRequest
// 0x0058 (0x0060 - 0x0008)
public class FClientRegisterWithWindowsHelloRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDeviceName                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0028, true);        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPublicKey                                                  = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DeviceName                                                     => _offDeviceName.GetValue();
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public FString                                             PublicKey                                                      => _offPublicKey.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FClientRegisterWithWindowsHelloRequest(FString c_DeviceName, FString c_EncryptedRequest, UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayerSecret, FString c_PublicKey, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDeviceName.SetValue(c_DeviceName);
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offPublicKey.SetValue(c_PublicKey);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ClientCurrentGamesRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientCurrentGamesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildVersion                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGameMode                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERegion>                            _offRegion                                                     = new ExternalOffset<ERegion>(0x0028, false);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offTagFilter                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0040, true);        // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildVersion                                                   => _offBuildVersion.GetValue();
	public FString                                             GameMode                                                       => _offGameMode.GetValue();
	public ERegion                                             Region                                                         => _offRegion.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public UPlayFabJsonObject                                  TagFilter                                                      => _offTagFilter.GetValue();
	#endregion

	public FClientCurrentGamesRequest(FString c_BuildVersion, FString c_GameMode, ERegion c_Region, FString c_StatisticName, UPlayFabJsonObject c_TagFilter) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildVersion.SetValue(c_BuildVersion);
		_offGameMode.SetValue(c_GameMode);
		_offRegion.SetValue(c_Region);
		_offStatisticName.SetValue(c_StatisticName);
		_offTagFilter.SetValue(c_TagFilter);
	}
}
// ScriptStruct PlayFab.ClientConsumePSNEntitlementsRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientConsumePSNEntitlementsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offServiceLabel                                               = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public int                                                 ServiceLabel                                                   => _offServiceLabel.GetValue();
	#endregion

	public FClientConsumePSNEntitlementsRequest(FString c_CatalogVersion, int c_ServiceLabel) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offServiceLabel.SetValue(c_ServiceLabel);
	}
}
// ScriptStruct PlayFab.ServerSetGameServerInstanceDataRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerSetGameServerInstanceDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offGameServerData                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             GameServerData                                                 => _offGameServerData.GetValue();
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	#endregion

	public FServerSetGameServerInstanceDataRequest(FString c_GameServerData, FString c_LobbyId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGameServerData.SetValue(c_GameServerData);
		_offLobbyId.SetValue(c_LobbyId);
	}
}
// ScriptStruct PlayFab.ServerCreateSharedGroupRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerCreateSharedGroupRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FServerCreateSharedGroupRequest(FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.ClientRemoveContactEmailRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientRemoveContactEmailRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientRemoveContactEmailRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminGetTitleDataRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetTitleDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Keys                                                           => _offKeys.GetValue();
	#endregion

	public FAdminGetTitleDataRequest(FString c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct PlayFab.ClientRemoveFriendRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientRemoveFriendRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFriendPlayFabId                                            = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FriendPlayFabId                                                => _offFriendPlayFabId.GetValue();
	#endregion

	public FClientRemoveFriendRequest(FString c_FriendPlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFriendPlayFabId.SetValue(c_FriendPlayFabId);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateBuildWithCustomContainerResponse
// 0x00A8 (0x00B0 - 0x0008)
public class FMultiplayerCreateBuildWithCustomContainerResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildName                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EContainerFlavor>                   _offContainerFlavor                                            = new ExternalOffset<EContainerFlavor>(0x0028, false);         // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offContainerRunCommand                                        = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCreationTime                                               = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offCustomGameContainerImage                                   = new ExternalOffset<UPlayFabJsonObject>(0x0050, true);        // 0x0050(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameAssetReferences                                        = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0058, false); // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameCertificateReferences                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0068, false); // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMetaData                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0078, true);        // 0x0078(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMultiplayerServerCountPerVm                                = new ExternalOffset<int>(0x0080);                             // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPorts                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0088, false); // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offRegionConfigurations                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0098, false); // 0x0098(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<EAzureVmSize>                       _offVmSize                                                     = new ExternalOffset<EAzureVmSize>(0x00A8, false);             // 0x00A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             BuildName                                                      => _offBuildName.GetValue();
	public EContainerFlavor                                    ContainerFlavor                                                => _offContainerFlavor.GetValue();
	public FString                                             ContainerRunCommand                                            => _offContainerRunCommand.GetValue();
	public FString                                             CreationTime                                                   => _offCreationTime.GetValue();
	public UPlayFabJsonObject                                  CustomGameContainerImage                                       => _offCustomGameContainerImage.GetValue();
	public TArray<UPlayFabJsonObject>                          GameAssetReferences                                            => _offGameAssetReferences.GetValue();
	public TArray<UPlayFabJsonObject>                          GameCertificateReferences                                      => _offGameCertificateReferences.GetValue();
	public UPlayFabJsonObject                                  MetaData                                                       => _offMetaData.GetValue();
	public int                                                 MultiplayerServerCountPerVm                                    => _offMultiplayerServerCountPerVm.GetValue();
	public TArray<UPlayFabJsonObject>                          Ports                                                          => _offPorts.GetValue();
	public TArray<UPlayFabJsonObject>                          RegionConfigurations                                           => _offRegionConfigurations.GetValue();
	public EAzureVmSize                                        VmSize                                                         => _offVmSize.GetValue();
	#endregion

	public FMultiplayerCreateBuildWithCustomContainerResponse(FString c_BuildId, FString c_BuildName, EContainerFlavor c_ContainerFlavor, FString c_ContainerRunCommand, FString c_CreationTime, UPlayFabJsonObject c_CustomGameContainerImage, TArray<UPlayFabJsonObject> c_GameAssetReferences, TArray<UPlayFabJsonObject> c_GameCertificateReferences, UPlayFabJsonObject c_MetaData, int c_MultiplayerServerCountPerVm, TArray<UPlayFabJsonObject> c_Ports, TArray<UPlayFabJsonObject> c_RegionConfigurations, EAzureVmSize c_VmSize) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offBuildName.SetValue(c_BuildName);
		_offContainerFlavor.SetValue(c_ContainerFlavor);
		_offContainerRunCommand.SetValue(c_ContainerRunCommand);
		_offCreationTime.SetValue(c_CreationTime);
		_offCustomGameContainerImage.SetValue(c_CustomGameContainerImage);
		_offGameAssetReferences.SetValue(c_GameAssetReferences);
		_offGameCertificateReferences.SetValue(c_GameCertificateReferences);
		_offMetaData.SetValue(c_MetaData);
		_offMultiplayerServerCountPerVm.SetValue(c_MultiplayerServerCountPerVm);
		_offPorts.SetValue(c_Ports);
		_offRegionConfigurations.SetValue(c_RegionConfigurations);
		_offVmSize.SetValue(c_VmSize);
	}
}
// ScriptStruct PlayFab.ClientConsumeXboxEntitlementsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientConsumeXboxEntitlementsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItems                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Items                                                          => _offItems.GetValue();
	#endregion

	public FClientConsumeXboxEntitlementsResult(TArray<UPlayFabJsonObject> c_Items) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItems.SetValue(c_Items);
	}
}
// ScriptStruct PlayFab.ServerSetGameServerInstanceStateRequest
// 0x0018 (0x0020 - 0x0008)
public class FServerSetGameServerInstanceStateRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EGameInstanceState>                 _offState                                                      = new ExternalOffset<EGameInstanceState>(0x0018, false);       // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public EGameInstanceState                                  State                                                          => _offState.GetValue();
	#endregion

	public FServerSetGameServerInstanceStateRequest(FString c_LobbyId, EGameInstanceState c_State) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
		_offState.SetValue(c_State);
	}
}
// ScriptStruct PlayFab.ServerDeleteCharacterFromUserResult
// 0x0000 (0x0008 - 0x0008)
public class FServerDeleteCharacterFromUserResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerDeleteCharacterFromUserResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetFriendLeaderboardRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientGetFriendLeaderboardRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeFacebookFriends                                     = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeSteamFriends                                        = new ExternalOffset<byte/*(bool)*/>(0x0009);                  // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartPosition                                              = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offUseSpecificVersion                                         = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      IncludeFacebookFriends                                         => _offIncludeFacebookFriends.GetValue();
	public byte/*(bool)*/                                      IncludeSteamFriends                                            => _offIncludeSteamFriends.GetValue();
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	public int                                                 StartPosition                                                  => _offStartPosition.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public byte/*(bool)*/                                      UseSpecificVersion                                             => _offUseSpecificVersion.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FClientGetFriendLeaderboardRequest(byte/*(bool)*/ c_IncludeFacebookFriends, byte/*(bool)*/ c_IncludeSteamFriends, int c_MaxResultsCount, UPlayFabJsonObject c_ProfileConstraints, int c_StartPosition, FString c_StatisticName, byte/*(bool)*/ c_UseSpecificVersion, int c_Version, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIncludeFacebookFriends.SetValue(c_IncludeFacebookFriends);
		_offIncludeSteamFriends.SetValue(c_IncludeSteamFriends);
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
		_offStartPosition.SetValue(c_StartPosition);
		_offStatisticName.SetValue(c_StatisticName);
		_offUseSpecificVersion.SetValue(c_UseSpecificVersion);
		_offVersion.SetValue(c_Version);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.AdminGetTasksRequest
// 0x0008 (0x0010 - 0x0008)
public class FAdminGetTasksRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offIdentifier                                                 = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Identifier                                                     => _offIdentifier.GetValue();
	#endregion

	public FAdminGetTasksRequest(UPlayFabJsonObject c_Identifier) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIdentifier.SetValue(c_Identifier);
	}
}
// ScriptStruct PlayFab.ClientConsumeXboxEntitlementsRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientConsumeXboxEntitlementsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FClientConsumeXboxEntitlementsRequest(FString c_CatalogVersion, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.ClientRemoveGenericIDRequest
// 0x0008 (0x0010 - 0x0008)
public class FClientRemoveGenericIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGenericId                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  GenericId                                                      => _offGenericId.GetValue();
	#endregion

	public FClientRemoveGenericIDRequest(UPlayFabJsonObject c_GenericId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGenericId.SetValue(c_GenericId);
	}
}
// ScriptStruct PlayFab.ServerDeletePlayerResult
// 0x0000 (0x0008 - 0x0008)
public class FServerDeletePlayerResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerDeletePlayerResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetFriendLeaderboardAroundPlayerRequest
// 0x0048 (0x0050 - 0x0008)
public class FClientGetFriendLeaderboardAroundPlayerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeFacebookFriends                                     = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeSteamFriends                                        = new ExternalOffset<byte/*(bool)*/>(0x0009);                  // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offUseSpecificVersion                                         = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      IncludeFacebookFriends                                         => _offIncludeFacebookFriends.GetValue();
	public byte/*(bool)*/                                      IncludeSteamFriends                                            => _offIncludeSteamFriends.GetValue();
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public byte/*(bool)*/                                      UseSpecificVersion                                             => _offUseSpecificVersion.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FClientGetFriendLeaderboardAroundPlayerRequest(byte/*(bool)*/ c_IncludeFacebookFriends, byte/*(bool)*/ c_IncludeSteamFriends, int c_MaxResultsCount, FString c_PlayFabId, UPlayFabJsonObject c_ProfileConstraints, FString c_StatisticName, byte/*(bool)*/ c_UseSpecificVersion, int c_Version, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIncludeFacebookFriends.SetValue(c_IncludeFacebookFriends);
		_offIncludeSteamFriends.SetValue(c_IncludeSteamFriends);
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
		_offStatisticName.SetValue(c_StatisticName);
		_offUseSpecificVersion.SetValue(c_UseSpecificVersion);
		_offVersion.SetValue(c_Version);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.ServerSetGameServerInstanceTagsRequest
// 0x0018 (0x0020 - 0x0008)
public class FServerSetGameServerInstanceTagsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offTags                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public UPlayFabJsonObject                                  Tags                                                           => _offTags.GetValue();
	#endregion

	public FServerSetGameServerInstanceTagsRequest(FString c_LobbyId, UPlayFabJsonObject c_Tags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
		_offTags.SetValue(c_Tags);
	}
}
// ScriptStruct PlayFab.ClientCreateSharedGroupResult
// 0x0010 (0x0018 - 0x0008)
public class FClientCreateSharedGroupResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FClientCreateSharedGroupResult(FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.ServerDeletePushNotificationTemplateResult
// 0x0000 (0x0008 - 0x0008)
public class FServerDeletePushNotificationTemplateResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerDeletePushNotificationTemplateResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerDeregisterGameResponse
// 0x0000 (0x0008 - 0x0008)
public class FServerDeregisterGameResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerDeregisterGameResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientCreateSharedGroupRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientCreateSharedGroupRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FClientCreateSharedGroupRequest(FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.ClientRemoveSharedGroupMembersRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientRemoveSharedGroupMembersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabIds                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabIds                                                     => _offPlayFabIds.GetValue();
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FClientRemoveSharedGroupMembersRequest(FString c_PlayFabIds, FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabIds.SetValue(c_PlayFabIds);
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.ServerSetPlayerSecretRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerSetPlayerSecretRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerSetPlayerSecretRequest(FString c_PlayerSecret, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayerSecret.SetValue(c_PlayerSecret);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetFriendsListRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientGetFriendsListRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeFacebookFriends                                     = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeSteamFriends                                        = new ExternalOffset<byte/*(bool)*/>(0x0009);                  // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      IncludeFacebookFriends                                         => _offIncludeFacebookFriends.GetValue();
	public byte/*(bool)*/                                      IncludeSteamFriends                                            => _offIncludeSteamFriends.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FClientGetFriendsListRequest(byte/*(bool)*/ c_IncludeFacebookFriends, byte/*(bool)*/ c_IncludeSteamFriends, UPlayFabJsonObject c_ProfileConstraints, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIncludeFacebookFriends.SetValue(c_IncludeFacebookFriends);
		_offIncludeSteamFriends.SetValue(c_IncludeSteamFriends);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.AdminGetTaskInstancesRequest
// 0x0030 (0x0038 - 0x0008)
public class FAdminGetTaskInstancesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offStartedAtRangeFrom                                         = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStartedAtRangeTo                                           = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ETaskInstanceStatus>                _offStatusFilter                                               = new ExternalOffset<ETaskInstanceStatus>(0x0028, false);      // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offTaskIdentifier                                             = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             StartedAtRangeFrom                                             => _offStartedAtRangeFrom.GetValue();
	public FString                                             StartedAtRangeTo                                               => _offStartedAtRangeTo.GetValue();
	public ETaskInstanceStatus                                 StatusFilter                                                   => _offStatusFilter.GetValue();
	public UPlayFabJsonObject                                  TaskIdentifier                                                 => _offTaskIdentifier.GetValue();
	#endregion

	public FAdminGetTaskInstancesRequest(FString c_StartedAtRangeFrom, FString c_StartedAtRangeTo, ETaskInstanceStatus c_StatusFilter, UPlayFabJsonObject c_TaskIdentifier) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStartedAtRangeFrom.SetValue(c_StartedAtRangeFrom);
		_offStartedAtRangeTo.SetValue(c_StartedAtRangeTo);
		_offStatusFilter.SetValue(c_StatusFilter);
		_offTaskIdentifier.SetValue(c_TaskIdentifier);
	}
}
// ScriptStruct PlayFab.ServerEvaluateRandomResultTableResult
// 0x0010 (0x0018 - 0x0008)
public class FServerEvaluateRandomResultTableResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offResultItemId                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ResultItemId                                                   => _offResultItemId.GetValue();
	#endregion

	public FServerEvaluateRandomResultTableResult(FString c_ResultItemId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offResultItemId.SetValue(c_ResultItemId);
	}
}
// ScriptStruct PlayFab.ServerSetPublisherDataRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerSetPublisherDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKey                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offValue                                                      = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Key                                                            => _offKey.GetValue();
	public FString                                             Value                                                          => _offValue.GetValue();
	#endregion

	public FServerSetPublisherDataRequest(FString c_Key, FString c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKey.SetValue(c_Key);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct PlayFab.ClientDeviceInfoRequest
// 0x0008 (0x0010 - 0x0008)
public class FClientDeviceInfoRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offInfo                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Info                                                           => _offInfo.GetValue();
	#endregion

	public FClientDeviceInfoRequest(UPlayFabJsonObject c_Info) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInfo.SetValue(c_Info);
	}
}
// ScriptStruct PlayFab.AdminGetStoreItemsRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminGetStoreItemsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	#endregion

	public FAdminGetStoreItemsRequest(FString c_CatalogVersion, FString c_StoreId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offStoreId.SetValue(c_StoreId);
	}
}
// ScriptStruct PlayFab.ClientGameServerRegionsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGameServerRegionsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildVersion                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildVersion                                                   => _offBuildVersion.GetValue();
	#endregion

	public FClientGameServerRegionsRequest(FString c_BuildVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildVersion.SetValue(c_BuildVersion);
	}
}
// ScriptStruct PlayFab.ServerSetTitleDataRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerSetTitleDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKey                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offValue                                                      = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Key                                                            => _offKey.GetValue();
	public FString                                             Value                                                          => _offValue.GetValue();
	#endregion

	public FServerSetTitleDataRequest(FString c_Key, FString c_Value) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKey.SetValue(c_Key);
		_offValue.SetValue(c_Value);
	}
}
// ScriptStruct PlayFab.ClientExecuteCloudScriptResult
// 0x0058 (0x0060 - 0x0008)
public class FClientExecuteCloudScriptResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAPIRequestsIssued                                          = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offError                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExecutionTimeSeconds                                       = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFunctionName                                               = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offFunctionResult                                             = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offFunctionResultTooLarge                                     = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offHttpRequestsIssued                                         = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLogs                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0040, false); // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offLogsTooLarge                                               = new ExternalOffset<byte/*(bool)*/>(0x0050);                  // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMemoryConsumedBytes                                        = new ExternalOffset<int>(0x0054);                             // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProcessorTimeSeconds                                       = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRevision                                                   = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 APIRequestsIssued                                              => _offAPIRequestsIssued.GetValue();
	public UPlayFabJsonObject                                  Error                                                          => _offError.GetValue();
	public int                                                 ExecutionTimeSeconds                                           => _offExecutionTimeSeconds.GetValue();
	public FString                                             FunctionName                                                   => _offFunctionName.GetValue();
	public UPlayFabJsonObject                                  FunctionResult                                                 => _offFunctionResult.GetValue();
	public byte/*(bool)*/                                      FunctionResultTooLarge                                         => _offFunctionResultTooLarge.GetValue();
	public int                                                 HttpRequestsIssued                                             => _offHttpRequestsIssued.GetValue();
	public TArray<UPlayFabJsonObject>                          Logs                                                           => _offLogs.GetValue();
	public byte/*(bool)*/                                      LogsTooLarge                                                   => _offLogsTooLarge.GetValue();
	public int                                                 MemoryConsumedBytes                                            => _offMemoryConsumedBytes.GetValue();
	public int                                                 ProcessorTimeSeconds                                           => _offProcessorTimeSeconds.GetValue();
	public int                                                 Revision                                                       => _offRevision.GetValue();
	#endregion

	public FClientExecuteCloudScriptResult(int c_APIRequestsIssued, UPlayFabJsonObject c_Error, int c_ExecutionTimeSeconds, FString c_FunctionName, UPlayFabJsonObject c_FunctionResult, byte/*(bool)*/ c_FunctionResultTooLarge, int c_HttpRequestsIssued, TArray<UPlayFabJsonObject> c_Logs, byte/*(bool)*/ c_LogsTooLarge, int c_MemoryConsumedBytes, int c_ProcessorTimeSeconds, int c_Revision) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAPIRequestsIssued.SetValue(c_APIRequestsIssued);
		_offError.SetValue(c_Error);
		_offExecutionTimeSeconds.SetValue(c_ExecutionTimeSeconds);
		_offFunctionName.SetValue(c_FunctionName);
		_offFunctionResult.SetValue(c_FunctionResult);
		_offFunctionResultTooLarge.SetValue(c_FunctionResultTooLarge);
		_offHttpRequestsIssued.SetValue(c_HttpRequestsIssued);
		_offLogs.SetValue(c_Logs);
		_offLogsTooLarge.SetValue(c_LogsTooLarge);
		_offMemoryConsumedBytes.SetValue(c_MemoryConsumedBytes);
		_offProcessorTimeSeconds.SetValue(c_ProcessorTimeSeconds);
		_offRevision.SetValue(c_Revision);
	}
}
// ScriptStruct PlayFab.AdminGetServerBuildUploadURLRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetServerBuildUploadURLRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	#endregion

	public FAdminGetServerBuildUploadURLRequest(FString c_BuildId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
	}
}
// ScriptStruct PlayFab.ClientReportPlayerClientRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientReportPlayerClientRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offComment                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReporteeId                                                 = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Comment                                                        => _offComment.GetValue();
	public FString                                             ReporteeId                                                     => _offReporteeId.GetValue();
	#endregion

	public FClientReportPlayerClientRequest(FString c_Comment, FString c_ReporteeId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offComment.SetValue(c_Comment);
		_offReporteeId.SetValue(c_ReporteeId);
	}
}
// ScriptStruct PlayFab.ClientGetLeaderboardRequest
// 0x0030 (0x0038 - 0x0008)
public class FClientGetLeaderboardRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartPosition                                              = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offUseSpecificVersion                                         = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	public int                                                 StartPosition                                                  => _offStartPosition.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public byte/*(bool)*/                                      UseSpecificVersion                                             => _offUseSpecificVersion.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FClientGetLeaderboardRequest(int c_MaxResultsCount, UPlayFabJsonObject c_ProfileConstraints, int c_StartPosition, FString c_StatisticName, byte/*(bool)*/ c_UseSpecificVersion, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
		_offStartPosition.SetValue(c_StartPosition);
		_offStatisticName.SetValue(c_StatisticName);
		_offUseSpecificVersion.SetValue(c_UseSpecificVersion);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.AdminGetServerBuildInfoRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetServerBuildInfoRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	#endregion

	public FAdminGetServerBuildInfoRequest(FString c_BuildId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
	}
}
// ScriptStruct PlayFab.ServerSubtractCharacterVirtualCurrencyRequest
// 0x0038 (0x0040 - 0x0008)
public class FServerSubtractCharacterVirtualCurrencyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FServerSubtractCharacterVirtualCurrencyRequest(int c_Amount, FString c_CharacterId, FString c_PlayFabId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
		_offCharacterId.SetValue(c_CharacterId);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.ClientGetAccountInfoResult
// 0x0008 (0x0010 - 0x0008)
public class FClientGetAccountInfoResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offAccountInfo                                                = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  AccountInfo                                                    => _offAccountInfo.GetValue();
	#endregion

	public FClientGetAccountInfoResult(UPlayFabJsonObject c_AccountInfo) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAccountInfo.SetValue(c_AccountInfo);
	}
}
// ScriptStruct PlayFab.ServerExecuteCloudScriptResult
// 0x0058 (0x0060 - 0x0008)
public class FServerExecuteCloudScriptResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAPIRequestsIssued                                          = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offError                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExecutionTimeSeconds                                       = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFunctionName                                               = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offFunctionResult                                             = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offFunctionResultTooLarge                                     = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offHttpRequestsIssued                                         = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLogs                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0040, false); // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offLogsTooLarge                                               = new ExternalOffset<byte/*(bool)*/>(0x0050);                  // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMemoryConsumedBytes                                        = new ExternalOffset<int>(0x0054);                             // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProcessorTimeSeconds                                       = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRevision                                                   = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 APIRequestsIssued                                              => _offAPIRequestsIssued.GetValue();
	public UPlayFabJsonObject                                  Error                                                          => _offError.GetValue();
	public int                                                 ExecutionTimeSeconds                                           => _offExecutionTimeSeconds.GetValue();
	public FString                                             FunctionName                                                   => _offFunctionName.GetValue();
	public UPlayFabJsonObject                                  FunctionResult                                                 => _offFunctionResult.GetValue();
	public byte/*(bool)*/                                      FunctionResultTooLarge                                         => _offFunctionResultTooLarge.GetValue();
	public int                                                 HttpRequestsIssued                                             => _offHttpRequestsIssued.GetValue();
	public TArray<UPlayFabJsonObject>                          Logs                                                           => _offLogs.GetValue();
	public byte/*(bool)*/                                      LogsTooLarge                                                   => _offLogsTooLarge.GetValue();
	public int                                                 MemoryConsumedBytes                                            => _offMemoryConsumedBytes.GetValue();
	public int                                                 ProcessorTimeSeconds                                           => _offProcessorTimeSeconds.GetValue();
	public int                                                 Revision                                                       => _offRevision.GetValue();
	#endregion

	public FServerExecuteCloudScriptResult(int c_APIRequestsIssued, UPlayFabJsonObject c_Error, int c_ExecutionTimeSeconds, FString c_FunctionName, UPlayFabJsonObject c_FunctionResult, byte/*(bool)*/ c_FunctionResultTooLarge, int c_HttpRequestsIssued, TArray<UPlayFabJsonObject> c_Logs, byte/*(bool)*/ c_LogsTooLarge, int c_MemoryConsumedBytes, int c_ProcessorTimeSeconds, int c_Revision) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAPIRequestsIssued.SetValue(c_APIRequestsIssued);
		_offError.SetValue(c_Error);
		_offExecutionTimeSeconds.SetValue(c_ExecutionTimeSeconds);
		_offFunctionName.SetValue(c_FunctionName);
		_offFunctionResult.SetValue(c_FunctionResult);
		_offFunctionResultTooLarge.SetValue(c_FunctionResultTooLarge);
		_offHttpRequestsIssued.SetValue(c_HttpRequestsIssued);
		_offLogs.SetValue(c_Logs);
		_offLogsTooLarge.SetValue(c_LogsTooLarge);
		_offMemoryConsumedBytes.SetValue(c_MemoryConsumedBytes);
		_offProcessorTimeSeconds.SetValue(c_ProcessorTimeSeconds);
		_offRevision.SetValue(c_Revision);
	}
}
// ScriptStruct PlayFab.ClientRestoreIOSPurchasesRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientRestoreIOSPurchasesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReceiptData                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             ReceiptData                                                    => _offReceiptData.GetValue();
	#endregion

	public FClientRestoreIOSPurchasesRequest(FString c_CatalogVersion, FString c_ReceiptData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offReceiptData.SetValue(c_ReceiptData);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateBuildWithCustomContainerRequest
// 0x0088 (0x0090 - 0x0008)
public class FMultiplayerCreateBuildWithCustomContainerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildName                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EContainerFlavor>                   _offContainerFlavor                                            = new ExternalOffset<EContainerFlavor>(0x0018, false);         // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offContainerImageReference                                    = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offContainerRunCommand                                        = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameAssetReferences                                        = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0038, false); // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameCertificateReferences                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0048, false); // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMetaData                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0058, true);        // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMultiplayerServerCountPerVm                                = new ExternalOffset<int>(0x0060);                             // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPorts                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0068, false); // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offRegionConfigurations                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0078, false); // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<EAzureVmSize>                       _offVmSize                                                     = new ExternalOffset<EAzureVmSize>(0x0088, false);             // 0x0088(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildName                                                      => _offBuildName.GetValue();
	public EContainerFlavor                                    ContainerFlavor                                                => _offContainerFlavor.GetValue();
	public UPlayFabJsonObject                                  ContainerImageReference                                        => _offContainerImageReference.GetValue();
	public FString                                             ContainerRunCommand                                            => _offContainerRunCommand.GetValue();
	public TArray<UPlayFabJsonObject>                          GameAssetReferences                                            => _offGameAssetReferences.GetValue();
	public TArray<UPlayFabJsonObject>                          GameCertificateReferences                                      => _offGameCertificateReferences.GetValue();
	public UPlayFabJsonObject                                  MetaData                                                       => _offMetaData.GetValue();
	public int                                                 MultiplayerServerCountPerVm                                    => _offMultiplayerServerCountPerVm.GetValue();
	public TArray<UPlayFabJsonObject>                          Ports                                                          => _offPorts.GetValue();
	public TArray<UPlayFabJsonObject>                          RegionConfigurations                                           => _offRegionConfigurations.GetValue();
	public EAzureVmSize                                        VmSize                                                         => _offVmSize.GetValue();
	#endregion

	public FMultiplayerCreateBuildWithCustomContainerRequest(FString c_BuildName, EContainerFlavor c_ContainerFlavor, UPlayFabJsonObject c_ContainerImageReference, FString c_ContainerRunCommand, TArray<UPlayFabJsonObject> c_GameAssetReferences, TArray<UPlayFabJsonObject> c_GameCertificateReferences, UPlayFabJsonObject c_MetaData, int c_MultiplayerServerCountPerVm, TArray<UPlayFabJsonObject> c_Ports, TArray<UPlayFabJsonObject> c_RegionConfigurations, EAzureVmSize c_VmSize) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildName.SetValue(c_BuildName);
		_offContainerFlavor.SetValue(c_ContainerFlavor);
		_offContainerImageReference.SetValue(c_ContainerImageReference);
		_offContainerRunCommand.SetValue(c_ContainerRunCommand);
		_offGameAssetReferences.SetValue(c_GameAssetReferences);
		_offGameCertificateReferences.SetValue(c_GameCertificateReferences);
		_offMetaData.SetValue(c_MetaData);
		_offMultiplayerServerCountPerVm.SetValue(c_MultiplayerServerCountPerVm);
		_offPorts.SetValue(c_Ports);
		_offRegionConfigurations.SetValue(c_RegionConfigurations);
		_offVmSize.SetValue(c_VmSize);
	}
}
// ScriptStruct PlayFab.AdminGetRandomResultTablesRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetRandomResultTablesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	#endregion

	public FAdminGetRandomResultTablesRequest(FString c_CatalogVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
	}
}
// ScriptStruct PlayFab.ServerSubtractUserVirtualCurrencyRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerSubtractUserVirtualCurrencyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FServerSubtractUserVirtualCurrencyRequest(int c_Amount, FString c_PlayFabId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.ClientGetLeaderboardAroundCharacterRequest
// 0x0038 (0x0040 - 0x0008)
public class FClientGetLeaderboardAroundCharacterRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterType                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             CharacterType                                                  => _offCharacterType.GetValue();
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FClientGetLeaderboardAroundCharacterRequest(FString c_CharacterId, FString c_CharacterType, int c_MaxResultsCount, FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offCharacterType.SetValue(c_CharacterType);
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.ClientListUsersCharactersResult
// 0x0010 (0x0018 - 0x0008)
public class FClientListUsersCharactersResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offCharacters                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Characters                                                     => _offCharacters.GetValue();
	#endregion

	public FClientListUsersCharactersResult(TArray<UPlayFabJsonObject> c_Characters) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacters.SetValue(c_Characters);
	}
}
// ScriptStruct PlayFab.ServerGetAllSegmentsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetAllSegmentsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offSegments                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Segments                                                       => _offSegments.GetValue();
	#endregion

	public FServerGetAllSegmentsResult(TArray<UPlayFabJsonObject> c_Segments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSegments.SetValue(c_Segments);
	}
}
// ScriptStruct PlayFab.ClientSendAccountRecoveryEmailRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientSendAccountRecoveryEmailRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEmail                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEmailTemplateId                                            = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Email                                                          => _offEmail.GetValue();
	public FString                                             EmailTemplateId                                                => _offEmailTemplateId.GetValue();
	#endregion

	public FClientSendAccountRecoveryEmailRequest(FString c_Email, FString c_EmailTemplateId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEmail.SetValue(c_Email);
		_offEmailTemplateId.SetValue(c_EmailTemplateId);
	}
}
// ScriptStruct PlayFab.AdminGetPublisherDataRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPublisherDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Keys                                                           => _offKeys.GetValue();
	#endregion

	public FAdminGetPublisherDataRequest(FString c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct PlayFab.ClientGetCatalogItemsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetCatalogItemsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offCatalog                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Catalog                                                        => _offCatalog.GetValue();
	#endregion

	public FClientGetCatalogItemsResult(TArray<UPlayFabJsonObject> c_Catalog) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalog.SetValue(c_Catalog);
	}
}
// ScriptStruct PlayFab.ServerListUsersCharactersResult
// 0x0010 (0x0018 - 0x0008)
public class FServerListUsersCharactersResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offCharacters                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Characters                                                     => _offCharacters.GetValue();
	#endregion

	public FServerListUsersCharactersResult(TArray<UPlayFabJsonObject> c_Characters) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacters.SetValue(c_Characters);
	}
}
// ScriptStruct PlayFab.ServerUnlinkPSNAccountRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerUnlinkPSNAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerUnlinkPSNAccountRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientSetFriendTagsRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientSetFriendTagsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFriendPlayFabId                                            = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTags                                                       = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FriendPlayFabId                                                => _offFriendPlayFabId.GetValue();
	public FString                                             Tags                                                           => _offTags.GetValue();
	#endregion

	public FClientSetFriendTagsRequest(FString c_FriendPlayFabId, FString c_Tags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFriendPlayFabId.SetValue(c_FriendPlayFabId);
		_offTags.SetValue(c_Tags);
	}
}
// ScriptStruct PlayFab.ClientGetLeaderboardAroundPlayerRequest
// 0x0038 (0x0040 - 0x0008)
public class FClientGetLeaderboardAroundPlayerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offUseSpecificVersion                                         = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public byte/*(bool)*/                                      UseSpecificVersion                                             => _offUseSpecificVersion.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FClientGetLeaderboardAroundPlayerRequest(int c_MaxResultsCount, FString c_PlayFabId, UPlayFabJsonObject c_ProfileConstraints, FString c_StatisticName, byte/*(bool)*/ c_UseSpecificVersion, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
		_offStatisticName.SetValue(c_StatisticName);
		_offUseSpecificVersion.SetValue(c_UseSpecificVersion);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.AdminGetPolicyRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPolicyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPolicyName                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PolicyName                                                     => _offPolicyName.GetValue();
	#endregion

	public FAdminGetPolicyRequest(FString c_PolicyName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPolicyName.SetValue(c_PolicyName);
	}
}
// ScriptStruct PlayFab.ClientGetCharacterDataResult
// 0x0020 (0x0028 - 0x0008)
public class FClientGetCharacterDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	#endregion

	public FClientGetCharacterDataResult(FString c_CharacterId, UPlayFabJsonObject c_Data, int c_DataVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offData.SetValue(c_Data);
		_offDataVersion.SetValue(c_DataVersion);
	}
}
// ScriptStruct PlayFab.ServerUnlinkServerCustomIdRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerUnlinkServerCustomIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerCustomId                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             ServerCustomId                                                 => _offServerCustomId.GetValue();
	#endregion

	public FServerUnlinkServerCustomIdRequest(FString c_PlayFabId, FString c_ServerCustomId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offServerCustomId.SetValue(c_ServerCustomId);
	}
}
// ScriptStruct PlayFab.ServerGetCatalogItemsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetCatalogItemsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offCatalog                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Catalog                                                        => _offCatalog.GetValue();
	#endregion

	public FServerGetCatalogItemsResult(TArray<UPlayFabJsonObject> c_Catalog) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalog.SetValue(c_Catalog);
	}
}
// ScriptStruct PlayFab.ClientSetPlayerSecretRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientSetPlayerSecretRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEncryptedRequest                                           = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayerSecret                                               = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             EncryptedRequest                                               => _offEncryptedRequest.GetValue();
	public FString                                             PlayerSecret                                                   => _offPlayerSecret.GetValue();
	#endregion

	public FClientSetPlayerSecretRequest(FString c_EncryptedRequest, FString c_PlayerSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEncryptedRequest.SetValue(c_EncryptedRequest);
		_offPlayerSecret.SetValue(c_PlayerSecret);
	}
}
// ScriptStruct PlayFab.ClientGetLeaderboardForUsersCharactersRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientGetLeaderboardForUsersCharactersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FClientGetLeaderboardForUsersCharactersRequest(int c_MaxResultsCount, FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateBuildWithManagedContainerResponse
// 0x00A8 (0x00B0 - 0x0008)
public class FMultiplayerCreateBuildWithManagedContainerResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildName                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EContainerFlavor>                   _offContainerFlavor                                            = new ExternalOffset<EContainerFlavor>(0x0028, false);         // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCreationTime                                               = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameAssetReferences                                        = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0040, false); // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameCertificateReferences                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0050, false); // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInstrumentationConfiguration                               = new ExternalOffset<UPlayFabJsonObject>(0x0060, true);        // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMetaData                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0068, true);        // 0x0068(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMultiplayerServerCountPerVm                                = new ExternalOffset<int>(0x0070);                             // 0x0070(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPorts                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0078, false); // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offRegionConfigurations                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0088, false); // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStartMultiplayerServerCommand                              = new ExternalOffset<FString>(0x0098, false);                  // 0x0098(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAzureVmSize>                       _offVmSize                                                     = new ExternalOffset<EAzureVmSize>(0x00A8, false);             // 0x00A8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             BuildName                                                      => _offBuildName.GetValue();
	public EContainerFlavor                                    ContainerFlavor                                                => _offContainerFlavor.GetValue();
	public FString                                             CreationTime                                                   => _offCreationTime.GetValue();
	public TArray<UPlayFabJsonObject>                          GameAssetReferences                                            => _offGameAssetReferences.GetValue();
	public TArray<UPlayFabJsonObject>                          GameCertificateReferences                                      => _offGameCertificateReferences.GetValue();
	public UPlayFabJsonObject                                  InstrumentationConfiguration                                   => _offInstrumentationConfiguration.GetValue();
	public UPlayFabJsonObject                                  MetaData                                                       => _offMetaData.GetValue();
	public int                                                 MultiplayerServerCountPerVm                                    => _offMultiplayerServerCountPerVm.GetValue();
	public TArray<UPlayFabJsonObject>                          Ports                                                          => _offPorts.GetValue();
	public TArray<UPlayFabJsonObject>                          RegionConfigurations                                           => _offRegionConfigurations.GetValue();
	public FString                                             StartMultiplayerServerCommand                                  => _offStartMultiplayerServerCommand.GetValue();
	public EAzureVmSize                                        VmSize                                                         => _offVmSize.GetValue();
	#endregion

	public FMultiplayerCreateBuildWithManagedContainerResponse(FString c_BuildId, FString c_BuildName, EContainerFlavor c_ContainerFlavor, FString c_CreationTime, TArray<UPlayFabJsonObject> c_GameAssetReferences, TArray<UPlayFabJsonObject> c_GameCertificateReferences, UPlayFabJsonObject c_InstrumentationConfiguration, UPlayFabJsonObject c_MetaData, int c_MultiplayerServerCountPerVm, TArray<UPlayFabJsonObject> c_Ports, TArray<UPlayFabJsonObject> c_RegionConfigurations, FString c_StartMultiplayerServerCommand, EAzureVmSize c_VmSize) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offBuildName.SetValue(c_BuildName);
		_offContainerFlavor.SetValue(c_ContainerFlavor);
		_offCreationTime.SetValue(c_CreationTime);
		_offGameAssetReferences.SetValue(c_GameAssetReferences);
		_offGameCertificateReferences.SetValue(c_GameCertificateReferences);
		_offInstrumentationConfiguration.SetValue(c_InstrumentationConfiguration);
		_offMetaData.SetValue(c_MetaData);
		_offMultiplayerServerCountPerVm.SetValue(c_MultiplayerServerCountPerVm);
		_offPorts.SetValue(c_Ports);
		_offRegionConfigurations.SetValue(c_RegionConfigurations);
		_offStartMultiplayerServerCommand.SetValue(c_StartMultiplayerServerCommand);
		_offVmSize.SetValue(c_VmSize);
	}
}
// ScriptStruct PlayFab.ServerUnlinkXboxAccountRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerUnlinkXboxAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FServerUnlinkXboxAccountRequest(FString c_PlayFabId, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerTagsRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminGetPlayerTagsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offNamespace                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Namespace                                                      => _offNamespace.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminGetPlayerTagsRequest(FString c_Namespace, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNamespace.SetValue(c_Namespace);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetPaymentTokenRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPaymentTokenRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTokenProvider                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TokenProvider                                                  => _offTokenProvider.GetValue();
	#endregion

	public FClientGetPaymentTokenRequest(FString c_TokenProvider) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTokenProvider.SetValue(c_TokenProvider);
	}
}
// ScriptStruct PlayFab.ServerGetCharacterDataResult
// 0x0030 (0x0038 - 0x0008)
public class FServerGetCharacterDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetCharacterDataResult(FString c_CharacterId, UPlayFabJsonObject c_Data, int c_DataVersion, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offData.SetValue(c_Data);
		_offDataVersion.SetValue(c_DataVersion);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetCharacterInventoryResult
// 0x0030 (0x0038 - 0x0008)
public class FClientGetCharacterInventoryResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offInventory                                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrency                                            = new ExternalOffset<UPlayFabJsonObject>(0x0028, true);        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrencyRechargeTimes                               = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public TArray<UPlayFabJsonObject>                          Inventory                                                      => _offInventory.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrencyRechargeTimes                                   => _offVirtualCurrencyRechargeTimes.GetValue();
	#endregion

	public FClientGetCharacterInventoryResult(FString c_CharacterId, TArray<UPlayFabJsonObject> c_Inventory, UPlayFabJsonObject c_VirtualCurrency, UPlayFabJsonObject c_VirtualCurrencyRechargeTimes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offInventory.SetValue(c_Inventory);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
		_offVirtualCurrencyRechargeTimes.SetValue(c_VirtualCurrencyRechargeTimes);
	}
}
// ScriptStruct PlayFab.ClientGetPhotonAuthenticationTokenRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPhotonAuthenticationTokenRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPhotonApplicationId                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PhotonApplicationId                                            => _offPhotonApplicationId.GetValue();
	#endregion

	public FClientGetPhotonAuthenticationTokenRequest(FString c_PhotonApplicationId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPhotonApplicationId.SetValue(c_PhotonApplicationId);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerStatisticVersionsRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPlayerStatisticVersionsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FAdminGetPlayerStatisticVersionsRequest(FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.ClientStartGameRequest
// 0x0058 (0x0060 - 0x0008)
public class FClientStartGameRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildVersion                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCustomCommandLineData                                      = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGameMode                                                   = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERegion>                            _offRegion                                                     = new ExternalOffset<ERegion>(0x0048, false);                  // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildVersion                                                   => _offBuildVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             CustomCommandLineData                                          => _offCustomCommandLineData.GetValue();
	public FString                                             GameMode                                                       => _offGameMode.GetValue();
	public ERegion                                             Region                                                         => _offRegion.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FClientStartGameRequest(FString c_BuildVersion, FString c_CharacterId, FString c_CustomCommandLineData, FString c_GameMode, ERegion c_Region, FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildVersion.SetValue(c_BuildVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offCustomCommandLineData.SetValue(c_CustomCommandLineData);
		_offGameMode.SetValue(c_GameMode);
		_offRegion.SetValue(c_Region);
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.ServerUnlockContainerInstanceRequest
// 0x0050 (0x0058 - 0x0008)
public class FServerUnlockContainerInstanceRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offContainerItemInstanceId                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeyItemInstanceId                                          = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ContainerItemInstanceId                                        => _offContainerItemInstanceId.GetValue();
	public FString                                             KeyItemInstanceId                                              => _offKeyItemInstanceId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerUnlockContainerInstanceRequest(FString c_CatalogVersion, FString c_CharacterId, FString c_ContainerItemInstanceId, FString c_KeyItemInstanceId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offContainerItemInstanceId.SetValue(c_ContainerItemInstanceId);
		_offKeyItemInstanceId.SetValue(c_KeyItemInstanceId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetCharacterLeaderboardResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetCharacterLeaderboardResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	#endregion

	public FClientGetCharacterLeaderboardResult(TArray<UPlayFabJsonObject> c_Leaderboard) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerCombinedInfoRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientGetPlayerCombinedInfoRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FClientGetPlayerCombinedInfoRequest(UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerStatisticDefinitionsRequest
// 0x0000 (0x0008 - 0x0008)
public class FAdminGetPlayerStatisticDefinitionsRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminGetPlayerStatisticDefinitionsRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetCharacterInventoryResult
// 0x0040 (0x0048 - 0x0008)
public class FServerGetCharacterInventoryResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offInventory                                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrency                                            = new ExternalOffset<UPlayFabJsonObject>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrencyRechargeTimes                               = new ExternalOffset<UPlayFabJsonObject>(0x0040, true);        // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public TArray<UPlayFabJsonObject>                          Inventory                                                      => _offInventory.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrencyRechargeTimes                                   => _offVirtualCurrencyRechargeTimes.GetValue();
	#endregion

	public FServerGetCharacterInventoryResult(FString c_CharacterId, TArray<UPlayFabJsonObject> c_Inventory, FString c_PlayFabId, UPlayFabJsonObject c_VirtualCurrency, UPlayFabJsonObject c_VirtualCurrencyRechargeTimes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offInventory.SetValue(c_Inventory);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
		_offVirtualCurrencyRechargeTimes.SetValue(c_VirtualCurrencyRechargeTimes);
	}
}
// ScriptStruct PlayFab.ServerUnlockContainerItemRequest
// 0x0040 (0x0048 - 0x0008)
public class FServerUnlockContainerItemRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offContainerItemId                                            = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ContainerItemId                                                => _offContainerItemId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerUnlockContainerItemRequest(FString c_CatalogVersion, FString c_CharacterId, FString c_ContainerItemId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offContainerItemId.SetValue(c_ContainerItemId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientStartPurchaseRequest
// 0x0030 (0x0038 - 0x0008)
public class FClientStartPurchaseRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItems                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public TArray<UPlayFabJsonObject>                          Items                                                          => _offItems.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	#endregion

	public FClientStartPurchaseRequest(FString c_CatalogVersion, TArray<UPlayFabJsonObject> c_Items, FString c_StoreId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offItems.SetValue(c_Items);
		_offStoreId.SetValue(c_StoreId);
	}
}
// ScriptStruct PlayFab.ClientGetCharacterStatisticsResult
// 0x0008 (0x0010 - 0x0008)
public class FClientGetCharacterStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offCharacterStatistics                                        = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  CharacterStatistics                                            => _offCharacterStatistics.GetValue();
	#endregion

	public FClientGetCharacterStatisticsResult(UPlayFabJsonObject c_CharacterStatistics) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterStatistics.SetValue(c_CharacterStatistics);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateBuildWithManagedContainerRequest
// 0x0088 (0x0090 - 0x0008)
public class FMultiplayerCreateBuildWithManagedContainerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildName                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EContainerFlavor>                   _offContainerFlavor                                            = new ExternalOffset<EContainerFlavor>(0x0018, false);         // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameAssetReferences                                        = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0020, false); // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameCertificateReferences                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0030, false); // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInstrumentationConfiguration                               = new ExternalOffset<UPlayFabJsonObject>(0x0040, true);        // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMetaData                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0048, true);        // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMultiplayerServerCountPerVm                                = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPorts                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0058, false); // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offRegionConfigurations                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0068, false); // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStartMultiplayerServerCommand                              = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAzureVmSize>                       _offVmSize                                                     = new ExternalOffset<EAzureVmSize>(0x0088, false);             // 0x0088(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildName                                                      => _offBuildName.GetValue();
	public EContainerFlavor                                    ContainerFlavor                                                => _offContainerFlavor.GetValue();
	public TArray<UPlayFabJsonObject>                          GameAssetReferences                                            => _offGameAssetReferences.GetValue();
	public TArray<UPlayFabJsonObject>                          GameCertificateReferences                                      => _offGameCertificateReferences.GetValue();
	public UPlayFabJsonObject                                  InstrumentationConfiguration                                   => _offInstrumentationConfiguration.GetValue();
	public UPlayFabJsonObject                                  MetaData                                                       => _offMetaData.GetValue();
	public int                                                 MultiplayerServerCountPerVm                                    => _offMultiplayerServerCountPerVm.GetValue();
	public TArray<UPlayFabJsonObject>                          Ports                                                          => _offPorts.GetValue();
	public TArray<UPlayFabJsonObject>                          RegionConfigurations                                           => _offRegionConfigurations.GetValue();
	public FString                                             StartMultiplayerServerCommand                                  => _offStartMultiplayerServerCommand.GetValue();
	public EAzureVmSize                                        VmSize                                                         => _offVmSize.GetValue();
	#endregion

	public FMultiplayerCreateBuildWithManagedContainerRequest(FString c_BuildName, EContainerFlavor c_ContainerFlavor, TArray<UPlayFabJsonObject> c_GameAssetReferences, TArray<UPlayFabJsonObject> c_GameCertificateReferences, UPlayFabJsonObject c_InstrumentationConfiguration, UPlayFabJsonObject c_MetaData, int c_MultiplayerServerCountPerVm, TArray<UPlayFabJsonObject> c_Ports, TArray<UPlayFabJsonObject> c_RegionConfigurations, FString c_StartMultiplayerServerCommand, EAzureVmSize c_VmSize) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildName.SetValue(c_BuildName);
		_offContainerFlavor.SetValue(c_ContainerFlavor);
		_offGameAssetReferences.SetValue(c_GameAssetReferences);
		_offGameCertificateReferences.SetValue(c_GameCertificateReferences);
		_offInstrumentationConfiguration.SetValue(c_InstrumentationConfiguration);
		_offMetaData.SetValue(c_MetaData);
		_offMultiplayerServerCountPerVm.SetValue(c_MultiplayerServerCountPerVm);
		_offPorts.SetValue(c_Ports);
		_offRegionConfigurations.SetValue(c_RegionConfigurations);
		_offStartMultiplayerServerCommand.SetValue(c_StartMultiplayerServerCommand);
		_offVmSize.SetValue(c_VmSize);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerProfileRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientGetPlayerProfileRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	#endregion

	public FClientGetPlayerProfileRequest(FString c_PlayFabId, UPlayFabJsonObject c_ProfileConstraints) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
	}
}
// ScriptStruct PlayFab.ServerUpdateAvatarUrlRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerUpdateAvatarUrlRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offImageUrl                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ImageUrl                                                       => _offImageUrl.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerUpdateAvatarUrlRequest(FString c_ImageUrl, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offImageUrl.SetValue(c_ImageUrl);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetPlayersInSegmentRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminGetPlayersInSegmentRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offContinuationToken                                          = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxBatchSize                                               = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSecondsToLive                                              = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSegmentId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ContinuationToken                                              => _offContinuationToken.GetValue();
	public int                                                 MaxBatchSize                                                   => _offMaxBatchSize.GetValue();
	public int                                                 SecondsToLive                                                  => _offSecondsToLive.GetValue();
	public FString                                             SegmentId                                                      => _offSegmentId.GetValue();
	#endregion

	public FAdminGetPlayersInSegmentRequest(FString c_ContinuationToken, int c_MaxBatchSize, int c_SecondsToLive, FString c_SegmentId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContinuationToken.SetValue(c_ContinuationToken);
		_offMaxBatchSize.SetValue(c_MaxBatchSize);
		_offSecondsToLive.SetValue(c_SecondsToLive);
		_offSegmentId.SetValue(c_SegmentId);
	}
}
// ScriptStruct PlayFab.ClientGetContentDownloadUrlResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetContentDownloadUrlResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offURL                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             URL                                                            => _offURL.GetValue();
	#endregion

	public FClientGetContentDownloadUrlResult(FString c_URL) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offURL.SetValue(c_URL);
	}
}
// ScriptStruct PlayFab.ServerGetCharacterLeaderboardResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetCharacterLeaderboardResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	#endregion

	public FServerGetCharacterLeaderboardResult(TArray<UPlayFabJsonObject> c_Leaderboard) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
	}
}
// ScriptStruct PlayFab.ClientSubtractUserVirtualCurrencyRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientSubtractUserVirtualCurrencyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FClientSubtractUserVirtualCurrencyRequest(int c_Amount, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateMatchmakingTicketResult
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerCreateMatchmakingTicketResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTicketId                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TicketId                                                       => _offTicketId.GetValue();
	#endregion

	public FMultiplayerCreateMatchmakingTicketResult(FString c_TicketId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTicketId.SetValue(c_TicketId);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerSharedSecretsRequest
// 0x0000 (0x0008 - 0x0008)
public class FAdminGetPlayerSharedSecretsRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminGetPlayerSharedSecretsRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetPlayerSegmentsRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientGetPlayerSegmentsRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientGetPlayerSegmentsRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerUpdateBansRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerUpdateBansRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBans                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Bans                                                           => _offBans.GetValue();
	#endregion

	public FServerUpdateBansRequest(TArray<UPlayFabJsonObject> c_Bans) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBans.SetValue(c_Bans);
	}
}
// ScriptStruct PlayFab.ClientCurrentGamesResult
// 0x0020 (0x0028 - 0x0008)
public class FClientCurrentGamesResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offGameCount                                                  = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGames                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPlayerCount                                                = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 GameCount                                                      => _offGameCount.GetValue();
	public TArray<UPlayFabJsonObject>                          Games                                                          => _offGames.GetValue();
	public int                                                 PlayerCount                                                    => _offPlayerCount.GetValue();
	#endregion

	public FClientCurrentGamesResult(int c_GameCount, TArray<UPlayFabJsonObject> c_Games, int c_PlayerCount) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGameCount.SetValue(c_GameCount);
		_offGames.SetValue(c_Games);
		_offPlayerCount.SetValue(c_PlayerCount);
	}
}
// ScriptStruct PlayFab.ClientUnlinkAndroidDeviceIDRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUnlinkAndroidDeviceIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAndroidDeviceId                                            = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AndroidDeviceId                                                => _offAndroidDeviceId.GetValue();
	#endregion

	public FClientUnlinkAndroidDeviceIDRequest(FString c_AndroidDeviceId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAndroidDeviceId.SetValue(c_AndroidDeviceId);
	}
}
// ScriptStruct PlayFab.ServerGetCharacterStatisticsResult
// 0x0028 (0x0030 - 0x0008)
public class FServerGetCharacterStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offCharacterStatistics                                        = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public UPlayFabJsonObject                                  CharacterStatistics                                            => _offCharacterStatistics.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetCharacterStatisticsResult(FString c_CharacterId, UPlayFabJsonObject c_CharacterStatistics, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offCharacterStatistics.SetValue(c_CharacterStatistics);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateMatchmakingTicketRequest
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerCreateMatchmakingTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offCreator                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offGiveUpAfterSeconds                                         = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembersToMatchWith                                         = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Creator                                                        => _offCreator.GetValue();
	public int                                                 GiveUpAfterSeconds                                             => _offGiveUpAfterSeconds.GetValue();
	public TArray<UPlayFabJsonObject>                          MembersToMatchWith                                             => _offMembersToMatchWith.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	#endregion

	public FMultiplayerCreateMatchmakingTicketRequest(UPlayFabJsonObject c_Creator, int c_GiveUpAfterSeconds, TArray<UPlayFabJsonObject> c_MembersToMatchWith, FString c_QueueName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreator.SetValue(c_Creator);
		_offGiveUpAfterSeconds.SetValue(c_GiveUpAfterSeconds);
		_offMembersToMatchWith.SetValue(c_MembersToMatchWith);
		_offQueueName.SetValue(c_QueueName);
	}
}
// ScriptStruct PlayFab.AdminGetPlayersSegmentsRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPlayersSegmentsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminGetPlayersSegmentsRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientUnlinkCustomIDRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUnlinkCustomIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCustomId                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CustomId                                                       => _offCustomId.GetValue();
	#endregion

	public FClientUnlinkCustomIDRequest(FString c_CustomId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCustomId.SetValue(c_CustomId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerStatisticsRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientGetPlayerStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offStatisticNames                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatisticNameVersions                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             StatisticNames                                                 => _offStatisticNames.GetValue();
	public TArray<UPlayFabJsonObject>                          StatisticNameVersions                                          => _offStatisticNameVersions.GetValue();
	#endregion

	public FClientGetPlayerStatisticsRequest(FString c_StatisticNames, TArray<UPlayFabJsonObject> c_StatisticNameVersions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatisticNames.SetValue(c_StatisticNames);
		_offStatisticNameVersions.SetValue(c_StatisticNameVersions);
	}
}
// ScriptStruct PlayFab.ServerGetContentDownloadUrlResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetContentDownloadUrlResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offURL                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             URL                                                            => _offURL.GetValue();
	#endregion

	public FServerGetContentDownloadUrlResult(FString c_URL) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offURL.SetValue(c_URL);
	}
}
// ScriptStruct PlayFab.ClientGetLeaderboardResult
// 0x0028 (0x0030 - 0x0008)
public class FClientGetLeaderboardResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNextReset                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	public FString                                             NextReset                                                      => _offNextReset.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FClientGetLeaderboardResult(TArray<UPlayFabJsonObject> c_Leaderboard, FString c_NextReset, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
		_offNextReset.SetValue(c_NextReset);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.ClientUnlinkFacebookAccountRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkFacebookAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkFacebookAccountRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerCreateRemoteUserResponse
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerCreateRemoteUserResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offExpirationTime                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPassword                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ExpirationTime                                                 => _offExpirationTime.GetValue();
	public FString                                             Password                                                       => _offPassword.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FMultiplayerCreateRemoteUserResponse(FString c_ExpirationTime, FString c_Password, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offExpirationTime.SetValue(c_ExpirationTime);
		_offPassword.SetValue(c_Password);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerStatisticVersionsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayerStatisticVersionsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FClientGetPlayerStatisticVersionsRequest(FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerProfileRequest
// 0x0018 (0x0020 - 0x0008)
public class FAdminGetPlayerProfileRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	#endregion

	public FAdminGetPlayerProfileRequest(FString c_PlayFabId, UPlayFabJsonObject c_ProfileConstraints) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
	}
}
// ScriptStruct PlayFab.ClientGetFriendLeaderboardAroundPlayerResult
// 0x0028 (0x0030 - 0x0008)
public class FClientGetFriendLeaderboardAroundPlayerResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNextReset                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	public FString                                             NextReset                                                      => _offNextReset.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FClientGetFriendLeaderboardAroundPlayerResult(TArray<UPlayFabJsonObject> c_Leaderboard, FString c_NextReset, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
		_offNextReset.SetValue(c_NextReset);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.ClientUnlinkFacebookInstantGamesIdRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUnlinkFacebookInstantGamesIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFacebookInstantGamesId                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FacebookInstantGamesId                                         => _offFacebookInstantGamesId.GetValue();
	#endregion

	public FClientUnlinkFacebookInstantGamesIdRequest(FString c_FacebookInstantGamesId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFacebookInstantGamesId.SetValue(c_FacebookInstantGamesId);
	}
}
// ScriptStruct PlayFab.ServerGetLeaderboardResult
// 0x0028 (0x0030 - 0x0008)
public class FServerGetLeaderboardResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNextReset                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	public FString                                             NextReset                                                      => _offNextReset.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FServerGetLeaderboardResult(TArray<UPlayFabJsonObject> c_Leaderboard, FString c_NextReset, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
		_offNextReset.SetValue(c_NextReset);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.ServerUpdateCharacterStatisticsRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerUpdateCharacterStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offCharacterStatistics                                        = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public UPlayFabJsonObject                                  CharacterStatistics                                            => _offCharacterStatistics.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerUpdateCharacterStatisticsRequest(FString c_CharacterId, UPlayFabJsonObject c_CharacterStatistics, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offCharacterStatistics.SetValue(c_CharacterStatistics);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerTagsRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientGetPlayerTagsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offNamespace                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Namespace                                                      => _offNamespace.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FClientGetPlayerTagsRequest(FString c_Namespace, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNamespace.SetValue(c_Namespace);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetFriendsListResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetFriendsListResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offFriends                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Friends                                                        => _offFriends.GetValue();
	#endregion

	public FClientGetFriendsListResult(TArray<UPlayFabJsonObject> c_Friends) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFriends.SetValue(c_Friends);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateRemoteUserRequest
// 0x0050 (0x0058 - 0x0008)
public class FMultiplayerCreateRemoteUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offExpirationTime                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVmId                                                       = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             ExpirationTime                                                 => _offExpirationTime.GetValue();
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	public FString                                             VmId                                                           => _offVmId.GetValue();
	#endregion

	public FMultiplayerCreateRemoteUserRequest(FString c_BuildId, FString c_ExpirationTime, FString c_Region, FString c_username, FString c_VmId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offExpirationTime.SetValue(c_ExpirationTime);
		_offRegion.SetValue(c_Region);
		_offusername.SetValue(c_username);
		_offVmId.SetValue(c_VmId);
	}
}
// ScriptStruct PlayFab.ClientUnlinkGameCenterAccountRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkGameCenterAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkGameCenterAccountRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetFriendsListResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetFriendsListResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offFriends                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Friends                                                        => _offFriends.GetValue();
	#endregion

	public FServerGetFriendsListResult(TArray<UPlayFabJsonObject> c_Friends) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFriends.SetValue(c_Friends);
	}
}
// ScriptStruct PlayFab.ServerUpdatePlayerStatisticsRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerUpdatePlayerStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offForceUpdate                                                = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatistics                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0020, false); // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      ForceUpdate                                                    => _offForceUpdate.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public TArray<UPlayFabJsonObject>                          Statistics                                                     => _offStatistics.GetValue();
	#endregion

	public FServerUpdatePlayerStatisticsRequest(byte/*(bool)*/ c_ForceUpdate, FString c_PlayFabId, TArray<UPlayFabJsonObject> c_Statistics) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offForceUpdate.SetValue(c_ForceUpdate);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offStatistics.SetValue(c_Statistics);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerIdFromAuthTokenRequest
// 0x0018 (0x0020 - 0x0008)
public class FAdminGetPlayerIdFromAuthTokenRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offToken                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAuthTokenType>                     _offTokenType                                                  = new ExternalOffset<EAuthTokenType>(0x0018, false);           // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Token                                                          => _offToken.GetValue();
	public EAuthTokenType                                      TokenType                                                      => _offTokenType.GetValue();
	#endregion

	public FAdminGetPlayerIdFromAuthTokenRequest(FString c_Token, EAuthTokenType c_TokenType) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offToken.SetValue(c_Token);
		_offTokenType.SetValue(c_TokenType);
	}
}
// ScriptStruct PlayFab.ClientGameServerRegionsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGameServerRegionsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offRegions                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Regions                                                        => _offRegions.GetValue();
	#endregion

	public FClientGameServerRegionsResult(TArray<UPlayFabJsonObject> c_Regions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRegions.SetValue(c_Regions);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateServerBackfillTicketResult
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerCreateServerBackfillTicketResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTicketId                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TicketId                                                       => _offTicketId.GetValue();
	#endregion

	public FMultiplayerCreateServerBackfillTicketResult(FString c_TicketId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTicketId.SetValue(c_TicketId);
	}
}
// ScriptStruct PlayFab.ClientUnlinkGoogleAccountRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkGoogleAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkGoogleAccountRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetPlayerTradesRequest
// 0x0008 (0x0010 - 0x0008)
public class FClientGetPlayerTradesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<ETradeStatus>                       _offStatusFilter                                               = new ExternalOffset<ETradeStatus>(0x0008, false);             // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ETradeStatus                                        StatusFilter                                                   => _offStatusFilter.GetValue();
	#endregion

	public FClientGetPlayerTradesRequest(ETradeStatus c_StatusFilter) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatusFilter.SetValue(c_StatusFilter);
	}
}
// ScriptStruct PlayFab.ServerGetLeaderboardAroundCharacterResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetLeaderboardAroundCharacterResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	#endregion

	public FServerGetLeaderboardAroundCharacterResult(TArray<UPlayFabJsonObject> c_Leaderboard) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
	}
}
// ScriptStruct PlayFab.AdminGetPlayedTitleListRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPlayedTitleListRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminGetPlayedTitleListRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetLeaderboardAroundCharacterResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetLeaderboardAroundCharacterResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	#endregion

	public FClientGetLeaderboardAroundCharacterResult(TArray<UPlayFabJsonObject> c_Leaderboard) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
	}
}
// ScriptStruct PlayFab.ClientUnlinkIOSDeviceIDRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUnlinkIOSDeviceIDRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDeviceID                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DeviceID                                                       => _offDeviceID.GetValue();
	#endregion

	public FClientUnlinkIOSDeviceIDRequest(FString c_DeviceID) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDeviceID.SetValue(c_DeviceID);
	}
}
// ScriptStruct PlayFab.ServerUpdateSharedGroupDataRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerUpdateSharedGroupDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeysToRemove                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EUserDataPermission>                _offPermission                                                 = new ExternalOffset<EUserDataPermission>(0x0020, false);      // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             KeysToRemove                                                   => _offKeysToRemove.GetValue();
	public EUserDataPermission                                 Permission                                                     => _offPermission.GetValue();
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FServerUpdateSharedGroupDataRequest(UPlayFabJsonObject c_Data, FString c_KeysToRemove, EUserDataPermission c_Permission, FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offKeysToRemove.SetValue(c_KeysToRemove);
		_offPermission.SetValue(c_Permission);
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateServerBackfillTicketRequest
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerCreateServerBackfillTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offGiveUpAfterSeconds                                         = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembers                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offServerDetails                                              = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 GiveUpAfterSeconds                                             => _offGiveUpAfterSeconds.GetValue();
	public TArray<UPlayFabJsonObject>                          Members                                                        => _offMembers.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	public UPlayFabJsonObject                                  ServerDetails                                                  => _offServerDetails.GetValue();
	#endregion

	public FMultiplayerCreateServerBackfillTicketRequest(int c_GiveUpAfterSeconds, TArray<UPlayFabJsonObject> c_Members, FString c_QueueName, UPlayFabJsonObject c_ServerDetails) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGiveUpAfterSeconds.SetValue(c_GiveUpAfterSeconds);
		_offMembers.SetValue(c_Members);
		_offQueueName.SetValue(c_QueueName);
		_offServerDetails.SetValue(c_ServerDetails);
	}
}
// ScriptStruct PlayFab.ClientGetLeaderboardAroundPlayerResult
// 0x0028 (0x0030 - 0x0008)
public class FClientGetLeaderboardAroundPlayerResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNextReset                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	public FString                                             NextReset                                                      => _offNextReset.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FClientGetLeaderboardAroundPlayerResult(TArray<UPlayFabJsonObject> c_Leaderboard, FString c_NextReset, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
		_offNextReset.SetValue(c_NextReset);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.AdminGetMatchmakerGameModesRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetMatchmakerGameModesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildVersion                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildVersion                                                   => _offBuildVersion.GetValue();
	#endregion

	public FAdminGetMatchmakerGameModesRequest(FString c_BuildVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildVersion.SetValue(c_BuildVersion);
	}
}
// ScriptStruct PlayFab.ClientUnlinkKongregateAccountRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkKongregateAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkKongregateAccountRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromFacebookIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromFacebookIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFacebookIDs                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FacebookIDs                                                    => _offFacebookIDs.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromFacebookIDsRequest(FString c_FacebookIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFacebookIDs.SetValue(c_FacebookIDs);
	}
}
// ScriptStruct PlayFab.ServerGetLeaderboardAroundUserResult
// 0x0028 (0x0030 - 0x0008)
public class FServerGetLeaderboardAroundUserResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNextReset                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	public FString                                             NextReset                                                      => _offNextReset.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FServerGetLeaderboardAroundUserResult(TArray<UPlayFabJsonObject> c_Leaderboard, FString c_NextReset, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
		_offNextReset.SetValue(c_NextReset);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.ClientGetLeaderboardForUsersCharactersResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetLeaderboardForUsersCharactersResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	#endregion

	public FClientGetLeaderboardForUsersCharactersResult(TArray<UPlayFabJsonObject> c_Leaderboard) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
	}
}
// ScriptStruct PlayFab.MultiplayerCreateServerMatchmakingTicketRequest
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerCreateServerMatchmakingTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offGiveUpAfterSeconds                                         = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembers                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 GiveUpAfterSeconds                                             => _offGiveUpAfterSeconds.GetValue();
	public TArray<UPlayFabJsonObject>                          Members                                                        => _offMembers.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	#endregion

	public FMultiplayerCreateServerMatchmakingTicketRequest(int c_GiveUpAfterSeconds, TArray<UPlayFabJsonObject> c_Members, FString c_QueueName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGiveUpAfterSeconds.SetValue(c_GiveUpAfterSeconds);
		_offMembers.SetValue(c_Members);
		_offQueueName.SetValue(c_QueueName);
	}
}
// ScriptStruct PlayFab.ServerUpdateUserDataRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerUpdateUserDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeysToRemove                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EUserDataPermission>                _offPermission                                                 = new ExternalOffset<EUserDataPermission>(0x0020, false);      // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             KeysToRemove                                                   => _offKeysToRemove.GetValue();
	public EUserDataPermission                                 Permission                                                     => _offPermission.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerUpdateUserDataRequest(UPlayFabJsonObject c_Data, FString c_KeysToRemove, EUserDataPermission c_Permission, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offKeysToRemove.SetValue(c_KeysToRemove);
		_offPermission.SetValue(c_Permission);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientUnlinkNintendoSwitchDeviceIdRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUnlinkNintendoSwitchDeviceIdRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offNintendoSwitchDeviceId                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             NintendoSwitchDeviceId                                         => _offNintendoSwitchDeviceId.GetValue();
	#endregion

	public FClientUnlinkNintendoSwitchDeviceIdRequest(FString c_NintendoSwitchDeviceId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNintendoSwitchDeviceId.SetValue(c_NintendoSwitchDeviceId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFacebookInstantGamesIds                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FacebookInstantGamesIds                                        => _offFacebookInstantGamesIds.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromFacebookInstantGamesIdsRequest(FString c_FacebookInstantGamesIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFacebookInstantGamesIds.SetValue(c_FacebookInstantGamesIds);
	}
}
// ScriptStruct PlayFab.AdminGetMatchmakerGameInfoRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetMatchmakerGameInfoRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	#endregion

	public FAdminGetMatchmakerGameInfoRequest(FString c_LobbyId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
	}
}
// ScriptStruct PlayFab.MultiplayerEmptyResponse
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerEmptyResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerEmptyResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetLeaderboardForUsersCharactersResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetLeaderboardForUsersCharactersResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLeaderboard                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Leaderboard                                                    => _offLeaderboard.GetValue();
	#endregion

	public FServerGetLeaderboardForUsersCharactersResult(TArray<UPlayFabJsonObject> c_Leaderboard) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLeaderboard.SetValue(c_Leaderboard);
	}
}
// ScriptStruct PlayFab.ClientGetPaymentTokenResult
// 0x0020 (0x0028 - 0x0008)
public class FClientGetPaymentTokenResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offProviderToken                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	public FString                                             ProviderToken                                                  => _offProviderToken.GetValue();
	#endregion

	public FClientGetPaymentTokenResult(FString c_OrderId, FString c_ProviderToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOrderId.SetValue(c_OrderId);
		_offProviderToken.SetValue(c_ProviderToken);
	}
}
// ScriptStruct PlayFab.ClientUninkOpenIdConnectRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUninkOpenIdConnectRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offConnectionId                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ConnectionId                                                   => _offConnectionId.GetValue();
	#endregion

	public FClientUninkOpenIdConnectRequest(FString c_ConnectionId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConnectionId.SetValue(c_ConnectionId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGameCenterIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromGameCenterIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offGameCenterIDs                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             GameCenterIDs                                                  => _offGameCenterIDs.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromGameCenterIDsRequest(FString c_GameCenterIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGameCenterIDs.SetValue(c_GameCenterIDs);
	}
}
// ScriptStruct PlayFab.ServerUpdateUserInternalDataRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerUpdateUserInternalDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeysToRemove                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             KeysToRemove                                                   => _offKeysToRemove.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerUpdateUserInternalDataRequest(UPlayFabJsonObject c_Data, FString c_KeysToRemove, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offKeysToRemove.SetValue(c_KeysToRemove);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetDataReportRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminGetDataReportRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offDay                                                        = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMonth                                                      = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReportName                                                 = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offYear                                                       = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Day                                                            => _offDay.GetValue();
	public int                                                 Month                                                          => _offMonth.GetValue();
	public FString                                             ReportName                                                     => _offReportName.GetValue();
	public int                                                 Year                                                           => _offYear.GetValue();
	#endregion

	public FAdminGetDataReportRequest(int c_Day, int c_Month, FString c_ReportName, int c_Year) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDay.SetValue(c_Day);
		_offMonth.SetValue(c_Month);
		_offReportName.SetValue(c_ReportName);
		_offYear.SetValue(c_Year);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerCombinedInfoResult
// 0x0018 (0x0020 - 0x0008)
public class FServerGetPlayerCombinedInfoResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoResultPayload                                          = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  InfoResultPayload                                              => _offInfoResultPayload.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetPlayerCombinedInfoResult(UPlayFabJsonObject c_InfoResultPayload, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInfoResultPayload.SetValue(c_InfoResultPayload);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientUnlinkPSNAccountRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkPSNAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkPSNAccountRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetPhotonAuthenticationTokenResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPhotonAuthenticationTokenResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPhotonCustomAuthenticationToken                            = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PhotonCustomAuthenticationToken                                => _offPhotonCustomAuthenticationToken.GetValue();
	#endregion

	public FClientGetPhotonAuthenticationTokenResult(FString c_PhotonCustomAuthenticationToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPhotonCustomAuthenticationToken.SetValue(c_PhotonCustomAuthenticationToken);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGenericIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromGenericIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGenericIDs                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          GenericIDs                                                     => _offGenericIDs.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromGenericIDsRequest(TArray<UPlayFabJsonObject> c_GenericIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGenericIDs.SetValue(c_GenericIDs);
	}
}
// ScriptStruct PlayFab.MultiplayerEnableMultiplayerServersForTitleResponse
// 0x0008 (0x0010 - 0x0008)
public class FMultiplayerEnableMultiplayerServersForTitleResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<ETitleMultiplayerServerEnabledStatus> _offStatus                                                     = new ExternalOffset<ETitleMultiplayerServerEnabledStatus>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ETitleMultiplayerServerEnabledStatus                Status                                                         => _offStatus.GetValue();
	#endregion

	public FMultiplayerEnableMultiplayerServersForTitleResponse(ETitleMultiplayerServerEnabledStatus c_Status) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatus.SetValue(c_Status);
	}
}
// ScriptStruct PlayFab.ClientUnlinkSteamAccountRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkSteamAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkSteamAccountRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminGetContentUploadUrlRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminGetContentUploadUrlRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offContentType                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKey                                                        = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ContentType                                                    => _offContentType.GetValue();
	public FString                                             Key                                                            => _offKey.GetValue();
	#endregion

	public FAdminGetContentUploadUrlRequest(FString c_ContentType, FString c_Key) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContentType.SetValue(c_ContentType);
		_offKey.SetValue(c_Key);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerProfileResult
// 0x0008 (0x0010 - 0x0008)
public class FServerGetPlayerProfileResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offPlayerProfile                                              = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  PlayerProfile                                                  => _offPlayerProfile.GetValue();
	#endregion

	public FServerGetPlayerProfileResult(UPlayFabJsonObject c_PlayerProfile) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayerProfile.SetValue(c_PlayerProfile);
	}
}
// ScriptStruct PlayFab.ServerUpdateUserInventoryItemDataRequest
// 0x0048 (0x0050 - 0x0008)
public class FServerUpdateUserInventoryItemDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeysToRemove                                               = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public FString                                             KeysToRemove                                                   => _offKeysToRemove.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerUpdateUserInventoryItemDataRequest(FString c_CharacterId, UPlayFabJsonObject c_Data, FString c_ItemInstanceId, FString c_KeysToRemove, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offData.SetValue(c_Data);
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offKeysToRemove.SetValue(c_KeysToRemove);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerCombinedInfoResult
// 0x0018 (0x0020 - 0x0008)
public class FClientGetPlayerCombinedInfoResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoResultPayload                                          = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  InfoResultPayload                                              => _offInfoResultPayload.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FClientGetPlayerCombinedInfoResult(UPlayFabJsonObject c_InfoResultPayload, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInfoResultPayload.SetValue(c_InfoResultPayload);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGoogleIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromGoogleIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offGoogleIDs                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             GoogleIDs                                                      => _offGoogleIDs.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromGoogleIDsRequest(FString c_GoogleIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGoogleIDs.SetValue(c_GoogleIDs);
	}
}
// ScriptStruct PlayFab.ClientUnlinkTwitchAccountRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientUnlinkTwitchAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientUnlinkTwitchAccountRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminGetContentListRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetContentListRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPrefix                                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Prefix                                                         => _offPrefix.GetValue();
	#endregion

	public FAdminGetContentListRequest(FString c_Prefix) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPrefix.SetValue(c_Prefix);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromKongregateIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromKongregateIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKongregateIDs                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             KongregateIDs                                                  => _offKongregateIDs.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromKongregateIDsRequest(FString c_KongregateIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKongregateIDs.SetValue(c_KongregateIDs);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerSegmentsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayerSegmentsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offSegments                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Segments                                                       => _offSegments.GetValue();
	#endregion

	public FServerGetPlayerSegmentsResult(TArray<UPlayFabJsonObject> c_Segments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSegments.SetValue(c_Segments);
	}
}
// ScriptStruct PlayFab.ClientUnlinkWindowsHelloAccountRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUnlinkWindowsHelloAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPublicKeyHint                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PublicKeyHint                                                  => _offPublicKeyHint.GetValue();
	#endregion

	public FClientUnlinkWindowsHelloAccountRequest(FString c_PublicKeyHint) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPublicKeyHint.SetValue(c_PublicKeyHint);
	}
}
// ScriptStruct PlayFab.MultiplayerGetAssetUploadUrlResponse
// 0x0020 (0x0028 - 0x0008)
public class FMultiplayerGetAssetUploadUrlResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAssetUploadUrl                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFilename                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AssetUploadUrl                                                 => _offAssetUploadUrl.GetValue();
	public FString                                             Filename                                                       => _offFilename.GetValue();
	#endregion

	public FMultiplayerGetAssetUploadUrlResponse(FString c_AssetUploadUrl, FString c_Filename) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAssetUploadUrl.SetValue(c_AssetUploadUrl);
		_offFilename.SetValue(c_Filename);
	}
}
// ScriptStruct PlayFab.ServerWriteServerCharacterEventRequest
// 0x0048 (0x0050 - 0x0008)
public class FServerWriteServerCharacterEventRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offBody                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEventName                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Body                                                           => _offBody.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             EventName                                                      => _offEventName.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FServerWriteServerCharacterEventRequest(UPlayFabJsonObject c_Body, FString c_CharacterId, FString c_EventName, FString c_PlayFabId, FString c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBody.SetValue(c_Body);
		_offCharacterId.SetValue(c_CharacterId);
		_offEventName.SetValue(c_EventName);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct PlayFab.AdminGetCloudScriptVersionsRequest
// 0x0000 (0x0008 - 0x0008)
public class FAdminGetCloudScriptVersionsRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminGetCloudScriptVersionsRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offNintendoSwitchDeviceIds                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             NintendoSwitchDeviceIds                                        => _offNintendoSwitchDeviceIds.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsRequest(FString c_NintendoSwitchDeviceIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNintendoSwitchDeviceIds.SetValue(c_NintendoSwitchDeviceIds);
	}
}
// ScriptStruct PlayFab.ClientUnlinkXboxAccountRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUnlinkXboxAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FClientUnlinkXboxAccountRequest(FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerSegmentsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayerSegmentsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offSegments                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Segments                                                       => _offSegments.GetValue();
	#endregion

	public FClientGetPlayerSegmentsResult(TArray<UPlayFabJsonObject> c_Segments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSegments.SetValue(c_Segments);
	}
}
// ScriptStruct PlayFab.ServerGetPlayersInSegmentResult
// 0x0028 (0x0030 - 0x0008)
public class FServerGetPlayersInSegmentResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offContinuationToken                                          = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPlayerProfiles                                             = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfilesInSegment                                          = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ContinuationToken                                              => _offContinuationToken.GetValue();
	public TArray<UPlayFabJsonObject>                          PlayerProfiles                                                 => _offPlayerProfiles.GetValue();
	public int                                                 ProfilesInSegment                                              => _offProfilesInSegment.GetValue();
	#endregion

	public FServerGetPlayersInSegmentResult(FString c_ContinuationToken, TArray<UPlayFabJsonObject> c_PlayerProfiles, int c_ProfilesInSegment) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContinuationToken.SetValue(c_ContinuationToken);
		_offPlayerProfiles.SetValue(c_PlayerProfiles);
		_offProfilesInSegment.SetValue(c_ProfilesInSegment);
	}
}
// ScriptStruct PlayFab.ServerWriteServerPlayerEventRequest
// 0x0038 (0x0040 - 0x0008)
public class FServerWriteServerPlayerEventRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offBody                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEventName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Body                                                           => _offBody.GetValue();
	public FString                                             EventName                                                      => _offEventName.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FServerWriteServerPlayerEventRequest(UPlayFabJsonObject c_Body, FString c_EventName, FString c_PlayFabId, FString c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBody.SetValue(c_Body);
		_offEventName.SetValue(c_EventName);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromPSNAccountIDsRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientGetPlayFabIDsFromPSNAccountIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offIssuerId                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPSNAccountIDs                                              = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 IssuerId                                                       => _offIssuerId.GetValue();
	public FString                                             PSNAccountIDs                                                  => _offPSNAccountIDs.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromPSNAccountIDsRequest(int c_IssuerId, FString c_PSNAccountIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIssuerId.SetValue(c_IssuerId);
		_offPSNAccountIDs.SetValue(c_PSNAccountIDs);
	}
}
// ScriptStruct PlayFab.AdminGetTaskInstanceRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetTaskInstanceRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTaskInstanceId                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TaskInstanceId                                                 => _offTaskInstanceId.GetValue();
	#endregion

	public FAdminGetTaskInstanceRequest(FString c_TaskInstanceId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTaskInstanceId.SetValue(c_TaskInstanceId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerStatisticsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayerStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatistics                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Statistics                                                     => _offStatistics.GetValue();
	#endregion

	public FClientGetPlayerStatisticsResult(TArray<UPlayFabJsonObject> c_Statistics) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatistics.SetValue(c_Statistics);
	}
}
// ScriptStruct PlayFab.ClientUnlockContainerInstanceRequest
// 0x0040 (0x0048 - 0x0008)
public class FClientUnlockContainerInstanceRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offContainerItemInstanceId                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeyItemInstanceId                                          = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ContainerItemInstanceId                                        => _offContainerItemInstanceId.GetValue();
	public FString                                             KeyItemInstanceId                                              => _offKeyItemInstanceId.GetValue();
	#endregion

	public FClientUnlockContainerInstanceRequest(FString c_CatalogVersion, FString c_CharacterId, FString c_ContainerItemInstanceId, FString c_KeyItemInstanceId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offContainerItemInstanceId.SetValue(c_ContainerItemInstanceId);
		_offKeyItemInstanceId.SetValue(c_KeyItemInstanceId);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerStatisticsResult
// 0x0020 (0x0028 - 0x0008)
public class FServerGetPlayerStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatistics                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public TArray<UPlayFabJsonObject>                          Statistics                                                     => _offStatistics.GetValue();
	#endregion

	public FServerGetPlayerStatisticsResult(FString c_PlayFabId, TArray<UPlayFabJsonObject> c_Statistics) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offStatistics.SetValue(c_Statistics);
	}
}
// ScriptStruct PlayFab.ServerWriteTitleEventRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerWriteTitleEventRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offBody                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEventName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Body                                                           => _offBody.GetValue();
	public FString                                             EventName                                                      => _offEventName.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FServerWriteTitleEventRequest(UPlayFabJsonObject c_Body, FString c_EventName, FString c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBody.SetValue(c_Body);
		_offEventName.SetValue(c_EventName);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromSteamIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromSteamIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSteamStringIDs                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SteamStringIDs                                                 => _offSteamStringIDs.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromSteamIDsRequest(FString c_SteamStringIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSteamStringIDs.SetValue(c_SteamStringIDs);
	}
}
// ScriptStruct PlayFab.AdminGetCloudScriptRevisionRequest
// 0x0008 (0x0010 - 0x0008)
public class FAdminGetCloudScriptRevisionRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offRevision                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Revision                                                       => _offRevision.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FAdminGetCloudScriptRevisionRequest(int c_Revision, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRevision.SetValue(c_Revision);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerStatisticVersionsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayerStatisticVersionsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatisticVersions                                          = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          StatisticVersions                                              => _offStatisticVersions.GetValue();
	#endregion

	public FClientGetPlayerStatisticVersionsResult(TArray<UPlayFabJsonObject> c_StatisticVersions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatisticVersions.SetValue(c_StatisticVersions);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerStatisticVersionsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayerStatisticVersionsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatisticVersions                                          = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          StatisticVersions                                              => _offStatisticVersions.GetValue();
	#endregion

	public FServerGetPlayerStatisticVersionsResult(TArray<UPlayFabJsonObject> c_StatisticVersions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatisticVersions.SetValue(c_StatisticVersions);
	}
}
// ScriptStruct PlayFab.ClientUnlockContainerItemRequest
// 0x0030 (0x0038 - 0x0008)
public class FClientUnlockContainerItemRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offContainerItemId                                            = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             ContainerItemId                                                => _offContainerItemId.GetValue();
	#endregion

	public FClientUnlockContainerItemRequest(FString c_CatalogVersion, FString c_CharacterId, FString c_ContainerItemId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offContainerItemId.SetValue(c_ContainerItemId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerTagsResult
// 0x0020 (0x0028 - 0x0008)
public class FClientGetPlayerTagsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTags                                                       = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             Tags                                                           => _offTags.GetValue();
	#endregion

	public FClientGetPlayerTagsResult(FString c_PlayFabId, FString c_Tags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTags.SetValue(c_Tags);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromTwitchIDsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromTwitchIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTwitchIds                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TwitchIds                                                      => _offTwitchIds.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromTwitchIDsRequest(FString c_TwitchIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTwitchIds.SetValue(c_TwitchIds);
	}
}
// ScriptStruct PlayFab.AdminGetCatalogItemsRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetCatalogItemsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	#endregion

	public FAdminGetCatalogItemsRequest(FString c_CatalogVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerTagsResult
// 0x0020 (0x0028 - 0x0008)
public class FServerGetPlayerTagsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTags                                                       = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             Tags                                                           => _offTags.GetValue();
	#endregion

	public FServerGetPlayerTagsResult(FString c_PlayFabId, FString c_Tags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTags.SetValue(c_Tags);
	}
}
// ScriptStruct PlayFab.ClientUpdateAvatarUrlRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUpdateAvatarUrlRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offImageUrl                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ImageUrl                                                       => _offImageUrl.GetValue();
	#endregion

	public FClientUpdateAvatarUrlRequest(FString c_ImageUrl) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offImageUrl.SetValue(c_ImageUrl);
	}
}
// ScriptStruct PlayFab.MultiplayerGetBuildResponse
// 0x00D0 (0x00D8 - 0x0008)
public class FMultiplayerGetBuildResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildName                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildStatus                                                = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EContainerFlavor>                   _offContainerFlavor                                            = new ExternalOffset<EContainerFlavor>(0x0038, false);         // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offContainerRunCommand                                        = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCreationTime                                               = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offCustomGameContainerImage                                   = new ExternalOffset<UPlayFabJsonObject>(0x0060, true);        // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameAssetReferences                                        = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0068, false); // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameCertificateReferences                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0078, false); // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInstrumentationConfiguration                               = new ExternalOffset<UPlayFabJsonObject>(0x0088, true);        // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMetaData                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0090, true);        // 0x0090(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMultiplayerServerCountPerVm                                = new ExternalOffset<int>(0x0098);                             // 0x0098(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPorts                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x00A0, false); // 0x00A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offRegionConfigurations                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x00B0, false); // 0x00B0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStartMultiplayerServerCommand                              = new ExternalOffset<FString>(0x00C0, false);                  // 0x00C0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAzureVmSize>                       _offVmSize                                                     = new ExternalOffset<EAzureVmSize>(0x00D0, false);             // 0x00D0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             BuildName                                                      => _offBuildName.GetValue();
	public FString                                             BuildStatus                                                    => _offBuildStatus.GetValue();
	public EContainerFlavor                                    ContainerFlavor                                                => _offContainerFlavor.GetValue();
	public FString                                             ContainerRunCommand                                            => _offContainerRunCommand.GetValue();
	public FString                                             CreationTime                                                   => _offCreationTime.GetValue();
	public UPlayFabJsonObject                                  CustomGameContainerImage                                       => _offCustomGameContainerImage.GetValue();
	public TArray<UPlayFabJsonObject>                          GameAssetReferences                                            => _offGameAssetReferences.GetValue();
	public TArray<UPlayFabJsonObject>                          GameCertificateReferences                                      => _offGameCertificateReferences.GetValue();
	public UPlayFabJsonObject                                  InstrumentationConfiguration                                   => _offInstrumentationConfiguration.GetValue();
	public UPlayFabJsonObject                                  MetaData                                                       => _offMetaData.GetValue();
	public int                                                 MultiplayerServerCountPerVm                                    => _offMultiplayerServerCountPerVm.GetValue();
	public TArray<UPlayFabJsonObject>                          Ports                                                          => _offPorts.GetValue();
	public TArray<UPlayFabJsonObject>                          RegionConfigurations                                           => _offRegionConfigurations.GetValue();
	public FString                                             StartMultiplayerServerCommand                                  => _offStartMultiplayerServerCommand.GetValue();
	public EAzureVmSize                                        VmSize                                                         => _offVmSize.GetValue();
	#endregion

	public FMultiplayerGetBuildResponse(FString c_BuildId, FString c_BuildName, FString c_BuildStatus, EContainerFlavor c_ContainerFlavor, FString c_ContainerRunCommand, FString c_CreationTime, UPlayFabJsonObject c_CustomGameContainerImage, TArray<UPlayFabJsonObject> c_GameAssetReferences, TArray<UPlayFabJsonObject> c_GameCertificateReferences, UPlayFabJsonObject c_InstrumentationConfiguration, UPlayFabJsonObject c_MetaData, int c_MultiplayerServerCountPerVm, TArray<UPlayFabJsonObject> c_Ports, TArray<UPlayFabJsonObject> c_RegionConfigurations, FString c_StartMultiplayerServerCommand, EAzureVmSize c_VmSize) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offBuildName.SetValue(c_BuildName);
		_offBuildStatus.SetValue(c_BuildStatus);
		_offContainerFlavor.SetValue(c_ContainerFlavor);
		_offContainerRunCommand.SetValue(c_ContainerRunCommand);
		_offCreationTime.SetValue(c_CreationTime);
		_offCustomGameContainerImage.SetValue(c_CustomGameContainerImage);
		_offGameAssetReferences.SetValue(c_GameAssetReferences);
		_offGameCertificateReferences.SetValue(c_GameCertificateReferences);
		_offInstrumentationConfiguration.SetValue(c_InstrumentationConfiguration);
		_offMetaData.SetValue(c_MetaData);
		_offMultiplayerServerCountPerVm.SetValue(c_MultiplayerServerCountPerVm);
		_offPorts.SetValue(c_Ports);
		_offRegionConfigurations.SetValue(c_RegionConfigurations);
		_offStartMultiplayerServerCommand.SetValue(c_StartMultiplayerServerCommand);
		_offVmSize.SetValue(c_VmSize);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromXboxLiveIDsRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientGetPlayFabIDsFromXboxLiveIDsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSandbox                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxLiveAccountIDs                                         = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Sandbox                                                        => _offSandbox.GetValue();
	public FString                                             XboxLiveAccountIDs                                             => _offXboxLiveAccountIDs.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromXboxLiveIDsRequest(FString c_Sandbox, FString c_XboxLiveAccountIDs) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSandbox.SetValue(c_Sandbox);
		_offXboxLiveAccountIDs.SetValue(c_XboxLiveAccountIDs);
	}
}
// ScriptStruct PlayFab.AdminGetAllSegmentsRequest
// 0x0000 (0x0008 - 0x0008)
public class FAdminGetAllSegmentsRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminGetAllSegmentsRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromFacebookIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromFacebookIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromFacebookIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientGetPlayerTradesResponse
// 0x0020 (0x0028 - 0x0008)
public class FClientGetPlayerTradesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offAcceptedTrades                                             = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offOpenedTrades                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          AcceptedTrades                                                 => _offAcceptedTrades.GetValue();
	public TArray<UPlayFabJsonObject>                          OpenedTrades                                                   => _offOpenedTrades.GetValue();
	#endregion

	public FClientGetPlayerTradesResponse(TArray<UPlayFabJsonObject> c_AcceptedTrades, TArray<UPlayFabJsonObject> c_OpenedTrades) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAcceptedTrades.SetValue(c_AcceptedTrades);
		_offOpenedTrades.SetValue(c_OpenedTrades);
	}
}
// ScriptStruct PlayFab.MultiplayerGetContainerRegistryCredentialsResponse
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerGetContainerRegistryCredentialsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDnsName                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPassword                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DnsName                                                        => _offDnsName.GetValue();
	public FString                                             Password                                                       => _offPassword.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FMultiplayerGetContainerRegistryCredentialsResponse(FString c_DnsName, FString c_Password, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDnsName.SetValue(c_DnsName);
		_offPassword.SetValue(c_Password);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ClientGetPublisherDataRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPublisherDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Keys                                                           => _offKeys.GetValue();
	#endregion

	public FClientGetPublisherDataRequest(FString c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct PlayFab.ClientUpdateCharacterDataRequest
// 0x0030 (0x0038 - 0x0008)
public class FClientUpdateCharacterDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeysToRemove                                               = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EUserDataPermission>                _offPermission                                                 = new ExternalOffset<EUserDataPermission>(0x0030, false);      // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             KeysToRemove                                                   => _offKeysToRemove.GetValue();
	public EUserDataPermission                                 Permission                                                     => _offPermission.GetValue();
	#endregion

	public FClientUpdateCharacterDataRequest(FString c_CharacterId, UPlayFabJsonObject c_Data, FString c_KeysToRemove, EUserDataPermission c_Permission) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offData.SetValue(c_Data);
		_offKeysToRemove.SetValue(c_KeysToRemove);
		_offPermission.SetValue(c_Permission);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromFacebookInstantGamesIdsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromFacebookInstantGamesIdsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.AdminExportMasterPlayerDataRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminExportMasterPlayerDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminExportMasterPlayerDataRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromFacebookIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromFacebookIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromFacebookIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientGetPurchaseRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPurchaseRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	#endregion

	public FClientGetPurchaseRequest(FString c_OrderId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOrderId.SetValue(c_OrderId);
	}
}
// ScriptStruct PlayFab.ClientUpdateCharacterStatisticsRequest
// 0x0018 (0x0020 - 0x0008)
public class FClientUpdateCharacterStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offCharacterStatistics                                        = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public UPlayFabJsonObject                                  CharacterStatistics                                            => _offCharacterStatistics.GetValue();
	#endregion

	public FClientUpdateCharacterStatisticsRequest(FString c_CharacterId, UPlayFabJsonObject c_CharacterStatistics) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offCharacterStatistics.SetValue(c_CharacterStatistics);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromGenericIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromGenericIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromGenericIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.MultiplayerGetMatchResult
// 0x0038 (0x0040 - 0x0008)
public class FMultiplayerGetMatchResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offMatchID                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembers                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegionPreferences                                          = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offServerDetails                                              = new ExternalOffset<UPlayFabJsonObject>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             MatchID                                                        => _offMatchID.GetValue();
	public TArray<UPlayFabJsonObject>                          Members                                                        => _offMembers.GetValue();
	public FString                                             RegionPreferences                                              => _offRegionPreferences.GetValue();
	public UPlayFabJsonObject                                  ServerDetails                                                  => _offServerDetails.GetValue();
	#endregion

	public FMultiplayerGetMatchResult(FString c_MatchID, TArray<UPlayFabJsonObject> c_Members, FString c_RegionPreferences, UPlayFabJsonObject c_ServerDetails) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMatchID.SetValue(c_MatchID);
		_offMembers.SetValue(c_Members);
		_offRegionPreferences.SetValue(c_RegionPreferences);
		_offServerDetails.SetValue(c_ServerDetails);
	}
}
// ScriptStruct PlayFab.ClientGetSharedGroupDataRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientGetSharedGroupDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offGetMembers                                                 = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      GetMembers                                                     => _offGetMembers.GetValue();
	public FString                                             Keys                                                           => _offKeys.GetValue();
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FClientGetSharedGroupDataRequest(byte/*(bool)*/ c_GetMembers, FString c_Keys, FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGetMembers.SetValue(c_GetMembers);
		_offKeys.SetValue(c_Keys);
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.AdminDeleteTitleRequest
// 0x0000 (0x0008 - 0x0008)
public class FAdminDeleteTitleRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminDeleteTitleRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromFacebookInstantGamesIdsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromFacebookInstantGamesIdsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientUpdatePlayerStatisticsRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUpdatePlayerStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatistics                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Statistics                                                     => _offStatistics.GetValue();
	#endregion

	public FClientUpdatePlayerStatisticsRequest(TArray<UPlayFabJsonObject> c_Statistics) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatistics.SetValue(c_Statistics);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromNintendoSwitchDeviceIdsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientGetStoreItemsRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientGetStoreItemsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	#endregion

	public FClientGetStoreItemsRequest(FString c_CatalogVersion, FString c_StoreId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offStoreId.SetValue(c_StoreId);
	}
}
// ScriptStruct PlayFab.AdminDeleteTaskRequest
// 0x0008 (0x0010 - 0x0008)
public class FAdminDeleteTaskRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offIdentifier                                                 = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Identifier                                                     => _offIdentifier.GetValue();
	#endregion

	public FAdminDeleteTaskRequest(UPlayFabJsonObject c_Identifier) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIdentifier.SetValue(c_Identifier);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGameCenterIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromGameCenterIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromGameCenterIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromPSNAccountIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromPSNAccountIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromPSNAccountIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientGetTimeRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientGetTimeRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientGetTimeRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientUpdateSharedGroupDataRequest
// 0x0030 (0x0038 - 0x0008)
public class FClientUpdateSharedGroupDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeysToRemove                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EUserDataPermission>                _offPermission                                                 = new ExternalOffset<EUserDataPermission>(0x0020, false);      // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             KeysToRemove                                                   => _offKeysToRemove.GetValue();
	public EUserDataPermission                                 Permission                                                     => _offPermission.GetValue();
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FClientUpdateSharedGroupDataRequest(UPlayFabJsonObject c_Data, FString c_KeysToRemove, EUserDataPermission c_Permission, FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offKeysToRemove.SetValue(c_KeysToRemove);
		_offPermission.SetValue(c_Permission);
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.AdminDeleteStoreRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminDeleteStoreRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	#endregion

	public FAdminDeleteStoreRequest(FString c_CatalogVersion, FString c_StoreId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offStoreId.SetValue(c_StoreId);
	}
}
// ScriptStruct PlayFab.MultiplayerGetMatchmakingTicketResult
// 0x0090 (0x0098 - 0x0008)
public class FMultiplayerGetMatchmakingTicketResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCancellationReasonString                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCreated                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offCreator                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0028, true);        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offGiveUpAfterSeconds                                         = new ExternalOffset<int>(0x0030);                             // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMatchID                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembers                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0048, false); // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembersToMatchWith                                         = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0058, false); // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatus                                                     = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicketId                                                   = new ExternalOffset<FString>(0x0088, false);                  // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CancellationReasonString                                       => _offCancellationReasonString.GetValue();
	public FString                                             Created                                                        => _offCreated.GetValue();
	public UPlayFabJsonObject                                  Creator                                                        => _offCreator.GetValue();
	public int                                                 GiveUpAfterSeconds                                             => _offGiveUpAfterSeconds.GetValue();
	public FString                                             MatchID                                                        => _offMatchID.GetValue();
	public TArray<UPlayFabJsonObject>                          Members                                                        => _offMembers.GetValue();
	public TArray<UPlayFabJsonObject>                          MembersToMatchWith                                             => _offMembersToMatchWith.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	public FString                                             Status                                                         => _offStatus.GetValue();
	public FString                                             TicketId                                                       => _offTicketId.GetValue();
	#endregion

	public FMultiplayerGetMatchmakingTicketResult(FString c_CancellationReasonString, FString c_Created, UPlayFabJsonObject c_Creator, int c_GiveUpAfterSeconds, FString c_MatchID, TArray<UPlayFabJsonObject> c_Members, TArray<UPlayFabJsonObject> c_MembersToMatchWith, FString c_QueueName, FString c_Status, FString c_TicketId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCancellationReasonString.SetValue(c_CancellationReasonString);
		_offCreated.SetValue(c_Created);
		_offCreator.SetValue(c_Creator);
		_offGiveUpAfterSeconds.SetValue(c_GiveUpAfterSeconds);
		_offMatchID.SetValue(c_MatchID);
		_offMembers.SetValue(c_Members);
		_offMembersToMatchWith.SetValue(c_MembersToMatchWith);
		_offQueueName.SetValue(c_QueueName);
		_offStatus.SetValue(c_Status);
		_offTicketId.SetValue(c_TicketId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGenericIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromGenericIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromGenericIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromSteamIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromSteamIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromSteamIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientGetTitleDataRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetTitleDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Keys                                                           => _offKeys.GetValue();
	#endregion

	public FClientGetTitleDataRequest(FString c_Keys) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKeys.SetValue(c_Keys);
	}
}
// ScriptStruct PlayFab.AdminDeletePlayerSharedSecretRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminDeletePlayerSharedSecretRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSecretKey                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SecretKey                                                      => _offSecretKey.GetValue();
	#endregion

	public FAdminDeletePlayerSharedSecretRequest(FString c_SecretKey) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSecretKey.SetValue(c_SecretKey);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromGoogleIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromGoogleIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromGoogleIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientUpdateUserDataRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientUpdateUserDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeysToRemove                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EUserDataPermission>                _offPermission                                                 = new ExternalOffset<EUserDataPermission>(0x0020, false);      // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             KeysToRemove                                                   => _offKeysToRemove.GetValue();
	public EUserDataPermission                                 Permission                                                     => _offPermission.GetValue();
	#endregion

	public FClientUpdateUserDataRequest(UPlayFabJsonObject c_Data, FString c_KeysToRemove, EUserDataPermission c_Permission) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offKeysToRemove.SetValue(c_KeysToRemove);
		_offPermission.SetValue(c_Permission);
	}
}
// ScriptStruct PlayFab.ServerGetPlayFabIDsFromXboxLiveIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayFabIDsFromXboxLiveIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetPlayFabIDsFromXboxLiveIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientGetTitleNewsRequest
// 0x0008 (0x0010 - 0x0008)
public class FClientGetTitleNewsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offCount                                                      = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Count                                                          => _offCount.GetValue();
	#endregion

	public FClientGetTitleNewsRequest(int c_Count) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCount.SetValue(c_Count);
	}
}
// ScriptStruct PlayFab.AdminDeletePlayerRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminDeletePlayerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminDeletePlayerRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientUpdateUserTitleDisplayNameRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientUpdateUserTitleDisplayNameRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDisplayName                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DisplayName                                                    => _offDisplayName.GetValue();
	#endregion

	public FClientUpdateUserTitleDisplayNameRequest(FString c_DisplayName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisplayName.SetValue(c_DisplayName);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromKongregateIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromKongregateIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromKongregateIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ServerGetPublisherDataResult
// 0x0008 (0x0010 - 0x0008)
public class FServerGetPublisherDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetPublisherDataResult(UPlayFabJsonObject c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.AdminDeleteOpenIdConnectionRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminDeleteOpenIdConnectionRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offConnectionId                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ConnectionId                                                   => _offConnectionId.GetValue();
	#endregion

	public FAdminDeleteOpenIdConnectionRequest(FString c_ConnectionId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConnectionId.SetValue(c_ConnectionId);
	}
}
// ScriptStruct PlayFab.MultiplayerGetMultiplayerServerDetailsResponse
// 0x00A0 (0x00A8 - 0x0008)
public class FMultiplayerGetMultiplayerServerDetailsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offConnectedPlayers                                           = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFQDN                                                       = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offIPV4Address                                                = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLastStateTransitionTime                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPorts                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0048, false); // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerId                                                   = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSessionId                                                  = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offState                                                      = new ExternalOffset<FString>(0x0088, false);                  // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVmId                                                       = new ExternalOffset<FString>(0x0098, false);                  // 0x0098(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          ConnectedPlayers                                               => _offConnectedPlayers.GetValue();
	public FString                                             FQDN                                                           => _offFQDN.GetValue();
	public FString                                             IPV4Address                                                    => _offIPV4Address.GetValue();
	public FString                                             LastStateTransitionTime                                        => _offLastStateTransitionTime.GetValue();
	public TArray<UPlayFabJsonObject>                          Ports                                                          => _offPorts.GetValue();
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             ServerId                                                       => _offServerId.GetValue();
	public FString                                             SessionId                                                      => _offSessionId.GetValue();
	public FString                                             State                                                          => _offState.GetValue();
	public FString                                             VmId                                                           => _offVmId.GetValue();
	#endregion

	public FMultiplayerGetMultiplayerServerDetailsResponse(TArray<UPlayFabJsonObject> c_ConnectedPlayers, FString c_FQDN, FString c_IPV4Address, FString c_LastStateTransitionTime, TArray<UPlayFabJsonObject> c_Ports, FString c_Region, FString c_ServerId, FString c_SessionId, FString c_State, FString c_VmId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConnectedPlayers.SetValue(c_ConnectedPlayers);
		_offFQDN.SetValue(c_FQDN);
		_offIPV4Address.SetValue(c_IPV4Address);
		_offLastStateTransitionTime.SetValue(c_LastStateTransitionTime);
		_offPorts.SetValue(c_Ports);
		_offRegion.SetValue(c_Region);
		_offServerId.SetValue(c_ServerId);
		_offSessionId.SetValue(c_SessionId);
		_offState.SetValue(c_State);
		_offVmId.SetValue(c_VmId);
	}
}
// ScriptStruct PlayFab.ClientGetTitlePublicKeyRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetTitlePublicKeyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTitleSharedSecret                                          = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TitleSharedSecret                                              => _offTitleSharedSecret.GetValue();
	#endregion

	public FClientGetTitlePublicKeyRequest(FString c_TitleSharedSecret) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTitleSharedSecret.SetValue(c_TitleSharedSecret);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromNintendoSwitchDeviceIdsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ServerGetRandomResultTablesResult
// 0x0008 (0x0010 - 0x0008)
public class FServerGetRandomResultTablesResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offTables                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Tables                                                         => _offTables.GetValue();
	#endregion

	public FServerGetRandomResultTablesResult(UPlayFabJsonObject c_Tables) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTables.SetValue(c_Tables);
	}
}
// ScriptStruct PlayFab.MultiplayerGetMultiplayerServerLogsResponse
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerGetMultiplayerServerLogsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLogDownloadUrl                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LogDownloadUrl                                                 => _offLogDownloadUrl.GetValue();
	#endregion

	public FMultiplayerGetMultiplayerServerLogsResponse(FString c_LogDownloadUrl) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLogDownloadUrl.SetValue(c_LogDownloadUrl);
	}
}
// ScriptStruct PlayFab.AdminDeleteMasterPlayerAccountRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminDeleteMasterPlayerAccountRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offMetaData                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             MetaData                                                       => _offMetaData.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminDeleteMasterPlayerAccountRequest(FString c_MetaData, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMetaData.SetValue(c_MetaData);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetTradeStatusRequest
// 0x0020 (0x0028 - 0x0008)
public class FClientGetTradeStatusRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offOfferingPlayerId                                           = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTradeId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OfferingPlayerId                                               => _offOfferingPlayerId.GetValue();
	public FString                                             TradeId                                                        => _offTradeId.GetValue();
	#endregion

	public FClientGetTradeStatusRequest(FString c_OfferingPlayerId, FString c_TradeId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOfferingPlayerId.SetValue(c_OfferingPlayerId);
		_offTradeId.SetValue(c_TradeId);
	}
}
// ScriptStruct PlayFab.ClientValidateGooglePlayPurchaseRequest
// 0x0048 (0x0050 - 0x0008)
public class FClientValidateGooglePlayPurchaseRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCurrencyCode                                               = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPurchasePrice                                              = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReceiptJson                                                = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSignature                                                  = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CurrencyCode                                                   => _offCurrencyCode.GetValue();
	public int                                                 PurchasePrice                                                  => _offPurchasePrice.GetValue();
	public FString                                             ReceiptJson                                                    => _offReceiptJson.GetValue();
	public FString                                             Signature                                                      => _offSignature.GetValue();
	#endregion

	public FClientValidateGooglePlayPurchaseRequest(FString c_CatalogVersion, FString c_CurrencyCode, int c_PurchasePrice, FString c_ReceiptJson, FString c_Signature) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCurrencyCode.SetValue(c_CurrencyCode);
		_offPurchasePrice.SetValue(c_PurchasePrice);
		_offReceiptJson.SetValue(c_ReceiptJson);
		_offSignature.SetValue(c_Signature);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromPSNAccountIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromPSNAccountIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromPSNAccountIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.MultiplayerGetQueueStatisticsResult
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerGetQueueStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offNumberOfPlayersMatching                                    = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offTimeToMatchStatisticsInSeconds                             = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 NumberOfPlayersMatching                                        => _offNumberOfPlayersMatching.GetValue();
	public UPlayFabJsonObject                                  TimeToMatchStatisticsInSeconds                                 => _offTimeToMatchStatisticsInSeconds.GetValue();
	#endregion

	public FMultiplayerGetQueueStatisticsResult(int c_NumberOfPlayersMatching, UPlayFabJsonObject c_TimeToMatchStatisticsInSeconds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNumberOfPlayersMatching.SetValue(c_NumberOfPlayersMatching);
		_offTimeToMatchStatisticsInSeconds.SetValue(c_TimeToMatchStatisticsInSeconds);
	}
}
// ScriptStruct PlayFab.AdminDeleteContentRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminDeleteContentRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offKey                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Key                                                            => _offKey.GetValue();
	#endregion

	public FAdminDeleteContentRequest(FString c_Key) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offKey.SetValue(c_Key);
	}
}
// ScriptStruct PlayFab.ServerGetServerCustomIDsFromPlayFabIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetServerCustomIDsFromPlayFabIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetServerCustomIDsFromPlayFabIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientGetUserDataRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientGetUserDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offIfChangedFromDataVersion                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 IfChangedFromDataVersion                                       => _offIfChangedFromDataVersion.GetValue();
	public FString                                             Keys                                                           => _offKeys.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FClientGetUserDataRequest(int c_IfChangedFromDataVersion, FString c_Keys, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIfChangedFromDataVersion.SetValue(c_IfChangedFromDataVersion);
		_offKeys.SetValue(c_Keys);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientValidateIOSReceiptRequest
// 0x0038 (0x0040 - 0x0008)
public class FClientValidateIOSReceiptRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCurrencyCode                                               = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPurchasePrice                                              = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReceiptData                                                = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CurrencyCode                                                   => _offCurrencyCode.GetValue();
	public int                                                 PurchasePrice                                                  => _offPurchasePrice.GetValue();
	public FString                                             ReceiptData                                                    => _offReceiptData.GetValue();
	#endregion

	public FClientValidateIOSReceiptRequest(FString c_CatalogVersion, FString c_CurrencyCode, int c_PurchasePrice, FString c_ReceiptData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCurrencyCode.SetValue(c_CurrencyCode);
		_offPurchasePrice.SetValue(c_PurchasePrice);
		_offReceiptData.SetValue(c_ReceiptData);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromSteamIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromSteamIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromSteamIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.MultiplayerGetRemoteLoginEndpointResponse
// 0x0018 (0x0020 - 0x0008)
public class FMultiplayerGetRemoteLoginEndpointResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offIPV4Address                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPort                                                       = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             IPV4Address                                                    => _offIPV4Address.GetValue();
	public int                                                 Port                                                           => _offPort.GetValue();
	#endregion

	public FMultiplayerGetRemoteLoginEndpointResponse(FString c_IPV4Address, int c_Port) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIPV4Address.SetValue(c_IPV4Address);
		_offPort.SetValue(c_Port);
	}
}
// ScriptStruct PlayFab.AdminUpdateUserTitleDisplayNameResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminUpdateUserTitleDisplayNameResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDisplayName                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DisplayName                                                    => _offDisplayName.GetValue();
	#endregion

	public FAdminUpdateUserTitleDisplayNameResult(FString c_DisplayName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDisplayName.SetValue(c_DisplayName);
	}
}
// ScriptStruct PlayFab.ClientGetUserInventoryRequest
// 0x0000 (0x0008 - 0x0008)
public class FClientGetUserInventoryRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientGetUserInventoryRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetSharedGroupDataResult
// 0x0018 (0x0020 - 0x0008)
public class FServerGetSharedGroupDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMembers                                                    = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             Members                                                        => _offMembers.GetValue();
	#endregion

	public FServerGetSharedGroupDataResult(UPlayFabJsonObject c_Data, FString c_Members) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offMembers.SetValue(c_Members);
	}
}
// ScriptStruct PlayFab.ClientValidateWindowsReceiptRequest
// 0x0038 (0x0040 - 0x0008)
public class FClientValidateWindowsReceiptRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCurrencyCode                                               = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPurchasePrice                                              = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offReceipt                                                    = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CurrencyCode                                                   => _offCurrencyCode.GetValue();
	public int                                                 PurchasePrice                                                  => _offPurchasePrice.GetValue();
	public FString                                             Receipt                                                        => _offReceipt.GetValue();
	#endregion

	public FClientValidateWindowsReceiptRequest(FString c_CatalogVersion, FString c_CurrencyCode, int c_PurchasePrice, FString c_Receipt) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCurrencyCode.SetValue(c_CurrencyCode);
		_offPurchasePrice.SetValue(c_PurchasePrice);
		_offReceipt.SetValue(c_Receipt);
	}
}
// ScriptStruct PlayFab.ClientGetWindowsHelloChallengeRequest
// 0x0010 (0x0018 - 0x0008)
public class FClientGetWindowsHelloChallengeRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPublicKeyHint                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PublicKeyHint                                                  => _offPublicKeyHint.GetValue();
	#endregion

	public FClientGetWindowsHelloChallengeRequest(FString c_PublicKeyHint) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPublicKeyHint.SetValue(c_PublicKeyHint);
	}
}
// ScriptStruct PlayFab.AdminUpdateUserDataResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminUpdateUserDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	#endregion

	public FAdminUpdateUserDataResult(int c_DataVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataVersion.SetValue(c_DataVersion);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromTwitchIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromTwitchIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromTwitchIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ClientGrantCharacterToUserRequest
// 0x0030 (0x0038 - 0x0008)
public class FClientGrantCharacterToUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterName                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemId                                                     = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterName                                                  => _offCharacterName.GetValue();
	public FString                                             ItemId                                                         => _offItemId.GetValue();
	#endregion

	public FClientGrantCharacterToUserRequest(FString c_CatalogVersion, FString c_CharacterName, FString c_ItemId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterName.SetValue(c_CharacterName);
		_offItemId.SetValue(c_ItemId);
	}
}
// ScriptStruct PlayFab.ClientGetPlayFabIDsFromXboxLiveIDsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetPlayFabIDsFromXboxLiveIDsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offData                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPlayFabIDsFromXboxLiveIDsResult(TArray<UPlayFabJsonObject> c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.MultiplayerGetServerBackfillTicketResult
// 0x0080 (0x0088 - 0x0008)
public class FMultiplayerGetServerBackfillTicketResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCancellationReasonString                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCreated                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offGiveUpAfterSeconds                                         = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMatchID                                                    = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembers                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0040, false); // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0050, false);                  // 0x0050(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offServerDetails                                              = new ExternalOffset<UPlayFabJsonObject>(0x0060, true);        // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatus                                                     = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicketId                                                   = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CancellationReasonString                                       => _offCancellationReasonString.GetValue();
	public FString                                             Created                                                        => _offCreated.GetValue();
	public int                                                 GiveUpAfterSeconds                                             => _offGiveUpAfterSeconds.GetValue();
	public FString                                             MatchID                                                        => _offMatchID.GetValue();
	public TArray<UPlayFabJsonObject>                          Members                                                        => _offMembers.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	public UPlayFabJsonObject                                  ServerDetails                                                  => _offServerDetails.GetValue();
	public FString                                             Status                                                         => _offStatus.GetValue();
	public FString                                             TicketId                                                       => _offTicketId.GetValue();
	#endregion

	public FMultiplayerGetServerBackfillTicketResult(FString c_CancellationReasonString, FString c_Created, int c_GiveUpAfterSeconds, FString c_MatchID, TArray<UPlayFabJsonObject> c_Members, FString c_QueueName, UPlayFabJsonObject c_ServerDetails, FString c_Status, FString c_TicketId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCancellationReasonString.SetValue(c_CancellationReasonString);
		_offCreated.SetValue(c_Created);
		_offGiveUpAfterSeconds.SetValue(c_GiveUpAfterSeconds);
		_offMatchID.SetValue(c_MatchID);
		_offMembers.SetValue(c_Members);
		_offQueueName.SetValue(c_QueueName);
		_offServerDetails.SetValue(c_ServerDetails);
		_offStatus.SetValue(c_Status);
		_offTicketId.SetValue(c_TicketId);
	}
}
// ScriptStruct PlayFab.ClientWriteClientCharacterEventRequest
// 0x0038 (0x0040 - 0x0008)
public class FClientWriteClientCharacterEventRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offBody                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEventName                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Body                                                           => _offBody.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             EventName                                                      => _offEventName.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FClientWriteClientCharacterEventRequest(UPlayFabJsonObject c_Body, FString c_CharacterId, FString c_EventName, FString c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBody.SetValue(c_Body);
		_offCharacterId.SetValue(c_CharacterId);
		_offEventName.SetValue(c_EventName);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct PlayFab.AdminEmptyResponse
// 0x0000 (0x0008 - 0x0008)
public class FAdminEmptyResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminEmptyResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetPublisherDataResult
// 0x0008 (0x0010 - 0x0008)
public class FClientGetPublisherDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetPublisherDataResult(UPlayFabJsonObject c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.ServerGetStoreItemsResult
// 0x0040 (0x0048 - 0x0008)
public class FServerGetStoreItemsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMarketingData                                              = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EPfSourceType>                      _offSource                                                     = new ExternalOffset<EPfSourceType>(0x0020, false);            // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStore                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0028, false); // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public UPlayFabJsonObject                                  MarketingData                                                  => _offMarketingData.GetValue();
	public EPfSourceType                                       Source                                                         => _offSource.GetValue();
	public TArray<UPlayFabJsonObject>                          Store                                                          => _offStore.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	#endregion

	public FServerGetStoreItemsResult(FString c_CatalogVersion, UPlayFabJsonObject c_MarketingData, EPfSourceType c_Source, TArray<UPlayFabJsonObject> c_Store, FString c_StoreId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offMarketingData.SetValue(c_MarketingData);
		_offSource.SetValue(c_Source);
		_offStore.SetValue(c_Store);
		_offStoreId.SetValue(c_StoreId);
	}
}
// ScriptStruct PlayFab.MultiplayerGetTitleEnabledForMultiplayerServersStatusResponse
// 0x0008 (0x0010 - 0x0008)
public class FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<ETitleMultiplayerServerEnabledStatus> _offStatus                                                     = new ExternalOffset<ETitleMultiplayerServerEnabledStatus>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ETitleMultiplayerServerEnabledStatus                Status                                                         => _offStatus.GetValue();
	#endregion

	public FMultiplayerGetTitleEnabledForMultiplayerServersStatusResponse(ETitleMultiplayerServerEnabledStatus c_Status) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatus.SetValue(c_Status);
	}
}
// ScriptStruct PlayFab.ClientWriteClientPlayerEventRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientWriteClientPlayerEventRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offBody                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEventName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Body                                                           => _offBody.GetValue();
	public FString                                             EventName                                                      => _offEventName.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FClientWriteClientPlayerEventRequest(UPlayFabJsonObject c_Body, FString c_EventName, FString c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBody.SetValue(c_Body);
		_offEventName.SetValue(c_EventName);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct PlayFab.AdminUpdateStoreItemsResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminUpdateStoreItemsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminUpdateStoreItemsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetTimeResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetTimeResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTime                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Time                                                           => _offTime.GetValue();
	#endregion

	public FServerGetTimeResult(FString c_Time) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
	}
}
// ScriptStruct PlayFab.ClientWriteTitleEventRequest
// 0x0028 (0x0030 - 0x0008)
public class FClientWriteTitleEventRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offBody                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEventName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Body                                                           => _offBody.GetValue();
	public FString                                             EventName                                                      => _offEventName.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	#endregion

	public FClientWriteTitleEventRequest(UPlayFabJsonObject c_Body, FString c_EventName, FString c_Timestamp) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBody.SetValue(c_Body);
		_offEventName.SetValue(c_EventName);
		_offTimestamp.SetValue(c_Timestamp);
	}
}
// ScriptStruct PlayFab.ClientGetPurchaseResult
// 0x0050 (0x0058 - 0x0008)
public class FClientGetPurchaseResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offOrderId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPaymentProvider                                            = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPurchaseDate                                               = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTransactionId                                              = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTransactionStatus                                          = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             OrderId                                                        => _offOrderId.GetValue();
	public FString                                             PaymentProvider                                                => _offPaymentProvider.GetValue();
	public FString                                             PurchaseDate                                                   => _offPurchaseDate.GetValue();
	public FString                                             TransactionId                                                  => _offTransactionId.GetValue();
	public FString                                             TransactionStatus                                              => _offTransactionStatus.GetValue();
	#endregion

	public FClientGetPurchaseResult(FString c_OrderId, FString c_PaymentProvider, FString c_PurchaseDate, FString c_TransactionId, FString c_TransactionStatus) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offOrderId.SetValue(c_OrderId);
		_offPaymentProvider.SetValue(c_PaymentProvider);
		_offPurchaseDate.SetValue(c_PurchaseDate);
		_offTransactionId.SetValue(c_TransactionId);
		_offTransactionStatus.SetValue(c_TransactionStatus);
	}
}
// ScriptStruct PlayFab.AdminUpdateRandomResultTablesResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminUpdateRandomResultTablesResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminUpdateRandomResultTablesResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerGetTitleMultiplayerServersQuotasResponse
// 0x0008 (0x0010 - 0x0008)
public class FMultiplayerGetTitleMultiplayerServersQuotasResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offQuotas                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Quotas                                                         => _offQuotas.GetValue();
	#endregion

	public FMultiplayerGetTitleMultiplayerServersQuotasResponse(UPlayFabJsonObject c_Quotas) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offQuotas.SetValue(c_Quotas);
	}
}
// ScriptStruct PlayFab.ServerGetTitleDataResult
// 0x0008 (0x0010 - 0x0008)
public class FServerGetTitleDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	#endregion

	public FServerGetTitleDataResult(UPlayFabJsonObject c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.MultiplayerJoinMatchmakingTicketResult
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerJoinMatchmakingTicketResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerJoinMatchmakingTicketResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetSharedGroupDataResult
// 0x0018 (0x0020 - 0x0008)
public class FClientGetSharedGroupDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMembers                                                    = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public FString                                             Members                                                        => _offMembers.GetValue();
	#endregion

	public FClientGetSharedGroupDataResult(UPlayFabJsonObject c_Data, FString c_Members) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offMembers.SetValue(c_Members);
	}
}
// ScriptStruct PlayFab.AdminUpdatePolicyResponse
// 0x0020 (0x0028 - 0x0008)
public class FAdminUpdatePolicyResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPolicyName                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatements                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PolicyName                                                     => _offPolicyName.GetValue();
	public TArray<UPlayFabJsonObject>                          Statements                                                     => _offStatements.GetValue();
	#endregion

	public FAdminUpdatePolicyResponse(FString c_PolicyName, TArray<UPlayFabJsonObject> c_Statements) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPolicyName.SetValue(c_PolicyName);
		_offStatements.SetValue(c_Statements);
	}
}
// ScriptStruct PlayFab.ServerGetTitleNewsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetTitleNewsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offNews                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          News                                                           => _offNews.GetValue();
	#endregion

	public FServerGetTitleNewsResult(TArray<UPlayFabJsonObject> c_News) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNews.SetValue(c_News);
	}
}
// ScriptStruct PlayFab.MultiplayerListMultiplayerServersResponse
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerListMultiplayerServersResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMultiplayerServerSummaries                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          MultiplayerServerSummaries                                     => _offMultiplayerServerSummaries.GetValue();
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListMultiplayerServersResponse(TArray<UPlayFabJsonObject> c_MultiplayerServerSummaries, int c_PageSize, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMultiplayerServerSummaries.SetValue(c_MultiplayerServerSummaries);
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.ServerGetUserAccountInfoResult
// 0x0008 (0x0010 - 0x0008)
public class FServerGetUserAccountInfoResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offUserInfo                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  UserInfo                                                       => _offUserInfo.GetValue();
	#endregion

	public FServerGetUserAccountInfoResult(UPlayFabJsonObject c_UserInfo) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offUserInfo.SetValue(c_UserInfo);
	}
}
// ScriptStruct PlayFab.AdminUpdatePlayerStatisticDefinitionResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminUpdatePlayerStatisticDefinitionResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offStatistic                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Statistic                                                      => _offStatistic.GetValue();
	#endregion

	public FAdminUpdatePlayerStatisticDefinitionResult(UPlayFabJsonObject c_Statistic) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatistic.SetValue(c_Statistic);
	}
}
// ScriptStruct PlayFab.CloudScriptExecuteCloudScriptResult
// 0x0058 (0x0060 - 0x0008)
public class FCloudScriptExecuteCloudScriptResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAPIRequestsIssued                                          = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offError                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExecutionTimeSeconds                                       = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFunctionName                                               = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offFunctionResult                                             = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offFunctionResultTooLarge                                     = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offHttpRequestsIssued                                         = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offLogs                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0040, false); // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offLogsTooLarge                                               = new ExternalOffset<byte/*(bool)*/>(0x0050);                  // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMemoryConsumedBytes                                        = new ExternalOffset<int>(0x0054);                             // 0x0054(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProcessorTimeSeconds                                       = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRevision                                                   = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 APIRequestsIssued                                              => _offAPIRequestsIssued.GetValue();
	public UPlayFabJsonObject                                  Error                                                          => _offError.GetValue();
	public int                                                 ExecutionTimeSeconds                                           => _offExecutionTimeSeconds.GetValue();
	public FString                                             FunctionName                                                   => _offFunctionName.GetValue();
	public UPlayFabJsonObject                                  FunctionResult                                                 => _offFunctionResult.GetValue();
	public byte/*(bool)*/                                      FunctionResultTooLarge                                         => _offFunctionResultTooLarge.GetValue();
	public int                                                 HttpRequestsIssued                                             => _offHttpRequestsIssued.GetValue();
	public TArray<UPlayFabJsonObject>                          Logs                                                           => _offLogs.GetValue();
	public byte/*(bool)*/                                      LogsTooLarge                                                   => _offLogsTooLarge.GetValue();
	public int                                                 MemoryConsumedBytes                                            => _offMemoryConsumedBytes.GetValue();
	public int                                                 ProcessorTimeSeconds                                           => _offProcessorTimeSeconds.GetValue();
	public int                                                 Revision                                                       => _offRevision.GetValue();
	#endregion

	public FCloudScriptExecuteCloudScriptResult(int c_APIRequestsIssued, UPlayFabJsonObject c_Error, int c_ExecutionTimeSeconds, FString c_FunctionName, UPlayFabJsonObject c_FunctionResult, byte/*(bool)*/ c_FunctionResultTooLarge, int c_HttpRequestsIssued, TArray<UPlayFabJsonObject> c_Logs, byte/*(bool)*/ c_LogsTooLarge, int c_MemoryConsumedBytes, int c_ProcessorTimeSeconds, int c_Revision) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAPIRequestsIssued.SetValue(c_APIRequestsIssued);
		_offError.SetValue(c_Error);
		_offExecutionTimeSeconds.SetValue(c_ExecutionTimeSeconds);
		_offFunctionName.SetValue(c_FunctionName);
		_offFunctionResult.SetValue(c_FunctionResult);
		_offFunctionResultTooLarge.SetValue(c_FunctionResultTooLarge);
		_offHttpRequestsIssued.SetValue(c_HttpRequestsIssued);
		_offLogs.SetValue(c_Logs);
		_offLogsTooLarge.SetValue(c_LogsTooLarge);
		_offMemoryConsumedBytes.SetValue(c_MemoryConsumedBytes);
		_offProcessorTimeSeconds.SetValue(c_ProcessorTimeSeconds);
		_offRevision.SetValue(c_Revision);
	}
}
// ScriptStruct PlayFab.AdminUpdatePlayerSharedSecretResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminUpdatePlayerSharedSecretResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminUpdatePlayerSharedSecretResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientGetStoreItemsResult
// 0x0040 (0x0048 - 0x0008)
public class FClientGetStoreItemsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMarketingData                                              = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EPfSourceType>                      _offSource                                                     = new ExternalOffset<EPfSourceType>(0x0020, false);            // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStore                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0028, false); // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public UPlayFabJsonObject                                  MarketingData                                                  => _offMarketingData.GetValue();
	public EPfSourceType                                       Source                                                         => _offSource.GetValue();
	public TArray<UPlayFabJsonObject>                          Store                                                          => _offStore.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	#endregion

	public FClientGetStoreItemsResult(FString c_CatalogVersion, UPlayFabJsonObject c_MarketingData, EPfSourceType c_Source, TArray<UPlayFabJsonObject> c_Store, FString c_StoreId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offMarketingData.SetValue(c_MarketingData);
		_offSource.SetValue(c_Source);
		_offStore.SetValue(c_Store);
		_offStoreId.SetValue(c_StoreId);
	}
}
// ScriptStruct PlayFab.MultiplayerListAssetSummariesResponse
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerListAssetSummariesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offAssetSummaries                                             = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          AssetSummaries                                                 => _offAssetSummaries.GetValue();
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListAssetSummariesResponse(TArray<UPlayFabJsonObject> c_AssetSummaries, int c_PageSize, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAssetSummaries.SetValue(c_AssetSummaries);
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.ServerGetUserBansResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGetUserBansResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FServerGetUserBansResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.ClientGetTimeResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetTimeResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTime                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Time                                                           => _offTime.GetValue();
	#endregion

	public FClientGetTimeResult(FString c_Time) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTime.SetValue(c_Time);
	}
}
// ScriptStruct PlayFab.AdminUpdateCloudScriptResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminUpdateCloudScriptResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offRevision                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Revision                                                       => _offRevision.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FAdminUpdateCloudScriptResult(int c_Revision, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRevision.SetValue(c_Revision);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.MultiplayerListBuildAliasesForTitleResponse
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerListBuildAliasesForTitleResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBuildAliases                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BuildAliases                                                   => _offBuildAliases.GetValue();
	#endregion

	public FMultiplayerListBuildAliasesForTitleResponse(TArray<UPlayFabJsonObject> c_BuildAliases) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildAliases.SetValue(c_BuildAliases);
	}
}
// ScriptStruct PlayFab.ClientGetTitleDataResult
// 0x0008 (0x0010 - 0x0008)
public class FClientGetTitleDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	#endregion

	public FClientGetTitleDataResult(UPlayFabJsonObject c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.AdminUpdateCatalogItemsResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminUpdateCatalogItemsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminUpdateCatalogItemsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.CloudScriptExecuteEntityCloudScriptRequest
// 0x0028 (0x0030 - 0x0008)
public class FCloudScriptExecuteEntityCloudScriptRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFunctionName                                               = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offFunctionParameter                                          = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offGeneratePlayStreamEvent                                    = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ECloudScriptRevisionOption>         _offRevisionSelection                                          = new ExternalOffset<ECloudScriptRevisionOption>(0x0029, false); // 0x0029(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSpecificRevision                                           = new ExternalOffset<int>(0x002C);                             // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             FunctionName                                                   => _offFunctionName.GetValue();
	public UPlayFabJsonObject                                  FunctionParameter                                              => _offFunctionParameter.GetValue();
	public byte/*(bool)*/                                      GeneratePlayStreamEvent                                        => _offGeneratePlayStreamEvent.GetValue();
	public ECloudScriptRevisionOption                          RevisionSelection                                              => _offRevisionSelection.GetValue();
	public int                                                 SpecificRevision                                               => _offSpecificRevision.GetValue();
	#endregion

	public FCloudScriptExecuteEntityCloudScriptRequest(UPlayFabJsonObject c_Entity, FString c_FunctionName, UPlayFabJsonObject c_FunctionParameter, byte/*(bool)*/ c_GeneratePlayStreamEvent, ECloudScriptRevisionOption c_RevisionSelection, int c_SpecificRevision) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offFunctionName.SetValue(c_FunctionName);
		_offFunctionParameter.SetValue(c_FunctionParameter);
		_offGeneratePlayStreamEvent.SetValue(c_GeneratePlayStreamEvent);
		_offRevisionSelection.SetValue(c_RevisionSelection);
		_offSpecificRevision.SetValue(c_SpecificRevision);
	}
}
// ScriptStruct PlayFab.ServerGetUserDataResult
// 0x0020 (0x0028 - 0x0008)
public class FServerGetUserDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetUserDataResult(UPlayFabJsonObject c_Data, int c_DataVersion, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offDataVersion.SetValue(c_DataVersion);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ClientGetTitleNewsResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetTitleNewsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offNews                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          News                                                           => _offNews.GetValue();
	#endregion

	public FClientGetTitleNewsResult(TArray<UPlayFabJsonObject> c_News) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNews.SetValue(c_News);
	}
}
// ScriptStruct PlayFab.AdminUpdateBansResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminUpdateBansResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FAdminUpdateBansResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.DataAbortFileUploadsResponse
// 0x0010 (0x0018 - 0x0008)
public class FDataAbortFileUploadsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	#endregion

	public FDataAbortFileUploadsResponse(UPlayFabJsonObject c_Entity, int c_ProfileVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offProfileVersion.SetValue(c_ProfileVersion);
	}
}
// ScriptStruct PlayFab.MultiplayerListBuildSummariesResponse
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerListBuildSummariesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBuildSummaries                                             = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BuildSummaries                                                 => _offBuildSummaries.GetValue();
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListBuildSummariesResponse(TArray<UPlayFabJsonObject> c_BuildSummaries, int c_PageSize, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildSummaries.SetValue(c_BuildSummaries);
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.ClientGetTitlePublicKeyResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetTitlePublicKeyResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offRSAPublicKey                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             RSAPublicKey                                                   => _offRSAPublicKey.GetValue();
	#endregion

	public FClientGetTitlePublicKeyResult(FString c_RSAPublicKey) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRSAPublicKey.SetValue(c_RSAPublicKey);
	}
}
// ScriptStruct PlayFab.AdminModifyUserVirtualCurrencyResult
// 0x0028 (0x0030 - 0x0008)
public class FAdminModifyUserVirtualCurrencyResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offBalance                                                    = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offBalanceChange                                              = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Balance                                                        => _offBalance.GetValue();
	public int                                                 BalanceChange                                                  => _offBalanceChange.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FAdminModifyUserVirtualCurrencyResult(int c_Balance, int c_BalanceChange, FString c_PlayFabId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBalance.SetValue(c_Balance);
		_offBalanceChange.SetValue(c_BalanceChange);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.ServerGetUserInventoryResult
// 0x0030 (0x0038 - 0x0008)
public class FServerGetUserInventoryResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offInventory                                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrency                                            = new ExternalOffset<UPlayFabJsonObject>(0x0028, true);        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrencyRechargeTimes                               = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Inventory                                                      => _offInventory.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrencyRechargeTimes                                   => _offVirtualCurrencyRechargeTimes.GetValue();
	#endregion

	public FServerGetUserInventoryResult(TArray<UPlayFabJsonObject> c_Inventory, FString c_PlayFabId, UPlayFabJsonObject c_VirtualCurrency, UPlayFabJsonObject c_VirtualCurrencyRechargeTimes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInventory.SetValue(c_Inventory);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
		_offVirtualCurrencyRechargeTimes.SetValue(c_VirtualCurrencyRechargeTimes);
	}
}
// ScriptStruct PlayFab.DataAbortFileUploadsRequest
// 0x0020 (0x0028 - 0x0008)
public class FDataAbortFileUploadsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFileNames                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             FileNames                                                      => _offFileNames.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	#endregion

	public FDataAbortFileUploadsRequest(UPlayFabJsonObject c_Entity, FString c_FileNames, int c_ProfileVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offFileNames.SetValue(c_FileNames);
		_offProfileVersion.SetValue(c_ProfileVersion);
	}
}
// ScriptStruct PlayFab.ClientGetTradeStatusResponse
// 0x0008 (0x0010 - 0x0008)
public class FClientGetTradeStatusResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offTrade                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Trade                                                          => _offTrade.GetValue();
	#endregion

	public FClientGetTradeStatusResponse(UPlayFabJsonObject c_Trade) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTrade.SetValue(c_Trade);
	}
}
// ScriptStruct PlayFab.MultiplayerListCertificateSummariesResponse
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerListCertificateSummariesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offCertificateSummaries                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          CertificateSummaries                                           => _offCertificateSummaries.GetValue();
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListCertificateSummariesResponse(TArray<UPlayFabJsonObject> c_CertificateSummaries, int c_PageSize, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCertificateSummaries.SetValue(c_CertificateSummaries);
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.ServerGrantCharacterToUserResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGrantCharacterToUserResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	#endregion

	public FServerGrantCharacterToUserResult(FString c_CharacterId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
	}
}
// ScriptStruct PlayFab.AdminSetupPushNotificationResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminSetupPushNotificationResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offARN                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ARN                                                            => _offARN.GetValue();
	#endregion

	public FAdminSetupPushNotificationResult(FString c_ARN) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offARN.SetValue(c_ARN);
	}
}
// ScriptStruct PlayFab.DataDeleteFilesResponse
// 0x0010 (0x0018 - 0x0008)
public class FDataDeleteFilesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	#endregion

	public FDataDeleteFilesResponse(UPlayFabJsonObject c_Entity, int c_ProfileVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offProfileVersion.SetValue(c_ProfileVersion);
	}
}
// ScriptStruct PlayFab.ClientGetUserDataResult
// 0x0010 (0x0018 - 0x0008)
public class FClientGetUserDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	#endregion

	public FClientGetUserDataResult(UPlayFabJsonObject c_Data, int c_DataVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offDataVersion.SetValue(c_DataVersion);
	}
}
// ScriptStruct PlayFab.AdminSetTitleDataResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminSetTitleDataResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminSetTitleDataResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerListContainerImagesResponse
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerListContainerImagesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offImages                                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Images                                                         => _offImages.GetValue();
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListContainerImagesResponse(FString c_Images, int c_PageSize, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offImages.SetValue(c_Images);
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.ServerGrantItemsToCharacterResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGrantItemsToCharacterResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItemGrantResults                                           = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          ItemGrantResults                                               => _offItemGrantResults.GetValue();
	#endregion

	public FServerGrantItemsToCharacterResult(TArray<UPlayFabJsonObject> c_ItemGrantResults) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemGrantResults.SetValue(c_ItemGrantResults);
	}
}
// ScriptStruct PlayFab.DataFinalizeFileUploadsResponse
// 0x0018 (0x0020 - 0x0008)
public class FDataFinalizeFileUploadsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMetaData                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  MetaData                                                       => _offMetaData.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	#endregion

	public FDataFinalizeFileUploadsResponse(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_MetaData, int c_ProfileVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offMetaData.SetValue(c_MetaData);
		_offProfileVersion.SetValue(c_ProfileVersion);
	}
}
// ScriptStruct PlayFab.AdminSetPublisherDataResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminSetPublisherDataResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminSetPublisherDataResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerListContainerImageTagsResponse
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerListContainerImageTagsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTags                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Tags                                                           => _offTags.GetValue();
	#endregion

	public FMultiplayerListContainerImageTagsResponse(FString c_Tags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTags.SetValue(c_Tags);
	}
}
// ScriptStruct PlayFab.ClientGetUserInventoryResult
// 0x0020 (0x0028 - 0x0008)
public class FClientGetUserInventoryResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offInventory                                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrency                                            = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrencyRechargeTimes                               = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Inventory                                                      => _offInventory.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrencyRechargeTimes                                   => _offVirtualCurrencyRechargeTimes.GetValue();
	#endregion

	public FClientGetUserInventoryResult(TArray<UPlayFabJsonObject> c_Inventory, UPlayFabJsonObject c_VirtualCurrency, UPlayFabJsonObject c_VirtualCurrencyRechargeTimes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInventory.SetValue(c_Inventory);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
		_offVirtualCurrencyRechargeTimes.SetValue(c_VirtualCurrencyRechargeTimes);
	}
}
// ScriptStruct PlayFab.AdminSetPublishedRevisionResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminSetPublishedRevisionResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminSetPublishedRevisionResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGrantItemsToUserResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGrantItemsToUserResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItemGrantResults                                           = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          ItemGrantResults                                               => _offItemGrantResults.GetValue();
	#endregion

	public FServerGrantItemsToUserResult(TArray<UPlayFabJsonObject> c_ItemGrantResults) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemGrantResults.SetValue(c_ItemGrantResults);
	}
}
// ScriptStruct PlayFab.DataGetFilesResponse
// 0x0018 (0x0020 - 0x0008)
public class FDataGetFilesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMetaData                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  MetaData                                                       => _offMetaData.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	#endregion

	public FDataGetFilesResponse(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_MetaData, int c_ProfileVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offMetaData.SetValue(c_MetaData);
		_offProfileVersion.SetValue(c_ProfileVersion);
	}
}
// ScriptStruct PlayFab.MultiplayerListMatchmakingTicketsForPlayerResult
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerListMatchmakingTicketsForPlayerResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTicketIds                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TicketIds                                                      => _offTicketIds.GetValue();
	#endregion

	public FMultiplayerListMatchmakingTicketsForPlayerResult(FString c_TicketIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTicketIds.SetValue(c_TicketIds);
	}
}
// ScriptStruct PlayFab.ClientGetWindowsHelloChallengeResponse
// 0x0010 (0x0018 - 0x0008)
public class FClientGetWindowsHelloChallengeResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offChallenge                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Challenge                                                      => _offChallenge.GetValue();
	#endregion

	public FClientGetWindowsHelloChallengeResponse(FString c_Challenge) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offChallenge.SetValue(c_Challenge);
	}
}
// ScriptStruct PlayFab.AdminSetPlayerSecretResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminSetPlayerSecretResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminSetPlayerSecretResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGrantItemsToUsersResult
// 0x0010 (0x0018 - 0x0008)
public class FServerGrantItemsToUsersResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItemGrantResults                                           = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          ItemGrantResults                                               => _offItemGrantResults.GetValue();
	#endregion

	public FServerGrantItemsToUsersResult(TArray<UPlayFabJsonObject> c_ItemGrantResults) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemGrantResults.SetValue(c_ItemGrantResults);
	}
}
// ScriptStruct PlayFab.ClientGrantCharacterToUserResult
// 0x0028 (0x0030 - 0x0008)
public class FClientGrantCharacterToUserResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterType                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offResult                                                     = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             CharacterType                                                  => _offCharacterType.GetValue();
	public byte/*(bool)*/                                      Result                                                         => _offResult.GetValue();
	#endregion

	public FClientGrantCharacterToUserResult(FString c_CharacterId, FString c_CharacterType, byte/*(bool)*/ c_Result) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offCharacterType.SetValue(c_CharacterType);
		_offResult.SetValue(c_Result);
	}
}
// ScriptStruct PlayFab.ServerLinkPSNAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FServerLinkPSNAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerLinkPSNAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerListPartyQosServersResponse
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerListPartyQosServersResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offQosServers                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public TArray<UPlayFabJsonObject>                          QosServers                                                     => _offQosServers.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListPartyQosServersResponse(int c_PageSize, TArray<UPlayFabJsonObject> c_QosServers, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPageSize.SetValue(c_PageSize);
		_offQosServers.SetValue(c_QosServers);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.DataGetObjectsResponse
// 0x0018 (0x0020 - 0x0008)
public class FDataGetObjectsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offObjects                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Objects                                                        => _offObjects.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	#endregion

	public FDataGetObjectsResponse(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Objects, int c_ProfileVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offObjects.SetValue(c_Objects);
		_offProfileVersion.SetValue(c_ProfileVersion);
	}
}
// ScriptStruct PlayFab.AdminSendAccountRecoveryEmailResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminSendAccountRecoveryEmailResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminSendAccountRecoveryEmailResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientLinkAndroidDeviceIDResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkAndroidDeviceIDResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkAndroidDeviceIDResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerLinkServerCustomIdResult
// 0x0000 (0x0008 - 0x0008)
public class FServerLinkServerCustomIdResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerLinkServerCustomIdResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientLinkCustomIDResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkCustomIDResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkCustomIDResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerListQosServersResponse
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerListQosServersResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offQosServers                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public TArray<UPlayFabJsonObject>                          QosServers                                                     => _offQosServers.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListQosServersResponse(int c_PageSize, TArray<UPlayFabJsonObject> c_QosServers, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPageSize.SetValue(c_PageSize);
		_offQosServers.SetValue(c_QosServers);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.ServerLinkXboxAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FServerLinkXboxAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerLinkXboxAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminRunTaskResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminRunTaskResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTaskInstanceId                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TaskInstanceId                                                 => _offTaskInstanceId.GetValue();
	#endregion

	public FAdminRunTaskResult(FString c_TaskInstanceId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTaskInstanceId.SetValue(c_TaskInstanceId);
	}
}
// ScriptStruct PlayFab.ClientLinkFacebookAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkFacebookAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkFacebookAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.DataInitiateFileUploadsResponse
// 0x0020 (0x0028 - 0x0008)
public class FDataInitiateFileUploadsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offUploadDetails                                              = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	public TArray<UPlayFabJsonObject>                          UploadDetails                                                  => _offUploadDetails.GetValue();
	#endregion

	public FDataInitiateFileUploadsResponse(UPlayFabJsonObject c_Entity, int c_ProfileVersion, TArray<UPlayFabJsonObject> c_UploadDetails) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offProfileVersion.SetValue(c_ProfileVersion);
		_offUploadDetails.SetValue(c_UploadDetails);
	}
}
// ScriptStruct PlayFab.PlayFabLoginResultCommon
// 0x0008 (0x0010 - 0x0008)
public class FPlayFabLoginResultCommon : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabAuthenticationContext>      _offAuthenticationContext                                      = new ExternalOffset<UPlayFabAuthenticationContext>(0x0008, true); // 0x0008(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabAuthenticationContext                       AuthenticationContext                                          => _offAuthenticationContext.GetValue();
	#endregion

	public FPlayFabLoginResultCommon(UPlayFabAuthenticationContext c_AuthenticationContext) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAuthenticationContext.SetValue(c_AuthenticationContext);
	}
}
// ScriptStruct PlayFab.ClientLinkFacebookInstantGamesIdResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkFacebookInstantGamesIdResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkFacebookInstantGamesIdResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerListQosServersForTitleResponse
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerListQosServersForTitleResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offQosServers                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public TArray<UPlayFabJsonObject>                          QosServers                                                     => _offQosServers.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListQosServersForTitleResponse(int c_PageSize, TArray<UPlayFabJsonObject> c_QosServers, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPageSize.SetValue(c_PageSize);
		_offQosServers.SetValue(c_QosServers);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.AdminRevokeInventoryItemsResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminRevokeInventoryItemsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offErrors                                                     = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Errors                                                         => _offErrors.GetValue();
	#endregion

	public FAdminRevokeInventoryItemsResult(TArray<UPlayFabJsonObject> c_Errors) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offErrors.SetValue(c_Errors);
	}
}
// ScriptStruct PlayFab.DataSetObjectsResponse
// 0x0018 (0x0020 - 0x0008)
public class FDataSetObjectsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offSetResults                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	public TArray<UPlayFabJsonObject>                          SetResults                                                     => _offSetResults.GetValue();
	#endregion

	public FDataSetObjectsResponse(int c_ProfileVersion, TArray<UPlayFabJsonObject> c_SetResults) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offProfileVersion.SetValue(c_ProfileVersion);
		_offSetResults.SetValue(c_SetResults);
	}
}
// ScriptStruct PlayFab.ClientLinkGameCenterAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkGameCenterAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkGameCenterAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminRevokeInventoryResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminRevokeInventoryResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminRevokeInventoryResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerListServerBackfillTicketsForPlayerResult
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerListServerBackfillTicketsForPlayerResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTicketIds                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TicketIds                                                      => _offTicketIds.GetValue();
	#endregion

	public FMultiplayerListServerBackfillTicketsForPlayerResult(FString c_TicketIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTicketIds.SetValue(c_TicketIds);
	}
}
// ScriptStruct PlayFab.ClientLinkGoogleAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkGoogleAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkGoogleAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminRevokeBansResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminRevokeBansResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FAdminRevokeBansResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.ServerServerLoginResult
// 0x0058 (0x0068 - 0x0010)
public class FServerServerLoginResult : FPlayFabLoginResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntityToken                                                = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoResultPayload                                          = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLastLoginTime                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offNewlyCreated                                               = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSessionTicket                                              = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offSettingsForUser                                            = new ExternalOffset<UPlayFabJsonObject>(0x0058, true);        // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offTreatmentAssignment                                        = new ExternalOffset<UPlayFabJsonObject>(0x0060, true);        // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  EntityToken                                                    => _offEntityToken.GetValue();
	public UPlayFabJsonObject                                  InfoResultPayload                                              => _offInfoResultPayload.GetValue();
	public FString                                             LastLoginTime                                                  => _offLastLoginTime.GetValue();
	public byte/*(bool)*/                                      NewlyCreated                                                   => _offNewlyCreated.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             SessionTicket                                                  => _offSessionTicket.GetValue();
	public UPlayFabJsonObject                                  SettingsForUser                                                => _offSettingsForUser.GetValue();
	public UPlayFabJsonObject                                  TreatmentAssignment                                            => _offTreatmentAssignment.GetValue();
	#endregion

	public FServerServerLoginResult(UPlayFabJsonObject c_EntityToken, UPlayFabJsonObject c_InfoResultPayload, FString c_LastLoginTime, byte/*(bool)*/ c_NewlyCreated, FString c_PlayFabId, FString c_SessionTicket, UPlayFabJsonObject c_SettingsForUser, UPlayFabJsonObject c_TreatmentAssignment) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntityToken.SetValue(c_EntityToken);
		_offInfoResultPayload.SetValue(c_InfoResultPayload);
		_offLastLoginTime.SetValue(c_LastLoginTime);
		_offNewlyCreated.SetValue(c_NewlyCreated);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offSessionTicket.SetValue(c_SessionTicket);
		_offSettingsForUser.SetValue(c_SettingsForUser);
		_offTreatmentAssignment.SetValue(c_TreatmentAssignment);
	}
}
// ScriptStruct PlayFab.DataDeleteFilesRequest
// 0x0020 (0x0028 - 0x0008)
public class FDataDeleteFilesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFileNames                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             FileNames                                                      => _offFileNames.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	#endregion

	public FDataDeleteFilesRequest(UPlayFabJsonObject c_Entity, FString c_FileNames, int c_ProfileVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offFileNames.SetValue(c_FileNames);
		_offProfileVersion.SetValue(c_ProfileVersion);
	}
}
// ScriptStruct PlayFab.ClientLinkIOSDeviceIDResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkIOSDeviceIDResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkIOSDeviceIDResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerListVirtualMachineSummariesResponse
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerListVirtualMachineSummariesResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offVirtualMachines                                            = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0020, false); // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	public TArray<UPlayFabJsonObject>                          VirtualMachines                                                => _offVirtualMachines.GetValue();
	#endregion

	public FMultiplayerListVirtualMachineSummariesResponse(int c_PageSize, FString c_SkipToken, TArray<UPlayFabJsonObject> c_VirtualMachines) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
		_offVirtualMachines.SetValue(c_VirtualMachines);
	}
}
// ScriptStruct PlayFab.AdminRevokeAllBansForUserResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminRevokeAllBansForUserResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FAdminRevokeAllBansForUserResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.ClientLinkKongregateAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkKongregateAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkKongregateAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerModifyItemUsesResult
// 0x0018 (0x0020 - 0x0008)
public class FServerModifyItemUsesResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offItemInstanceId                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRemainingUses                                              = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ItemInstanceId                                                 => _offItemInstanceId.GetValue();
	public int                                                 RemainingUses                                                  => _offRemainingUses.GetValue();
	#endregion

	public FServerModifyItemUsesResult(FString c_ItemInstanceId, int c_RemainingUses) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemInstanceId.SetValue(c_ItemInstanceId);
		_offRemainingUses.SetValue(c_RemainingUses);
	}
}
// ScriptStruct PlayFab.DataFinalizeFileUploadsRequest
// 0x0018 (0x0020 - 0x0008)
public class FDataFinalizeFileUploadsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFileNames                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             FileNames                                                      => _offFileNames.GetValue();
	#endregion

	public FDataFinalizeFileUploadsRequest(UPlayFabJsonObject c_Entity, FString c_FileNames) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offFileNames.SetValue(c_FileNames);
	}
}
// ScriptStruct PlayFab.ClientLinkNintendoSwitchDeviceIdResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkNintendoSwitchDeviceIdResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkNintendoSwitchDeviceIdResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminResolvePurchaseDisputeResponse
// 0x0010 (0x0018 - 0x0008)
public class FAdminResolvePurchaseDisputeResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPurchaseStatus                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PurchaseStatus                                                 => _offPurchaseStatus.GetValue();
	#endregion

	public FAdminResolvePurchaseDisputeResponse(FString c_PurchaseStatus) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPurchaseStatus.SetValue(c_PurchaseStatus);
	}
}
// ScriptStruct PlayFab.ServerMoveItemToCharacterFromCharacterResult
// 0x0000 (0x0008 - 0x0008)
public class FServerMoveItemToCharacterFromCharacterResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerMoveItemToCharacterFromCharacterResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.DataGetFilesRequest
// 0x0008 (0x0010 - 0x0008)
public class FDataGetFilesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	#endregion

	public FDataGetFilesRequest(UPlayFabJsonObject c_Entity) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
	}
}
// ScriptStruct PlayFab.ClientEmptyResult
// 0x0000 (0x0008 - 0x0008)
public class FClientEmptyResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientEmptyResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerMoveItemToCharacterFromUserResult
// 0x0000 (0x0008 - 0x0008)
public class FServerMoveItemToCharacterFromUserResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerMoveItemToCharacterFromUserResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminResetUserStatisticsResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminResetUserStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminResetUserStatisticsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientLinkPSNAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkPSNAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkPSNAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerMoveItemToUserFromCharacterResult
// 0x0000 (0x0008 - 0x0008)
public class FServerMoveItemToUserFromCharacterResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerMoveItemToUserFromCharacterResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerRequestMultiplayerServerResponse
// 0x00A0 (0x00A8 - 0x0008)
public class FMultiplayerRequestMultiplayerServerResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offConnectedPlayers                                           = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFQDN                                                       = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offIPV4Address                                                = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLastStateTransitionTime                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPorts                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0048, false); // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerId                                                   = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSessionId                                                  = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offState                                                      = new ExternalOffset<FString>(0x0088, false);                  // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVmId                                                       = new ExternalOffset<FString>(0x0098, false);                  // 0x0098(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          ConnectedPlayers                                               => _offConnectedPlayers.GetValue();
	public FString                                             FQDN                                                           => _offFQDN.GetValue();
	public FString                                             IPV4Address                                                    => _offIPV4Address.GetValue();
	public FString                                             LastStateTransitionTime                                        => _offLastStateTransitionTime.GetValue();
	public TArray<UPlayFabJsonObject>                          Ports                                                          => _offPorts.GetValue();
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             ServerId                                                       => _offServerId.GetValue();
	public FString                                             SessionId                                                      => _offSessionId.GetValue();
	public FString                                             State                                                          => _offState.GetValue();
	public FString                                             VmId                                                           => _offVmId.GetValue();
	#endregion

	public FMultiplayerRequestMultiplayerServerResponse(TArray<UPlayFabJsonObject> c_ConnectedPlayers, FString c_FQDN, FString c_IPV4Address, FString c_LastStateTransitionTime, TArray<UPlayFabJsonObject> c_Ports, FString c_Region, FString c_ServerId, FString c_SessionId, FString c_State, FString c_VmId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConnectedPlayers.SetValue(c_ConnectedPlayers);
		_offFQDN.SetValue(c_FQDN);
		_offIPV4Address.SetValue(c_IPV4Address);
		_offLastStateTransitionTime.SetValue(c_LastStateTransitionTime);
		_offPorts.SetValue(c_Ports);
		_offRegion.SetValue(c_Region);
		_offServerId.SetValue(c_ServerId);
		_offSessionId.SetValue(c_SessionId);
		_offState.SetValue(c_State);
		_offVmId.SetValue(c_VmId);
	}
}
// ScriptStruct PlayFab.DataGetObjectsRequest
// 0x0010 (0x0018 - 0x0008)
public class FDataGetObjectsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offEscapeObject                                               = new ExternalOffset<byte/*(bool)*/>(0x0010);                  // 0x0010(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public byte/*(bool)*/                                      EscapeObject                                                   => _offEscapeObject.GetValue();
	#endregion

	public FDataGetObjectsRequest(UPlayFabJsonObject c_Entity, byte/*(bool)*/ c_EscapeObject) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offEscapeObject.SetValue(c_EscapeObject);
	}
}
// ScriptStruct PlayFab.AdminResetPasswordResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminResetPasswordResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminResetPasswordResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ClientLinkSteamAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkSteamAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkSteamAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerRolloverContainerRegistryCredentialsResponse
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerRolloverContainerRegistryCredentialsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDnsName                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPassword                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DnsName                                                        => _offDnsName.GetValue();
	public FString                                             Password                                                       => _offPassword.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	#endregion

	public FMultiplayerRolloverContainerRegistryCredentialsResponse(FString c_DnsName, FString c_Password, FString c_username) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDnsName.SetValue(c_DnsName);
		_offPassword.SetValue(c_Password);
		_offusername.SetValue(c_username);
	}
}
// ScriptStruct PlayFab.ServerNotifyMatchmakerPlayerLeftResult
// 0x0008 (0x0010 - 0x0008)
public class FServerNotifyMatchmakerPlayerLeftResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<EPlayerConnectionState>             _offPlayerState                                                = new ExternalOffset<EPlayerConnectionState>(0x0008, false);   // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public EPlayerConnectionState                              PlayerState                                                    => _offPlayerState.GetValue();
	#endregion

	public FServerNotifyMatchmakerPlayerLeftResult(EPlayerConnectionState c_PlayerState) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayerState.SetValue(c_PlayerState);
	}
}
// ScriptStruct PlayFab.ClientLinkTwitchAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkTwitchAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkTwitchAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminResetCharacterStatisticsResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminResetCharacterStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminResetCharacterStatisticsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.DataInitiateFileUploadsRequest
// 0x0020 (0x0028 - 0x0008)
public class FDataInitiateFileUploadsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offFileNames                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0020);                             // 0x0020(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             FileNames                                                      => _offFileNames.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	#endregion

	public FDataInitiateFileUploadsRequest(UPlayFabJsonObject c_Entity, FString c_FileNames, int c_ProfileVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offFileNames.SetValue(c_FileNames);
		_offProfileVersion.SetValue(c_ProfileVersion);
	}
}
// ScriptStruct PlayFab.ClientLinkWindowsHelloAccountResponse
// 0x0000 (0x0008 - 0x0008)
public class FClientLinkWindowsHelloAccountResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FClientLinkWindowsHelloAccountResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerDeleteAssetRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerDeleteAssetRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFilename                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Filename                                                       => _offFilename.GetValue();
	#endregion

	public FMultiplayerDeleteAssetRequest(FString c_Filename) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFilename.SetValue(c_Filename);
	}
}
// ScriptStruct PlayFab.AdminBlankResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminBlankResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminBlankResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerDeleteBuildRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerDeleteBuildRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	#endregion

	public FMultiplayerDeleteBuildRequest(FString c_BuildId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
	}
}
// ScriptStruct PlayFab.ServerRedeemCouponResult
// 0x0010 (0x0018 - 0x0008)
public class FServerRedeemCouponResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGrantedItems                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          GrantedItems                                                   => _offGrantedItems.GetValue();
	#endregion

	public FServerRedeemCouponResult(TArray<UPlayFabJsonObject> c_GrantedItems) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGrantedItems.SetValue(c_GrantedItems);
	}
}
// ScriptStruct PlayFab.AdminRemoveServerBuildResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminRemoveServerBuildResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminRemoveServerBuildResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.DataSetObjectsRequest
// 0x0020 (0x0028 - 0x0008)
public class FDataSetObjectsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offExpectedProfileVersion                                     = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offObjects                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public int                                                 ExpectedProfileVersion                                         => _offExpectedProfileVersion.GetValue();
	public TArray<UPlayFabJsonObject>                          Objects                                                        => _offObjects.GetValue();
	#endregion

	public FDataSetObjectsRequest(UPlayFabJsonObject c_Entity, int c_ExpectedProfileVersion, TArray<UPlayFabJsonObject> c_Objects) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offExpectedProfileVersion.SetValue(c_ExpectedProfileVersion);
		_offObjects.SetValue(c_Objects);
	}
}
// ScriptStruct PlayFab.MultiplayerDeleteBuildAliasRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerDeleteBuildAliasRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAliasId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AliasId                                                        => _offAliasId.GetValue();
	#endregion

	public FMultiplayerDeleteBuildAliasRequest(FString c_AliasId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAliasId.SetValue(c_AliasId);
	}
}
// ScriptStruct PlayFab.AdminRemovePlayerTagResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminRemovePlayerTagResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminRemovePlayerTagResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerRedeemMatchmakerTicketResult
// 0x0020 (0x0028 - 0x0008)
public class FServerRedeemMatchmakerTicketResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offError                                                      = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offTicketIsValid                                              = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offUserInfo                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Error                                                          => _offError.GetValue();
	public byte/*(bool)*/                                      TicketIsValid                                                  => _offTicketIsValid.GetValue();
	public UPlayFabJsonObject                                  UserInfo                                                       => _offUserInfo.GetValue();
	#endregion

	public FServerRedeemMatchmakerTicketResult(FString c_Error, byte/*(bool)*/ c_TicketIsValid, UPlayFabJsonObject c_UserInfo) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offError.SetValue(c_Error);
		_offTicketIsValid.SetValue(c_TicketIsValid);
		_offUserInfo.SetValue(c_UserInfo);
	}
}
// ScriptStruct PlayFab.EventsWriteEventsResponse
// 0x0010 (0x0018 - 0x0008)
public class FEventsWriteEventsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAssignedEventIds                                           = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AssignedEventIds                                               => _offAssignedEventIds.GetValue();
	#endregion

	public FEventsWriteEventsResponse(FString c_AssignedEventIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAssignedEventIds.SetValue(c_AssignedEventIds);
	}
}
// ScriptStruct PlayFab.MultiplayerDeleteCertificateRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerDeleteCertificateRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offName                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Name                                                           => _offName.GetValue();
	#endregion

	public FMultiplayerDeleteCertificateRequest(FString c_Name) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offName.SetValue(c_Name);
	}
}
// ScriptStruct PlayFab.ClientLoginResult
// 0x0058 (0x0068 - 0x0010)
public class FClientLoginResult : FPlayFabLoginResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntityToken                                                = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoResultPayload                                          = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLastLoginTime                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offNewlyCreated                                               = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSessionTicket                                              = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offSettingsForUser                                            = new ExternalOffset<UPlayFabJsonObject>(0x0058, true);        // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offTreatmentAssignment                                        = new ExternalOffset<UPlayFabJsonObject>(0x0060, true);        // 0x0060(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  EntityToken                                                    => _offEntityToken.GetValue();
	public UPlayFabJsonObject                                  InfoResultPayload                                              => _offInfoResultPayload.GetValue();
	public FString                                             LastLoginTime                                                  => _offLastLoginTime.GetValue();
	public byte/*(bool)*/                                      NewlyCreated                                                   => _offNewlyCreated.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             SessionTicket                                                  => _offSessionTicket.GetValue();
	public UPlayFabJsonObject                                  SettingsForUser                                                => _offSettingsForUser.GetValue();
	public UPlayFabJsonObject                                  TreatmentAssignment                                            => _offTreatmentAssignment.GetValue();
	#endregion

	public FClientLoginResult(UPlayFabJsonObject c_EntityToken, UPlayFabJsonObject c_InfoResultPayload, FString c_LastLoginTime, byte/*(bool)*/ c_NewlyCreated, FString c_PlayFabId, FString c_SessionTicket, UPlayFabJsonObject c_SettingsForUser, UPlayFabJsonObject c_TreatmentAssignment) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntityToken.SetValue(c_EntityToken);
		_offInfoResultPayload.SetValue(c_InfoResultPayload);
		_offLastLoginTime.SetValue(c_LastLoginTime);
		_offNewlyCreated.SetValue(c_NewlyCreated);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offSessionTicket.SetValue(c_SessionTicket);
		_offSettingsForUser.SetValue(c_SettingsForUser);
		_offTreatmentAssignment.SetValue(c_TreatmentAssignment);
	}
}
// ScriptStruct PlayFab.AdminRefundPurchaseResponse
// 0x0010 (0x0018 - 0x0008)
public class FAdminRefundPurchaseResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPurchaseStatus                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PurchaseStatus                                                 => _offPurchaseStatus.GetValue();
	#endregion

	public FAdminRefundPurchaseResponse(FString c_PurchaseStatus) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPurchaseStatus.SetValue(c_PurchaseStatus);
	}
}
// ScriptStruct PlayFab.ServerRefreshGameServerInstanceHeartbeatResult
// 0x0000 (0x0008 - 0x0008)
public class FServerRefreshGameServerInstanceHeartbeatResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerRefreshGameServerInstanceHeartbeatResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.EventsWriteEventsRequest
// 0x0010 (0x0018 - 0x0008)
public class FEventsWriteEventsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offEvents                                                     = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Events                                                         => _offEvents.GetValue();
	#endregion

	public FEventsWriteEventsRequest(TArray<UPlayFabJsonObject> c_Events) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEvents.SetValue(c_Events);
	}
}
// ScriptStruct PlayFab.MultiplayerDeleteRemoteUserRequest
// 0x0040 (0x0048 - 0x0008)
public class FMultiplayerDeleteRemoteUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offusername                                                   = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVmId                                                       = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             username                                                       => _offusername.GetValue();
	public FString                                             VmId                                                           => _offVmId.GetValue();
	#endregion

	public FMultiplayerDeleteRemoteUserRequest(FString c_BuildId, FString c_Region, FString c_username, FString c_VmId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offRegion.SetValue(c_Region);
		_offusername.SetValue(c_username);
		_offVmId.SetValue(c_VmId);
	}
}
// ScriptStruct PlayFab.ServerRegisterGameResponse
// 0x0010 (0x0018 - 0x0008)
public class FServerRegisterGameResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	#endregion

	public FServerRegisterGameResponse(FString c_LobbyId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
	}
}
// ScriptStruct PlayFab.GroupsEmptyResponse
// 0x0000 (0x0008 - 0x0008)
public class FGroupsEmptyResponse : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FGroupsEmptyResponse() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerEnableMultiplayerServersForTitleRequest
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerEnableMultiplayerServersForTitleRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerEnableMultiplayerServersForTitleRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerRemovePlayerTagResult
// 0x0000 (0x0008 - 0x0008)
public class FServerRemovePlayerTagResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerRemovePlayerTagResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsAcceptGroupApplicationRequest
// 0x0010 (0x0018 - 0x0008)
public class FGroupsAcceptGroupApplicationRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsAcceptGroupApplicationRequest(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.ServerRemoveSharedGroupMembersResult
// 0x0000 (0x0008 - 0x0008)
public class FServerRemoveSharedGroupMembersResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerRemoveSharedGroupMembersResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerGetAssetUploadUrlRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerGetAssetUploadUrlRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFilename                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Filename                                                       => _offFilename.GetValue();
	#endregion

	public FMultiplayerGetAssetUploadUrlRequest(FString c_Filename) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFilename.SetValue(c_Filename);
	}
}
// ScriptStruct PlayFab.ServerReportPlayerServerResult
// 0x0008 (0x0010 - 0x0008)
public class FServerReportPlayerServerResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offSubmissionsRemaining                                       = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 SubmissionsRemaining                                           => _offSubmissionsRemaining.GetValue();
	#endregion

	public FServerReportPlayerServerResult(int c_SubmissionsRemaining) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSubmissionsRemaining.SetValue(c_SubmissionsRemaining);
	}
}
// ScriptStruct PlayFab.AdminModifyServerBuildResult
// 0x0080 (0x0088 - 0x0008)
public class FAdminModifyServerBuildResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offActiveRegions                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCommandLineTemplate                                        = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offComment                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offExecutablePath                                             = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxGamesPerHost                                            = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMinFreeGameSlots                                           = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EGameBuildStatus>                   _offStatus                                                     = new ExternalOffset<EGameBuildStatus>(0x0060, false);         // 0x0060(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitleId                                                    = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ActiveRegions                                                  => _offActiveRegions.GetValue();
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             CommandLineTemplate                                            => _offCommandLineTemplate.GetValue();
	public FString                                             Comment                                                        => _offComment.GetValue();
	public FString                                             ExecutablePath                                                 => _offExecutablePath.GetValue();
	public int                                                 MaxGamesPerHost                                                => _offMaxGamesPerHost.GetValue();
	public int                                                 MinFreeGameSlots                                               => _offMinFreeGameSlots.GetValue();
	public EGameBuildStatus                                    Status                                                         => _offStatus.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	public FString                                             TitleId                                                        => _offTitleId.GetValue();
	#endregion

	public FAdminModifyServerBuildResult(FString c_ActiveRegions, FString c_BuildId, FString c_CommandLineTemplate, FString c_Comment, FString c_ExecutablePath, int c_MaxGamesPerHost, int c_MinFreeGameSlots, EGameBuildStatus c_Status, FString c_Timestamp, FString c_TitleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActiveRegions.SetValue(c_ActiveRegions);
		_offBuildId.SetValue(c_BuildId);
		_offCommandLineTemplate.SetValue(c_CommandLineTemplate);
		_offComment.SetValue(c_Comment);
		_offExecutablePath.SetValue(c_ExecutablePath);
		_offMaxGamesPerHost.SetValue(c_MaxGamesPerHost);
		_offMinFreeGameSlots.SetValue(c_MinFreeGameSlots);
		_offStatus.SetValue(c_Status);
		_offTimestamp.SetValue(c_Timestamp);
		_offTitleId.SetValue(c_TitleId);
	}
}
// ScriptStruct PlayFab.GroupsAcceptGroupInvitationRequest
// 0x0010 (0x0018 - 0x0008)
public class FGroupsAcceptGroupInvitationRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsAcceptGroupInvitationRequest(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.MultiplayerGetBuildRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerGetBuildRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	#endregion

	public FMultiplayerGetBuildRequest(FString c_BuildId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
	}
}
// ScriptStruct PlayFab.ServerRevokeAllBansForUserResult
// 0x0010 (0x0018 - 0x0008)
public class FServerRevokeAllBansForUserResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FServerRevokeAllBansForUserResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.AdminModifyMatchmakerGameModesResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminModifyMatchmakerGameModesResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminModifyMatchmakerGameModesResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerGetBuildAliasRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerGetBuildAliasRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAliasId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AliasId                                                        => _offAliasId.GetValue();
	#endregion

	public FMultiplayerGetBuildAliasRequest(FString c_AliasId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAliasId.SetValue(c_AliasId);
	}
}
// ScriptStruct PlayFab.GroupsAddMembersRequest
// 0x0028 (0x0030 - 0x0008)
public class FGroupsAddMembersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembers                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0010, false); // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleId                                                     = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public TArray<UPlayFabJsonObject>                          Members                                                        => _offMembers.GetValue();
	public FString                                             RoleId                                                         => _offRoleId.GetValue();
	#endregion

	public FGroupsAddMembersRequest(UPlayFabJsonObject c_Group, TArray<UPlayFabJsonObject> c_Members, FString c_RoleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
		_offMembers.SetValue(c_Members);
		_offRoleId.SetValue(c_RoleId);
	}
}
// ScriptStruct PlayFab.ServerRevokeBansResult
// 0x0010 (0x0018 - 0x0008)
public class FServerRevokeBansResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FServerRevokeBansResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.AdminListVirtualCurrencyTypesResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminListVirtualCurrencyTypesResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offVirtualCurrencies                                          = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          VirtualCurrencies                                              => _offVirtualCurrencies.GetValue();
	#endregion

	public FAdminListVirtualCurrencyTypesResult(TArray<UPlayFabJsonObject> c_VirtualCurrencies) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVirtualCurrencies.SetValue(c_VirtualCurrencies);
	}
}
// ScriptStruct PlayFab.ServerRevokeInventoryResult
// 0x0000 (0x0008 - 0x0008)
public class FServerRevokeInventoryResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerRevokeInventoryResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerGetContainerRegistryCredentialsRequest
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerGetContainerRegistryCredentialsRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerGetContainerRegistryCredentialsRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsApplyToGroupResponse
// 0x0020 (0x0028 - 0x0008)
public class FGroupsApplyToGroupResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offExpires                                                    = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             Expires                                                        => _offExpires.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsApplyToGroupResponse(UPlayFabJsonObject c_Entity, FString c_Expires, UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offExpires.SetValue(c_Expires);
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.AdminListBuildsResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminListBuildsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBuilds                                                     = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Builds                                                         => _offBuilds.GetValue();
	#endregion

	public FAdminListBuildsResult(TArray<UPlayFabJsonObject> c_Builds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuilds.SetValue(c_Builds);
	}
}
// ScriptStruct PlayFab.ServerRevokeInventoryItemsResult
// 0x0010 (0x0018 - 0x0008)
public class FServerRevokeInventoryItemsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offErrors                                                     = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Errors                                                         => _offErrors.GetValue();
	#endregion

	public FServerRevokeInventoryItemsResult(TArray<UPlayFabJsonObject> c_Errors) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offErrors.SetValue(c_Errors);
	}
}
// ScriptStruct PlayFab.MultiplayerGetMatchRequest
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerGetMatchRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offEscapeObject                                               = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMatchID                                                    = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offReturnMemberAttributes                                     = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      EscapeObject                                                   => _offEscapeObject.GetValue();
	public FString                                             MatchID                                                        => _offMatchID.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	public byte/*(bool)*/                                      ReturnMemberAttributes                                         => _offReturnMemberAttributes.GetValue();
	#endregion

	public FMultiplayerGetMatchRequest(byte/*(bool)*/ c_EscapeObject, FString c_MatchID, FString c_QueueName, byte/*(bool)*/ c_ReturnMemberAttributes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEscapeObject.SetValue(c_EscapeObject);
		_offMatchID.SetValue(c_MatchID);
		_offQueueName.SetValue(c_QueueName);
		_offReturnMemberAttributes.SetValue(c_ReturnMemberAttributes);
	}
}
// ScriptStruct PlayFab.ServerSavePushNotificationTemplateResult
// 0x0010 (0x0018 - 0x0008)
public class FServerSavePushNotificationTemplateResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPushNotificationTemplateId                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PushNotificationTemplateId                                     => _offPushNotificationTemplateId.GetValue();
	#endregion

	public FServerSavePushNotificationTemplateResult(FString c_PushNotificationTemplateId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPushNotificationTemplateId.SetValue(c_PushNotificationTemplateId);
	}
}
// ScriptStruct PlayFab.AdminListOpenIdConnectionResponse
// 0x0010 (0x0018 - 0x0008)
public class FAdminListOpenIdConnectionResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offConnections                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Connections                                                    => _offConnections.GetValue();
	#endregion

	public FAdminListOpenIdConnectionResponse(TArray<UPlayFabJsonObject> c_Connections) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offConnections.SetValue(c_Connections);
	}
}
// ScriptStruct PlayFab.GroupsApplyToGroupRequest
// 0x0018 (0x0020 - 0x0008)
public class FGroupsApplyToGroupRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offAutoAcceptOutstandingInvite                                = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      AutoAcceptOutstandingInvite                                    => _offAutoAcceptOutstandingInvite.GetValue();
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsApplyToGroupRequest(byte/*(bool)*/ c_AutoAcceptOutstandingInvite, UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAutoAcceptOutstandingInvite.SetValue(c_AutoAcceptOutstandingInvite);
		_offEntity.SetValue(c_Entity);
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.ServerSendCustomAccountRecoveryEmailResult
// 0x0000 (0x0008 - 0x0008)
public class FServerSendCustomAccountRecoveryEmailResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerSendCustomAccountRecoveryEmailResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminIncrementPlayerStatisticVersionResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminIncrementPlayerStatisticVersionResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offStatisticVersion                                           = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  StatisticVersion                                               => _offStatisticVersion.GetValue();
	#endregion

	public FAdminIncrementPlayerStatisticVersionResult(UPlayFabJsonObject c_StatisticVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatisticVersion.SetValue(c_StatisticVersion);
	}
}
// ScriptStruct PlayFab.MultiplayerGetMatchmakingTicketRequest
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerGetMatchmakingTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offEscapeObject                                               = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicketId                                                   = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      EscapeObject                                                   => _offEscapeObject.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	public FString                                             TicketId                                                       => _offTicketId.GetValue();
	#endregion

	public FMultiplayerGetMatchmakingTicketRequest(byte/*(bool)*/ c_EscapeObject, FString c_QueueName, FString c_TicketId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEscapeObject.SetValue(c_EscapeObject);
		_offQueueName.SetValue(c_QueueName);
		_offTicketId.SetValue(c_TicketId);
	}
}
// ScriptStruct PlayFab.ServerSendEmailFromTemplateResult
// 0x0000 (0x0008 - 0x0008)
public class FServerSendEmailFromTemplateResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerSendEmailFromTemplateResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminIncrementLimitedEditionItemAvailabilityResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminIncrementLimitedEditionItemAvailabilityResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminIncrementLimitedEditionItemAvailabilityResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsBlockEntityRequest
// 0x0010 (0x0018 - 0x0008)
public class FGroupsBlockEntityRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	#endregion

	public FGroupsBlockEntityRequest(UPlayFabJsonObject c_Entity, UPlayFabJsonObject c_Group) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offGroup.SetValue(c_Group);
	}
}
// ScriptStruct PlayFab.ServerSendPushNotificationResult
// 0x0000 (0x0008 - 0x0008)
public class FServerSendPushNotificationResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerSendPushNotificationResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerGetMultiplayerServerDetailsRequest
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerGetMultiplayerServerDetailsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSessionId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             SessionId                                                      => _offSessionId.GetValue();
	#endregion

	public FMultiplayerGetMultiplayerServerDetailsRequest(FString c_BuildId, FString c_Region, FString c_SessionId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offRegion.SetValue(c_Region);
		_offSessionId.SetValue(c_SessionId);
	}
}
// ScriptStruct PlayFab.ServerSetGameServerInstanceDataResult
// 0x0000 (0x0008 - 0x0008)
public class FServerSetGameServerInstanceDataResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerSetGameServerInstanceDataResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminGrantItemsToUsersResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGrantItemsToUsersResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offItemGrantResults                                           = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          ItemGrantResults                                               => _offItemGrantResults.GetValue();
	#endregion

	public FAdminGrantItemsToUsersResult(TArray<UPlayFabJsonObject> c_ItemGrantResults) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offItemGrantResults.SetValue(c_ItemGrantResults);
	}
}
// ScriptStruct PlayFab.ServerSetGameServerInstanceStateResult
// 0x0000 (0x0008 - 0x0008)
public class FServerSetGameServerInstanceStateResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerSetGameServerInstanceStateResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerGetMultiplayerServerLogsRequest
// 0x0020 (0x0028 - 0x0008)
public class FMultiplayerGetMultiplayerServerLogsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerId                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             ServerId                                                       => _offServerId.GetValue();
	#endregion

	public FMultiplayerGetMultiplayerServerLogsRequest(FString c_Region, FString c_ServerId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offRegion.SetValue(c_Region);
		_offServerId.SetValue(c_ServerId);
	}
}
// ScriptStruct PlayFab.ServerSetGameServerInstanceTagsResult
// 0x0000 (0x0008 - 0x0008)
public class FServerSetGameServerInstanceTagsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerSetGameServerInstanceTagsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsChangeMemberRoleRequest
// 0x0038 (0x0040 - 0x0008)
public class FGroupsChangeMemberRoleRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDestinationRoleId                                          = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembers                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0020, false); // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offOriginRoleId                                               = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DestinationRoleId                                              => _offDestinationRoleId.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public TArray<UPlayFabJsonObject>                          Members                                                        => _offMembers.GetValue();
	public FString                                             OriginRoleId                                                   => _offOriginRoleId.GetValue();
	#endregion

	public FGroupsChangeMemberRoleRequest(FString c_DestinationRoleId, UPlayFabJsonObject c_Group, TArray<UPlayFabJsonObject> c_Members, FString c_OriginRoleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDestinationRoleId.SetValue(c_DestinationRoleId);
		_offGroup.SetValue(c_Group);
		_offMembers.SetValue(c_Members);
		_offOriginRoleId.SetValue(c_OriginRoleId);
	}
}
// ScriptStruct PlayFab.MultiplayerGetQueueStatisticsRequest
// 0x0010 (0x0018 - 0x0008)
public class FMultiplayerGetQueueStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	#endregion

	public FMultiplayerGetQueueStatisticsRequest(FString c_QueueName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offQueueName.SetValue(c_QueueName);
	}
}
// ScriptStruct PlayFab.ServerSetPlayerSecretResult
// 0x0000 (0x0008 - 0x0008)
public class FServerSetPlayerSecretResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerSetPlayerSecretResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminGetUserDataResult
// 0x0020 (0x0028 - 0x0008)
public class FAdminGetUserDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0010);                             // 0x0010(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminGetUserDataResult(UPlayFabJsonObject c_Data, int c_DataVersion, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
		_offDataVersion.SetValue(c_DataVersion);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ServerSetPublisherDataResult
// 0x0000 (0x0008 - 0x0008)
public class FServerSetPublisherDataResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerSetPublisherDataResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerGetRemoteLoginEndpointRequest
// 0x0030 (0x0038 - 0x0008)
public class FMultiplayerGetRemoteLoginEndpointRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVmId                                                       = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             VmId                                                           => _offVmId.GetValue();
	#endregion

	public FMultiplayerGetRemoteLoginEndpointRequest(FString c_BuildId, FString c_Region, FString c_VmId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offRegion.SetValue(c_Region);
		_offVmId.SetValue(c_VmId);
	}
}
// ScriptStruct PlayFab.ServerSetTitleDataResult
// 0x0000 (0x0008 - 0x0008)
public class FServerSetTitleDataResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerSetTitleDataResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerUnlinkPSNAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FServerUnlinkPSNAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerUnlinkPSNAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsCreateGroupResponse
// 0x0058 (0x0060 - 0x0008)
public class FGroupsCreateGroupResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAdminRoleId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCreated                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0028, true);        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGroupName                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMemberRoleId                                               = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offRoles                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0058, true);        // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AdminRoleId                                                    => _offAdminRoleId.GetValue();
	public FString                                             Created                                                        => _offCreated.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public FString                                             GroupName                                                      => _offGroupName.GetValue();
	public FString                                             MemberRoleId                                                   => _offMemberRoleId.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	public UPlayFabJsonObject                                  Roles                                                          => _offRoles.GetValue();
	#endregion

	public FGroupsCreateGroupResponse(FString c_AdminRoleId, FString c_Created, UPlayFabJsonObject c_Group, FString c_GroupName, FString c_MemberRoleId, int c_ProfileVersion, UPlayFabJsonObject c_Roles) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAdminRoleId.SetValue(c_AdminRoleId);
		_offCreated.SetValue(c_Created);
		_offGroup.SetValue(c_Group);
		_offGroupName.SetValue(c_GroupName);
		_offMemberRoleId.SetValue(c_MemberRoleId);
		_offProfileVersion.SetValue(c_ProfileVersion);
		_offRoles.SetValue(c_Roles);
	}
}
// ScriptStruct PlayFab.MultiplayerGetServerBackfillTicketRequest
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerGetServerBackfillTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offEscapeObject                                               = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicketId                                                   = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      EscapeObject                                                   => _offEscapeObject.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	public FString                                             TicketId                                                       => _offTicketId.GetValue();
	#endregion

	public FMultiplayerGetServerBackfillTicketRequest(byte/*(bool)*/ c_EscapeObject, FString c_QueueName, FString c_TicketId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEscapeObject.SetValue(c_EscapeObject);
		_offQueueName.SetValue(c_QueueName);
		_offTicketId.SetValue(c_TicketId);
	}
}
// ScriptStruct PlayFab.ServerUnlinkServerCustomIdResult
// 0x0000 (0x0008 - 0x0008)
public class FServerUnlinkServerCustomIdResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerUnlinkServerCustomIdResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminGetUserInventoryResult
// 0x0030 (0x0038 - 0x0008)
public class FAdminGetUserInventoryResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offInventory                                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrency                                            = new ExternalOffset<UPlayFabJsonObject>(0x0028, true);        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrencyRechargeTimes                               = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Inventory                                                      => _offInventory.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrencyRechargeTimes                                   => _offVirtualCurrencyRechargeTimes.GetValue();
	#endregion

	public FAdminGetUserInventoryResult(TArray<UPlayFabJsonObject> c_Inventory, FString c_PlayFabId, UPlayFabJsonObject c_VirtualCurrency, UPlayFabJsonObject c_VirtualCurrencyRechargeTimes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInventory.SetValue(c_Inventory);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
		_offVirtualCurrencyRechargeTimes.SetValue(c_VirtualCurrencyRechargeTimes);
	}
}
// ScriptStruct PlayFab.MultiplayerGetTitleEnabledForMultiplayerServersStatusRequest
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerGetTitleEnabledForMultiplayerServersStatusRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerUnlinkXboxAccountResult
// 0x0000 (0x0008 - 0x0008)
public class FServerUnlinkXboxAccountResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerUnlinkXboxAccountResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsCreateGroupRequest
// 0x0018 (0x0020 - 0x0008)
public class FGroupsCreateGroupRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offEntity                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGroupName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Entity                                                         => _offEntity.GetValue();
	public FString                                             GroupName                                                      => _offGroupName.GetValue();
	#endregion

	public FGroupsCreateGroupRequest(UPlayFabJsonObject c_Entity, FString c_GroupName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEntity.SetValue(c_Entity);
		_offGroupName.SetValue(c_GroupName);
	}
}
// ScriptStruct PlayFab.MultiplayerGetTitleMultiplayerServersQuotasRequest
// 0x0000 (0x0008 - 0x0008)
public class FMultiplayerGetTitleMultiplayerServersQuotasRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FMultiplayerGetTitleMultiplayerServersQuotasRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminGetUserBansResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetUserBansResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FAdminGetUserBansResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.GroupsCreateGroupRoleResponse
// 0x0028 (0x0030 - 0x0008)
public class FGroupsCreateGroupRoleResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleId                                                     = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleName                                                   = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	public FString                                             RoleId                                                         => _offRoleId.GetValue();
	public FString                                             RoleName                                                       => _offRoleName.GetValue();
	#endregion

	public FGroupsCreateGroupRoleResponse(int c_ProfileVersion, FString c_RoleId, FString c_RoleName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offProfileVersion.SetValue(c_ProfileVersion);
		_offRoleId.SetValue(c_RoleId);
		_offRoleName.SetValue(c_RoleName);
	}
}
// ScriptStruct PlayFab.AdminLookupUserAccountInfoResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminLookupUserAccountInfoResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offUserInfo                                                   = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  UserInfo                                                       => _offUserInfo.GetValue();
	#endregion

	public FAdminLookupUserAccountInfoResult(UPlayFabJsonObject c_UserInfo) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offUserInfo.SetValue(c_UserInfo);
	}
}
// ScriptStruct PlayFab.ServerUnlockContainerItemResult
// 0x0038 (0x0040 - 0x0008)
public class FServerUnlockContainerItemResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGrantedItems                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offUnlockedItemInstanceId                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offUnlockedWithItemInstanceId                                 = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offVirtualCurrency                                            = new ExternalOffset<UPlayFabJsonObject>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          GrantedItems                                                   => _offGrantedItems.GetValue();
	public FString                                             UnlockedItemInstanceId                                         => _offUnlockedItemInstanceId.GetValue();
	public FString                                             UnlockedWithItemInstanceId                                     => _offUnlockedWithItemInstanceId.GetValue();
	public UPlayFabJsonObject                                  VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FServerUnlockContainerItemResult(TArray<UPlayFabJsonObject> c_GrantedItems, FString c_UnlockedItemInstanceId, FString c_UnlockedWithItemInstanceId, UPlayFabJsonObject c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGrantedItems.SetValue(c_GrantedItems);
		_offUnlockedItemInstanceId.SetValue(c_UnlockedItemInstanceId);
		_offUnlockedWithItemInstanceId.SetValue(c_UnlockedWithItemInstanceId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.MultiplayerJoinMatchmakingTicketRequest
// 0x0028 (0x0030 - 0x0008)
public class FMultiplayerJoinMatchmakingTicketRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offMember                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offQueueName                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTicketId                                                   = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Member                                                         => _offMember.GetValue();
	public FString                                             QueueName                                                      => _offQueueName.GetValue();
	public FString                                             TicketId                                                       => _offTicketId.GetValue();
	#endregion

	public FMultiplayerJoinMatchmakingTicketRequest(UPlayFabJsonObject c_Member, FString c_QueueName, FString c_TicketId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMember.SetValue(c_Member);
		_offQueueName.SetValue(c_QueueName);
		_offTicketId.SetValue(c_TicketId);
	}
}
// ScriptStruct PlayFab.AdminGetTitleDataResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminGetTitleDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	#endregion

	public FAdminGetTitleDataResult(UPlayFabJsonObject c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.GroupsCreateGroupRoleRequest
// 0x0028 (0x0030 - 0x0008)
public class FGroupsCreateGroupRoleRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleId                                                     = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleName                                                   = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public FString                                             RoleId                                                         => _offRoleId.GetValue();
	public FString                                             RoleName                                                       => _offRoleName.GetValue();
	#endregion

	public FGroupsCreateGroupRoleRequest(UPlayFabJsonObject c_Group, FString c_RoleId, FString c_RoleName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGroup.SetValue(c_Group);
		_offRoleId.SetValue(c_RoleId);
		_offRoleName.SetValue(c_RoleName);
	}
}
// ScriptStruct PlayFab.ServerUpdateBansResult
// 0x0010 (0x0018 - 0x0008)
public class FServerUpdateBansResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FServerUpdateBansResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.MultiplayerListMultiplayerServersRequest
// 0x0038 (0x0040 - 0x0008)
public class FMultiplayerListMultiplayerServersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRegion                                                     = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             Region                                                         => _offRegion.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListMultiplayerServersRequest(FString c_BuildId, int c_PageSize, FString c_Region, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildId.SetValue(c_BuildId);
		_offPageSize.SetValue(c_PageSize);
		_offRegion.SetValue(c_Region);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.AdminGetTasksResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetTasksResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offTasks                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Tasks                                                          => _offTasks.GetValue();
	#endregion

	public FAdminGetTasksResult(TArray<UPlayFabJsonObject> c_Tasks) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTasks.SetValue(c_Tasks);
	}
}
// ScriptStruct PlayFab.ServerUpdateCharacterDataResult
// 0x0008 (0x0010 - 0x0008)
public class FServerUpdateCharacterDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	#endregion

	public FServerUpdateCharacterDataResult(int c_DataVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataVersion.SetValue(c_DataVersion);
	}
}
// ScriptStruct PlayFab.ServerUpdateCharacterStatisticsResult
// 0x0000 (0x0008 - 0x0008)
public class FServerUpdateCharacterStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerUpdateCharacterStatisticsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.MultiplayerListAssetSummariesRequest
// 0x0018 (0x0020 - 0x0008)
public class FMultiplayerListAssetSummariesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offPageSize                                                   = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSkipToken                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 PageSize                                                       => _offPageSize.GetValue();
	public FString                                             SkipToken                                                      => _offSkipToken.GetValue();
	#endregion

	public FMultiplayerListAssetSummariesRequest(int c_PageSize, FString c_SkipToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPageSize.SetValue(c_PageSize);
		_offSkipToken.SetValue(c_SkipToken);
	}
}
// ScriptStruct PlayFab.AdminGetTaskInstancesResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetTaskInstancesResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offSummaries                                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Summaries                                                      => _offSummaries.GetValue();
	#endregion

	public FAdminGetTaskInstancesResult(TArray<UPlayFabJsonObject> c_Summaries) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSummaries.SetValue(c_Summaries);
	}
}
// ScriptStruct PlayFab.ServerUpdatePlayerStatisticsResult
// 0x0000 (0x0008 - 0x0008)
public class FServerUpdatePlayerStatisticsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerUpdatePlayerStatisticsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.GroupsGetGroupResponse
// 0x0058 (0x0060 - 0x0008)
public class FGroupsGetGroupResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offAdminRoleId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCreated                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0028, true);        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offGroupName                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMemberRoleId                                               = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfileVersion                                             = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offRoles                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0058, true);        // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             AdminRoleId                                                    => _offAdminRoleId.GetValue();
	public FString                                             Created                                                        => _offCreated.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public FString                                             GroupName                                                      => _offGroupName.GetValue();
	public FString                                             MemberRoleId                                                   => _offMemberRoleId.GetValue();
	public int                                                 ProfileVersion                                                 => _offProfileVersion.GetValue();
	public UPlayFabJsonObject                                  Roles                                                          => _offRoles.GetValue();
	#endregion

	public FGroupsGetGroupResponse(FString c_AdminRoleId, FString c_Created, UPlayFabJsonObject c_Group, FString c_GroupName, FString c_MemberRoleId, int c_ProfileVersion, UPlayFabJsonObject c_Roles) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAdminRoleId.SetValue(c_AdminRoleId);
		_offCreated.SetValue(c_Created);
		_offGroup.SetValue(c_Group);
		_offGroupName.SetValue(c_GroupName);
		_offMemberRoleId.SetValue(c_MemberRoleId);
		_offProfileVersion.SetValue(c_ProfileVersion);
		_offRoles.SetValue(c_Roles);
	}
}
// ScriptStruct PlayFab.ServerUpdateSharedGroupDataResult
// 0x0000 (0x0008 - 0x0008)
public class FServerUpdateSharedGroupDataResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerUpdateSharedGroupDataResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerUpdateUserDataResult
// 0x0008 (0x0010 - 0x0008)
public class FServerUpdateUserDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offDataVersion                                                = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 DataVersion                                                    => _offDataVersion.GetValue();
	#endregion

	public FServerUpdateUserDataResult(int c_DataVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDataVersion.SetValue(c_DataVersion);
	}
}
// ScriptStruct PlayFab.ServerWriteEventResponse
// 0x0010 (0x0018 - 0x0008)
public class FServerWriteEventResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offEventId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             EventId                                                        => _offEventId.GetValue();
	#endregion

	public FServerWriteEventResponse(FString c_EventId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offEventId.SetValue(c_EventId);
	}
}
// ScriptStruct PlayFab.AdminGetStoreItemsResult
// 0x0040 (0x0048 - 0x0008)
public class FAdminGetStoreItemsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offMarketingData                                              = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EPfSourceType>                      _offSource                                                     = new ExternalOffset<EPfSourceType>(0x0020, false);            // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStore                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0028, false); // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStoreId                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public UPlayFabJsonObject                                  MarketingData                                                  => _offMarketingData.GetValue();
	public EPfSourceType                                       Source                                                         => _offSource.GetValue();
	public TArray<UPlayFabJsonObject>                          Store                                                          => _offStore.GetValue();
	public FString                                             StoreId                                                        => _offStoreId.GetValue();
	#endregion

	public FAdminGetStoreItemsResult(FString c_CatalogVersion, UPlayFabJsonObject c_MarketingData, EPfSourceType c_Source, TArray<UPlayFabJsonObject> c_Store, FString c_StoreId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offMarketingData.SetValue(c_MarketingData);
		_offSource.SetValue(c_Source);
		_offStore.SetValue(c_Store);
		_offStoreId.SetValue(c_StoreId);
	}
}
// ScriptStruct PlayFab.GroupsInviteToGroupResponse
// 0x0038 (0x0040 - 0x0008)
public class FGroupsInviteToGroupResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offExpires                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offGroup                                                      = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInvitedByEntity                                            = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offInvitedEntity                                              = new ExternalOffset<UPlayFabJsonObject>(0x0028, true);        // 0x0028(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offRoleId                                                     = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Expires                                                        => _offExpires.GetValue();
	public UPlayFabJsonObject                                  Group                                                          => _offGroup.GetValue();
	public UPlayFabJsonObject                                  InvitedByEntity                                                => _offInvitedByEntity.GetValue();
	public UPlayFabJsonObject                                  InvitedEntity                                                  => _offInvitedEntity.GetValue();
	public FString                                             RoleId                                                         => _offRoleId.GetValue();
	#endregion

	public FGroupsInviteToGroupResponse(FString c_Expires, UPlayFabJsonObject c_Group, UPlayFabJsonObject c_InvitedByEntity, UPlayFabJsonObject c_InvitedEntity, FString c_RoleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offExpires.SetValue(c_Expires);
		_offGroup.SetValue(c_Group);
		_offInvitedByEntity.SetValue(c_InvitedByEntity);
		_offInvitedEntity.SetValue(c_InvitedEntity);
		_offRoleId.SetValue(c_RoleId);
	}
}
// ScriptStruct PlayFab.AdminGetServerBuildUploadURLResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetServerBuildUploadURLResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offURL                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             URL                                                            => _offURL.GetValue();
	#endregion

	public FAdminGetServerBuildUploadURLResult(FString c_URL) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offURL.SetValue(c_URL);
	}
}
// ScriptStruct PlayFab.ServerDeleteCharacterFromUserRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerDeleteCharacterFromUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offSaveCharacterInventory                                     = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public byte/*(bool)*/                                      SaveCharacterInventory                                         => _offSaveCharacterInventory.GetValue();
	#endregion

	public FServerDeleteCharacterFromUserRequest(FString c_CharacterId, FString c_PlayFabId, byte/*(bool)*/ c_SaveCharacterInventory) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offSaveCharacterInventory.SetValue(c_SaveCharacterInventory);
	}
}
// ScriptStruct PlayFab.GroupsIsMemberResponse
// 0x0008 (0x0010 - 0x0008)
public class FGroupsIsMemberResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offIsMember                                                   = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      IsMember                                                       => _offIsMember.GetValue();
	#endregion

	public FGroupsIsMemberResponse(byte/*(bool)*/ c_IsMember) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIsMember.SetValue(c_IsMember);
	}
}
// ScriptStruct PlayFab.ServerDeletePlayerRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerDeletePlayerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerDeletePlayerRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.GroupsListGroupApplicationsResponse
// 0x0010 (0x0018 - 0x0008)
public class FGroupsListGroupApplicationsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offApplications                                               = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Applications                                                   => _offApplications.GetValue();
	#endregion

	public FGroupsListGroupApplicationsResponse(TArray<UPlayFabJsonObject> c_Applications) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offApplications.SetValue(c_Applications);
	}
}
// ScriptStruct PlayFab.ServerDeletePushNotificationTemplateRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerDeletePushNotificationTemplateRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPushNotificationTemplateId                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PushNotificationTemplateId                                     => _offPushNotificationTemplateId.GetValue();
	#endregion

	public FServerDeletePushNotificationTemplateRequest(FString c_PushNotificationTemplateId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPushNotificationTemplateId.SetValue(c_PushNotificationTemplateId);
	}
}
// ScriptStruct PlayFab.GroupsListGroupBlocksResponse
// 0x0010 (0x0018 - 0x0008)
public class FGroupsListGroupBlocksResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBlockedEntities                                            = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BlockedEntities                                                => _offBlockedEntities.GetValue();
	#endregion

	public FGroupsListGroupBlocksResponse(TArray<UPlayFabJsonObject> c_BlockedEntities) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBlockedEntities.SetValue(c_BlockedEntities);
	}
}
// ScriptStruct PlayFab.ServerDeleteSharedGroupRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerDeleteSharedGroupRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSharedGroupId                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SharedGroupId                                                  => _offSharedGroupId.GetValue();
	#endregion

	public FServerDeleteSharedGroupRequest(FString c_SharedGroupId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSharedGroupId.SetValue(c_SharedGroupId);
	}
}
// ScriptStruct PlayFab.AdminGetServerBuildInfoResult
// 0x0070 (0x0078 - 0x0008)
public class FAdminGetServerBuildInfoResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offActiveRegions                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offComment                                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offerrorMessage                                               = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxGamesPerHost                                            = new ExternalOffset<int>(0x0048);                             // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMinFreeGameSlots                                           = new ExternalOffset<int>(0x004C);                             // 0x004C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EGameBuildStatus>                   _offStatus                                                     = new ExternalOffset<EGameBuildStatus>(0x0050, false);         // 0x0050(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitleId                                                    = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ActiveRegions                                                  => _offActiveRegions.GetValue();
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             Comment                                                        => _offComment.GetValue();
	public FString                                             errorMessage                                                   => _offerrorMessage.GetValue();
	public int                                                 MaxGamesPerHost                                                => _offMaxGamesPerHost.GetValue();
	public int                                                 MinFreeGameSlots                                               => _offMinFreeGameSlots.GetValue();
	public EGameBuildStatus                                    Status                                                         => _offStatus.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	public FString                                             TitleId                                                        => _offTitleId.GetValue();
	#endregion

	public FAdminGetServerBuildInfoResult(FString c_ActiveRegions, FString c_BuildId, FString c_Comment, FString c_errorMessage, int c_MaxGamesPerHost, int c_MinFreeGameSlots, EGameBuildStatus c_Status, FString c_Timestamp, FString c_TitleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActiveRegions.SetValue(c_ActiveRegions);
		_offBuildId.SetValue(c_BuildId);
		_offComment.SetValue(c_Comment);
		_offerrorMessage.SetValue(c_errorMessage);
		_offMaxGamesPerHost.SetValue(c_MaxGamesPerHost);
		_offMinFreeGameSlots.SetValue(c_MinFreeGameSlots);
		_offStatus.SetValue(c_Status);
		_offTimestamp.SetValue(c_Timestamp);
		_offTitleId.SetValue(c_TitleId);
	}
}
// ScriptStruct PlayFab.GroupsListGroupInvitationsResponse
// 0x0010 (0x0018 - 0x0008)
public class FGroupsListGroupInvitationsResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offInvitations                                                = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Invitations                                                    => _offInvitations.GetValue();
	#endregion

	public FGroupsListGroupInvitationsResponse(TArray<UPlayFabJsonObject> c_Invitations) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInvitations.SetValue(c_Invitations);
	}
}
// ScriptStruct PlayFab.ServerDeregisterGameRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerDeregisterGameRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	#endregion

	public FServerDeregisterGameRequest(FString c_LobbyId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offLobbyId.SetValue(c_LobbyId);
	}
}
// ScriptStruct PlayFab.AdminGetRandomResultTablesResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminGetRandomResultTablesResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offTables                                                     = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Tables                                                         => _offTables.GetValue();
	#endregion

	public FAdminGetRandomResultTablesResult(UPlayFabJsonObject c_Tables) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTables.SetValue(c_Tables);
	}
}
// ScriptStruct PlayFab.ServerEvaluateRandomResultTableRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerEvaluateRandomResultTableRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTableId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             TableId                                                        => _offTableId.GetValue();
	#endregion

	public FServerEvaluateRandomResultTableRequest(FString c_CatalogVersion, FString c_TableId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offTableId.SetValue(c_TableId);
	}
}
// ScriptStruct PlayFab.GroupsListGroupMembersResponse
// 0x0010 (0x0018 - 0x0008)
public class FGroupsListGroupMembersResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offMembers                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Members                                                        => _offMembers.GetValue();
	#endregion

	public FGroupsListGroupMembersResponse(TArray<UPlayFabJsonObject> c_Members) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMembers.SetValue(c_Members);
	}
}
// ScriptStruct PlayFab.AdminGetPublisherDataResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminGetPublisherDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offData                                                       = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Data                                                           => _offData.GetValue();
	#endregion

	public FAdminGetPublisherDataResult(UPlayFabJsonObject c_Data) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offData.SetValue(c_Data);
	}
}
// ScriptStruct PlayFab.AdminGetPolicyResponse
// 0x0020 (0x0028 - 0x0008)
public class FAdminGetPolicyResponse : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPolicyName                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatements                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PolicyName                                                     => _offPolicyName.GetValue();
	public TArray<UPlayFabJsonObject>                          Statements                                                     => _offStatements.GetValue();
	#endregion

	public FAdminGetPolicyResponse(FString c_PolicyName, TArray<UPlayFabJsonObject> c_Statements) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPolicyName.SetValue(c_PolicyName);
		_offStatements.SetValue(c_Statements);
	}
}
// ScriptStruct PlayFab.ServerExecuteCloudScriptServerRequest
// 0x0038 (0x0040 - 0x0008)
public class FServerExecuteCloudScriptServerRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFunctionName                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offFunctionParameter                                          = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offGeneratePlayStreamEvent                                    = new ExternalOffset<byte/*(bool)*/>(0x0020);                  // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ECloudScriptRevisionOption>         _offRevisionSelection                                          = new ExternalOffset<ECloudScriptRevisionOption>(0x0038, false); // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSpecificRevision                                           = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FunctionName                                                   => _offFunctionName.GetValue();
	public UPlayFabJsonObject                                  FunctionParameter                                              => _offFunctionParameter.GetValue();
	public byte/*(bool)*/                                      GeneratePlayStreamEvent                                        => _offGeneratePlayStreamEvent.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public ECloudScriptRevisionOption                          RevisionSelection                                              => _offRevisionSelection.GetValue();
	public int                                                 SpecificRevision                                               => _offSpecificRevision.GetValue();
	#endregion

	public FServerExecuteCloudScriptServerRequest(FString c_FunctionName, UPlayFabJsonObject c_FunctionParameter, byte/*(bool)*/ c_GeneratePlayStreamEvent, FString c_PlayFabId, ECloudScriptRevisionOption c_RevisionSelection, int c_SpecificRevision) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFunctionName.SetValue(c_FunctionName);
		_offFunctionParameter.SetValue(c_FunctionParameter);
		_offGeneratePlayStreamEvent.SetValue(c_GeneratePlayStreamEvent);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offRevisionSelection.SetValue(c_RevisionSelection);
		_offSpecificRevision.SetValue(c_SpecificRevision);
	}
}
// ScriptStruct PlayFab.ServerGetAllSegmentsRequest
// 0x0000 (0x0008 - 0x0008)
public class FServerGetAllSegmentsRequest : FPlayFabRequestCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FServerGetAllSegmentsRequest() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminGetPlayerTagsResult
// 0x0020 (0x0028 - 0x0008)
public class FAdminGetPlayerTagsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTags                                                       = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             Tags                                                           => _offTags.GetValue();
	#endregion

	public FAdminGetPlayerTagsResult(FString c_PlayFabId, FString c_Tags) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTags.SetValue(c_Tags);
	}
}
// ScriptStruct PlayFab.ServerListUsersCharactersRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerListUsersCharactersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerListUsersCharactersRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.ServerGetCatalogItemsRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetCatalogItemsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	#endregion

	public FServerGetCatalogItemsRequest(FString c_CatalogVersion) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerStatisticDefinitionsResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPlayerStatisticDefinitionsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatistics                                                 = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Statistics                                                     => _offStatistics.GetValue();
	#endregion

	public FAdminGetPlayerStatisticDefinitionsResult(TArray<UPlayFabJsonObject> c_Statistics) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatistics.SetValue(c_Statistics);
	}
}
// ScriptStruct PlayFab.ServerGetCharacterDataRequest
// 0x0038 (0x0040 - 0x0008)
public class FServerGetCharacterDataRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offIfChangedFromDataVersion                                   = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKeys                                                       = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public int                                                 IfChangedFromDataVersion                                       => _offIfChangedFromDataVersion.GetValue();
	public FString                                             Keys                                                           => _offKeys.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetCharacterDataRequest(FString c_CharacterId, int c_IfChangedFromDataVersion, FString c_Keys, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offIfChangedFromDataVersion.SetValue(c_IfChangedFromDataVersion);
		_offKeys.SetValue(c_Keys);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetPlayersInSegmentResult
// 0x0028 (0x0030 - 0x0008)
public class FAdminGetPlayersInSegmentResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offContinuationToken                                          = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offPlayerProfiles                                             = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offProfilesInSegment                                          = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ContinuationToken                                              => _offContinuationToken.GetValue();
	public TArray<UPlayFabJsonObject>                          PlayerProfiles                                                 => _offPlayerProfiles.GetValue();
	public int                                                 ProfilesInSegment                                              => _offProfilesInSegment.GetValue();
	#endregion

	public FAdminGetPlayersInSegmentResult(FString c_ContinuationToken, TArray<UPlayFabJsonObject> c_PlayerProfiles, int c_ProfilesInSegment) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContinuationToken.SetValue(c_ContinuationToken);
		_offPlayerProfiles.SetValue(c_PlayerProfiles);
		_offProfilesInSegment.SetValue(c_ProfilesInSegment);
	}
}
// ScriptStruct PlayFab.ServerGetCharacterInventoryRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerGetCharacterInventoryRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetCharacterInventoryRequest(FString c_CatalogVersion, FString c_CharacterId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offCharacterId.SetValue(c_CharacterId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerSharedSecretsResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPlayerSharedSecretsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offSharedSecrets                                              = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          SharedSecrets                                                  => _offSharedSecrets.GetValue();
	#endregion

	public FAdminGetPlayerSharedSecretsResult(TArray<UPlayFabJsonObject> c_SharedSecrets) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSharedSecrets.SetValue(c_SharedSecrets);
	}
}
// ScriptStruct PlayFab.ServerGetCharacterLeaderboardRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerGetCharacterLeaderboardRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterType                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartPosition                                              = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterType                                                  => _offCharacterType.GetValue();
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public int                                                 StartPosition                                                  => _offStartPosition.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FServerGetCharacterLeaderboardRequest(FString c_CharacterType, int c_MaxResultsCount, int c_StartPosition, FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterType.SetValue(c_CharacterType);
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offStartPosition.SetValue(c_StartPosition);
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerSegmentsResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPlayerSegmentsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offSegments                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Segments                                                       => _offSegments.GetValue();
	#endregion

	public FAdminGetPlayerSegmentsResult(TArray<UPlayFabJsonObject> c_Segments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSegments.SetValue(c_Segments);
	}
}
// ScriptStruct PlayFab.ServerGetCharacterStatisticsRequest
// 0x0020 (0x0028 - 0x0008)
public class FServerGetCharacterStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetCharacterStatisticsRequest(FString c_CharacterId, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerProfileResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminGetPlayerProfileResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offPlayerProfile                                              = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  PlayerProfile                                                  => _offPlayerProfile.GetValue();
	#endregion

	public FAdminGetPlayerProfileResult(UPlayFabJsonObject c_PlayerProfile) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayerProfile.SetValue(c_PlayerProfile);
	}
}
// ScriptStruct PlayFab.ServerGetContentDownloadUrlRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerGetContentDownloadUrlRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offHttpMethod                                                 = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offKey                                                        = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offThruCDN                                                    = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             HttpMethod                                                     => _offHttpMethod.GetValue();
	public FString                                             Key                                                            => _offKey.GetValue();
	public byte/*(bool)*/                                      ThruCDN                                                        => _offThruCDN.GetValue();
	#endregion

	public FServerGetContentDownloadUrlRequest(FString c_HttpMethod, FString c_Key, byte/*(bool)*/ c_ThruCDN) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offHttpMethod.SetValue(c_HttpMethod);
		_offKey.SetValue(c_Key);
		_offThruCDN.SetValue(c_ThruCDN);
	}
}
// ScriptStruct PlayFab.AdminGetPlayerIdFromAuthTokenResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPlayerIdFromAuthTokenResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FAdminGetPlayerIdFromAuthTokenResult(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetPlayedTitleListResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetPlayedTitleListResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTitleIds                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TitleIds                                                       => _offTitleIds.GetValue();
	#endregion

	public FAdminGetPlayedTitleListResult(FString c_TitleIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTitleIds.SetValue(c_TitleIds);
	}
}
// ScriptStruct PlayFab.AdminGetMatchmakerGameModesResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetMatchmakerGameModesResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offGameModes                                                  = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          GameModes                                                      => _offGameModes.GetValue();
	#endregion

	public FAdminGetMatchmakerGameModesResult(TArray<UPlayFabJsonObject> c_GameModes) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offGameModes.SetValue(c_GameModes);
	}
}
// ScriptStruct PlayFab.ServerGetFriendLeaderboardRequest
// 0x0050 (0x0058 - 0x0008)
public class FServerGetFriendLeaderboardRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeFacebookFriends                                     = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeSteamFriends                                        = new ExternalOffset<byte/*(bool)*/>(0x0009);                  // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x000C);                             // 0x000C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartPosition                                              = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offUseSpecificVersion                                         = new ExternalOffset<byte/*(bool)*/>(0x0040);                  // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0044);                             // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      IncludeFacebookFriends                                         => _offIncludeFacebookFriends.GetValue();
	public byte/*(bool)*/                                      IncludeSteamFriends                                            => _offIncludeSteamFriends.GetValue();
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	public int                                                 StartPosition                                                  => _offStartPosition.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public byte/*(bool)*/                                      UseSpecificVersion                                             => _offUseSpecificVersion.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FServerGetFriendLeaderboardRequest(byte/*(bool)*/ c_IncludeFacebookFriends, byte/*(bool)*/ c_IncludeSteamFriends, int c_MaxResultsCount, FString c_PlayFabId, UPlayFabJsonObject c_ProfileConstraints, int c_StartPosition, FString c_StatisticName, byte/*(bool)*/ c_UseSpecificVersion, int c_Version, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIncludeFacebookFriends.SetValue(c_IncludeFacebookFriends);
		_offIncludeSteamFriends.SetValue(c_IncludeSteamFriends);
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
		_offStartPosition.SetValue(c_StartPosition);
		_offStatisticName.SetValue(c_StatisticName);
		_offUseSpecificVersion.SetValue(c_UseSpecificVersion);
		_offVersion.SetValue(c_Version);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.ServerGetFriendsListRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerGetFriendsListRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeFacebookFriends                                     = new ExternalOffset<byte/*(bool)*/>(0x0008);                  // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIncludeSteamFriends                                        = new ExternalOffset<byte/*(bool)*/>(0x0009);                  // 0x0009(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offXboxToken                                                  = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                      IncludeFacebookFriends                                         => _offIncludeFacebookFriends.GetValue();
	public byte/*(bool)*/                                      IncludeSteamFriends                                            => _offIncludeSteamFriends.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	public FString                                             XboxToken                                                      => _offXboxToken.GetValue();
	#endregion

	public FServerGetFriendsListRequest(byte/*(bool)*/ c_IncludeFacebookFriends, byte/*(bool)*/ c_IncludeSteamFriends, FString c_PlayFabId, UPlayFabJsonObject c_ProfileConstraints, FString c_XboxToken) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offIncludeFacebookFriends.SetValue(c_IncludeFacebookFriends);
		_offIncludeSteamFriends.SetValue(c_IncludeSteamFriends);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
		_offXboxToken.SetValue(c_XboxToken);
	}
}
// ScriptStruct PlayFab.AdminGetMatchmakerGameInfoResult
// 0x00B0 (0x00B8 - 0x0008)
public class FAdminGetMatchmakerGameInfoResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBuildVersion                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offEndTime                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLobbyId                                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offMode                                                       = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayers                                                    = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERegion>                            _offRegion                                                     = new ExternalOffset<ERegion>(0x0058, false);                  // 0x0058(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV4Address                                          = new ExternalOffset<FString>(0x0060, false);                  // 0x0060(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerIPV6Address                                          = new ExternalOffset<FString>(0x0070, false);                  // 0x0070(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offServerPort                                                 = new ExternalOffset<int>(0x0080);                             // 0x0080(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offServerPublicDNSName                                        = new ExternalOffset<FString>(0x0088, false);                  // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStartTime                                                  = new ExternalOffset<FString>(0x0098, false);                  // 0x0098(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitleId                                                    = new ExternalOffset<FString>(0x00A8, false);                  // 0x00A8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             BuildVersion                                                   => _offBuildVersion.GetValue();
	public FString                                             EndTime                                                        => _offEndTime.GetValue();
	public FString                                             LobbyId                                                        => _offLobbyId.GetValue();
	public FString                                             Mode                                                           => _offMode.GetValue();
	public FString                                             Players                                                        => _offPlayers.GetValue();
	public ERegion                                             Region                                                         => _offRegion.GetValue();
	public FString                                             ServerIPV4Address                                              => _offServerIPV4Address.GetValue();
	public FString                                             ServerIPV6Address                                              => _offServerIPV6Address.GetValue();
	public int                                                 ServerPort                                                     => _offServerPort.GetValue();
	public FString                                             ServerPublicDNSName                                            => _offServerPublicDNSName.GetValue();
	public FString                                             StartTime                                                      => _offStartTime.GetValue();
	public FString                                             TitleId                                                        => _offTitleId.GetValue();
	#endregion

	public FAdminGetMatchmakerGameInfoResult(FString c_BuildVersion, FString c_EndTime, FString c_LobbyId, FString c_Mode, FString c_Players, ERegion c_Region, FString c_ServerIPV4Address, FString c_ServerIPV6Address, int c_ServerPort, FString c_ServerPublicDNSName, FString c_StartTime, FString c_TitleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBuildVersion.SetValue(c_BuildVersion);
		_offEndTime.SetValue(c_EndTime);
		_offLobbyId.SetValue(c_LobbyId);
		_offMode.SetValue(c_Mode);
		_offPlayers.SetValue(c_Players);
		_offRegion.SetValue(c_Region);
		_offServerIPV4Address.SetValue(c_ServerIPV4Address);
		_offServerIPV6Address.SetValue(c_ServerIPV6Address);
		_offServerPort.SetValue(c_ServerPort);
		_offServerPublicDNSName.SetValue(c_ServerPublicDNSName);
		_offStartTime.SetValue(c_StartTime);
		_offTitleId.SetValue(c_TitleId);
	}
}
// ScriptStruct PlayFab.AdminGetDataReportResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetDataReportResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDownloadUrl                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             DownloadUrl                                                    => _offDownloadUrl.GetValue();
	#endregion

	public FAdminGetDataReportResult(FString c_DownloadUrl) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDownloadUrl.SetValue(c_DownloadUrl);
	}
}
// ScriptStruct PlayFab.ServerGetLeaderboardRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerGetLeaderboardRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offStartPosition                                              = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offUseSpecificVersion                                         = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	public int                                                 StartPosition                                                  => _offStartPosition.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public byte/*(bool)*/                                      UseSpecificVersion                                             => _offUseSpecificVersion.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FServerGetLeaderboardRequest(int c_MaxResultsCount, UPlayFabJsonObject c_ProfileConstraints, int c_StartPosition, FString c_StatisticName, byte/*(bool)*/ c_UseSpecificVersion, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
		_offStartPosition.SetValue(c_StartPosition);
		_offStatisticName.SetValue(c_StatisticName);
		_offUseSpecificVersion.SetValue(c_UseSpecificVersion);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.AdminGetContentUploadUrlResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetContentUploadUrlResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offURL                                                        = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             URL                                                            => _offURL.GetValue();
	#endregion

	public FAdminGetContentUploadUrlResult(FString c_URL) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offURL.SetValue(c_URL);
	}
}
// ScriptStruct PlayFab.AdminGetContentListResult
// 0x0018 (0x0020 - 0x0008)
public class FAdminGetContentListResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offContents                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offItemCount                                                  = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offTotalSize                                                  = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Contents                                                       => _offContents.GetValue();
	public int                                                 ItemCount                                                      => _offItemCount.GetValue();
	public int                                                 TotalSize                                                      => _offTotalSize.GetValue();
	#endregion

	public FAdminGetContentListResult(TArray<UPlayFabJsonObject> c_Contents, int c_ItemCount, int c_TotalSize) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContents.SetValue(c_Contents);
		_offItemCount.SetValue(c_ItemCount);
		_offTotalSize.SetValue(c_TotalSize);
	}
}
// ScriptStruct PlayFab.ServerGetLeaderboardAroundCharacterRequest
// 0x0048 (0x0050 - 0x0008)
public class FServerGetLeaderboardAroundCharacterRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCharacterId                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCharacterType                                              = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CharacterId                                                    => _offCharacterId.GetValue();
	public FString                                             CharacterType                                                  => _offCharacterType.GetValue();
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FServerGetLeaderboardAroundCharacterRequest(FString c_CharacterId, FString c_CharacterType, int c_MaxResultsCount, FString c_PlayFabId, FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCharacterId.SetValue(c_CharacterId);
		_offCharacterType.SetValue(c_CharacterType);
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.AdminGetCloudScriptVersionsResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetCloudScriptVersionsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offVersions                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Versions                                                       => _offVersions.GetValue();
	#endregion

	public FAdminGetCloudScriptVersionsResult(TArray<UPlayFabJsonObject> c_Versions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVersions.SetValue(c_Versions);
	}
}
// ScriptStruct PlayFab.ServerGetLeaderboardAroundUserRequest
// 0x0038 (0x0040 - 0x0008)
public class FServerGetLeaderboardAroundUserRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0020, true);        // 0x0020(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offUseSpecificVersion                                         = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public byte/*(bool)*/                                      UseSpecificVersion                                             => _offUseSpecificVersion.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FServerGetLeaderboardAroundUserRequest(int c_MaxResultsCount, FString c_PlayFabId, UPlayFabJsonObject c_ProfileConstraints, FString c_StatisticName, byte/*(bool)*/ c_UseSpecificVersion, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
		_offStatisticName.SetValue(c_StatisticName);
		_offUseSpecificVersion.SetValue(c_UseSpecificVersion);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.AdminGetCloudScriptTaskInstanceResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetCloudScriptTaskInstanceResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offParameter                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offSummary                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Parameter                                                      => _offParameter.GetValue();
	public UPlayFabJsonObject                                  Summary                                                        => _offSummary.GetValue();
	#endregion

	public FAdminGetCloudScriptTaskInstanceResult(UPlayFabJsonObject c_Parameter, UPlayFabJsonObject c_Summary) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameter.SetValue(c_Parameter);
		_offSummary.SetValue(c_Summary);
	}
}
// ScriptStruct PlayFab.ServerGetLeaderboardForUsersCharactersRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerGetLeaderboardForUsersCharactersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offMaxResultsCount                                            = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 MaxResultsCount                                                => _offMaxResultsCount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FServerGetLeaderboardForUsersCharactersRequest(int c_MaxResultsCount, FString c_PlayFabId, FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offMaxResultsCount.SetValue(c_MaxResultsCount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.AdminGetCloudScriptRevisionResult
// 0x0030 (0x0038 - 0x0008)
public class FAdminGetCloudScriptRevisionResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCreatedAt                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offFiles                                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0018, false); // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIsPublished                                                = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offRevision                                                   = new ExternalOffset<int>(0x002C);                             // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offVersion                                                    = new ExternalOffset<int>(0x0030);                             // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CreatedAt                                                      => _offCreatedAt.GetValue();
	public TArray<UPlayFabJsonObject>                          Files                                                          => _offFiles.GetValue();
	public byte/*(bool)*/                                      IsPublished                                                    => _offIsPublished.GetValue();
	public int                                                 Revision                                                       => _offRevision.GetValue();
	public int                                                 Version                                                        => _offVersion.GetValue();
	#endregion

	public FAdminGetCloudScriptRevisionResult(FString c_CreatedAt, TArray<UPlayFabJsonObject> c_Files, byte/*(bool)*/ c_IsPublished, int c_Revision, int c_Version) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCreatedAt.SetValue(c_CreatedAt);
		_offFiles.SetValue(c_Files);
		_offIsPublished.SetValue(c_IsPublished);
		_offRevision.SetValue(c_Revision);
		_offVersion.SetValue(c_Version);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerCombinedInfoRequest
// 0x0018 (0x0020 - 0x0008)
public class FServerGetPlayerCombinedInfoRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offInfoRequestParameters                                      = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  InfoRequestParameters                                          => _offInfoRequestParameters.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetPlayerCombinedInfoRequest(UPlayFabJsonObject c_InfoRequestParameters, FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offInfoRequestParameters.SetValue(c_InfoRequestParameters);
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetCatalogItemsResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetCatalogItemsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offCatalog                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Catalog                                                        => _offCatalog.GetValue();
	#endregion

	public FAdminGetCatalogItemsResult(TArray<UPlayFabJsonObject> c_Catalog) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalog.SetValue(c_Catalog);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerProfileRequest
// 0x0018 (0x0020 - 0x0008)
public class FServerGetPlayerProfileRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offProfileConstraints                                         = new ExternalOffset<UPlayFabJsonObject>(0x0018, true);        // 0x0018(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public UPlayFabJsonObject                                  ProfileConstraints                                             => _offProfileConstraints.GetValue();
	#endregion

	public FServerGetPlayerProfileRequest(FString c_PlayFabId, UPlayFabJsonObject c_ProfileConstraints) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offProfileConstraints.SetValue(c_ProfileConstraints);
	}
}
// ScriptStruct PlayFab.ServerGetPlayersSegmentsRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayersSegmentsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	#endregion

	public FServerGetPlayersSegmentsRequest(FString c_PlayFabId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
	}
}
// ScriptStruct PlayFab.AdminGetAllSegmentsResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetAllSegmentsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offSegments                                                   = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Segments                                                       => _offSegments.GetValue();
	#endregion

	public FAdminGetAllSegmentsResult(TArray<UPlayFabJsonObject> c_Segments) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSegments.SetValue(c_Segments);
	}
}
// ScriptStruct PlayFab.ServerGetPlayersInSegmentRequest
// 0x0028 (0x0030 - 0x0008)
public class FServerGetPlayersInSegmentRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offContinuationToken                                          = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxBatchSize                                               = new ExternalOffset<int>(0x0018);                             // 0x0018(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offSecondsToLive                                              = new ExternalOffset<int>(0x001C);                             // 0x001C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSegmentId                                                  = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ContinuationToken                                              => _offContinuationToken.GetValue();
	public int                                                 MaxBatchSize                                                   => _offMaxBatchSize.GetValue();
	public int                                                 SecondsToLive                                                  => _offSecondsToLive.GetValue();
	public FString                                             SegmentId                                                      => _offSegmentId.GetValue();
	#endregion

	public FServerGetPlayersInSegmentRequest(FString c_ContinuationToken, int c_MaxBatchSize, int c_SecondsToLive, FString c_SegmentId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offContinuationToken.SetValue(c_ContinuationToken);
		_offMaxBatchSize.SetValue(c_MaxBatchSize);
		_offSecondsToLive.SetValue(c_SecondsToLive);
		_offSegmentId.SetValue(c_SegmentId);
	}
}
// ScriptStruct PlayFab.AdminGetActionsOnPlayersInSegmentTaskInstanceResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminGetActionsOnPlayersInSegmentTaskInstanceResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offParameter                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offSummary                                                    = new ExternalOffset<UPlayFabJsonObject>(0x0010, true);        // 0x0010(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Parameter                                                      => _offParameter.GetValue();
	public UPlayFabJsonObject                                  Summary                                                        => _offSummary.GetValue();
	#endregion

	public FAdminGetActionsOnPlayersInSegmentTaskInstanceResult(UPlayFabJsonObject c_Parameter, UPlayFabJsonObject c_Summary) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offParameter.SetValue(c_Parameter);
		_offSummary.SetValue(c_Summary);
	}
}
// ScriptStruct PlayFab.AdminExportMasterPlayerDataResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminExportMasterPlayerDataResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offJobReceiptId                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             JobReceiptId                                                   => _offJobReceiptId.GetValue();
	#endregion

	public FAdminExportMasterPlayerDataResult(FString c_JobReceiptId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offJobReceiptId.SetValue(c_JobReceiptId);
	}
}
// ScriptStruct PlayFab.ServerGetPlayerStatisticsRequest
// 0x0030 (0x0038 - 0x0008)
public class FServerGetPlayerStatisticsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticNames                                             = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offStatisticNameVersions                                      = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0028, false); // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             StatisticNames                                                 => _offStatisticNames.GetValue();
	public TArray<UPlayFabJsonObject>                          StatisticNameVersions                                          => _offStatisticNameVersions.GetValue();
	#endregion

	public FServerGetPlayerStatisticsRequest(FString c_PlayFabId, FString c_StatisticNames, TArray<UPlayFabJsonObject> c_StatisticNameVersions) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offStatisticNames.SetValue(c_StatisticNames);
		_offStatisticNameVersions.SetValue(c_StatisticNameVersions);
	}
}
// ScriptStruct PlayFab.AdminDeleteTitleResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminDeleteTitleResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminDeleteTitleResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.ServerGetPlayerStatisticVersionsRequest
// 0x0010 (0x0018 - 0x0008)
public class FServerGetPlayerStatisticVersionsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	#endregion

	public FServerGetPlayerStatisticVersionsRequest(FString c_StatisticName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatisticName.SetValue(c_StatisticName);
	}
}
// ScriptStruct PlayFab.AdminDeleteStoreResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminDeleteStoreResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminDeleteStoreResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminDeletePlayerSharedSecretResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminDeletePlayerSharedSecretResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminDeletePlayerSharedSecretResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminDeletePlayerResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminDeletePlayerResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminDeletePlayerResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminDeleteMasterPlayerAccountResult
// 0x0020 (0x0028 - 0x0008)
public class FAdminDeleteMasterPlayerAccountResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offJobReceiptId                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitleIds                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             JobReceiptId                                                   => _offJobReceiptId.GetValue();
	public FString                                             TitleIds                                                       => _offTitleIds.GetValue();
	#endregion

	public FAdminDeleteMasterPlayerAccountResult(FString c_JobReceiptId, FString c_TitleIds) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offJobReceiptId.SetValue(c_JobReceiptId);
		_offTitleIds.SetValue(c_TitleIds);
	}
}
// ScriptStruct PlayFab.AdminCreatePlayerStatisticDefinitionResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminCreatePlayerStatisticDefinitionResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<UPlayFabJsonObject>                 _offStatistic                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0008, true);        // 0x0008(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlayFabJsonObject                                  Statistic                                                      => _offStatistic.GetValue();
	#endregion

	public FAdminCreatePlayerStatisticDefinitionResult(UPlayFabJsonObject c_Statistic) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offStatistic.SetValue(c_Statistic);
	}
}
// ScriptStruct PlayFab.AdminCreatePlayerSharedSecretResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminCreatePlayerSharedSecretResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offSecretKey                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             SecretKey                                                      => _offSecretKey.GetValue();
	#endregion

	public FAdminCreatePlayerSharedSecretResult(FString c_SecretKey) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offSecretKey.SetValue(c_SecretKey);
	}
}
// ScriptStruct PlayFab.AdminCreateTaskResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminCreateTaskResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTaskId                                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TaskId                                                         => _offTaskId.GetValue();
	#endregion

	public FAdminCreateTaskResult(FString c_TaskId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTaskId.SetValue(c_TaskId);
	}
}
// ScriptStruct PlayFab.AdminCheckLimitedEditionItemAvailabilityResult
// 0x0008 (0x0010 - 0x0008)
public class FAdminCheckLimitedEditionItemAvailabilityResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	#endregion

	public FAdminCheckLimitedEditionItemAvailabilityResult(int c_Amount) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
	}
}
// ScriptStruct PlayFab.AdminBanUsersResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminBanUsersResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBanData                                                    = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          BanData                                                        => _offBanData.GetValue();
	#endregion

	public FAdminBanUsersResult(TArray<UPlayFabJsonObject> c_BanData) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBanData.SetValue(c_BanData);
	}
}
// ScriptStruct PlayFab.AdminAddServerBuildResult
// 0x0080 (0x0088 - 0x0008)
public class FAdminAddServerBuildResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offActiveRegions                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCommandLineTemplate                                        = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offComment                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offExecutablePath                                             = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxGamesPerHost                                            = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMinFreeGameSlots                                           = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EGameBuildStatus>                   _offStatus                                                     = new ExternalOffset<EGameBuildStatus>(0x0060, false);         // 0x0060(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitleId                                                    = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ActiveRegions                                                  => _offActiveRegions.GetValue();
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             CommandLineTemplate                                            => _offCommandLineTemplate.GetValue();
	public FString                                             Comment                                                        => _offComment.GetValue();
	public FString                                             ExecutablePath                                                 => _offExecutablePath.GetValue();
	public int                                                 MaxGamesPerHost                                                => _offMaxGamesPerHost.GetValue();
	public int                                                 MinFreeGameSlots                                               => _offMinFreeGameSlots.GetValue();
	public EGameBuildStatus                                    Status                                                         => _offStatus.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	public FString                                             TitleId                                                        => _offTitleId.GetValue();
	#endregion

	public FAdminAddServerBuildResult(FString c_ActiveRegions, FString c_BuildId, FString c_CommandLineTemplate, FString c_Comment, FString c_ExecutablePath, int c_MaxGamesPerHost, int c_MinFreeGameSlots, EGameBuildStatus c_Status, FString c_Timestamp, FString c_TitleId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActiveRegions.SetValue(c_ActiveRegions);
		_offBuildId.SetValue(c_BuildId);
		_offCommandLineTemplate.SetValue(c_CommandLineTemplate);
		_offComment.SetValue(c_Comment);
		_offExecutablePath.SetValue(c_ExecutablePath);
		_offMaxGamesPerHost.SetValue(c_MaxGamesPerHost);
		_offMinFreeGameSlots.SetValue(c_MinFreeGameSlots);
		_offStatus.SetValue(c_Status);
		_offTimestamp.SetValue(c_Timestamp);
		_offTitleId.SetValue(c_TitleId);
	}
}
// ScriptStruct PlayFab.AdminAddPlayerTagResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminAddPlayerTagResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminAddPlayerTagResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminAddNewsResult
// 0x0010 (0x0018 - 0x0008)
public class FAdminAddNewsResult : FPlayFabResultCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offNewsId                                                     = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             NewsId                                                         => _offNewsId.GetValue();
	#endregion

	public FAdminAddNewsResult(FString c_NewsId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offNewsId.SetValue(c_NewsId);
	}
}
// ScriptStruct PlayFab.AdminAddLocalizedNewsResult
// 0x0000 (0x0008 - 0x0008)
public class FAdminAddLocalizedNewsResult : FPlayFabResultCommon
{
	#region Offsets
	#endregion

	#region Props
	#endregion

	public FAdminAddLocalizedNewsResult() : base(Sdk.MainEms, UIntPtr.Zero)
	{
	}
}
// ScriptStruct PlayFab.AdminCreatePlayerStatisticDefinitionRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminCreatePlayerStatisticDefinitionRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<EStatisticAggregationMethod>        _offAggregationMethod                                          = new ExternalOffset<EStatisticAggregationMethod>(0x0008, false); // 0x0008(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offStatisticName                                              = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EStatisticResetIntervalOption>      _offVersionChangeInterval                                      = new ExternalOffset<EStatisticResetIntervalOption>(0x0020, false); // 0x0020(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public EStatisticAggregationMethod                         AggregationMethod                                              => _offAggregationMethod.GetValue();
	public FString                                             StatisticName                                                  => _offStatisticName.GetValue();
	public EStatisticResetIntervalOption                       VersionChangeInterval                                          => _offVersionChangeInterval.GetValue();
	#endregion

	public FAdminCreatePlayerStatisticDefinitionRequest(EStatisticAggregationMethod c_AggregationMethod, FString c_StatisticName, EStatisticResetIntervalOption c_VersionChangeInterval) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAggregationMethod.SetValue(c_AggregationMethod);
		_offStatisticName.SetValue(c_StatisticName);
		_offVersionChangeInterval.SetValue(c_VersionChangeInterval);
	}
}
// ScriptStruct PlayFab.AdminCreatePlayerSharedSecretRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminCreatePlayerSharedSecretRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offFriendlyName                                               = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             FriendlyName                                                   => _offFriendlyName.GetValue();
	#endregion

	public FAdminCreatePlayerSharedSecretRequest(FString c_FriendlyName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offFriendlyName.SetValue(c_FriendlyName);
	}
}
// ScriptStruct PlayFab.AdminCreateOpenIdConnectionRequest
// 0x0048 (0x0050 - 0x0008)
public class FAdminCreateOpenIdConnectionRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offClientId                                                   = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offClientSecret                                               = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offConnectionId                                               = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offIssuerDiscoveryUrl                                         = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offIssuerInformation                                          = new ExternalOffset<UPlayFabJsonObject>(0x0048, true);        // 0x0048(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ClientId                                                       => _offClientId.GetValue();
	public FString                                             ClientSecret                                                   => _offClientSecret.GetValue();
	public FString                                             ConnectionId                                                   => _offConnectionId.GetValue();
	public FString                                             IssuerDiscoveryUrl                                             => _offIssuerDiscoveryUrl.GetValue();
	public UPlayFabJsonObject                                  IssuerInformation                                              => _offIssuerInformation.GetValue();
	#endregion

	public FAdminCreateOpenIdConnectionRequest(FString c_ClientId, FString c_ClientSecret, FString c_ConnectionId, FString c_IssuerDiscoveryUrl, UPlayFabJsonObject c_IssuerInformation) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offClientId.SetValue(c_ClientId);
		_offClientSecret.SetValue(c_ClientSecret);
		_offConnectionId.SetValue(c_ConnectionId);
		_offIssuerDiscoveryUrl.SetValue(c_IssuerDiscoveryUrl);
		_offIssuerInformation.SetValue(c_IssuerInformation);
	}
}
// ScriptStruct PlayFab.AdminCreateCloudScriptTaskRequest
// 0x0040 (0x0048 - 0x0008)
public class FAdminCreateCloudScriptTaskRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDescription                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIsActive                                                   = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offName                                                       = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offParameter                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSchedule                                                   = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Description                                                    => _offDescription.GetValue();
	public byte/*(bool)*/                                      IsActive                                                       => _offIsActive.GetValue();
	public FString                                             Name                                                           => _offName.GetValue();
	public UPlayFabJsonObject                                  Parameter                                                      => _offParameter.GetValue();
	public FString                                             Schedule                                                       => _offSchedule.GetValue();
	#endregion

	public FAdminCreateCloudScriptTaskRequest(FString c_Description, byte/*(bool)*/ c_IsActive, FString c_Name, UPlayFabJsonObject c_Parameter, FString c_Schedule) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDescription.SetValue(c_Description);
		_offIsActive.SetValue(c_IsActive);
		_offName.SetValue(c_Name);
		_offParameter.SetValue(c_Parameter);
		_offSchedule.SetValue(c_Schedule);
	}
}
// ScriptStruct PlayFab.AdminCreateActionsOnPlayerSegmentTaskRequest
// 0x0040 (0x0048 - 0x0008)
public class FAdminCreateActionsOnPlayerSegmentTaskRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offDescription                                                = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                     _offIsActive                                                   = new ExternalOffset<byte/*(bool)*/>(0x0018);                  // 0x0018(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offName                                                       = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayFabJsonObject>                 _offParameter                                                  = new ExternalOffset<UPlayFabJsonObject>(0x0030, true);        // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offSchedule                                                   = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Description                                                    => _offDescription.GetValue();
	public byte/*(bool)*/                                      IsActive                                                       => _offIsActive.GetValue();
	public FString                                             Name                                                           => _offName.GetValue();
	public UPlayFabJsonObject                                  Parameter                                                      => _offParameter.GetValue();
	public FString                                             Schedule                                                       => _offSchedule.GetValue();
	#endregion

	public FAdminCreateActionsOnPlayerSegmentTaskRequest(FString c_Description, byte/*(bool)*/ c_IsActive, FString c_Name, UPlayFabJsonObject c_Parameter, FString c_Schedule) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offDescription.SetValue(c_Description);
		_offIsActive.SetValue(c_IsActive);
		_offName.SetValue(c_Name);
		_offParameter.SetValue(c_Parameter);
		_offSchedule.SetValue(c_Schedule);
	}
}
// ScriptStruct PlayFab.AdminCheckLimitedEditionItemAvailabilityRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminCheckLimitedEditionItemAvailabilityRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offCatalogVersion                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offItemId                                                     = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             CatalogVersion                                                 => _offCatalogVersion.GetValue();
	public FString                                             ItemId                                                         => _offItemId.GetValue();
	#endregion

	public FAdminCheckLimitedEditionItemAvailabilityRequest(FString c_CatalogVersion, FString c_ItemId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offCatalogVersion.SetValue(c_CatalogVersion);
		_offItemId.SetValue(c_ItemId);
	}
}
// ScriptStruct PlayFab.AdminBanUsersRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminBanUsersRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offBans                                                       = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          Bans                                                           => _offBans.GetValue();
	#endregion

	public FAdminBanUsersRequest(TArray<UPlayFabJsonObject> c_Bans) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBans.SetValue(c_Bans);
	}
}
// ScriptStruct PlayFab.AdminAddVirtualCurrencyTypesRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminAddVirtualCurrencyTypesRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<TArray<UPlayFabJsonObject>>         _offVirtualCurrencies                                          = new ExternalOffset<TArray<UPlayFabJsonObject>>(0x0008, false); // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UPlayFabJsonObject>                          VirtualCurrencies                                              => _offVirtualCurrencies.GetValue();
	#endregion

	public FAdminAddVirtualCurrencyTypesRequest(TArray<UPlayFabJsonObject> c_VirtualCurrencies) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offVirtualCurrencies.SetValue(c_VirtualCurrencies);
	}
}
// ScriptStruct PlayFab.AdminAddUserVirtualCurrencyRequest
// 0x0028 (0x0030 - 0x0008)
public class FAdminAddUserVirtualCurrencyRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<int>                                _offAmount                                                     = new ExternalOffset<int>(0x0008);                             // 0x0008(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0010, false);                  // 0x0010(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offVirtualCurrency                                            = new ExternalOffset<FString>(0x0020, false);                  // 0x0020(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                 Amount                                                         => _offAmount.GetValue();
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             VirtualCurrency                                                => _offVirtualCurrency.GetValue();
	#endregion

	public FAdminAddUserVirtualCurrencyRequest(int c_Amount, FString c_PlayFabId, FString c_VirtualCurrency) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offAmount.SetValue(c_Amount);
		_offPlayFabId.SetValue(c_PlayFabId);
		_offVirtualCurrency.SetValue(c_VirtualCurrency);
	}
}
// ScriptStruct PlayFab.AdminAddServerBuildRequest
// 0x0058 (0x0060 - 0x0008)
public class FAdminAddServerBuildRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offActiveRegions                                              = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offBuildId                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offCommandLineTemplate                                        = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offComment                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offExecutablePath                                             = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMaxGamesPerHost                                            = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                                _offMinFreeGameSlots                                           = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             ActiveRegions                                                  => _offActiveRegions.GetValue();
	public FString                                             BuildId                                                        => _offBuildId.GetValue();
	public FString                                             CommandLineTemplate                                            => _offCommandLineTemplate.GetValue();
	public FString                                             Comment                                                        => _offComment.GetValue();
	public FString                                             ExecutablePath                                                 => _offExecutablePath.GetValue();
	public int                                                 MaxGamesPerHost                                                => _offMaxGamesPerHost.GetValue();
	public int                                                 MinFreeGameSlots                                               => _offMinFreeGameSlots.GetValue();
	#endregion

	public FAdminAddServerBuildRequest(FString c_ActiveRegions, FString c_BuildId, FString c_CommandLineTemplate, FString c_Comment, FString c_ExecutablePath, int c_MaxGamesPerHost, int c_MinFreeGameSlots) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offActiveRegions.SetValue(c_ActiveRegions);
		_offBuildId.SetValue(c_BuildId);
		_offCommandLineTemplate.SetValue(c_CommandLineTemplate);
		_offComment.SetValue(c_Comment);
		_offExecutablePath.SetValue(c_ExecutablePath);
		_offMaxGamesPerHost.SetValue(c_MaxGamesPerHost);
		_offMinFreeGameSlots.SetValue(c_MinFreeGameSlots);
	}
}
// ScriptStruct PlayFab.AdminAddPlayerTagRequest
// 0x0020 (0x0028 - 0x0008)
public class FAdminAddPlayerTagRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offPlayFabId                                                  = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTagName                                                    = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             PlayFabId                                                      => _offPlayFabId.GetValue();
	public FString                                             TagName                                                        => _offTagName.GetValue();
	#endregion

	public FAdminAddPlayerTagRequest(FString c_PlayFabId, FString c_TagName) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offPlayFabId.SetValue(c_PlayFabId);
		_offTagName.SetValue(c_TagName);
	}
}
// ScriptStruct PlayFab.AdminAddNewsRequest
// 0x0030 (0x0038 - 0x0008)
public class FAdminAddNewsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBody                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTimestamp                                                  = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitle                                                      = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Body                                                           => _offBody.GetValue();
	public FString                                             Timestamp                                                      => _offTimestamp.GetValue();
	public FString                                             Title                                                          => _offTitle.GetValue();
	#endregion

	public FAdminAddNewsRequest(FString c_Body, FString c_Timestamp, FString c_Title) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBody.SetValue(c_Body);
		_offTimestamp.SetValue(c_Timestamp);
		_offTitle.SetValue(c_Title);
	}
}
// ScriptStruct PlayFab.AdminAddLocalizedNewsRequest
// 0x0040 (0x0048 - 0x0008)
public class FAdminAddLocalizedNewsRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offBody                                                       = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offLanguage                                                   = new ExternalOffset<FString>(0x0018, false);                  // 0x0018(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offNewsId                                                     = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                            _offTitle                                                      = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             Body                                                           => _offBody.GetValue();
	public FString                                             Language                                                       => _offLanguage.GetValue();
	public FString                                             NewsId                                                         => _offNewsId.GetValue();
	public FString                                             Title                                                          => _offTitle.GetValue();
	#endregion

	public FAdminAddLocalizedNewsRequest(FString c_Body, FString c_Language, FString c_NewsId, FString c_Title) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offBody.SetValue(c_Body);
		_offLanguage.SetValue(c_Language);
		_offNewsId.SetValue(c_NewsId);
		_offTitle.SetValue(c_Title);
	}
}
// ScriptStruct PlayFab.AdminAbortTaskInstanceRequest
// 0x0010 (0x0018 - 0x0008)
public class FAdminAbortTaskInstanceRequest : FPlayFabRequestCommon
{
	#region Offsets
	private ExternalOffset<FString>                            _offTaskInstanceId                                             = new ExternalOffset<FString>(0x0008, false);                  // 0x0008(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                             TaskInstanceId                                                 => _offTaskInstanceId.GetValue();
	#endregion

	public FAdminAbortTaskInstanceRequest(FString c_TaskInstanceId) : base(Sdk.MainEms, UIntPtr.Zero)
	{
		_offTaskInstanceId.SetValue(c_TaskInstanceId);
	}
}

}