// Name: Sq, Version: b21

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace UFT
{
//---------------------------------------------------------------------------
// Classes
//---------------------------------------------------------------------------

// Class Engine.OnlineBlueprintCallProxyBase
// 0x0000 (0x0028 - 0x0028)
public class UOnlineBlueprintCallProxyBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.BlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
public class UBlueprintFunctionLibrary : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Actor
// 0x0210 (0x0238 - 0x0028)
public class AActor : UObject
{
	#region Offsets
	private ExternalOffset<FActorTickFunction>                _offPrimaryActorTick                                           = new ExternalOffset<FActorTickFunction>(0x0028, false);       // 0x0028(0x0058) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHidden                                                    = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNetTemporary                                              = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNetStartup                                                = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOnlyRelevantToOwner                                       = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAlwaysRelevant                                            = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReplicateMovement                                         = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTearOff                                                   = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbExchangedRoles                                            = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNetLoadOnClient                                           = new ExternalOffset<char>(0x0081, false);                     // 0x0081(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNetUseOwnerRelevancy                                      = new ExternalOffset<char>(0x0081, false);                     // 0x0081(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRelevantForNetworkReplays                                 = new ExternalOffset<char>(0x0081, false);                     // 0x0081(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRelevantForLevelBounds                                    = new ExternalOffset<char>(0x0081, false);                     // 0x0081(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReplayRewindable                                          = new ExternalOffset<char>(0x0081, false);                     // 0x0081(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowTickBeforeBeginPlay                                  = new ExternalOffset<char>(0x0081, false);                     // 0x0081(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoDestroyWhenFinished                                   = new ExternalOffset<char>(0x0081, false);                     // 0x0081(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbBlockInput                                                = new ExternalOffset<char>(0x0081, false);                     // 0x0081(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCanBeDamaged                                              = new ExternalOffset<char>(0x0082, false);                     // 0x0082(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, SaveGame, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCollideWhenPlacing                                        = new ExternalOffset<char>(0x0082, false);                     // 0x0082(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFindCameraComponentWhenViewTarget                         = new ExternalOffset<char>(0x0082, false);                     // 0x0082(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGenerateOverlapEventsDuringLevelStreaming                 = new ExternalOffset<char>(0x0082, false);                     // 0x0082(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoresOriginShifting                                     = new ExternalOffset<char>(0x0082, false);                     // 0x0082(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableAutoLODGeneration                                   = new ExternalOffset<char>(0x0082, false);                     // 0x0082(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsEditorOnlyActor                                         = new ExternalOffset<char>(0x0082, false);                     // 0x0082(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbActorSeamlessTraveled                                     = new ExternalOffset<char>(0x0082, false);                     // 0x0082(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReplicates                                                = new ExternalOffset<char>(0x0083, false);                     // 0x0083(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbCanBeInCluster                                            = new ExternalOffset<char>(0x0083, false);                     // 0x0083(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbAllowReceiveTickEventOnDedicatedServer                    = new ExternalOffset<char>(0x0083, false);                     // 0x0083(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbActorEnableCollision                                      = new ExternalOffset<char>(0x0084, false);                     // 0x0084(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbActorIsBeingDestroyed                                     = new ExternalOffset<char>(0x0084, false);                     // 0x0084(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TEnumAsByte<ENetRole>>             _offRemoteRole                                                 = new ExternalOffset<TEnumAsByte<ENetRole>>(0x0085, false);    // 0x0085(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FRepMovement>                      _offReplicatedMovement                                         = new ExternalOffset<FRepMovement>(0x0088, false);             // 0x0088(0x0034) (Edit, Net, DisableEditOnInstance, RepNotify, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInitialLifeSpan                                            = new ExternalOffset<float>(0x00BC);                           // 0x00BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCustomTimeDilation                                         = new ExternalOffset<float>(0x00C0);                           // 0x00C0(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRepAttachment>                    _offAttachmentReplication                                      = new ExternalOffset<FRepAttachment>(0x00C8, false);           // 0x00C8(0x0040) (Net, Transient, RepNotify, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<AActor>                            _offOwner                                                      = new ExternalOffset<AActor>(0x0108, true);                    // 0x0108(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                             _offNetDriverName                                              = new ExternalOffset<FName>(0x0110, false);                    // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TEnumAsByte<ENetRole>>             _offRole                                                       = new ExternalOffset<TEnumAsByte<ENetRole>>(0x0118, false);    // 0x0118(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ENetDormancy>>         _offNetDormancy                                                = new ExternalOffset<TEnumAsByte<ENetDormancy>>(0x0119, false); // 0x0119(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ESpawnActorCollisionHandlingMethod> _offSpawnCollisionHandlingMethod                               = new ExternalOffset<ESpawnActorCollisionHandlingMethod>(0x011A, false); // 0x011A(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAutoReceiveInput>>    _offAutoReceiveInput                                           = new ExternalOffset<TEnumAsByte<EAutoReceiveInput>>(0x011B, false); // 0x011B(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offInputPriority                                              = new ExternalOffset<int>(0x011C);                             // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInputComponent>                   _offInputComponent                                             = new ExternalOffset<UInputComponent>(0x0120, true);           // 0x0120(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetCullDistanceSquared                                     = new ExternalOffset<float>(0x0128);                           // 0x0128(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNetTag                                                     = new ExternalOffset<int>(0x012C);                             // 0x012C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetUpdateFrequency                                         = new ExternalOffset<float>(0x0130);                           // 0x0130(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinNetUpdateFrequency                                      = new ExternalOffset<float>(0x0134);                           // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseRelativeNetUpdateFrequency                             = new ExternalOffset<char>(0x0138, false);                     // 0x0138(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseOwnerRelativeNetUpdateFrequency                        = new ExternalOffset<char>(0x0138, false);                     // 0x0138(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetPriority                                                = new ExternalOffset<float>(0x013C);                           // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APawn>                             _offInstigator                                                 = new ExternalOffset<APawn>(0x0148, true);                     // 0x0148(0x0008) (BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offChildren                                                   = new ExternalOffset<TArray<AActor>>(0x0150, false);           // 0x0150(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<USceneComponent>                   _offRootComponent                                              = new ExternalOffset<USceneComponent>(0x0160, true);           // 0x0160(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<AMatineeActor>>             _offControllingMatineeActors                                   = new ExternalOffset<TArray<AMatineeActor>>(0x0168, false);    // 0x0168(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FName>>                     _offLayers                                                     = new ExternalOffset<TArray<FName>>(0x0180, false);            // 0x0180(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<UChildActorComponent>> _offParentComponent                                            = new ExternalOffset<TWeakObjectPtr<UChildActorComponent>>(0x0190, false); // 0x0190(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FName>>                     _offTags                                                       = new ExternalOffset<TArray<FName>>(0x0198, false);            // 0x0198(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnTakeAnyDamage                                            = new ExternalOffset<FScriptMulticastDelegate>(0x01A8, false); // 0x01A8(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnTakePointDamage                                          = new ExternalOffset<FScriptMulticastDelegate>(0x01A9, false); // 0x01A9(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnTakeRadialDamage                                         = new ExternalOffset<FScriptMulticastDelegate>(0x01AA, false); // 0x01AA(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnActorBeginOverlap                                        = new ExternalOffset<FScriptMulticastDelegate>(0x01AB, false); // 0x01AB(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnActorEndOverlap                                          = new ExternalOffset<FScriptMulticastDelegate>(0x01AC, false); // 0x01AC(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnBeginCursorOver                                          = new ExternalOffset<FScriptMulticastDelegate>(0x01AD, false); // 0x01AD(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnEndCursorOver                                            = new ExternalOffset<FScriptMulticastDelegate>(0x01AE, false); // 0x01AE(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnClicked                                                  = new ExternalOffset<FScriptMulticastDelegate>(0x01AF, false); // 0x01AF(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnReleased                                                 = new ExternalOffset<FScriptMulticastDelegate>(0x01B0, false); // 0x01B0(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInputTouchBegin                                          = new ExternalOffset<FScriptMulticastDelegate>(0x01B1, false); // 0x01B1(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInputTouchEnd                                            = new ExternalOffset<FScriptMulticastDelegate>(0x01B2, false); // 0x01B2(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInputTouchEnter                                          = new ExternalOffset<FScriptMulticastDelegate>(0x01B3, false); // 0x01B3(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInputTouchLeave                                          = new ExternalOffset<FScriptMulticastDelegate>(0x01B4, false); // 0x01B4(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnActorHit                                                 = new ExternalOffset<FScriptMulticastDelegate>(0x01B5, false); // 0x01B5(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnDestroyed                                                = new ExternalOffset<FScriptMulticastDelegate>(0x01B6, false); // 0x01B6(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnEndPlay                                                  = new ExternalOffset<FScriptMulticastDelegate>(0x01B7, false); // 0x01B7(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UActorComponent>>           _offInstanceComponents                                         = new ExternalOffset<TArray<UActorComponent>>(0x0218, false);  // 0x0218(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UActorComponent>>           _offBlueprintCreatedComponents                                 = new ExternalOffset<TArray<UActorComponent>>(0x0228, false);  // 0x0228(0x0010) (ExportObject, ZeroConstructor, NonTransactional, ContainsInstancedReference, TextExportTransient, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FActorTickFunction                                 PrimaryActorTick                                               => _offPrimaryActorTick.GetValue();
	public TEnumAsByte<ENetRole>                              RemoteRole                                                     => _offRemoteRole.GetValue();
	public FRepMovement                                       ReplicatedMovement                                             => _offReplicatedMovement.GetValue();
	public float                                              InitialLifeSpan                                                => _offInitialLifeSpan.GetValue();
	public float                                              CustomTimeDilation                                             => _offCustomTimeDilation.GetValue();
	public FRepAttachment                                     AttachmentReplication                                          => _offAttachmentReplication.GetValue();
	public AActor                                             Owner                                                          => _offOwner.GetValue();
	public FName                                              NetDriverName                                                  => _offNetDriverName.GetValue();
	public TEnumAsByte<ENetRole>                              Role                                                           => _offRole.GetValue();
	public TEnumAsByte<ENetDormancy>                          NetDormancy                                                    => _offNetDormancy.GetValue();
	public ESpawnActorCollisionHandlingMethod                 SpawnCollisionHandlingMethod                                   => _offSpawnCollisionHandlingMethod.GetValue();
	public TEnumAsByte<EAutoReceiveInput>                     AutoReceiveInput                                               => _offAutoReceiveInput.GetValue();
	public int                                                InputPriority                                                  => _offInputPriority.GetValue();
	public UInputComponent                                    InputComponent                                                 => _offInputComponent.GetValue();
	public float                                              NetCullDistanceSquared                                         => _offNetCullDistanceSquared.GetValue();
	public int                                                NetTag                                                         => _offNetTag.GetValue();
	public float                                              NetUpdateFrequency                                             => _offNetUpdateFrequency.GetValue();
	public float                                              MinNetUpdateFrequency                                          => _offMinNetUpdateFrequency.GetValue();
	public float                                              NetPriority                                                    => _offNetPriority.GetValue();
	public APawn                                              Instigator                                                     => _offInstigator.GetValue();
	public TArray<AActor>                                     Children                                                       => _offChildren.GetValue();
	public USceneComponent                                    RootComponent                                                  => _offRootComponent.GetValue();
	public TArray<AMatineeActor>                              ControllingMatineeActors                                       => _offControllingMatineeActors.GetValue();
	public TArray<FName>                                      Layers                                                         => _offLayers.GetValue();
	public TWeakObjectPtr<UChildActorComponent>               ParentComponent                                                => _offParentComponent.GetValue();
	public TArray<FName>                                      Tags                                                           => _offTags.GetValue();
	public FScriptMulticastDelegate                           OnTakeAnyDamage                                                => _offOnTakeAnyDamage.GetValue();
	public FScriptMulticastDelegate                           OnTakePointDamage                                              => _offOnTakePointDamage.GetValue();
	public FScriptMulticastDelegate                           OnTakeRadialDamage                                             => _offOnTakeRadialDamage.GetValue();
	public FScriptMulticastDelegate                           OnActorBeginOverlap                                            => _offOnActorBeginOverlap.GetValue();
	public FScriptMulticastDelegate                           OnActorEndOverlap                                              => _offOnActorEndOverlap.GetValue();
	public FScriptMulticastDelegate                           OnBeginCursorOver                                              => _offOnBeginCursorOver.GetValue();
	public FScriptMulticastDelegate                           OnEndCursorOver                                                => _offOnEndCursorOver.GetValue();
	public FScriptMulticastDelegate                           OnClicked                                                      => _offOnClicked.GetValue();
	public FScriptMulticastDelegate                           OnReleased                                                     => _offOnReleased.GetValue();
	public FScriptMulticastDelegate                           OnInputTouchBegin                                              => _offOnInputTouchBegin.GetValue();
	public FScriptMulticastDelegate                           OnInputTouchEnd                                                => _offOnInputTouchEnd.GetValue();
	public FScriptMulticastDelegate                           OnInputTouchEnter                                              => _offOnInputTouchEnter.GetValue();
	public FScriptMulticastDelegate                           OnInputTouchLeave                                              => _offOnInputTouchLeave.GetValue();
	public FScriptMulticastDelegate                           OnActorHit                                                     => _offOnActorHit.GetValue();
	public FScriptMulticastDelegate                           OnDestroyed                                                    => _offOnDestroyed.GetValue();
	public FScriptMulticastDelegate                           OnEndPlay                                                      => _offOnEndPlay.GetValue();
	public TArray<UActorComponent>                            InstanceComponents                                             => _offInstanceComponents.GetValue();
	public TArray<UActorComponent>                            BlueprintCreatedComponents                                     => _offBlueprintCreatedComponents.GetValue();
	#endregion


}

// Class Engine.Controller
// 0x0085 (0x02BD - 0x0238)
public class AController : AActor
{
	#region Offsets
	private ExternalOffset<APlayerState>                      _offPlayerState                                                = new ExternalOffset<APlayerState>(0x0250, true);              // 0x0250(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInstigatedAnyDamage                                      = new ExternalOffset<FScriptMulticastDelegate>(0x0260, false); // 0x0260(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offStateName                                                  = new ExternalOffset<FName>(0x0270, false);                    // 0x0270(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APawn>                             _offPawn                                                       = new ExternalOffset<APawn>(0x0278, true);                     // 0x0278(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<ACharacter>                        _offCharacter                                                  = new ExternalOffset<ACharacter>(0x0288, true);                // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<USceneComponent>                   _offTransformComponent                                         = new ExternalOffset<USceneComponent>(0x0290, true);           // 0x0290(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FRotator>                          _offControlRotation                                            = new ExternalOffset<FRotator>(0x02B0, false);                 // 0x02B0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbAttachToPawn                                              = new ExternalOffset<char>(0x02BC, false);                     // 0x02BC(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public APlayerState                                       PlayerState                                                    => _offPlayerState.GetValue();
	public FScriptMulticastDelegate                           OnInstigatedAnyDamage                                          => _offOnInstigatedAnyDamage.GetValue();
	public FName                                              StateName                                                      => _offStateName.GetValue();
	public APawn                                              Pawn                                                           => _offPawn.GetValue();
	public ACharacter                                         Character                                                      => _offCharacter.GetValue();
	public USceneComponent                                    TransformComponent                                             => _offTransformComponent.GetValue();
	public FRotator                                           ControlRotation                                                => _offControlRotation.GetValue();
	#endregion


}

// Class Engine.PlayerController
// 0x02CF (0x058C - 0x02BD)
public class APlayerController : AController
{
	#region Offsets
	private ExternalOffset<UPlayer>                           _offPlayer                                                     = new ExternalOffset<UPlayer>(0x02C0, true);                   // 0x02C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APawn>                             _offAcknowledgedPawn                                           = new ExternalOffset<APawn>(0x02C8, true);                     // 0x02C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpTrackInstDirector>          _offControllingDirTrackInst                                    = new ExternalOffset<UInterpTrackInstDirector>(0x02D0, true);  // 0x02D0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AHUD>                              _offMyHUD                                                      = new ExternalOffset<AHUD>(0x02D8, true);                      // 0x02D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APlayerCameraManager>              _offPlayerCameraManager                                        = new ExternalOffset<APlayerCameraManager>(0x02E0, true);      // 0x02E0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offPlayerCameraManagerClass                                   = new ExternalOffset<UClass>(0x02E8, true);                    // 0x02E8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbAutoManageActiveCameraTarget                              = new ExternalOffset<byte/*(bool)*/>(0x02F0);                  // 0x02F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offTargetViewRotation                                         = new ExternalOffset<FRotator>(0x02F4, false);                 // 0x02F4(0x000C) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSmoothTargetViewRotationSpeed                              = new ExternalOffset<float>(0x030C);                           // 0x030C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offHiddenActors                                               = new ExternalOffset<TArray<AActor>>(0x0318, false);           // 0x0318(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<TWeakObjectPtr<UPrimitiveComponent>>> _offHiddenPrimitiveComponents                                  = new ExternalOffset<TArray<TWeakObjectPtr<UPrimitiveComponent>>>(0x0328, false); // 0x0328(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLastSpectatorStateSynchTime                                = new ExternalOffset<float>(0x033C);                           // 0x033C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offLastSpectatorSyncLocation                                  = new ExternalOffset<FVector>(0x0340, false);                  // 0x0340(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offLastSpectatorSyncRotation                                  = new ExternalOffset<FRotator>(0x034C, false);                 // 0x034C(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offClientCap                                                  = new ExternalOffset<int>(0x0358);                             // 0x0358(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCheatManager>                     _offCheatManager                                               = new ExternalOffset<UCheatManager>(0x0360, true);             // 0x0360(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offCheatClass                                                 = new ExternalOffset<UClass>(0x0368, true);                    // 0x0368(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayerInput>                      _offPlayerInput                                                = new ExternalOffset<UPlayerInput>(0x0370, true);              // 0x0370(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FActiveForceFeedbackEffect>> _offActiveForceFeedbackEffects                                 = new ExternalOffset<TArray<FActiveForceFeedbackEffect>>(0x0378, false); // 0x0378(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPlayerIsWaiting                                           = new ExternalOffset<char>(0x03F8, false);                     // 0x03F8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offNetPlayerIndex                                             = new ExternalOffset<char>(0x03FC, false);                     // 0x03FC(0x0001) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UNetConnection>                    _offPendingSwapConnection                                      = new ExternalOffset<UNetConnection>(0x0438, true);            // 0x0438(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UNetConnection>                    _offNetConnection                                              = new ExternalOffset<UNetConnection>(0x0440, true);            // 0x0440(0x0008) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInputYawScale                                              = new ExternalOffset<float>(0x0454);                           // 0x0454(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInputPitchScale                                            = new ExternalOffset<float>(0x0458);                           // 0x0458(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInputRollScale                                             = new ExternalOffset<float>(0x045C);                           // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowMouseCursor                                           = new ExternalOffset<char>(0x0460, false);                     // 0x0460(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableClickEvents                                         = new ExternalOffset<char>(0x0460, false);                     // 0x0460(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableTouchEvents                                         = new ExternalOffset<char>(0x0460, false);                     // 0x0460(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableMouseOverEvents                                     = new ExternalOffset<char>(0x0460, false);                     // 0x0460(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableTouchOverEvents                                     = new ExternalOffset<char>(0x0460, false);                     // 0x0460(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceFeedbackEnabled                                      = new ExternalOffset<char>(0x0460, false);                     // 0x0460(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offForceFeedbackScale                                         = new ExternalOffset<float>(0x0464);                           // 0x0464(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FKey>>                      _offClickEventKeys                                             = new ExternalOffset<TArray<FKey>>(0x0468, false);             // 0x0468(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMouseCursor>>         _offDefaultMouseCursor                                         = new ExternalOffset<TEnumAsByte<EMouseCursor>>(0x0478, false); // 0x0478(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMouseCursor>>         _offCurrentMouseCursor                                         = new ExternalOffset<TEnumAsByte<EMouseCursor>>(0x0479, false); // 0x0479(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionChannel>>    _offDefaultClickTraceChannel                                   = new ExternalOffset<TEnumAsByte<ECollisionChannel>>(0x047A, false); // 0x047A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionChannel>>    _offCurrentClickTraceChannel                                   = new ExternalOffset<TEnumAsByte<ECollisionChannel>>(0x047B, false); // 0x047B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offHitResultTraceDistance                                     = new ExternalOffset<float>(0x047C);                           // 0x047C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ushort>                            _offSeamlessTravelCount                                        = new ExternalOffset<ushort>(0x0480);                          // 0x0480(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ushort>                            _offLastCompletedSeamlessTravelCount                           = new ExternalOffset<ushort>(0x0482);                          // 0x0482(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInputComponent>                   _offInactiveStateInputComponent                                = new ExternalOffset<UInputComponent>(0x04F8, true);           // 0x04F8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbShouldPerformFullTickWhenPaused                           = new ExternalOffset<char>(0x0500, false);                     // 0x0500(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<UTouchInterface>                   _offCurrentTouchInterface                                      = new ExternalOffset<UTouchInterface>(0x0518, true);           // 0x0518(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<ASpectatorPawn>                    _offSpectatorPawn                                              = new ExternalOffset<ASpectatorPawn>(0x0570, true);            // 0x0570(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsLocalPlayerController                                   = new ExternalOffset<byte/*(bool)*/>(0x057C);                  // 0x057C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FVector>                           _offSpawnLocation                                              = new ExternalOffset<FVector>(0x0580, false);                  // 0x0580(0x000C) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UPlayer                                            Player                                                         => _offPlayer.GetValue();
	public APawn                                              AcknowledgedPawn                                               => _offAcknowledgedPawn.GetValue();
	public UInterpTrackInstDirector                           ControllingDirTrackInst                                        => _offControllingDirTrackInst.GetValue();
	public AHUD                                               MyHUD                                                          => _offMyHUD.GetValue();
	public APlayerCameraManager                               PlayerCameraManager                                            => _offPlayerCameraManager.GetValue();
	public UClass                                             PlayerCameraManagerClass                                       => _offPlayerCameraManagerClass.GetValue();
	public byte/*(bool)*/                                     bAutoManageActiveCameraTarget                                  => _offbAutoManageActiveCameraTarget.GetValue();
	public FRotator                                           TargetViewRotation                                             => _offTargetViewRotation.GetValue();
	public float                                              SmoothTargetViewRotationSpeed                                  => _offSmoothTargetViewRotationSpeed.GetValue();
	public TArray<AActor>                                     HiddenActors                                                   => _offHiddenActors.GetValue();
	public TArray<TWeakObjectPtr<UPrimitiveComponent>>        HiddenPrimitiveComponents                                      => _offHiddenPrimitiveComponents.GetValue();
	public float                                              LastSpectatorStateSynchTime                                    => _offLastSpectatorStateSynchTime.GetValue();
	public FVector                                            LastSpectatorSyncLocation                                      => _offLastSpectatorSyncLocation.GetValue();
	public FRotator                                           LastSpectatorSyncRotation                                      => _offLastSpectatorSyncRotation.GetValue();
	public int                                                ClientCap                                                      => _offClientCap.GetValue();
	public UCheatManager                                      CheatManager                                                   => _offCheatManager.GetValue();
	public UClass                                             CheatClass                                                     => _offCheatClass.GetValue();
	public UPlayerInput                                       PlayerInput                                                    => _offPlayerInput.GetValue();
	public TArray<FActiveForceFeedbackEffect>                 ActiveForceFeedbackEffects                                     => _offActiveForceFeedbackEffects.GetValue();
	public UNetConnection                                     PendingSwapConnection                                          => _offPendingSwapConnection.GetValue();
	public UNetConnection                                     NetConnection                                                  => _offNetConnection.GetValue();
	public float                                              InputYawScale                                                  => _offInputYawScale.GetValue();
	public float                                              InputPitchScale                                                => _offInputPitchScale.GetValue();
	public float                                              InputRollScale                                                 => _offInputRollScale.GetValue();
	public float                                              ForceFeedbackScale                                             => _offForceFeedbackScale.GetValue();
	public TArray<FKey>                                       ClickEventKeys                                                 => _offClickEventKeys.GetValue();
	public TEnumAsByte<EMouseCursor>                          DefaultMouseCursor                                             => _offDefaultMouseCursor.GetValue();
	public TEnumAsByte<EMouseCursor>                          CurrentMouseCursor                                             => _offCurrentMouseCursor.GetValue();
	public TEnumAsByte<ECollisionChannel>                     DefaultClickTraceChannel                                       => _offDefaultClickTraceChannel.GetValue();
	public TEnumAsByte<ECollisionChannel>                     CurrentClickTraceChannel                                       => _offCurrentClickTraceChannel.GetValue();
	public float                                              HitResultTraceDistance                                         => _offHitResultTraceDistance.GetValue();
	public ushort                                             SeamlessTravelCount                                            => _offSeamlessTravelCount.GetValue();
	public ushort                                             LastCompletedSeamlessTravelCount                               => _offLastCompletedSeamlessTravelCount.GetValue();
	public UInputComponent                                    InactiveStateInputComponent                                    => _offInactiveStateInputComponent.GetValue();
	public UTouchInterface                                    CurrentTouchInterface                                          => _offCurrentTouchInterface.GetValue();
	public ASpectatorPawn                                     SpectatorPawn                                                  => _offSpectatorPawn.GetValue();
	public byte/*(bool)*/                                     bIsLocalPlayerController                                       => _offbIsLocalPlayerController.GetValue();
	public FVector                                            SpawnLocation                                                  => _offSpawnLocation.GetValue();
	#endregion


}

// Class Engine.ActorComponent
// 0x00A0 (0x00C8 - 0x0028)
public class UActorComponent : UObject
{
	#region Offsets
	private ExternalOffset<FActorComponentTickFunction>       _offPrimaryComponentTick                                       = new ExternalOffset<FActorComponentTickFunction>(0x0030, false); // 0x0030(0x0058) (Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offComponentTags                                              = new ExternalOffset<TArray<FName>>(0x0088, false);            // 0x0088(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UAssetUserData>>            _offAssetUserData                                              = new ExternalOffset<TArray<UAssetUserData>>(0x0098, false);   // 0x0098(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbReplicates                                                = new ExternalOffset<char>(0x00AC, false);                     // 0x00AC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbNetAddressable                                            = new ExternalOffset<char>(0x00AC, false);                     // 0x00AC(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbAutoActivate                                              = new ExternalOffset<char>(0x00AD, false);                     // 0x00AD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsActive                                                  = new ExternalOffset<char>(0x00AE, false);                     // 0x00AE(0x0001) BIT_FIELD (Net, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEditableWhenInherited                                     = new ExternalOffset<char>(0x00AE, false);                     // 0x00AE(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCanEverAffectNavigation                                   = new ExternalOffset<char>(0x00AE, false);                     // 0x00AE(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbIsEditorOnly                                              = new ExternalOffset<char>(0x00AE, false);                     // 0x00AE(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EComponentCreationMethod>          _offCreationMethod                                             = new ExternalOffset<EComponentCreationMethod>(0x00B0, false); // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnComponentActivated                                       = new ExternalOffset<FScriptMulticastDelegate>(0x00B1, false); // 0x00B1(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnComponentDeactivated                                     = new ExternalOffset<FScriptMulticastDelegate>(0x00B2, false); // 0x00B2(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSimpleMemberReference>>    _offUCSModifiedProperties                                      = new ExternalOffset<TArray<FSimpleMemberReference>>(0x00B8, false); // 0x00B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FActorComponentTickFunction                        PrimaryComponentTick                                           => _offPrimaryComponentTick.GetValue();
	public TArray<FName>                                      ComponentTags                                                  => _offComponentTags.GetValue();
	public TArray<UAssetUserData>                             AssetUserData                                                  => _offAssetUserData.GetValue();
	public EComponentCreationMethod                           CreationMethod                                                 => _offCreationMethod.GetValue();
	public FScriptMulticastDelegate                           OnComponentActivated                                           => _offOnComponentActivated.GetValue();
	public FScriptMulticastDelegate                           OnComponentDeactivated                                         => _offOnComponentDeactivated.GetValue();
	public TArray<FSimpleMemberReference>                     UCSModifiedProperties                                          => _offUCSModifiedProperties.GetValue();
	#endregion


}

// Class Engine.SceneComponent
// 0x00B8 (0x0180 - 0x00C8)
public class USceneComponent : UActorComponent
{
	#region Offsets
	private ExternalOffset<TWeakObjectPtr<APhysicsVolume>>    _offPhysicsVolume                                              = new ExternalOffset<TWeakObjectPtr<APhysicsVolume>>(0x00E0, false); // 0x00E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<USceneComponent>                   _offAttachParent                                               = new ExternalOffset<USceneComponent>(0x00E8, true);           // 0x00E8(0x0008) (ExportObject, Net, ZeroConstructor, InstancedReference, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                             _offAttachSocketName                                           = new ExternalOffset<FName>(0x00F0, false);                    // 0x00F0(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<USceneComponent>>           _offAttachChildren                                             = new ExternalOffset<TArray<USceneComponent>>(0x00F8, false);  // 0x00F8(0x0010) (ExportObject, Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<USceneComponent>>           _offClientAttachedChildren                                     = new ExternalOffset<TArray<USceneComponent>>(0x0108, false);  // 0x0108(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<FVector>                           _offRelativeLocation                                           = new ExternalOffset<FVector>(0x0144, false);                  // 0x0144(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offRelativeRotation                                           = new ExternalOffset<FRotator>(0x0150, false);                 // 0x0150(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offRelativeScale3D                                            = new ExternalOffset<FVector>(0x015C, false);                  // 0x015C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offComponentVelocity                                          = new ExternalOffset<FVector>(0x0168, false);                  // 0x0168(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbComponentToWorldUpdated                                   = new ExternalOffset<char>(0x0174, false);                     // 0x0174(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbAbsoluteLocation                                          = new ExternalOffset<char>(0x0174, false);                     // 0x0174(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAbsoluteRotation                                          = new ExternalOffset<char>(0x0174, false);                     // 0x0174(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAbsoluteScale                                             = new ExternalOffset<char>(0x0174, false);                     // 0x0174(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVisible                                                   = new ExternalOffset<char>(0x0174, false);                     // 0x0174(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHiddenInGame                                              = new ExternalOffset<char>(0x0174, false);                     // 0x0174(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldBeAttached                                          = new ExternalOffset<char>(0x0174, false);                     // 0x0174(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbShouldSnapLocationWhenAttached                            = new ExternalOffset<char>(0x0175, false);                     // 0x0175(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbShouldSnapRotationWhenAttached                            = new ExternalOffset<char>(0x0175, false);                     // 0x0175(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbShouldUpdatePhysicsVolume                                 = new ExternalOffset<char>(0x0175, false);                     // 0x0175(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbBoundsChangeTriggersStreamingDataRebuild                  = new ExternalOffset<char>(0x0175, false);                     // 0x0175(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseAttachParentBound                                      = new ExternalOffset<char>(0x0175, false);                     // 0x0175(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EComponentMobility>>   _offMobility                                                   = new ExternalOffset<TEnumAsByte<EComponentMobility>>(0x017D, false); // 0x017D(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EDetailMode>>          _offDetailMode                                                 = new ExternalOffset<TEnumAsByte<EDetailMode>>(0x017E, false); // 0x017E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offPhysicsVolumeChangedDelegate                               = new ExternalOffset<FScriptMulticastDelegate>(0x017F, false); // 0x017F(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TWeakObjectPtr<APhysicsVolume>                     PhysicsVolume                                                  => _offPhysicsVolume.GetValue();
	public USceneComponent                                    AttachParent                                                   => _offAttachParent.GetValue();
	public FName                                              AttachSocketName                                               => _offAttachSocketName.GetValue();
	public TArray<USceneComponent>                            AttachChildren                                                 => _offAttachChildren.GetValue();
	public TArray<USceneComponent>                            ClientAttachedChildren                                         => _offClientAttachedChildren.GetValue();
	public FVector                                            RelativeLocation                                               => _offRelativeLocation.GetValue();
	public FRotator                                           RelativeRotation                                               => _offRelativeRotation.GetValue();
	public FVector                                            RelativeScale3D                                                => _offRelativeScale3D.GetValue();
	public FVector                                            ComponentVelocity                                              => _offComponentVelocity.GetValue();
	public TEnumAsByte<EComponentMobility>                    Mobility                                                       => _offMobility.GetValue();
	public TEnumAsByte<EDetailMode>                           DetailMode                                                     => _offDetailMode.GetValue();
	public FScriptMulticastDelegate                           PhysicsVolumeChangedDelegate                                   => _offPhysicsVolumeChangedDelegate.GetValue();
	#endregion


}

// Class Engine.DataAsset
// 0x0008 (0x0030 - 0x0028)
public class UDataAsset : UObject
{
	#region Offsets
	private ExternalOffset<UClass>                            _offNativeClass                                                = new ExternalOffset<UClass>(0x0028, true);                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UClass                                             NativeClass                                                    => _offNativeClass.GetValue();
	#endregion


}

// Class Engine.PrimitiveComponent
// 0x0285 (0x0405 - 0x0180)
public class UPrimitiveComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offMinDrawDistance                                            = new ExternalOffset<float>(0x0220);                           // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLDMaxDrawDistance                                          = new ExternalOffset<float>(0x0224);                           // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCachedMaxDrawDistance                                      = new ExternalOffset<float>(0x0228);                           // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESceneDepthPriorityGroup>> _offDepthPriorityGroup                                         = new ExternalOffset<TEnumAsByte<ESceneDepthPriorityGroup>>(0x022C, false); // 0x022C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESceneDepthPriorityGroup>> _offViewOwnerDepthPriorityGroup                                = new ExternalOffset<TEnumAsByte<ESceneDepthPriorityGroup>>(0x022D, false); // 0x022D(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EIndirectLightingCacheQuality>> _offIndirectLightingCacheQuality                               = new ExternalOffset<TEnumAsByte<EIndirectLightingCacheQuality>>(0x022E, false); // 0x022E(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ELightmapType>                     _offLightmapType                                               = new ExternalOffset<ELightmapType>(0x022F, false);            // 0x022F(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseMaxLODAsImposter                                       = new ExternalOffset<char>(0x0230, false);                     // 0x0230(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNeverDistanceCull                                         = new ExternalOffset<char>(0x0230, false);                     // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAlwaysCreatePhysicsState                                  = new ExternalOffset<char>(0x0230, false);                     // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGenerateOverlapEvents                                     = new ExternalOffset<char>(0x0230, false);                     // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbGenerateLocalOverlapEvents                                = new ExternalOffset<char>(0x0231, false);                     // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbMultiBodyOverlap                                          = new ExternalOffset<char>(0x0231, false);                     // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTraceComplexOnMove                                        = new ExternalOffset<char>(0x0231, false);                     // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReturnMaterialOnMove                                      = new ExternalOffset<char>(0x0231, false);                     // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseViewOwnerDepthPriorityGroup                            = new ExternalOffset<char>(0x0231, false);                     // 0x0231(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowCullDistanceVolume                                   = new ExternalOffset<char>(0x0231, false);                     // 0x0231(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasMotionBlurVelocityMeshes                               = new ExternalOffset<char>(0x0231, false);                     // 0x0231(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVisibleInReflectionCaptures                               = new ExternalOffset<char>(0x0232, false);                     // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVisibleInRayTracing                                       = new ExternalOffset<char>(0x0232, false);                     // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenderInMainPass                                          = new ExternalOffset<char>(0x0232, false);                     // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReceivesDecals                                            = new ExternalOffset<char>(0x0232, false);                     // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOwnerNoSee                                                = new ExternalOffset<char>(0x0232, false);                     // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOnlyOwnerSee                                              = new ExternalOffset<char>(0x0232, false);                     // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTreatAsBackgroundForOcclusion                             = new ExternalOffset<char>(0x0232, false);                     // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseAsOccluder                                             = new ExternalOffset<char>(0x0232, false);                     // 0x0232(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSelectable                                                = new ExternalOffset<char>(0x0233, false);                     // 0x0233(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceMipStreaming                                         = new ExternalOffset<char>(0x0233, false);                     // 0x0233(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasPerInstanceHitProxies                                  = new ExternalOffset<char>(0x0233, false);                     // 0x0233(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offCastShadow                                                 = new ExternalOffset<char>(0x0233, false);                     // 0x0233(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAffectDynamicIndirectLighting                             = new ExternalOffset<char>(0x0233, false);                     // 0x0233(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAffectDistanceFieldLighting                               = new ExternalOffset<char>(0x0233, false);                     // 0x0233(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastDynamicShadow                                         = new ExternalOffset<char>(0x0233, false);                     // 0x0233(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastStaticShadow                                          = new ExternalOffset<char>(0x0233, false);                     // 0x0233(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastVolumetricTranslucentShadow                           = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSelfShadowOnly                                            = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastFarShadow                                             = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastInsetShadow                                           = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastCinematicShadow                                       = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastHiddenShadow                                          = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastShadowAsTwoSided                                      = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLightAsIfStatic                                           = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLightAttachmentsAsGroup                                   = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReceiveMobileCSMShadows                                   = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSingleSampleShadowFromStationaryLights                    = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreRadialImpulse                                       = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreRadialForce                                         = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbApplyImpulseOnDamage                                      = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReplicatePhysicsToAutonomousProxy                         = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offAlwaysLoadOnClient                                         = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offAlwaysLoadOnServer                                         = new ExternalOffset<char>(0x0236, false);                     // 0x0236(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseEditorCompositing                                      = new ExternalOffset<char>(0x0236, false);                     // 0x0236(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenderCustomDepth                                         = new ExternalOffset<char>(0x0236, false);                     // 0x0236(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EHasCustomNavigableGeometry>> _offbHasCustomNavigableGeometry                                = new ExternalOffset<TEnumAsByte<EHasCustomNavigableGeometry>>(0x0237, false); // 0x0237(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECanBeCharacterBase>>  _offCanCharacterStepUpOn                                       = new ExternalOffset<TEnumAsByte<ECanBeCharacterBase>>(0x0239, false); // 0x0239(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLightingChannels>                 _offLightingChannels                                           = new ExternalOffset<FLightingChannels>(0x023A, false);        // 0x023A(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<ERendererStencilMask>              _offCustomDepthStencilWriteMask                                = new ExternalOffset<ERendererStencilMask>(0x023B, false);     // 0x023B(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offCustomDepthStencilValue                                    = new ExternalOffset<int>(0x023C);                             // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FCustomPrimitiveData>              _offCustomPrimitiveData                                        = new ExternalOffset<FCustomPrimitiveData>(0x0240, false);     // 0x0240(0x0010) (NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                               _offTranslucencySortPriority                                   = new ExternalOffset<int>(0x0250);                             // 0x0250(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offVisibilityId                                               = new ExternalOffset<int>(0x0254);                             // 0x0254(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<URuntimeVirtualTexture>>    _offRuntimeVirtualTextures                                     = new ExternalOffset<TArray<URuntimeVirtualTexture>>(0x0258, false); // 0x0258(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offVirtualTextureLodBias                                      = new ExternalOffset<int>(0x0268);                             // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offVirtualTextureCullMips                                     = new ExternalOffset<int>(0x026C);                             // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offVirtualTextureMinCoverage                                  = new ExternalOffset<int>(0x0270);                             // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERuntimeVirtualTextureMainPassType> _offVirtualTextureRenderPassType                               = new ExternalOffset<ERuntimeVirtualTextureMainPassType>(0x0274, false); // 0x0274(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLpvBiasMultiplier                                          = new ExternalOffset<float>(0x027C);                           // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBoundsScale                                                = new ExternalOffset<float>(0x0288);                           // 0x0288(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offMoveIgnoreActors                                           = new ExternalOffset<TArray<AActor>>(0x0298, false);           // 0x0298(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPrimitiveComponent>>       _offMoveIgnoreComponents                                       = new ExternalOffset<TArray<UPrimitiveComponent>>(0x02A8, false); // 0x02A8(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FBodyInstance>                     _offBodyInstance                                               = new ExternalOffset<FBodyInstance>(0x02C8, false);            // 0x02C8(0x0110) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnComponentHit                                             = new ExternalOffset<FScriptMulticastDelegate>(0x03D8, false); // 0x03D8(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnComponentBeginOverlap                                    = new ExternalOffset<FScriptMulticastDelegate>(0x03D9, false); // 0x03D9(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnComponentEndOverlap                                      = new ExternalOffset<FScriptMulticastDelegate>(0x03DA, false); // 0x03DA(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnComponentWake                                            = new ExternalOffset<FScriptMulticastDelegate>(0x03DB, false); // 0x03DB(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnComponentSleep                                           = new ExternalOffset<FScriptMulticastDelegate>(0x03DC, false); // 0x03DC(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnBeginCursorOver                                          = new ExternalOffset<FScriptMulticastDelegate>(0x03DE, false); // 0x03DE(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnEndCursorOver                                            = new ExternalOffset<FScriptMulticastDelegate>(0x03DF, false); // 0x03DF(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnClicked                                                  = new ExternalOffset<FScriptMulticastDelegate>(0x03E0, false); // 0x03E0(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnReleased                                                 = new ExternalOffset<FScriptMulticastDelegate>(0x03E1, false); // 0x03E1(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInputTouchBegin                                          = new ExternalOffset<FScriptMulticastDelegate>(0x03E2, false); // 0x03E2(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInputTouchEnd                                            = new ExternalOffset<FScriptMulticastDelegate>(0x03E3, false); // 0x03E3(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInputTouchEnter                                          = new ExternalOffset<FScriptMulticastDelegate>(0x03E4, false); // 0x03E4(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInputTouchLeave                                          = new ExternalOffset<FScriptMulticastDelegate>(0x03E5, false); // 0x03E5(0x0010) (InstancedReference, BlueprintAssignable, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPrimitiveComponent>               _offLODParentPrimitive                                         = new ExternalOffset<UPrimitiveComponent>(0x0400, true);       // 0x0400(0x0008) (ExportObject, ZeroConstructor, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public float                                              MinDrawDistance                                                => _offMinDrawDistance.GetValue();
	public float                                              LDMaxDrawDistance                                              => _offLDMaxDrawDistance.GetValue();
	public float                                              CachedMaxDrawDistance                                          => _offCachedMaxDrawDistance.GetValue();
	public TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup                                             => _offDepthPriorityGroup.GetValue();
	public TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup                                    => _offViewOwnerDepthPriorityGroup.GetValue();
	public TEnumAsByte<EIndirectLightingCacheQuality>         IndirectLightingCacheQuality                                   => _offIndirectLightingCacheQuality.GetValue();
	public ELightmapType                                      LightmapType                                                   => _offLightmapType.GetValue();
	public TEnumAsByte<EHasCustomNavigableGeometry>           bHasCustomNavigableGeometry                                    => _offbHasCustomNavigableGeometry.GetValue();
	public TEnumAsByte<ECanBeCharacterBase>                   CanCharacterStepUpOn                                           => _offCanCharacterStepUpOn.GetValue();
	public FLightingChannels                                  LightingChannels                                               => _offLightingChannels.GetValue();
	public ERendererStencilMask                               CustomDepthStencilWriteMask                                    => _offCustomDepthStencilWriteMask.GetValue();
	public int                                                CustomDepthStencilValue                                        => _offCustomDepthStencilValue.GetValue();
	public FCustomPrimitiveData                               CustomPrimitiveData                                            => _offCustomPrimitiveData.GetValue();
	public int                                                TranslucencySortPriority                                       => _offTranslucencySortPriority.GetValue();
	public int                                                VisibilityId                                                   => _offVisibilityId.GetValue();
	public TArray<URuntimeVirtualTexture>                     RuntimeVirtualTextures                                         => _offRuntimeVirtualTextures.GetValue();
	public int                                                VirtualTextureLodBias                                          => _offVirtualTextureLodBias.GetValue();
	public int                                                VirtualTextureCullMips                                         => _offVirtualTextureCullMips.GetValue();
	public int                                                VirtualTextureMinCoverage                                      => _offVirtualTextureMinCoverage.GetValue();
	public ERuntimeVirtualTextureMainPassType                 VirtualTextureRenderPassType                                   => _offVirtualTextureRenderPassType.GetValue();
	public float                                              LpvBiasMultiplier                                              => _offLpvBiasMultiplier.GetValue();
	public float                                              BoundsScale                                                    => _offBoundsScale.GetValue();
	public TArray<AActor>                                     MoveIgnoreActors                                               => _offMoveIgnoreActors.GetValue();
	public TArray<UPrimitiveComponent>                        MoveIgnoreComponents                                           => _offMoveIgnoreComponents.GetValue();
	public FBodyInstance                                      BodyInstance                                                   => _offBodyInstance.GetValue();
	public FScriptMulticastDelegate                           OnComponentHit                                                 => _offOnComponentHit.GetValue();
	public FScriptMulticastDelegate                           OnComponentBeginOverlap                                        => _offOnComponentBeginOverlap.GetValue();
	public FScriptMulticastDelegate                           OnComponentEndOverlap                                          => _offOnComponentEndOverlap.GetValue();
	public FScriptMulticastDelegate                           OnComponentWake                                                => _offOnComponentWake.GetValue();
	public FScriptMulticastDelegate                           OnComponentSleep                                               => _offOnComponentSleep.GetValue();
	public FScriptMulticastDelegate                           OnBeginCursorOver                                              => _offOnBeginCursorOver.GetValue();
	public FScriptMulticastDelegate                           OnEndCursorOver                                                => _offOnEndCursorOver.GetValue();
	public FScriptMulticastDelegate                           OnClicked                                                      => _offOnClicked.GetValue();
	public FScriptMulticastDelegate                           OnReleased                                                     => _offOnReleased.GetValue();
	public FScriptMulticastDelegate                           OnInputTouchBegin                                              => _offOnInputTouchBegin.GetValue();
	public FScriptMulticastDelegate                           OnInputTouchEnd                                                => _offOnInputTouchEnd.GetValue();
	public FScriptMulticastDelegate                           OnInputTouchEnter                                              => _offOnInputTouchEnter.GetValue();
	public FScriptMulticastDelegate                           OnInputTouchLeave                                              => _offOnInputTouchLeave.GetValue();
	public UPrimitiveComponent                                LODParentPrimitive                                             => _offLODParentPrimitive.GetValue();
	#endregion


}

// Class Engine.MeshComponent
// 0x0024 (0x0429 - 0x0405)
public class UMeshComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<TArray<UMaterialInterface>>        _offOverrideMaterials                                          = new ExternalOffset<TArray<UMaterialInterface>>(0x0408, false); // 0x0408(0x0010) (Edit, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableMaterialParameterCaching                            = new ExternalOffset<byte/*(bool)*/>(0x0428);                  // 0x0428(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<UMaterialInterface>                         OverrideMaterials                                              => _offOverrideMaterials.GetValue();
	public byte/*(bool)*/                                     bEnableMaterialParameterCaching                                => _offbEnableMaterialParameterCaching.GetValue();
	#endregion


}

// Class Engine.SkinnedMeshComponent
// 0x01A3 (0x05CC - 0x0429)
public class USkinnedMeshComponent : UMeshComponent
{
	#region Offsets
	private ExternalOffset<USkeletalMesh>                     _offSkeletalMesh                                               = new ExternalOffset<USkeletalMesh>(0x0430, true);             // 0x0430(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<USkinnedMeshComponent>> _offMasterPoseComponent                                        = new ExternalOffset<TWeakObjectPtr<USkinnedMeshComponent>>(0x0438, false); // 0x0438(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPhysicsAsset>                     _offPhysicsAssetOverride                                       = new ExternalOffset<UPhysicsAsset>(0x0538, true);             // 0x0538(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offForcedLodModel                                             = new ExternalOffset<int>(0x0540);                             // 0x0540(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMinLodModel                                                = new ExternalOffset<int>(0x0544);                             // 0x0544(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStreamingDistanceMultiplier                                = new ExternalOffset<float>(0x0550);                           // 0x0550(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSkelMeshComponentLODInfo>> _offLODInfo                                                    = new ExternalOffset<TArray<FSkelMeshComponentLODInfo>>(0x0560, false); // 0x0560(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<EVisibilityBasedAnimTickOption>    _offVisibilityBasedAnimTickOption                              = new ExternalOffset<EVisibilityBasedAnimTickOption>(0x0594, false); // 0x0594(0x0001) (Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideMinLOD                                            = new ExternalOffset<char>(0x0596, false);                     // 0x0596(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseBoundsFromMasterPoseComponent                          = new ExternalOffset<char>(0x0596, false);                     // 0x0596(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceWireframe                                            = new ExternalOffset<char>(0x0596, false);                     // 0x0596(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisplayBones                                              = new ExternalOffset<char>(0x0596, false);                     // 0x0596(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableMorphTarget                                        = new ExternalOffset<char>(0x0596, false);                     // 0x0596(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHideSkin                                                  = new ExternalOffset<char>(0x0596, false);                     // 0x0596(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPerBoneMotionBlur                                         = new ExternalOffset<char>(0x0597, false);                     // 0x0597(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbComponentUseFixedSkelBounds                               = new ExternalOffset<char>(0x0597, false);                     // 0x0597(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbConsiderAllBodiesForBounds                                = new ExternalOffset<char>(0x0597, false);                     // 0x0597(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSyncAttachParentLOD                                       = new ExternalOffset<char>(0x0597, false);                     // 0x0597(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCanHighlightSelectedSections                              = new ExternalOffset<char>(0x0597, false);                     // 0x0597(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRecentlyRendered                                          = new ExternalOffset<char>(0x0597, false);                     // 0x0597(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastCapsuleDirectShadow                                   = new ExternalOffset<char>(0x0597, false);                     // 0x0597(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastCapsuleIndirectShadow                                 = new ExternalOffset<char>(0x0597, false);                     // 0x0597(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCPUSkinning                                               = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableUpdateRateOptimizations                             = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisplayDebugUpdateRateOptimizations                       = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenderStatic                                              = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreMasterPoseComponentLOD                              = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCachedLocalBoundsUpToDate                                 = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbForceMeshObjectUpdate                                     = new ExternalOffset<char>(0x0599, false);                     // 0x0599(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offCapsuleIndirectShadowMinVisibility                         = new ExternalOffset<float>(0x059C);                           // 0x059C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBoxSphereBounds>                  _offCachedLocalBounds                                          = new ExternalOffset<FBoxSphereBounds>(0x05B0, false);         // 0x05B0(0x001C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public USkeletalMesh                                      SkeletalMesh                                                   => _offSkeletalMesh.GetValue();
	public TWeakObjectPtr<USkinnedMeshComponent>              MasterPoseComponent                                            => _offMasterPoseComponent.GetValue();
	public UPhysicsAsset                                      PhysicsAssetOverride                                           => _offPhysicsAssetOverride.GetValue();
	public int                                                ForcedLodModel                                                 => _offForcedLodModel.GetValue();
	public int                                                MinLodModel                                                    => _offMinLodModel.GetValue();
	public float                                              StreamingDistanceMultiplier                                    => _offStreamingDistanceMultiplier.GetValue();
	public TArray<FSkelMeshComponentLODInfo>                  LODInfo                                                        => _offLODInfo.GetValue();
	public EVisibilityBasedAnimTickOption                     VisibilityBasedAnimTickOption                                  => _offVisibilityBasedAnimTickOption.GetValue();
	public float                                              CapsuleIndirectShadowMinVisibility                             => _offCapsuleIndirectShadowMinVisibility.GetValue();
	public FBoxSphereBounds                                   CachedLocalBounds                                              => _offCachedLocalBounds.GetValue();
	#endregion


}

// Class Engine.SkeletalMeshComponent
// 0x03A4 (0x0970 - 0x05CC)
public class USkeletalMeshComponent : USkinnedMeshComponent
{
	#region Offsets
	private ExternalOffset<UAnimBlueprintGeneratedClass>      _offAnimBlueprintGeneratedClass                                = new ExternalOffset<UAnimBlueprintGeneratedClass>(0x05F0, true); // 0x05F0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offAnimClass                                                  = new ExternalOffset<UClass>(0x05F8, true);                    // 0x05F8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimInstance>                     _offAnimScriptInstance                                         = new ExternalOffset<UAnimInstance>(0x0600, true);             // 0x0600(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UAnimInstance>>             _offSubInstances                                               = new ExternalOffset<TArray<UAnimInstance>>(0x0608, false);    // 0x0608(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimInstance>                     _offPostProcessAnimInstance                                    = new ExternalOffset<UAnimInstance>(0x0618, true);             // 0x0618(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSingleAnimationPlayData>          _offAnimationData                                              = new ExternalOffset<FSingleAnimationPlayData>(0x0620, false); // 0x0620(0x0018) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offRootBoneTranslation                                        = new ExternalOffset<FVector>(0x0648, false);                  // 0x0648(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offLineCheckBoundsScale                                       = new ExternalOffset<FVector>(0x0654, false);                  // 0x0654(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FTransform>>                _offCachedBoneSpaceTransforms                                  = new ExternalOffset<TArray<FTransform>>(0x0680, false);       // 0x0680(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FTransform>>                _offCachedComponentSpaceTransforms                             = new ExternalOffset<TArray<FTransform>>(0x0690, false);       // 0x0690(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offGlobalAnimRateScale                                        = new ExternalOffset<float>(0x06C0);                           // 0x06C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EKinematicBonesUpdateToPhysics>> _offKinematicBonesUpdateType                                   = new ExternalOffset<TEnumAsByte<EKinematicBonesUpdateToPhysics>>(0x06C4, false); // 0x06C4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EPhysicsTransformUpdateMode>> _offPhysicsTransformUpdateMode                                 = new ExternalOffset<TEnumAsByte<EPhysicsTransformUpdateMode>>(0x06C5, false); // 0x06C5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAnimationMode>>       _offAnimationMode                                              = new ExternalOffset<TEnumAsByte<EAnimationMode>>(0x06C7, false); // 0x06C7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbDisablePostProcessBlueprint                               = new ExternalOffset<char>(0x06C9, false);                     // 0x06C9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbUpdateOverlapsOnAnimationFinalize                         = new ExternalOffset<char>(0x06C9, false);                     // 0x06C9(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasValidBodies                                            = new ExternalOffset<char>(0x06C9, false);                     // 0x06C9(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbBlendPhysics                                              = new ExternalOffset<char>(0x06C9, false);                     // 0x06C9(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnablePhysicsOnDedicatedServer                            = new ExternalOffset<char>(0x06C9, false);                     // 0x06C9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUpdateJointsFromAnimation                                 = new ExternalOffset<char>(0x06CA, false);                     // 0x06CA(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableClothSimulation                                    = new ExternalOffset<char>(0x06CA, false);                     // 0x06CA(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowAnimCurveEvaluation                                  = new ExternalOffset<char>(0x06CA, false);                     // 0x06CA(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbDisableAnimCurves                                         = new ExternalOffset<char>(0x06CA, false);                     // 0x06CA(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbCollideWithEnvironment                                    = new ExternalOffset<char>(0x06CA, false);                     // 0x06CA(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCollideWithAttachedChildren                               = new ExternalOffset<char>(0x06CB, false);                     // 0x06CB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLocalSpaceSimulation                                      = new ExternalOffset<char>(0x06CB, false);                     // 0x06CB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbResetAfterTeleport                                        = new ExternalOffset<char>(0x06CB, false);                     // 0x06CB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDeferKinematicBoneUpdate                                  = new ExternalOffset<char>(0x06CB, false);                     // 0x06CB(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNoSkeletonUpdate                                          = new ExternalOffset<char>(0x06CB, false);                     // 0x06CB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPauseAnims                                                = new ExternalOffset<char>(0x06CB, false);                     // 0x06CB(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseRefPoseOnInitAnim                                      = new ExternalOffset<char>(0x06CB, false);                     // 0x06CB(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnablePerPolyCollision                                    = new ExternalOffset<char>(0x06CC, false);                     // 0x06CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceRefpose                                              = new ExternalOffset<char>(0x06CC, false);                     // 0x06CC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOnlyAllowAutonomousTickPose                               = new ExternalOffset<char>(0x06CC, false);                     // 0x06CC(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsAutonomousTickPose                                      = new ExternalOffset<char>(0x06CC, false);                     // 0x06CC(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOldForceRefPose                                           = new ExternalOffset<char>(0x06CC, false);                     // 0x06CC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowPrePhysBones                                          = new ExternalOffset<char>(0x06CC, false);                     // 0x06CC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRequiredBonesUpToDate                                     = new ExternalOffset<char>(0x06CC, false);                     // 0x06CC(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAnimTreeInitialised                                       = new ExternalOffset<char>(0x06CC, false);                     // 0x06CC(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIncludeComponentLocationIntoBounds                        = new ExternalOffset<char>(0x06CD, false);                     // 0x06CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableLineCheckWithBounds                                 = new ExternalOffset<char>(0x06CD, false);                     // 0x06CD(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseBendingElements                                        = new ExternalOffset<char>(0x06CD, false);                     // 0x06CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseTetrahedralConstraints                                 = new ExternalOffset<char>(0x06CD, false);                     // 0x06CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseThinShellVolumeConstraints                             = new ExternalOffset<char>(0x06CD, false);                     // 0x06CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseSelfCollisions                                         = new ExternalOffset<char>(0x06CD, false);                     // 0x06CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseContinuousCollisionDetection                           = new ExternalOffset<char>(0x06CD, false);                     // 0x06CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPropagateCurvesToSlaves                                   = new ExternalOffset<char>(0x06CD, false);                     // 0x06CD(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSkipKinematicUpdateWhenInterpolating                      = new ExternalOffset<char>(0x06CE, false);                     // 0x06CE(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSkipBoundsUpdateWhenInterpolating                         = new ExternalOffset<char>(0x06CE, false);                     // 0x06CE(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNeedsQueuedAnimEventsDispatched                           = new ExternalOffset<char>(0x06CE, false);                     // 0x06CE(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<ushort>                            _offCachedAnimCurveUidVersion                                  = new ExternalOffset<ushort>(0x06D0);                          // 0x06D0(0x0002) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offClothBlendWeight                                           = new ExternalOffset<float>(0x06D4);                           // 0x06D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEdgeStiffness                                              = new ExternalOffset<float>(0x06D8);                           // 0x06D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBendingStiffness                                           = new ExternalOffset<float>(0x06DC);                           // 0x06DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAreaStiffness                                              = new ExternalOffset<float>(0x06E0);                           // 0x06E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeStiffness                                            = new ExternalOffset<float>(0x06E4);                           // 0x06E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStrainLimitingStiffness                                    = new ExternalOffset<float>(0x06E8);                           // 0x06E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offShapeTargetStiffness                                       = new ExternalOffset<float>(0x06EC);                           // 0x06EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offDisallowedAnimCurves                                       = new ExternalOffset<TArray<FName>>(0x06F0, false);            // 0x06F0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<UBodySetup>                        _offBodySetup                                                  = new ExternalOffset<UBodySetup>(0x0700, true);                // 0x0700(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnConstraintBroken                                         = new ExternalOffset<FScriptMulticastDelegate>(0x0710, false); // 0x0710(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offClothingSimulationFactory                                  = new ExternalOffset<UClass>(0x0720, true);                    // 0x0720(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTeleportDistanceThreshold                                  = new ExternalOffset<float>(0x0820);                           // 0x0820(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offTeleportRotationThreshold                                  = new ExternalOffset<float>(0x0824);                           // 0x0824(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<uint>                              _offLastPoseTickFrame                                          = new ExternalOffset<uint>(0x0830);                            // 0x0830(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UClothingSimulationInteractor>     _offClothingInteractor                                         = new ExternalOffset<UClothingSimulationInteractor>(0x0890, true); // 0x0890(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnAnimInitialized                                          = new ExternalOffset<FScriptMulticastDelegate>(0x0960, false); // 0x0960(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimBlueprintGeneratedClass                       AnimBlueprintGeneratedClass                                    => _offAnimBlueprintGeneratedClass.GetValue();
	public UClass                                             AnimClass                                                      => _offAnimClass.GetValue();
	public UAnimInstance                                      AnimScriptInstance                                             => _offAnimScriptInstance.GetValue();
	public TArray<UAnimInstance>                              SubInstances                                                   => _offSubInstances.GetValue();
	public UAnimInstance                                      PostProcessAnimInstance                                        => _offPostProcessAnimInstance.GetValue();
	public FSingleAnimationPlayData                           AnimationData                                                  => _offAnimationData.GetValue();
	public FVector                                            RootBoneTranslation                                            => _offRootBoneTranslation.GetValue();
	public FVector                                            LineCheckBoundsScale                                           => _offLineCheckBoundsScale.GetValue();
	public TArray<FTransform>                                 CachedBoneSpaceTransforms                                      => _offCachedBoneSpaceTransforms.GetValue();
	public TArray<FTransform>                                 CachedComponentSpaceTransforms                                 => _offCachedComponentSpaceTransforms.GetValue();
	public float                                              GlobalAnimRateScale                                            => _offGlobalAnimRateScale.GetValue();
	public TEnumAsByte<EKinematicBonesUpdateToPhysics>        KinematicBonesUpdateType                                       => _offKinematicBonesUpdateType.GetValue();
	public TEnumAsByte<EPhysicsTransformUpdateMode>           PhysicsTransformUpdateMode                                     => _offPhysicsTransformUpdateMode.GetValue();
	public TEnumAsByte<EAnimationMode>                        AnimationMode                                                  => _offAnimationMode.GetValue();
	public ushort                                             CachedAnimCurveUidVersion                                      => _offCachedAnimCurveUidVersion.GetValue();
	public float                                              ClothBlendWeight                                               => _offClothBlendWeight.GetValue();
	public float                                              EdgeStiffness                                                  => _offEdgeStiffness.GetValue();
	public float                                              BendingStiffness                                               => _offBendingStiffness.GetValue();
	public float                                              AreaStiffness                                                  => _offAreaStiffness.GetValue();
	public float                                              VolumeStiffness                                                => _offVolumeStiffness.GetValue();
	public float                                              StrainLimitingStiffness                                        => _offStrainLimitingStiffness.GetValue();
	public float                                              ShapeTargetStiffness                                           => _offShapeTargetStiffness.GetValue();
	public TArray<FName>                                      DisallowedAnimCurves                                           => _offDisallowedAnimCurves.GetValue();
	public UBodySetup                                         BodySetup                                                      => _offBodySetup.GetValue();
	public FScriptMulticastDelegate                           OnConstraintBroken                                             => _offOnConstraintBroken.GetValue();
	public UClass                                             ClothingSimulationFactory                                      => _offClothingSimulationFactory.GetValue();
	public float                                              TeleportDistanceThreshold                                      => _offTeleportDistanceThreshold.GetValue();
	public float                                              TeleportRotationThreshold                                      => _offTeleportRotationThreshold.GetValue();
	public uint                                               LastPoseTickFrame                                              => _offLastPoseTickFrame.GetValue();
	public UClothingSimulationInteractor                      ClothingInteractor                                             => _offClothingInteractor.GetValue();
	public FScriptMulticastDelegate                           OnAnimInitialized                                              => _offOnAnimInitialized.GetValue();
	#endregion


}

// Class Engine.AnimInstance
// 0x0158 (0x0180 - 0x0028)
public class UAnimInstance : UObject
{
	#region Offsets
	private ExternalOffset<USkeleton>                         _offCurrentSkeleton                                            = new ExternalOffset<USkeleton>(0x0028, true);                 // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERootMotionMode>>      _offRootMotionMode                                             = new ExternalOffset<TEnumAsByte<ERootMotionMode>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseMultiThreadedAnimationUpdate                           = new ExternalOffset<char>(0x0031, false);                     // 0x0031(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsingCopyPoseFromMesh                                     = new ExternalOffset<char>(0x0031, false);                     // 0x0031(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbQueueMontageEvents                                        = new ExternalOffset<char>(0x0031, false);                     // 0x0031(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnMontageBlendingOut                                       = new ExternalOffset<FScriptMulticastDelegate>(0x0038, false); // 0x0038(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnMontageStarted                                           = new ExternalOffset<FScriptMulticastDelegate>(0x0048, false); // 0x0048(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnMontageEnded                                             = new ExternalOffset<FScriptMulticastDelegate>(0x0058, false); // 0x0058(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnAllMontageInstancesEnded                                 = new ExternalOffset<FScriptMulticastDelegate>(0x0068, false); // 0x0068(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FAnimNotifyQueue>                  _offNotifyQueue                                                = new ExternalOffset<FAnimNotifyQueue>(0x0100, false);         // 0x0100(0x0070) (Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimNotifyEvent>>          _offActiveAnimNotifyState                                      = new ExternalOffset<TArray<FAnimNotifyEvent>>(0x0170, false); // 0x0170(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USkeleton                                          CurrentSkeleton                                                => _offCurrentSkeleton.GetValue();
	public TEnumAsByte<ERootMotionMode>                       RootMotionMode                                                 => _offRootMotionMode.GetValue();
	public FScriptMulticastDelegate                           OnMontageBlendingOut                                           => _offOnMontageBlendingOut.GetValue();
	public FScriptMulticastDelegate                           OnMontageStarted                                               => _offOnMontageStarted.GetValue();
	public FScriptMulticastDelegate                           OnMontageEnded                                                 => _offOnMontageEnded.GetValue();
	public FScriptMulticastDelegate                           OnAllMontageInstancesEnded                                     => _offOnAllMontageInstancesEnded.GetValue();
	public FAnimNotifyQueue                                   NotifyQueue                                                    => _offNotifyQueue.GetValue();
	public TArray<FAnimNotifyEvent>                           ActiveAnimNotifyState                                          => _offActiveAnimNotifyState.GetValue();
	#endregion


}

// Class Engine.AnimNotify
// 0x0000 (0x0028 - 0x0028)
public class UAnimNotify : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AssetManager
// 0x02B8 (0x02E0 - 0x0028)
public class UAssetManager : UObject
{
	#region Offsets
	private ExternalOffset<TArray<UObject>>                   _offObjectReferenceList                                        = new ExternalOffset<TArray<UObject>>(0x02C0, false);          // 0x02C0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsGlobalAsyncScanEnvironment                              = new ExternalOffset<byte/*(bool)*/>(0x02D0);                  // 0x02D0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbShouldGuessTypeAndName                                    = new ExternalOffset<byte/*(bool)*/>(0x02D1);                  // 0x02D1(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbShouldUseSynchronousLoad                                  = new ExternalOffset<byte/*(bool)*/>(0x02D2);                  // 0x02D2(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsLoadingFromPakFiles                                     = new ExternalOffset<byte/*(bool)*/>(0x02D3);                  // 0x02D3(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbShouldAcquireMissingChunksOnLoad                          = new ExternalOffset<byte/*(bool)*/>(0x02D4);                  // 0x02D4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbOnlyCookProductionAssets                                  = new ExternalOffset<byte/*(bool)*/>(0x02D5);                  // 0x02D5(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsBulkScanning                                            = new ExternalOffset<byte/*(bool)*/>(0x02D6);                  // 0x02D6(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsPrimaryAssetDirectoryCurrent                            = new ExternalOffset<byte/*(bool)*/>(0x02D7);                  // 0x02D7(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsManagementDatabaseCurrent                               = new ExternalOffset<byte/*(bool)*/>(0x02D8);                  // 0x02D8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbUpdateManagementDatabaseAfterScan                         = new ExternalOffset<byte/*(bool)*/>(0x02D9);                  // 0x02D9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbIncludeOnlyOnDiskAssets                                   = new ExternalOffset<byte/*(bool)*/>(0x02DA);                  // 0x02DA(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offNumberOfSpawnedNotifications                               = new ExternalOffset<int>(0x02DC);                             // 0x02DC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<UObject>                                    ObjectReferenceList                                            => _offObjectReferenceList.GetValue();
	public byte/*(bool)*/                                     bIsGlobalAsyncScanEnvironment                                  => _offbIsGlobalAsyncScanEnvironment.GetValue();
	public byte/*(bool)*/                                     bShouldGuessTypeAndName                                        => _offbShouldGuessTypeAndName.GetValue();
	public byte/*(bool)*/                                     bShouldUseSynchronousLoad                                      => _offbShouldUseSynchronousLoad.GetValue();
	public byte/*(bool)*/                                     bIsLoadingFromPakFiles                                         => _offbIsLoadingFromPakFiles.GetValue();
	public byte/*(bool)*/                                     bShouldAcquireMissingChunksOnLoad                              => _offbShouldAcquireMissingChunksOnLoad.GetValue();
	public byte/*(bool)*/                                     bOnlyCookProductionAssets                                      => _offbOnlyCookProductionAssets.GetValue();
	public byte/*(bool)*/                                     bIsBulkScanning                                                => _offbIsBulkScanning.GetValue();
	public byte/*(bool)*/                                     bIsPrimaryAssetDirectoryCurrent                                => _offbIsPrimaryAssetDirectoryCurrent.GetValue();
	public byte/*(bool)*/                                     bIsManagementDatabaseCurrent                                   => _offbIsManagementDatabaseCurrent.GetValue();
	public byte/*(bool)*/                                     bUpdateManagementDatabaseAfterScan                             => _offbUpdateManagementDatabaseAfterScan.GetValue();
	public byte/*(bool)*/                                     bIncludeOnlyOnDiskAssets                                       => _offbIncludeOnlyOnDiskAssets.GetValue();
	public int                                                NumberOfSpawnedNotifications                                   => _offNumberOfSpawnedNotifications.GetValue();
	#endregion


}

// Class Engine.Brush
// 0x0048 (0x0280 - 0x0238)
public class ABrush : AActor
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EBrushType>>           _offBrushType                                                  = new ExternalOffset<TEnumAsByte<EBrushType>>(0x0248, false);  // 0x0248(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offBrushColor                                                 = new ExternalOffset<FColor>(0x024C, false);                   // 0x024C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPolyFlags                                                  = new ExternalOffset<int>(0x0250);                             // 0x0250(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbColored                                                   = new ExternalOffset<char>(0x0254, false);                     // 0x0254(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSolidWhenSelected                                         = new ExternalOffset<char>(0x0254, false);                     // 0x0254(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPlaceableFromClassBrowser                                 = new ExternalOffset<char>(0x0254, false);                     // 0x0254(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNotForClientOrServer                                      = new ExternalOffset<char>(0x0254, false);                     // 0x0254(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UModel>                            _offBrush                                                      = new ExternalOffset<UModel>(0x0258, true);                    // 0x0258(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UBrushComponent>                   _offBrushComponent                                             = new ExternalOffset<UBrushComponent>(0x0260, true);           // 0x0260(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbInManipulation                                            = new ExternalOffset<char>(0x0268, false);                     // 0x0268(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FGeomSelection>>            _offSavedSelections                                            = new ExternalOffset<TArray<FGeomSelection>>(0x0270, false);   // 0x0270(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EBrushType>                            BrushType                                                      => _offBrushType.GetValue();
	public FColor                                             BrushColor                                                     => _offBrushColor.GetValue();
	public int                                                PolyFlags                                                      => _offPolyFlags.GetValue();
	public UModel                                             Brush                                                          => _offBrush.GetValue();
	public UBrushComponent                                    BrushComponent                                                 => _offBrushComponent.GetValue();
	public TArray<FGeomSelection>                             SavedSelections                                                => _offSavedSelections.GetValue();
	#endregion


}

// Class Engine.Volume
// 0x0000 (0x0280 - 0x0280)
public class AVolume : ABrush
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AudioVolume
// 0x0054 (0x02D4 - 0x0280)
public class AAudioVolume : AVolume
{
	#region Offsets
	private ExternalOffset<float>                             _offPriority                                                   = new ExternalOffset<float>(0x0280);                           // 0x0280(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                               _offAudioVolumeType                                            = new ExternalOffset<int>(0x0284);                             // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x0288, false);                     // 0x0288(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FReverbSettings>                   _offSettings                                                   = new ExternalOffset<FReverbSettings>(0x0290, false);          // 0x0290(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<FInteriorSettings>                 _offAmbientZoneSettings                                        = new ExternalOffset<FInteriorSettings>(0x02B0, false);        // 0x02B0(0x0024) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public float                                              Priority                                                       => _offPriority.GetValue();
	public int                                                AudioVolumeType                                                => _offAudioVolumeType.GetValue();
	public FReverbSettings                                    Settings                                                       => _offSettings.GetValue();
	public FInteriorSettings                                  AmbientZoneSettings                                            => _offAmbientZoneSettings.GetValue();
	#endregion


}

// Class Engine.MovementComponent
// 0x004C (0x0114 - 0x00C8)
public class UMovementComponent : UActorComponent
{
	#region Offsets
	private ExternalOffset<USceneComponent>                   _offUpdatedComponent                                           = new ExternalOffset<USceneComponent>(0x00D8, true);           // 0x00D8(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPrimitiveComponent>               _offUpdatedPrimitive                                           = new ExternalOffset<UPrimitiveComponent>(0x00E0, true);       // 0x00E0(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offVelocity                                                   = new ExternalOffset<FVector>(0x00EC, false);                  // 0x00EC(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offPlaneConstraintNormal                                      = new ExternalOffset<FVector>(0x00F8, false);                  // 0x00F8(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FVector>                           _offPlaneConstraintOrigin                                      = new ExternalOffset<FVector>(0x0104, false);                  // 0x0104(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbUpdateOnlyIfRendered                                      = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoUpdateTickRegistration                                = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTickBeforeOwner                                           = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoRegisterUpdatedComponent                              = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbConstrainToPlane                                          = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSnapToPlaneAtStart                                        = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoRegisterPhysicsVolumeUpdates                          = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbComponentShouldUpdatePhysicsVolume                        = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EPlaneConstraintAxisSetting>       _offPlaneConstraintAxisSetting                                 = new ExternalOffset<EPlaneConstraintAxisSetting>(0x0113, false); // 0x0113(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public USceneComponent                                    UpdatedComponent                                               => _offUpdatedComponent.GetValue();
	public UPrimitiveComponent                                UpdatedPrimitive                                               => _offUpdatedPrimitive.GetValue();
	public FVector                                            Velocity                                                       => _offVelocity.GetValue();
	public FVector                                            PlaneConstraintNormal                                          => _offPlaneConstraintNormal.GetValue();
	public FVector                                            PlaneConstraintOrigin                                          => _offPlaneConstraintOrigin.GetValue();
	public EPlaneConstraintAxisSetting                        PlaneConstraintAxisSetting                                     => _offPlaneConstraintAxisSetting.GetValue();
	#endregion


}

// Class Engine.NavMovementComponent
// 0x0044 (0x0158 - 0x0114)
public class UNavMovementComponent : UMovementComponent
{
	#region Offsets
	private ExternalOffset<FNavAgentProperties>               _offNavAgentProps                                              = new ExternalOffset<FNavAgentProperties>(0x0118, false);      // 0x0118(0x0030) (Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFixedPathBrakingDistance                                   = new ExternalOffset<float>(0x0148);                           // 0x0148(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbUpdateNavAgentWithOwnersCollision                         = new ExternalOffset<char>(0x014C, false);                     // 0x014C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbUseAccelerationForPaths                                   = new ExternalOffset<char>(0x014C, false);                     // 0x014C(0x0001) BIT_FIELD (Edit, Config, GlobalConfig, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbUseFixedBrakingDistanceForPaths                           = new ExternalOffset<char>(0x014C, false);                     // 0x014C(0x0001) BIT_FIELD (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FMovementProperties>               _offMovementState                                              = new ExternalOffset<FMovementProperties>(0x014D, false);      // 0x014D(0x0001) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                           _offPathFollowingComp                                          = new ExternalOffset<UObject>(0x0150, true);                   // 0x0150(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FNavAgentProperties                                NavAgentProps                                                  => _offNavAgentProps.GetValue();
	public float                                              FixedPathBrakingDistance                                       => _offFixedPathBrakingDistance.GetValue();
	public FMovementProperties                                MovementState                                                  => _offMovementState.GetValue();
	public UObject                                            PathFollowingComp                                              => _offPathFollowingComp.GetValue();
	#endregion


}

// Class Engine.PawnMovementComponent
// 0x0008 (0x0160 - 0x0158)
public class UPawnMovementComponent : UNavMovementComponent
{
	#region Offsets
	private ExternalOffset<APawn>                             _offPawnOwner                                                  = new ExternalOffset<APawn>(0x0158, true);                     // 0x0158(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public APawn                                              PawnOwner                                                      => _offPawnOwner.GetValue();
	#endregion


}

// Class Engine.Pawn
// 0x006C (0x02A4 - 0x0238)
public class APawn : AActor
{
	#region Offsets
//	private ExternalOffset<char>                              _offbUseControllerRotationPitch                                = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseControllerRotationYaw                                  = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseControllerRotationRoll                                 = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCanAffectNavigationGeneration                             = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBaseEyeHeight                                              = new ExternalOffset<float>(0x0254);                           // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAutoReceiveInput>>    _offAutoPossessPlayer                                          = new ExternalOffset<TEnumAsByte<EAutoReceiveInput>>(0x0258, false); // 0x0258(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAutoPossessAI>                    _offAutoPossessAI                                              = new ExternalOffset<EAutoPossessAI>(0x0259, false);           // 0x0259(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offRemoteViewPitch                                            = new ExternalOffset<char>(0x025A, false);                     // 0x025A(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offAIControllerClass                                          = new ExternalOffset<UClass>(0x0260, true);                    // 0x0260(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APlayerState>                      _offPlayerState                                                = new ExternalOffset<APlayerState>(0x0268, true);              // 0x0268(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<AController>                       _offLastHitBy                                                  = new ExternalOffset<AController>(0x0278, true);               // 0x0278(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AController>                       _offController                                                 = new ExternalOffset<AController>(0x0280, true);               // 0x0280(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offControlInputVector                                         = new ExternalOffset<FVector>(0x028C, false);                  // 0x028C(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FVector>                           _offLastControlInputVector                                     = new ExternalOffset<FVector>(0x0298, false);                  // 0x0298(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public float                                              BaseEyeHeight                                                  => _offBaseEyeHeight.GetValue();
	public TEnumAsByte<EAutoReceiveInput>                     AutoPossessPlayer                                              => _offAutoPossessPlayer.GetValue();
	public EAutoPossessAI                                     AutoPossessAI                                                  => _offAutoPossessAI.GetValue();
	public UClass                                             AIControllerClass                                              => _offAIControllerClass.GetValue();
	public APlayerState                                       PlayerState                                                    => _offPlayerState.GetValue();
	public AController                                        LastHitBy                                                      => _offLastHitBy.GetValue();
	public AController                                        Controller                                                     => _offController.GetValue();
	public FVector                                            ControlInputVector                                             => _offControlInputVector.GetValue();
	public FVector                                            LastControlInputVector                                         => _offLastControlInputVector.GetValue();
	#endregion


}

// Class Engine.Character
// 0x03B4 (0x0658 - 0x02A4)
public class ACharacter : APawn
{
	#region Offsets
	private ExternalOffset<USkeletalMeshComponent>            _offMesh                                                       = new ExternalOffset<USkeletalMeshComponent>(0x02A8, true);    // 0x02A8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UCharacterMovementComponent>       _offCharacterMovement                                          = new ExternalOffset<UCharacterMovementComponent>(0x02B0, true); // 0x02B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UCapsuleComponent>                 _offCapsuleComponent                                           = new ExternalOffset<UCapsuleComponent>(0x02B8, true);         // 0x02B8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FBasedMovementInfo>                _offBasedMovement                                              = new ExternalOffset<FBasedMovementInfo>(0x02C0, false);       // 0x02C0(0x0030) (NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<FBasedMovementInfo>                _offReplicatedBasedMovement                                    = new ExternalOffset<FBasedMovementInfo>(0x02F0, false);       // 0x02F0(0x0030) (Net, RepNotify, NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offAnimRootMotionTranslationScale                             = new ExternalOffset<float>(0x0320);                           // 0x0320(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FVector>                           _offBaseTranslationOffset                                      = new ExternalOffset<FVector>(0x0324, false);                  // 0x0324(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FQuat>                             _offBaseRotationOffset                                         = new ExternalOffset<FQuat>(0x0330, false);                    // 0x0330(0x0010) (IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offReplicatedServerLastTransformUpdateTimeStamp               = new ExternalOffset<float>(0x0340);                           // 0x0340(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offReplayLastTransformUpdateTimeStamp                         = new ExternalOffset<float>(0x0344);                           // 0x0344(0x0004) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offReplicatedMovementMode                                     = new ExternalOffset<char>(0x0348, false);                     // 0x0348(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbInBaseReplication                                         = new ExternalOffset<byte/*(bool)*/>(0x0349);                  // 0x0349(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offCrouchedEyeHeight                                          = new ExternalOffset<float>(0x034C);                           // 0x034C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsCrouched                                                = new ExternalOffset<char>(0x0350, false);                     // 0x0350(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbProxyIsJumpForceApplied                                   = new ExternalOffset<char>(0x0350, false);                     // 0x0350(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPressedJump                                               = new ExternalOffset<char>(0x0350, false);                     // 0x0350(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClientUpdating                                            = new ExternalOffset<char>(0x0350, false);                     // 0x0350(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClientWasFalling                                          = new ExternalOffset<char>(0x0350, false);                     // 0x0350(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClientResimulateRootMotion                                = new ExternalOffset<char>(0x0350, false);                     // 0x0350(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClientResimulateRootMotionSources                         = new ExternalOffset<char>(0x0350, false);                     // 0x0350(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSimGravityDisabled                                        = new ExternalOffset<char>(0x0350, false);                     // 0x0350(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClientCheckEncroachmentOnNetUpdate                        = new ExternalOffset<char>(0x0351, false);                     // 0x0351(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbServerMoveIgnoreRootMotion                                = new ExternalOffset<char>(0x0351, false);                     // 0x0351(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbWasJumping                                                = new ExternalOffset<char>(0x0351, false);                     // 0x0351(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offJumpKeyHoldTime                                            = new ExternalOffset<float>(0x0354);                           // 0x0354(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offJumpForceTimeRemaining                                     = new ExternalOffset<float>(0x0358);                           // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offProxyJumpForceStartedTime                                  = new ExternalOffset<float>(0x035C);                           // 0x035C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offJumpMaxHoldTime                                            = new ExternalOffset<float>(0x0360);                           // 0x0360(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offJumpMaxCount                                               = new ExternalOffset<int>(0x0364);                             // 0x0364(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offJumpCurrentCount                                           = new ExternalOffset<int>(0x0368);                             // 0x0368(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnReachedJumpApex                                          = new ExternalOffset<FScriptMulticastDelegate>(0x0370, false); // 0x0370(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offMovementModeChangedDelegate                                = new ExternalOffset<FScriptMulticastDelegate>(0x0390, false); // 0x0390(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnCharacterMovementUpdated                                 = new ExternalOffset<FScriptMulticastDelegate>(0x03A0, false); // 0x03A0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionSourceGroup>            _offSavedRootMotion                                            = new ExternalOffset<FRootMotionSourceGroup>(0x03B0, false);   // 0x03B0(0x00F8) (Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionMovementParams>         _offClientRootMotionParams                                     = new ExternalOffset<FRootMotionMovementParams>(0x04B0, false); // 0x04B0(0x0040) (Transient, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSimulatedRootMotionReplicatedMove>> _offRootMotionRepMoves                                         = new ExternalOffset<TArray<FSimulatedRootMotionReplicatedMove>>(0x04F0, false); // 0x04F0(0x0010) (ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRepRootMotionMontage>             _offRepRootMotion                                              = new ExternalOffset<FRepRootMotionMontage>(0x0500, false);    // 0x0500(0x0158) (Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USkeletalMeshComponent                             Mesh                                                           => _offMesh.GetValue();
	public UCharacterMovementComponent                        CharacterMovement                                              => _offCharacterMovement.GetValue();
	public UCapsuleComponent                                  CapsuleComponent                                               => _offCapsuleComponent.GetValue();
	public FBasedMovementInfo                                 BasedMovement                                                  => _offBasedMovement.GetValue();
	public FBasedMovementInfo                                 ReplicatedBasedMovement                                        => _offReplicatedBasedMovement.GetValue();
	public float                                              AnimRootMotionTranslationScale                                 => _offAnimRootMotionTranslationScale.GetValue();
	public FVector                                            BaseTranslationOffset                                          => _offBaseTranslationOffset.GetValue();
	public FQuat                                              BaseRotationOffset                                             => _offBaseRotationOffset.GetValue();
	public float                                              ReplicatedServerLastTransformUpdateTimeStamp                   => _offReplicatedServerLastTransformUpdateTimeStamp.GetValue();
	public float                                              ReplayLastTransformUpdateTimeStamp                             => _offReplayLastTransformUpdateTimeStamp.GetValue();
	public byte/*(bool)*/                                     bInBaseReplication                                             => _offbInBaseReplication.GetValue();
	public float                                              CrouchedEyeHeight                                              => _offCrouchedEyeHeight.GetValue();
	public float                                              JumpKeyHoldTime                                                => _offJumpKeyHoldTime.GetValue();
	public float                                              JumpForceTimeRemaining                                         => _offJumpForceTimeRemaining.GetValue();
	public float                                              ProxyJumpForceStartedTime                                      => _offProxyJumpForceStartedTime.GetValue();
	public float                                              JumpMaxHoldTime                                                => _offJumpMaxHoldTime.GetValue();
	public int                                                JumpMaxCount                                                   => _offJumpMaxCount.GetValue();
	public int                                                JumpCurrentCount                                               => _offJumpCurrentCount.GetValue();
	public FScriptMulticastDelegate                           OnReachedJumpApex                                              => _offOnReachedJumpApex.GetValue();
	public FScriptMulticastDelegate                           MovementModeChangedDelegate                                    => _offMovementModeChangedDelegate.GetValue();
	public FScriptMulticastDelegate                           OnCharacterMovementUpdated                                     => _offOnCharacterMovementUpdated.GetValue();
	public FRootMotionSourceGroup                             SavedRootMotion                                                => _offSavedRootMotion.GetValue();
	public FRootMotionMovementParams                          ClientRootMotionParams                                         => _offClientRootMotionParams.GetValue();
	public TArray<FSimulatedRootMotionReplicatedMove>         RootMotionRepMoves                                             => _offRootMotionRepMoves.GetValue();
	public FRepRootMotionMontage                              RepRootMotion                                                  => _offRepRootMotion.GetValue();
	#endregion


}

// Class Engine.DamageType
// 0x0014 (0x003C - 0x0028)
public class UDamageType : UObject
{
	#region Offsets
//	private ExternalOffset<char>                              _offbCausedByWorld                                             = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbScaleMomentumByMass                                       = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRadialDamageVelChange                                     = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDamageImpulse                                              = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDestructibleImpulse                                        = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDestructibleDamageSpreadScale                              = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDamageFalloff                                              = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              DamageImpulse                                                  => _offDamageImpulse.GetValue();
	public float                                              DestructibleImpulse                                            => _offDestructibleImpulse.GetValue();
	public float                                              DestructibleDamageSpreadScale                                  => _offDestructibleDamageSpreadScale.GetValue();
	public float                                              DamageFalloff                                                  => _offDamageFalloff.GetValue();
	#endregion


}

// Class Engine.CheatManager
// 0x0010 (0x0038 - 0x0028)
public class UCheatManager : UObject
{
	#region Offsets
	private ExternalOffset<ADebugCameraController>            _offDebugCameraControllerRef                                   = new ExternalOffset<ADebugCameraController>(0x0028, true);    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offDebugCameraControllerClass                                 = new ExternalOffset<UClass>(0x0030, true);                    // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ADebugCameraController                             DebugCameraControllerRef                                       => _offDebugCameraControllerRef.GetValue();
	public UClass                                             DebugCameraControllerClass                                     => _offDebugCameraControllerClass.GetValue();
	#endregion


}

// Class Engine.DeveloperSettings
// 0x0000 (0x0028 - 0x0028)
public class UDeveloperSettings : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.GameInstance
// 0x0038 (0x0060 - 0x0028)
public class UGameInstance : UObject
{
	#region Offsets
	private ExternalOffset<TArray<ULocalPlayer>>              _offLocalPlayers                                               = new ExternalOffset<TArray<ULocalPlayer>>(0x0038, false);     // 0x0038(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<UOnlineSession>                    _offOnlineSession                                              = new ExternalOffset<UOnlineSession>(0x0048, true);            // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UObject>>                   _offReferencedObjects                                          = new ExternalOffset<TArray<UObject>>(0x0050, false);          // 0x0050(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<ULocalPlayer>                               LocalPlayers                                                   => _offLocalPlayers.GetValue();
	public UOnlineSession                                     OnlineSession                                                  => _offOnlineSession.GetValue();
	public TArray<UObject>                                    ReferencedObjects                                              => _offReferencedObjects.GetValue();
	#endregion


}

// Class Engine.Subsystem
// 0x0000 (0x0028 - 0x0028)
public class USubsystem : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.GameInstanceSubsystem
// 0x0008 (0x0030 - 0x0028)
public class UGameInstanceSubsystem : USubsystem
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Info
// 0x0010 (0x0248 - 0x0238)
public class AInfo : AActor
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Engine
// 0x0BFC (0x0C24 - 0x0028)
public class UEngine : UObject
{
	#region Offsets
	private ExternalOffset<UFont>                             _offTinyFont                                                   = new ExternalOffset<UFont>(0x0030, true);                     // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FSoftObjectPath>                   _offTinyFontName                                               = new ExternalOffset<FSoftObjectPath>(0x0038, false);          // 0x0038(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UFont>                             _offSmallFont                                                  = new ExternalOffset<UFont>(0x0050, true);                     // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FSoftObjectPath>                   _offSmallFontName                                              = new ExternalOffset<FSoftObjectPath>(0x0058, false);          // 0x0058(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UFont>                             _offMediumFont                                                 = new ExternalOffset<UFont>(0x0070, true);                     // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FSoftObjectPath>                   _offMediumFontName                                             = new ExternalOffset<FSoftObjectPath>(0x0078, false);          // 0x0078(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UFont>                             _offLargeFont                                                  = new ExternalOffset<UFont>(0x0090, true);                     // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FSoftObjectPath>                   _offLargeFontName                                              = new ExternalOffset<FSoftObjectPath>(0x0098, false);          // 0x0098(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UFont>                             _offSubtitleFont                                               = new ExternalOffset<UFont>(0x00B0, true);                     // 0x00B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FSoftObjectPath>                   _offSubtitleFontName                                           = new ExternalOffset<FSoftObjectPath>(0x00B8, false);          // 0x00B8(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UFont>>                     _offAdditionalFonts                                            = new ExternalOffset<TArray<UFont>>(0x00D0, false);            // 0x00D0(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FString>>                   _offAdditionalFontNames                                        = new ExternalOffset<TArray<FString>>(0x00E8, false);          // 0x00E8(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offConsoleClass                                               = new ExternalOffset<UClass>(0x00F8, true);                    // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offConsoleClassName                                           = new ExternalOffset<FSoftClassPath>(0x0100, false);           // 0x0100(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offGameViewportClientClass                                    = new ExternalOffset<UClass>(0x0118, true);                    // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offGameViewportClientClassName                                = new ExternalOffset<FSoftClassPath>(0x0120, false);           // 0x0120(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offLocalPlayerClass                                           = new ExternalOffset<UClass>(0x0138, true);                    // 0x0138(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offLocalPlayerClassName                                       = new ExternalOffset<FSoftClassPath>(0x0140, false);           // 0x0140(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offWorldSettingsClass                                         = new ExternalOffset<UClass>(0x0158, true);                    // 0x0158(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offWorldSettingsClassName                                     = new ExternalOffset<FSoftClassPath>(0x0160, false);           // 0x0160(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offNavigationSystemClassName                                  = new ExternalOffset<FSoftClassPath>(0x0178, false);           // 0x0178(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offNavigationSystemClass                                      = new ExternalOffset<UClass>(0x0190, true);                    // 0x0190(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offNavigationSystemConfigClassName                            = new ExternalOffset<FSoftClassPath>(0x0198, false);           // 0x0198(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offNavigationSystemConfigClass                                = new ExternalOffset<UClass>(0x01B0, true);                    // 0x01B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offAvoidanceManagerClassName                                  = new ExternalOffset<FSoftClassPath>(0x01B8, false);           // 0x01B8(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offAvoidanceManagerClass                                      = new ExternalOffset<UClass>(0x01D0, true);                    // 0x01D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offPhysicsCollisionHandlerClass                               = new ExternalOffset<UClass>(0x01D8, true);                    // 0x01D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offPhysicsCollisionHandlerClassName                           = new ExternalOffset<FSoftClassPath>(0x01E0, false);           // 0x01E0(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offGameUserSettingsClassName                                  = new ExternalOffset<FSoftClassPath>(0x01F8, false);           // 0x01F8(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offGameUserSettingsClass                                      = new ExternalOffset<UClass>(0x0210, true);                    // 0x0210(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offAIControllerClassName                                      = new ExternalOffset<FSoftClassPath>(0x0218, false);           // 0x0218(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UGameUserSettings>                 _offGameUserSettings                                           = new ExternalOffset<UGameUserSettings>(0x0230, true);         // 0x0230(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offLevelScriptActorClass                                      = new ExternalOffset<UClass>(0x0238, true);                    // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offLevelScriptActorClassName                                  = new ExternalOffset<FSoftClassPath>(0x0240, false);           // 0x0240(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offDefaultBlueprintBaseClassName                              = new ExternalOffset<FSoftClassPath>(0x0258, false);           // 0x0258(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offGameSingletonClassName                                     = new ExternalOffset<FSoftClassPath>(0x0270, false);           // 0x0270(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                           _offGameSingleton                                              = new ExternalOffset<UObject>(0x0288, true);                   // 0x0288(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offAssetManagerClassName                                      = new ExternalOffset<FSoftClassPath>(0x0290, false);           // 0x0290(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, NoClear, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAssetManager>                     _offAssetManager                                               = new ExternalOffset<UAssetManager>(0x02A8, true);             // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offDefaultTexture                                             = new ExternalOffset<UTexture2D>(0x02B0, true);                // 0x02B0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultTextureName                                         = new ExternalOffset<FSoftObjectPath>(0x02B8, false);          // 0x02B8(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture>                          _offDefaultDiffuseTexture                                      = new ExternalOffset<UTexture>(0x02D0, true);                  // 0x02D0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultDiffuseTextureName                                  = new ExternalOffset<FSoftObjectPath>(0x02D8, false);          // 0x02D8(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offDefaultBSPVertexTexture                                    = new ExternalOffset<UTexture2D>(0x02F0, true);                // 0x02F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultBSPVertexTextureName                                = new ExternalOffset<FSoftObjectPath>(0x02F8, false);          // 0x02F8(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offHighFrequencyNoiseTexture                                  = new ExternalOffset<UTexture2D>(0x0310, true);                // 0x0310(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offHighFrequencyNoiseTextureName                              = new ExternalOffset<FSoftObjectPath>(0x0318, false);          // 0x0318(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offDefaultBokehTexture                                        = new ExternalOffset<UTexture2D>(0x0330, true);                // 0x0330(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultBokehTextureName                                    = new ExternalOffset<FSoftObjectPath>(0x0338, false);          // 0x0338(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offDefaultBloomKernelTexture                                  = new ExternalOffset<UTexture2D>(0x0350, true);                // 0x0350(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultBloomKernelTextureName                              = new ExternalOffset<FSoftObjectPath>(0x0358, false);          // 0x0358(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offWireframeMaterial                                          = new ExternalOffset<UMaterial>(0x0370, true);                 // 0x0370(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offWireframeMaterialName                                      = new ExternalOffset<FString>(0x0378, false);                  // 0x0378(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offDebugMeshMaterial                                          = new ExternalOffset<UMaterial>(0x0388, true);                 // 0x0388(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDebugMeshMaterialName                                      = new ExternalOffset<FSoftObjectPath>(0x0390, false);          // 0x0390(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offEmissiveMeshMaterial                                       = new ExternalOffset<UMaterial>(0x03A8, true);                 // 0x03A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offEmissiveMeshMaterialName                                   = new ExternalOffset<FSoftObjectPath>(0x03B0, false);          // 0x03B0(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offLevelColorationLitMaterial                                 = new ExternalOffset<UMaterial>(0x03C8, true);                 // 0x03C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offLevelColorationLitMaterialName                             = new ExternalOffset<FString>(0x03D0, false);                  // 0x03D0(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offLevelColorationUnlitMaterial                               = new ExternalOffset<UMaterial>(0x03E0, true);                 // 0x03E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offLevelColorationUnlitMaterialName                           = new ExternalOffset<FString>(0x03E8, false);                  // 0x03E8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offLightingTexelDensityMaterial                               = new ExternalOffset<UMaterial>(0x03F8, true);                 // 0x03F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offLightingTexelDensityName                                   = new ExternalOffset<FString>(0x0400, false);                  // 0x0400(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offShadedLevelColorationLitMaterial                           = new ExternalOffset<UMaterial>(0x0410, true);                 // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offShadedLevelColorationLitMaterialName                       = new ExternalOffset<FString>(0x0418, false);                  // 0x0418(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offShadedLevelColorationUnlitMaterial                         = new ExternalOffset<UMaterial>(0x0428, true);                 // 0x0428(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offShadedLevelColorationUnlitMaterialName                     = new ExternalOffset<FString>(0x0430, false);                  // 0x0430(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offRemoveSurfaceMaterial                                      = new ExternalOffset<UMaterial>(0x0440, true);                 // 0x0440(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offRemoveSurfaceMaterialName                                  = new ExternalOffset<FSoftObjectPath>(0x0448, false);          // 0x0448(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offVertexColorMaterial                                        = new ExternalOffset<UMaterial>(0x0460, true);                 // 0x0460(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offVertexColorMaterialName                                    = new ExternalOffset<FString>(0x0468, false);                  // 0x0468(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offVertexColorViewModeMaterial_ColorOnly                      = new ExternalOffset<UMaterial>(0x0478, true);                 // 0x0478(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offVertexColorViewModeMaterialName_ColorOnly                  = new ExternalOffset<FString>(0x0480, false);                  // 0x0480(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offVertexColorViewModeMaterial_AlphaAsColor                   = new ExternalOffset<UMaterial>(0x0490, true);                 // 0x0490(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offVertexColorViewModeMaterialName_AlphaAsColor               = new ExternalOffset<FString>(0x0498, false);                  // 0x0498(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offVertexColorViewModeMaterial_RedOnly                        = new ExternalOffset<UMaterial>(0x04A8, true);                 // 0x04A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offVertexColorViewModeMaterialName_RedOnly                    = new ExternalOffset<FString>(0x04B0, false);                  // 0x04B0(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offVertexColorViewModeMaterial_GreenOnly                      = new ExternalOffset<UMaterial>(0x04C0, true);                 // 0x04C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offVertexColorViewModeMaterialName_GreenOnly                  = new ExternalOffset<FString>(0x04C8, false);                  // 0x04C8(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offVertexColorViewModeMaterial_BlueOnly                       = new ExternalOffset<UMaterial>(0x04D8, true);                 // 0x04D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offVertexColorViewModeMaterialName_BlueOnly                   = new ExternalOffset<FString>(0x04E0, false);                  // 0x04E0(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDebugEditorMaterialName                                    = new ExternalOffset<FSoftObjectPath>(0x04F0, false);          // 0x04F0(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offConstraintLimitMaterial                                    = new ExternalOffset<UMaterial>(0x0508, true);                 // 0x0508(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInstanceDynamic>          _offConstraintLimitMaterialX                                   = new ExternalOffset<UMaterialInstanceDynamic>(0x0510, true);  // 0x0510(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInstanceDynamic>          _offConstraintLimitMaterialXAxis                               = new ExternalOffset<UMaterialInstanceDynamic>(0x0518, true);  // 0x0518(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInstanceDynamic>          _offConstraintLimitMaterialY                                   = new ExternalOffset<UMaterialInstanceDynamic>(0x0520, true);  // 0x0520(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInstanceDynamic>          _offConstraintLimitMaterialYAxis                               = new ExternalOffset<UMaterialInstanceDynamic>(0x0528, true);  // 0x0528(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInstanceDynamic>          _offConstraintLimitMaterialZ                                   = new ExternalOffset<UMaterialInstanceDynamic>(0x0530, true);  // 0x0530(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInstanceDynamic>          _offConstraintLimitMaterialZAxis                               = new ExternalOffset<UMaterialInstanceDynamic>(0x0538, true);  // 0x0538(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInstanceDynamic>          _offConstraintLimitMaterialPrismatic                           = new ExternalOffset<UMaterialInstanceDynamic>(0x0540, true);  // 0x0540(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offInvalidLightmapSettingsMaterial                            = new ExternalOffset<UMaterial>(0x0548, true);                 // 0x0548(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offInvalidLightmapSettingsMaterialName                        = new ExternalOffset<FSoftObjectPath>(0x0550, false);          // 0x0550(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offPreviewShadowsIndicatorMaterial                            = new ExternalOffset<UMaterial>(0x0568, true);                 // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offPreviewShadowsIndicatorMaterialName                        = new ExternalOffset<FSoftObjectPath>(0x0570, false);          // 0x0570(0x0018) (Edit, ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterial>                         _offArrowMaterial                                              = new ExternalOffset<UMaterial>(0x0588, true);                 // 0x0588(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInstanceDynamic>          _offArrowMaterialYellow                                        = new ExternalOffset<UMaterialInstanceDynamic>(0x0590, true);  // 0x0590(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offArrowMaterialName                                          = new ExternalOffset<FSoftObjectPath>(0x0598, false);          // 0x0598(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offLightingOnlyBrightness                                     = new ExternalOffset<FLinearColor>(0x05B0, false);             // 0x05B0(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLinearColor>>              _offShaderComplexityColors                                     = new ExternalOffset<TArray<FLinearColor>>(0x05C0, false);     // 0x05C0(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLinearColor>>              _offQuadComplexityColors                                       = new ExternalOffset<TArray<FLinearColor>>(0x05D0, false);     // 0x05D0(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLinearColor>>              _offLightComplexityColors                                      = new ExternalOffset<TArray<FLinearColor>>(0x05E0, false);     // 0x05E0(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLinearColor>>              _offStationaryLightOverlapColors                               = new ExternalOffset<TArray<FLinearColor>>(0x05F0, false);     // 0x05F0(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLinearColor>>              _offLODColorationColors                                        = new ExternalOffset<TArray<FLinearColor>>(0x0600, false);     // 0x0600(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLinearColor>>              _offHLODColorationColors                                       = new ExternalOffset<TArray<FLinearColor>>(0x0610, false);     // 0x0610(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLinearColor>>              _offStreamingAccuracyColors                                    = new ExternalOffset<TArray<FLinearColor>>(0x0620, false);     // 0x0620(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxPixelShaderAdditiveComplexityCount                      = new ExternalOffset<float>(0x0630);                           // 0x0630(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxES2PixelShaderAdditiveComplexityCount                   = new ExternalOffset<float>(0x0634);                           // 0x0634(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxES3PixelShaderAdditiveComplexityCount                   = new ExternalOffset<float>(0x0638);                           // 0x0638(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinLightMapDensity                                         = new ExternalOffset<float>(0x063C);                           // 0x063C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offIdealLightMapDensity                                       = new ExternalOffset<float>(0x0640);                           // 0x0640(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxLightMapDensity                                         = new ExternalOffset<float>(0x0644);                           // 0x0644(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenderLightMapDensityGrayscale                            = new ExternalOffset<char>(0x0648, false);                     // 0x0648(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRenderLightMapDensityGrayscaleScale                        = new ExternalOffset<float>(0x064C);                           // 0x064C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRenderLightMapDensityColorScale                            = new ExternalOffset<float>(0x0650);                           // 0x0650(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offLightMapDensityVertexMappedColor                           = new ExternalOffset<FLinearColor>(0x0654, false);             // 0x0654(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offLightMapDensitySelectedColor                               = new ExternalOffset<FLinearColor>(0x0664, false);             // 0x0664(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStatColorMapping>>         _offStatColorMappings                                          = new ExternalOffset<TArray<FStatColorMapping>>(0x0678, false); // 0x0678(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<UPhysicalMaterial>                 _offDefaultPhysMaterial                                        = new ExternalOffset<UPhysicalMaterial>(0x0688, true);         // 0x0688(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultPhysMaterialName                                    = new ExternalOffset<FSoftObjectPath>(0x0690, false);          // 0x0690(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FGameNameRedirect>>         _offActiveGameNameRedirects                                    = new ExternalOffset<TArray<FGameNameRedirect>>(0x06A8, false); // 0x06A8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FClassRedirect>>            _offActiveClassRedirects                                       = new ExternalOffset<TArray<FClassRedirect>>(0x06B8, false);   // 0x06B8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPluginRedirect>>           _offActivePluginRedirects                                      = new ExternalOffset<TArray<FPluginRedirect>>(0x06C8, false);  // 0x06C8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStructRedirect>>           _offActiveStructRedirects                                      = new ExternalOffset<TArray<FStructRedirect>>(0x06D8, false);  // 0x06D8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offPreIntegratedSkinBRDFTexture                               = new ExternalOffset<UTexture2D>(0x06E8, true);                // 0x06E8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offPreIntegratedSkinBRDFTextureName                           = new ExternalOffset<FSoftObjectPath>(0x06F0, false);          // 0x06F0(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offBlueNoiseTexture                                           = new ExternalOffset<UTexture2D>(0x0708, true);                // 0x0708(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offBlueNoiseTextureName                                       = new ExternalOffset<FSoftObjectPath>(0x0710, false);          // 0x0710(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offMiniFontTexture                                            = new ExternalOffset<UTexture2D>(0x0728, true);                // 0x0728(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offMiniFontTextureName                                        = new ExternalOffset<FSoftObjectPath>(0x0730, false);          // 0x0730(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture>                          _offWeightMapPlaceholderTexture                                = new ExternalOffset<UTexture>(0x0748, true);                  // 0x0748(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offWeightMapPlaceholderTextureName                            = new ExternalOffset<FSoftObjectPath>(0x0750, false);          // 0x0750(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offLightMapDensityTexture                                     = new ExternalOffset<UTexture2D>(0x0768, true);                // 0x0768(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offLightMapDensityTextureName                                 = new ExternalOffset<FSoftObjectPath>(0x0770, false);          // 0x0770(0x0018) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UGameViewportClient>               _offGameViewport                                               = new ExternalOffset<UGameViewportClient>(0x0790, true);       // 0x0790(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offDeferredCommands                                           = new ExternalOffset<TArray<FString>>(0x0798, false);          // 0x0798(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offTickCycles                                                 = new ExternalOffset<int>(0x07A8);                             // 0x07A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offGameCycles                                                 = new ExternalOffset<int>(0x07AC);                             // 0x07AC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offClientCycles                                               = new ExternalOffset<int>(0x07B0);                             // 0x07B0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNearClipPlane                                              = new ExternalOffset<float>(0x07B4);                           // 0x07B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHardwareSurveyEnabled                                     = new ExternalOffset<char>(0x07B8, false);                     // 0x07B8(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSubtitlesEnabled                                          = new ExternalOffset<char>(0x07B8, false);                     // 0x07B8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSubtitlesForcedOff                                        = new ExternalOffset<char>(0x07B8, false);                     // 0x07B8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaximumLoopIterationCount                                  = new ExternalOffset<int>(0x07BC);                             // 0x07BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCanBlueprintsTickByDefault                                = new ExternalOffset<char>(0x07C0, false);                     // 0x07C0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOptimizeAnimBlueprintMemberVariableAccess                 = new ExternalOffset<char>(0x07C0, false);                     // 0x07C0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowMultiThreadedAnimationUpdate                         = new ExternalOffset<char>(0x07C0, false);                     // 0x07C0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableEditorPSysRealtimeLOD                               = new ExternalOffset<char>(0x07C0, false);                     // 0x07C0(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSmoothFrameRate                                           = new ExternalOffset<char>(0x07C0, false);                     // 0x07C0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseFixedFrameRate                                         = new ExternalOffset<char>(0x07C0, false);                     // 0x07C0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFixedFrameRate                                             = new ExternalOffset<float>(0x07C4);                           // 0x07C4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FFloatRange>                       _offSmoothedFrameRateRange                                     = new ExternalOffset<FFloatRange>(0x07C8, false);              // 0x07C8(0x0010) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UEngineCustomTimeStep>             _offDefaultCustomTimeStep                                      = new ExternalOffset<UEngineCustomTimeStep>(0x07D8, true);     // 0x07D8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UEngineCustomTimeStep>             _offCurrentCustomTimeStep                                      = new ExternalOffset<UEngineCustomTimeStep>(0x07E0, true);     // 0x07E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FSoftClassPath>                    _offCustomTimeStepClassName                                    = new ExternalOffset<FSoftClassPath>(0x07E8, false);           // 0x07E8(0x0018) (Edit, ZeroConstructor, Config, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTimecodeProvider>                 _offDefaultTimecodeProvider                                    = new ExternalOffset<UTimecodeProvider>(0x0800, true);         // 0x0800(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UTimecodeProvider>                 _offCustomTimecodeProvider                                     = new ExternalOffset<UTimecodeProvider>(0x0808, true);         // 0x0808(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FSoftClassPath>                    _offDefaultTimecodeProviderClassName                           = new ExternalOffset<FSoftClassPath>(0x0810, false);           // 0x0810(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offTimecodeProviderClassName                                  = new ExternalOffset<FSoftClassPath>(0x0828, false);           // 0x0828(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FFrameRate>                        _offDefaultTimecodeFrameRate                                   = new ExternalOffset<FFrameRate>(0x0840, false);               // 0x0840(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCheckForMultiplePawnsSpawnedInAFrame                      = new ExternalOffset<char>(0x0848, false);                     // 0x0848(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumPawnsAllowedToBeSpawnedInAFrame                         = new ExternalOffset<int>(0x084C);                             // 0x084C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldGenerateLowQualityLightmaps                         = new ExternalOffset<char>(0x0850, false);                     // 0x0850(0x0001) BIT_FIELD (Config, GlobalConfig, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_WorldBox                                                 = new ExternalOffset<FColor>(0x0854, false);                   // 0x0854(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_BrushWire                                                = new ExternalOffset<FColor>(0x0858, false);                   // 0x0858(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_AddWire                                                  = new ExternalOffset<FColor>(0x085C, false);                   // 0x085C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_SubtractWire                                             = new ExternalOffset<FColor>(0x0860, false);                   // 0x0860(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_SemiSolidWire                                            = new ExternalOffset<FColor>(0x0864, false);                   // 0x0864(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_NonSolidWire                                             = new ExternalOffset<FColor>(0x0868, false);                   // 0x0868(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_WireBackground                                           = new ExternalOffset<FColor>(0x086C, false);                   // 0x086C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_ScaleBoxHi                                               = new ExternalOffset<FColor>(0x0870, false);                   // 0x0870(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_VolumeCollision                                          = new ExternalOffset<FColor>(0x0874, false);                   // 0x0874(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_BSPCollision                                             = new ExternalOffset<FColor>(0x0878, false);                   // 0x0878(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_OrthoBackground                                          = new ExternalOffset<FColor>(0x087C, false);                   // 0x087C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_Volume                                                   = new ExternalOffset<FColor>(0x0880, false);                   // 0x0880(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offC_BrushShape                                               = new ExternalOffset<FColor>(0x0884, false);                   // 0x0884(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStreamingDistanceFactor                                    = new ExternalOffset<float>(0x0888);                           // 0x0888(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FDirectoryPath>                    _offGameScreenshotSaveDirectory                                = new ExternalOffset<FDirectoryPath>(0x0890, false);           // 0x0890(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<ETransitionType>                   _offTransitionType                                             = new ExternalOffset<ETransitionType>(0x08A0, false);          // 0x08A0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offTransitionDescription                                      = new ExternalOffset<FString>(0x08A8, false);                  // 0x08A8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offTransitionGameMode                                         = new ExternalOffset<FString>(0x08B8, false);                  // 0x08B8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMeshLODRange                                               = new ExternalOffset<float>(0x08C8);                           // 0x08C8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowMatureLanguage                                       = new ExternalOffset<char>(0x08CC, false);                     // 0x08CC(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCameraRotationThreshold                                    = new ExternalOffset<float>(0x08D0);                           // 0x08D0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCameraTranslationThreshold                                 = new ExternalOffset<float>(0x08D4);                           // 0x08D4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPrimitiveProbablyVisibleTime                               = new ExternalOffset<float>(0x08D8);                           // 0x08D8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxOcclusionPixelsFraction                                 = new ExternalOffset<float>(0x08DC);                           // 0x08DC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPauseOnLossOfFocus                                        = new ExternalOffset<char>(0x08E0, false);                     // 0x08E0(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxParticleResize                                          = new ExternalOffset<int>(0x08E4);                             // 0x08E4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxParticleResizeWarn                                      = new ExternalOffset<int>(0x08E8);                             // 0x08E8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FDropNoteInfo>>             _offPendingDroppedNotes                                        = new ExternalOffset<TArray<FDropNoteInfo>>(0x08F0, false);    // 0x08F0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetClientTicksPerSecond                                    = new ExternalOffset<float>(0x0900);                           // 0x0900(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDisplayGamma                                               = new ExternalOffset<float>(0x0904);                           // 0x0904(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinDesiredFrameRate                                        = new ExternalOffset<float>(0x0908);                           // 0x0908(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offDefaultSelectedMaterialColor                               = new ExternalOffset<FLinearColor>(0x090C, false);             // 0x090C(0x0010) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FLinearColor>                      _offSelectedMaterialColor                                      = new ExternalOffset<FLinearColor>(0x091C, false);             // 0x091C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FLinearColor>                      _offSelectionOutlineColor                                      = new ExternalOffset<FLinearColor>(0x092C, false);             // 0x092C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FLinearColor>                      _offSubduedSelectionOutlineColor                               = new ExternalOffset<FLinearColor>(0x093C, false);             // 0x093C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FLinearColor>                      _offSelectedMaterialColorOverride                              = new ExternalOffset<FLinearColor>(0x094C, false);             // 0x094C(0x0010) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsOverridingSelectedColor                                 = new ExternalOffset<byte/*(bool)*/>(0x095C);                  // 0x095C(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbEnableOnScreenDebugMessages                               = new ExternalOffset<char>(0x0960, false);                     // 0x0960(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableOnScreenDebugMessagesDisplay                        = new ExternalOffset<char>(0x0960, false);                     // 0x0960(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSuppressMapWarnings                                       = new ExternalOffset<char>(0x0960, false);                     // 0x0960(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableAILogging                                          = new ExternalOffset<char>(0x0960, false);                     // 0x0960(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offbEnableVisualLogRecordingOnStart                           = new ExternalOffset<uint>(0x0964);                            // 0x0964(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offScreenSaverInhibitorSemaphore                              = new ExternalOffset<int>(0x096C);                             // 0x096C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbLockReadOnlyLevels                                        = new ExternalOffset<char>(0x0970, false);                     // 0x0970(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offParticleEventManagerClassPath                              = new ExternalOffset<FString>(0x0978, false);                  // 0x0978(0x0010) (ZeroConstructor, Config, GlobalConfig, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSelectionHighlightIntensity                                = new ExternalOffset<float>(0x0998);                           // 0x0998(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBSPSelectionHighlightIntensity                             = new ExternalOffset<float>(0x099C);                           // 0x099C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSelectionHighlightIntensityBillboards                      = new ExternalOffset<float>(0x09A0);                           // 0x09A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FNetDriverDefinition>>      _offNetDriverDefinitions                                       = new ExternalOffset<TArray<FNetDriverDefinition>>(0x0BD0, false); // 0x0BD0(0x0010) (ZeroConstructor, Transient, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offServerActors                                               = new ExternalOffset<TArray<FString>>(0x0BE0, false);          // 0x0BE0(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offRuntimeServerActors                                        = new ExternalOffset<TArray<FString>>(0x0BF0, false);          // 0x0BF0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetErrorLogInterval                                        = new ExternalOffset<float>(0x0C00);                           // 0x0C00(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStartedLoadMapMovie                                       = new ExternalOffset<char>(0x0C04, false);                     // 0x0C04(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNextWorldContextHandle                                     = new ExternalOffset<int>(0x0C20);                             // 0x0C20(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UFont                                              TinyFont                                                       => _offTinyFont.GetValue();
	public FSoftObjectPath                                    TinyFontName                                                   => _offTinyFontName.GetValue();
	public UFont                                              SmallFont                                                      => _offSmallFont.GetValue();
	public FSoftObjectPath                                    SmallFontName                                                  => _offSmallFontName.GetValue();
	public UFont                                              MediumFont                                                     => _offMediumFont.GetValue();
	public FSoftObjectPath                                    MediumFontName                                                 => _offMediumFontName.GetValue();
	public UFont                                              LargeFont                                                      => _offLargeFont.GetValue();
	public FSoftObjectPath                                    LargeFontName                                                  => _offLargeFontName.GetValue();
	public UFont                                              SubtitleFont                                                   => _offSubtitleFont.GetValue();
	public FSoftObjectPath                                    SubtitleFontName                                               => _offSubtitleFontName.GetValue();
	public TArray<UFont>                                      AdditionalFonts                                                => _offAdditionalFonts.GetValue();
	public TArray<FString>                                    AdditionalFontNames                                            => _offAdditionalFontNames.GetValue();
	public UClass                                             ConsoleClass                                                   => _offConsoleClass.GetValue();
	public FSoftClassPath                                     ConsoleClassName                                               => _offConsoleClassName.GetValue();
	public UClass                                             GameViewportClientClass                                        => _offGameViewportClientClass.GetValue();
	public FSoftClassPath                                     GameViewportClientClassName                                    => _offGameViewportClientClassName.GetValue();
	public UClass                                             LocalPlayerClass                                               => _offLocalPlayerClass.GetValue();
	public FSoftClassPath                                     LocalPlayerClassName                                           => _offLocalPlayerClassName.GetValue();
	public UClass                                             WorldSettingsClass                                             => _offWorldSettingsClass.GetValue();
	public FSoftClassPath                                     WorldSettingsClassName                                         => _offWorldSettingsClassName.GetValue();
	public FSoftClassPath                                     NavigationSystemClassName                                      => _offNavigationSystemClassName.GetValue();
	public UClass                                             NavigationSystemClass                                          => _offNavigationSystemClass.GetValue();
	public FSoftClassPath                                     NavigationSystemConfigClassName                                => _offNavigationSystemConfigClassName.GetValue();
	public UClass                                             NavigationSystemConfigClass                                    => _offNavigationSystemConfigClass.GetValue();
	public FSoftClassPath                                     AvoidanceManagerClassName                                      => _offAvoidanceManagerClassName.GetValue();
	public UClass                                             AvoidanceManagerClass                                          => _offAvoidanceManagerClass.GetValue();
	public UClass                                             PhysicsCollisionHandlerClass                                   => _offPhysicsCollisionHandlerClass.GetValue();
	public FSoftClassPath                                     PhysicsCollisionHandlerClassName                               => _offPhysicsCollisionHandlerClassName.GetValue();
	public FSoftClassPath                                     GameUserSettingsClassName                                      => _offGameUserSettingsClassName.GetValue();
	public UClass                                             GameUserSettingsClass                                          => _offGameUserSettingsClass.GetValue();
	public FSoftClassPath                                     AIControllerClassName                                          => _offAIControllerClassName.GetValue();
	public UGameUserSettings                                  GameUserSettings                                               => _offGameUserSettings.GetValue();
	public UClass                                             LevelScriptActorClass                                          => _offLevelScriptActorClass.GetValue();
	public FSoftClassPath                                     LevelScriptActorClassName                                      => _offLevelScriptActorClassName.GetValue();
	public FSoftClassPath                                     DefaultBlueprintBaseClassName                                  => _offDefaultBlueprintBaseClassName.GetValue();
	public FSoftClassPath                                     GameSingletonClassName                                         => _offGameSingletonClassName.GetValue();
	public UObject                                            GameSingleton                                                  => _offGameSingleton.GetValue();
	public FSoftClassPath                                     AssetManagerClassName                                          => _offAssetManagerClassName.GetValue();
	public UAssetManager                                      AssetManager                                                   => _offAssetManager.GetValue();
	public UTexture2D                                         DefaultTexture                                                 => _offDefaultTexture.GetValue();
	public FSoftObjectPath                                    DefaultTextureName                                             => _offDefaultTextureName.GetValue();
	public UTexture                                           DefaultDiffuseTexture                                          => _offDefaultDiffuseTexture.GetValue();
	public FSoftObjectPath                                    DefaultDiffuseTextureName                                      => _offDefaultDiffuseTextureName.GetValue();
	public UTexture2D                                         DefaultBSPVertexTexture                                        => _offDefaultBSPVertexTexture.GetValue();
	public FSoftObjectPath                                    DefaultBSPVertexTextureName                                    => _offDefaultBSPVertexTextureName.GetValue();
	public UTexture2D                                         HighFrequencyNoiseTexture                                      => _offHighFrequencyNoiseTexture.GetValue();
	public FSoftObjectPath                                    HighFrequencyNoiseTextureName                                  => _offHighFrequencyNoiseTextureName.GetValue();
	public UTexture2D                                         DefaultBokehTexture                                            => _offDefaultBokehTexture.GetValue();
	public FSoftObjectPath                                    DefaultBokehTextureName                                        => _offDefaultBokehTextureName.GetValue();
	public UTexture2D                                         DefaultBloomKernelTexture                                      => _offDefaultBloomKernelTexture.GetValue();
	public FSoftObjectPath                                    DefaultBloomKernelTextureName                                  => _offDefaultBloomKernelTextureName.GetValue();
	public UMaterial                                          WireframeMaterial                                              => _offWireframeMaterial.GetValue();
	public FString                                            WireframeMaterialName                                          => _offWireframeMaterialName.GetValue();
	public UMaterial                                          DebugMeshMaterial                                              => _offDebugMeshMaterial.GetValue();
	public FSoftObjectPath                                    DebugMeshMaterialName                                          => _offDebugMeshMaterialName.GetValue();
	public UMaterial                                          EmissiveMeshMaterial                                           => _offEmissiveMeshMaterial.GetValue();
	public FSoftObjectPath                                    EmissiveMeshMaterialName                                       => _offEmissiveMeshMaterialName.GetValue();
	public UMaterial                                          LevelColorationLitMaterial                                     => _offLevelColorationLitMaterial.GetValue();
	public FString                                            LevelColorationLitMaterialName                                 => _offLevelColorationLitMaterialName.GetValue();
	public UMaterial                                          LevelColorationUnlitMaterial                                   => _offLevelColorationUnlitMaterial.GetValue();
	public FString                                            LevelColorationUnlitMaterialName                               => _offLevelColorationUnlitMaterialName.GetValue();
	public UMaterial                                          LightingTexelDensityMaterial                                   => _offLightingTexelDensityMaterial.GetValue();
	public FString                                            LightingTexelDensityName                                       => _offLightingTexelDensityName.GetValue();
	public UMaterial                                          ShadedLevelColorationLitMaterial                               => _offShadedLevelColorationLitMaterial.GetValue();
	public FString                                            ShadedLevelColorationLitMaterialName                           => _offShadedLevelColorationLitMaterialName.GetValue();
	public UMaterial                                          ShadedLevelColorationUnlitMaterial                             => _offShadedLevelColorationUnlitMaterial.GetValue();
	public FString                                            ShadedLevelColorationUnlitMaterialName                         => _offShadedLevelColorationUnlitMaterialName.GetValue();
	public UMaterial                                          RemoveSurfaceMaterial                                          => _offRemoveSurfaceMaterial.GetValue();
	public FSoftObjectPath                                    RemoveSurfaceMaterialName                                      => _offRemoveSurfaceMaterialName.GetValue();
	public UMaterial                                          VertexColorMaterial                                            => _offVertexColorMaterial.GetValue();
	public FString                                            VertexColorMaterialName                                        => _offVertexColorMaterialName.GetValue();
	public UMaterial                                          VertexColorViewModeMaterial_ColorOnly                          => _offVertexColorViewModeMaterial_ColorOnly.GetValue();
	public FString                                            VertexColorViewModeMaterialName_ColorOnly                      => _offVertexColorViewModeMaterialName_ColorOnly.GetValue();
	public UMaterial                                          VertexColorViewModeMaterial_AlphaAsColor                       => _offVertexColorViewModeMaterial_AlphaAsColor.GetValue();
	public FString                                            VertexColorViewModeMaterialName_AlphaAsColor                   => _offVertexColorViewModeMaterialName_AlphaAsColor.GetValue();
	public UMaterial                                          VertexColorViewModeMaterial_RedOnly                            => _offVertexColorViewModeMaterial_RedOnly.GetValue();
	public FString                                            VertexColorViewModeMaterialName_RedOnly                        => _offVertexColorViewModeMaterialName_RedOnly.GetValue();
	public UMaterial                                          VertexColorViewModeMaterial_GreenOnly                          => _offVertexColorViewModeMaterial_GreenOnly.GetValue();
	public FString                                            VertexColorViewModeMaterialName_GreenOnly                      => _offVertexColorViewModeMaterialName_GreenOnly.GetValue();
	public UMaterial                                          VertexColorViewModeMaterial_BlueOnly                           => _offVertexColorViewModeMaterial_BlueOnly.GetValue();
	public FString                                            VertexColorViewModeMaterialName_BlueOnly                       => _offVertexColorViewModeMaterialName_BlueOnly.GetValue();
	public FSoftObjectPath                                    DebugEditorMaterialName                                        => _offDebugEditorMaterialName.GetValue();
	public UMaterial                                          ConstraintLimitMaterial                                        => _offConstraintLimitMaterial.GetValue();
	public UMaterialInstanceDynamic                           ConstraintLimitMaterialX                                       => _offConstraintLimitMaterialX.GetValue();
	public UMaterialInstanceDynamic                           ConstraintLimitMaterialXAxis                                   => _offConstraintLimitMaterialXAxis.GetValue();
	public UMaterialInstanceDynamic                           ConstraintLimitMaterialY                                       => _offConstraintLimitMaterialY.GetValue();
	public UMaterialInstanceDynamic                           ConstraintLimitMaterialYAxis                                   => _offConstraintLimitMaterialYAxis.GetValue();
	public UMaterialInstanceDynamic                           ConstraintLimitMaterialZ                                       => _offConstraintLimitMaterialZ.GetValue();
	public UMaterialInstanceDynamic                           ConstraintLimitMaterialZAxis                                   => _offConstraintLimitMaterialZAxis.GetValue();
	public UMaterialInstanceDynamic                           ConstraintLimitMaterialPrismatic                               => _offConstraintLimitMaterialPrismatic.GetValue();
	public UMaterial                                          InvalidLightmapSettingsMaterial                                => _offInvalidLightmapSettingsMaterial.GetValue();
	public FSoftObjectPath                                    InvalidLightmapSettingsMaterialName                            => _offInvalidLightmapSettingsMaterialName.GetValue();
	public UMaterial                                          PreviewShadowsIndicatorMaterial                                => _offPreviewShadowsIndicatorMaterial.GetValue();
	public FSoftObjectPath                                    PreviewShadowsIndicatorMaterialName                            => _offPreviewShadowsIndicatorMaterialName.GetValue();
	public UMaterial                                          ArrowMaterial                                                  => _offArrowMaterial.GetValue();
	public UMaterialInstanceDynamic                           ArrowMaterialYellow                                            => _offArrowMaterialYellow.GetValue();
	public FSoftObjectPath                                    ArrowMaterialName                                              => _offArrowMaterialName.GetValue();
	public FLinearColor                                       LightingOnlyBrightness                                         => _offLightingOnlyBrightness.GetValue();
	public TArray<FLinearColor>                               ShaderComplexityColors                                         => _offShaderComplexityColors.GetValue();
	public TArray<FLinearColor>                               QuadComplexityColors                                           => _offQuadComplexityColors.GetValue();
	public TArray<FLinearColor>                               LightComplexityColors                                          => _offLightComplexityColors.GetValue();
	public TArray<FLinearColor>                               StationaryLightOverlapColors                                   => _offStationaryLightOverlapColors.GetValue();
	public TArray<FLinearColor>                               LODColorationColors                                            => _offLODColorationColors.GetValue();
	public TArray<FLinearColor>                               HLODColorationColors                                           => _offHLODColorationColors.GetValue();
	public TArray<FLinearColor>                               StreamingAccuracyColors                                        => _offStreamingAccuracyColors.GetValue();
	public float                                              MaxPixelShaderAdditiveComplexityCount                          => _offMaxPixelShaderAdditiveComplexityCount.GetValue();
	public float                                              MaxES2PixelShaderAdditiveComplexityCount                       => _offMaxES2PixelShaderAdditiveComplexityCount.GetValue();
	public float                                              MaxES3PixelShaderAdditiveComplexityCount                       => _offMaxES3PixelShaderAdditiveComplexityCount.GetValue();
	public float                                              MinLightMapDensity                                             => _offMinLightMapDensity.GetValue();
	public float                                              IdealLightMapDensity                                           => _offIdealLightMapDensity.GetValue();
	public float                                              MaxLightMapDensity                                             => _offMaxLightMapDensity.GetValue();
	public float                                              RenderLightMapDensityGrayscaleScale                            => _offRenderLightMapDensityGrayscaleScale.GetValue();
	public float                                              RenderLightMapDensityColorScale                                => _offRenderLightMapDensityColorScale.GetValue();
	public FLinearColor                                       LightMapDensityVertexMappedColor                               => _offLightMapDensityVertexMappedColor.GetValue();
	public FLinearColor                                       LightMapDensitySelectedColor                                   => _offLightMapDensitySelectedColor.GetValue();
	public TArray<FStatColorMapping>                          StatColorMappings                                              => _offStatColorMappings.GetValue();
	public UPhysicalMaterial                                  DefaultPhysMaterial                                            => _offDefaultPhysMaterial.GetValue();
	public FSoftObjectPath                                    DefaultPhysMaterialName                                        => _offDefaultPhysMaterialName.GetValue();
	public TArray<FGameNameRedirect>                          ActiveGameNameRedirects                                        => _offActiveGameNameRedirects.GetValue();
	public TArray<FClassRedirect>                             ActiveClassRedirects                                           => _offActiveClassRedirects.GetValue();
	public TArray<FPluginRedirect>                            ActivePluginRedirects                                          => _offActivePluginRedirects.GetValue();
	public TArray<FStructRedirect>                            ActiveStructRedirects                                          => _offActiveStructRedirects.GetValue();
	public UTexture2D                                         PreIntegratedSkinBRDFTexture                                   => _offPreIntegratedSkinBRDFTexture.GetValue();
	public FSoftObjectPath                                    PreIntegratedSkinBRDFTextureName                               => _offPreIntegratedSkinBRDFTextureName.GetValue();
	public UTexture2D                                         BlueNoiseTexture                                               => _offBlueNoiseTexture.GetValue();
	public FSoftObjectPath                                    BlueNoiseTextureName                                           => _offBlueNoiseTextureName.GetValue();
	public UTexture2D                                         MiniFontTexture                                                => _offMiniFontTexture.GetValue();
	public FSoftObjectPath                                    MiniFontTextureName                                            => _offMiniFontTextureName.GetValue();
	public UTexture                                           WeightMapPlaceholderTexture                                    => _offWeightMapPlaceholderTexture.GetValue();
	public FSoftObjectPath                                    WeightMapPlaceholderTextureName                                => _offWeightMapPlaceholderTextureName.GetValue();
	public UTexture2D                                         LightMapDensityTexture                                         => _offLightMapDensityTexture.GetValue();
	public FSoftObjectPath                                    LightMapDensityTextureName                                     => _offLightMapDensityTextureName.GetValue();
	public UGameViewportClient                                GameViewport                                                   => _offGameViewport.GetValue();
	public TArray<FString>                                    DeferredCommands                                               => _offDeferredCommands.GetValue();
	public int                                                TickCycles                                                     => _offTickCycles.GetValue();
	public int                                                GameCycles                                                     => _offGameCycles.GetValue();
	public int                                                ClientCycles                                                   => _offClientCycles.GetValue();
	public float                                              NearClipPlane                                                  => _offNearClipPlane.GetValue();
	public int                                                MaximumLoopIterationCount                                      => _offMaximumLoopIterationCount.GetValue();
	public float                                              FixedFrameRate                                                 => _offFixedFrameRate.GetValue();
	public FFloatRange                                        SmoothedFrameRateRange                                         => _offSmoothedFrameRateRange.GetValue();
	public UEngineCustomTimeStep                              DefaultCustomTimeStep                                          => _offDefaultCustomTimeStep.GetValue();
	public UEngineCustomTimeStep                              CurrentCustomTimeStep                                          => _offCurrentCustomTimeStep.GetValue();
	public FSoftClassPath                                     CustomTimeStepClassName                                        => _offCustomTimeStepClassName.GetValue();
	public UTimecodeProvider                                  DefaultTimecodeProvider                                        => _offDefaultTimecodeProvider.GetValue();
	public UTimecodeProvider                                  CustomTimecodeProvider                                         => _offCustomTimecodeProvider.GetValue();
	public FSoftClassPath                                     DefaultTimecodeProviderClassName                               => _offDefaultTimecodeProviderClassName.GetValue();
	public FSoftClassPath                                     TimecodeProviderClassName                                      => _offTimecodeProviderClassName.GetValue();
	public FFrameRate                                         DefaultTimecodeFrameRate                                       => _offDefaultTimecodeFrameRate.GetValue();
	public int                                                NumPawnsAllowedToBeSpawnedInAFrame                             => _offNumPawnsAllowedToBeSpawnedInAFrame.GetValue();
	public FColor                                             C_WorldBox                                                     => _offC_WorldBox.GetValue();
	public FColor                                             C_BrushWire                                                    => _offC_BrushWire.GetValue();
	public FColor                                             C_AddWire                                                      => _offC_AddWire.GetValue();
	public FColor                                             C_SubtractWire                                                 => _offC_SubtractWire.GetValue();
	public FColor                                             C_SemiSolidWire                                                => _offC_SemiSolidWire.GetValue();
	public FColor                                             C_NonSolidWire                                                 => _offC_NonSolidWire.GetValue();
	public FColor                                             C_WireBackground                                               => _offC_WireBackground.GetValue();
	public FColor                                             C_ScaleBoxHi                                                   => _offC_ScaleBoxHi.GetValue();
	public FColor                                             C_VolumeCollision                                              => _offC_VolumeCollision.GetValue();
	public FColor                                             C_BSPCollision                                                 => _offC_BSPCollision.GetValue();
	public FColor                                             C_OrthoBackground                                              => _offC_OrthoBackground.GetValue();
	public FColor                                             C_Volume                                                       => _offC_Volume.GetValue();
	public FColor                                             C_BrushShape                                                   => _offC_BrushShape.GetValue();
	public float                                              StreamingDistanceFactor                                        => _offStreamingDistanceFactor.GetValue();
	public FDirectoryPath                                     GameScreenshotSaveDirectory                                    => _offGameScreenshotSaveDirectory.GetValue();
	public ETransitionType                                    TransitionType                                                 => _offTransitionType.GetValue();
	public FString                                            TransitionDescription                                          => _offTransitionDescription.GetValue();
	public FString                                            TransitionGameMode                                             => _offTransitionGameMode.GetValue();
	public float                                              MeshLODRange                                                   => _offMeshLODRange.GetValue();
	public float                                              CameraRotationThreshold                                        => _offCameraRotationThreshold.GetValue();
	public float                                              CameraTranslationThreshold                                     => _offCameraTranslationThreshold.GetValue();
	public float                                              PrimitiveProbablyVisibleTime                                   => _offPrimitiveProbablyVisibleTime.GetValue();
	public float                                              MaxOcclusionPixelsFraction                                     => _offMaxOcclusionPixelsFraction.GetValue();
	public int                                                MaxParticleResize                                              => _offMaxParticleResize.GetValue();
	public int                                                MaxParticleResizeWarn                                          => _offMaxParticleResizeWarn.GetValue();
	public TArray<FDropNoteInfo>                              PendingDroppedNotes                                            => _offPendingDroppedNotes.GetValue();
	public float                                              NetClientTicksPerSecond                                        => _offNetClientTicksPerSecond.GetValue();
	public float                                              DisplayGamma                                                   => _offDisplayGamma.GetValue();
	public float                                              MinDesiredFrameRate                                            => _offMinDesiredFrameRate.GetValue();
	public FLinearColor                                       DefaultSelectedMaterialColor                                   => _offDefaultSelectedMaterialColor.GetValue();
	public FLinearColor                                       SelectedMaterialColor                                          => _offSelectedMaterialColor.GetValue();
	public FLinearColor                                       SelectionOutlineColor                                          => _offSelectionOutlineColor.GetValue();
	public FLinearColor                                       SubduedSelectionOutlineColor                                   => _offSubduedSelectionOutlineColor.GetValue();
	public FLinearColor                                       SelectedMaterialColorOverride                                  => _offSelectedMaterialColorOverride.GetValue();
	public byte/*(bool)*/                                     bIsOverridingSelectedColor                                     => _offbIsOverridingSelectedColor.GetValue();
	public uint                                               bEnableVisualLogRecordingOnStart                               => _offbEnableVisualLogRecordingOnStart.GetValue();
	public int                                                ScreenSaverInhibitorSemaphore                                  => _offScreenSaverInhibitorSemaphore.GetValue();
	public FString                                            ParticleEventManagerClassPath                                  => _offParticleEventManagerClassPath.GetValue();
	public float                                              SelectionHighlightIntensity                                    => _offSelectionHighlightIntensity.GetValue();
	public float                                              BSPSelectionHighlightIntensity                                 => _offBSPSelectionHighlightIntensity.GetValue();
	public float                                              SelectionHighlightIntensityBillboards                          => _offSelectionHighlightIntensityBillboards.GetValue();
	public TArray<FNetDriverDefinition>                       NetDriverDefinitions                                           => _offNetDriverDefinitions.GetValue();
	public TArray<FString>                                    ServerActors                                                   => _offServerActors.GetValue();
	public TArray<FString>                                    RuntimeServerActors                                            => _offRuntimeServerActors.GetValue();
	public float                                              NetErrorLogInterval                                            => _offNetErrorLogInterval.GetValue();
	public int                                                NextWorldContextHandle                                         => _offNextWorldContextHandle.GetValue();
	#endregion


}

// Class Engine.ScriptViewportClient
// 0x0000 (0x0028 - 0x0028)
public class UScriptViewportClient : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.GameViewportClient
// 0x0060 (0x0088 - 0x0028)
public class UGameViewportClient : UScriptViewportClient
{
	#region Offsets
	private ExternalOffset<UConsole>                          _offViewportConsole                                            = new ExternalOffset<UConsole>(0x0040, true);                  // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FDebugDisplayProperty>>     _offDebugProperties                                            = new ExternalOffset<TArray<FDebugDisplayProperty>>(0x0048, false); // 0x0048(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UWorld>                            _offWorld                                                      = new ExternalOffset<UWorld>(0x0078, true);                    // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<UGameInstance>                     _offGameInstance                                               = new ExternalOffset<UGameInstance>(0x0080, true);             // 0x0080(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UConsole                                           ViewportConsole                                                => _offViewportConsole.GetValue();
	public TArray<FDebugDisplayProperty>                      DebugProperties                                                => _offDebugProperties.GetValue();
	public UWorld                                             World                                                          => _offWorld.GetValue();
	public UGameInstance                                      GameInstance                                                   => _offGameInstance.GetValue();
	#endregion


}

// Class Engine.Console
// 0x0050 (0x0078 - 0x0028)
public class UConsole : UObject
{
	#region Offsets
	private ExternalOffset<ULocalPlayer>                      _offConsoleTargetPlayer                                        = new ExternalOffset<ULocalPlayer>(0x0038, true);              // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offDefaultTexture_Black                                       = new ExternalOffset<UTexture2D>(0x0040, true);                // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offDefaultTexture_White                                       = new ExternalOffset<UTexture2D>(0x0048, true);                // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offHistoryBuffer                                              = new ExternalOffset<TArray<FString>>(0x0068, false);          // 0x0068(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ULocalPlayer                                       ConsoleTargetPlayer                                            => _offConsoleTargetPlayer.GetValue();
	public UTexture2D                                         DefaultTexture_Black                                           => _offDefaultTexture_Black.GetValue();
	public UTexture2D                                         DefaultTexture_White                                           => _offDefaultTexture_White.GetValue();
	public TArray<FString>                                    HistoryBuffer                                                  => _offHistoryBuffer.GetValue();
	#endregion


}

// Class Engine.ChildActorComponent
// 0x00B0 (0x0230 - 0x0180)
public class UChildActorComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<UClass>                            _offChildActorClass                                            = new ExternalOffset<UClass>(0x0218, true);                    // 0x0218(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<AActor>                            _offChildActor                                                 = new ExternalOffset<AActor>(0x0220, true);                    // 0x0220(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, TextExportTransient, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<AActor>                            _offChildActorTemplate                                         = new ExternalOffset<AActor>(0x0228, true);                    // 0x0228(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, EditConst, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UClass                                             ChildActorClass                                                => _offChildActorClass.GetValue();
	public AActor                                             ChildActor                                                     => _offChildActor.GetValue();
	public AActor                                             ChildActorTemplate                                             => _offChildActorTemplate.GetValue();
	#endregion


}

// Class Engine.DPICustomScalingRule
// 0x0000 (0x0028 - 0x0028)
public class UDPICustomScalingRule : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.StaticMeshComponent
// 0x006F (0x0498 - 0x0429)
public class UStaticMeshComponent : UMeshComponent
{
	#region Offsets
	private ExternalOffset<int>                               _offForcedLodModel                                             = new ExternalOffset<int>(0x0430);                             // 0x0430(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPreviousLODLevel                                           = new ExternalOffset<int>(0x0434);                             // 0x0434(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMinLOD                                                     = new ExternalOffset<int>(0x0438);                             // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSubDivisionStepSize                                        = new ExternalOffset<int>(0x043C);                             // 0x043C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UStaticMesh>                       _offStaticMesh                                                 = new ExternalOffset<UStaticMesh>(0x0440, true);               // 0x0440(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FColor>                            _offWireframeColorOverride                                     = new ExternalOffset<FColor>(0x0448, false);                   // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideWireframeColor                                    = new ExternalOffset<char>(0x044C, false);                     // 0x044C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideMinLOD                                            = new ExternalOffset<char>(0x044C, false);                     // 0x044C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideNavigationExport                                  = new ExternalOffset<char>(0x044C, false);                     // 0x044C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceNavigationObstacle                                   = new ExternalOffset<char>(0x044C, false);                     // 0x044C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisallowMeshPaintPerInstance                              = new ExternalOffset<char>(0x044C, false);                     // 0x044C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreInstanceForTextureStreaming                         = new ExternalOffset<char>(0x044C, false);                     // 0x044C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideLightMapRes                                       = new ExternalOffset<char>(0x044C, false);                     // 0x044C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastDistanceFieldIndirectShadow                           = new ExternalOffset<char>(0x044C, false);                     // 0x044C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideDistanceFieldSelfShadowBias                       = new ExternalOffset<char>(0x044D, false);                     // 0x044D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseSubDivisions                                           = new ExternalOffset<char>(0x044D, false);                     // 0x044D(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseDefaultCollision                                       = new ExternalOffset<char>(0x044D, false);                     // 0x044D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReverseCulling                                            = new ExternalOffset<char>(0x044D, false);                     // 0x044D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offOverriddenLightMapRes                                      = new ExternalOffset<int>(0x0450);                             // 0x0450(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceFieldIndirectShadowMinVisibility                   = new ExternalOffset<float>(0x0454);                           // 0x0454(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceFieldSelfShadowBias                                = new ExternalOffset<float>(0x0458);                           // 0x0458(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStreamingDistanceMultiplier                                = new ExternalOffset<float>(0x045C);                           // 0x045C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStaticMeshComponentLODInfo>> _offLODData                                                    = new ExternalOffset<TArray<FStaticMeshComponentLODInfo>>(0x0460, false); // 0x0460(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStreamingTextureBuildInfo>> _offStreamingTextureData                                       = new ExternalOffset<TArray<FStreamingTextureBuildInfo>>(0x0470, false); // 0x0470(0x0010) (ZeroConstructor, NonTransactional, NativeAccessSpecifierPublic)
	private ExternalOffset<FLightmassPrimitiveSettings>       _offLightmassSettings                                          = new ExternalOffset<FLightmassPrimitiveSettings>(0x0480, false); // 0x0480(0x0018) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                ForcedLodModel                                                 => _offForcedLodModel.GetValue();
	public int                                                PreviousLODLevel                                               => _offPreviousLODLevel.GetValue();
	public int                                                MinLOD                                                         => _offMinLOD.GetValue();
	public int                                                SubDivisionStepSize                                            => _offSubDivisionStepSize.GetValue();
	public UStaticMesh                                        StaticMesh                                                     => _offStaticMesh.GetValue();
	public FColor                                             WireframeColorOverride                                         => _offWireframeColorOverride.GetValue();
	public int                                                OverriddenLightMapRes                                          => _offOverriddenLightMapRes.GetValue();
	public float                                              DistanceFieldIndirectShadowMinVisibility                       => _offDistanceFieldIndirectShadowMinVisibility.GetValue();
	public float                                              DistanceFieldSelfShadowBias                                    => _offDistanceFieldSelfShadowBias.GetValue();
	public float                                              StreamingDistanceMultiplier                                    => _offStreamingDistanceMultiplier.GetValue();
	public TArray<FStaticMeshComponentLODInfo>                LODData                                                        => _offLODData.GetValue();
	public TArray<FStreamingTextureBuildInfo>                 StreamingTextureData                                           => _offStreamingTextureData.GetValue();
	public FLightmassPrimitiveSettings                        LightmassSettings                                              => _offLightmassSettings.GetValue();
	#endregion


}

// Class Engine.GameStateBase
// 0x0038 (0x0280 - 0x0248)
public class AGameStateBase : AInfo
{
	#region Offsets
	private ExternalOffset<UClass>                            _offGameModeClass                                              = new ExternalOffset<UClass>(0x0248, true);                    // 0x0248(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AGameModeBase>                     _offAuthorityGameMode                                          = new ExternalOffset<AGameModeBase>(0x0250, true);             // 0x0250(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offSpectatorClass                                             = new ExternalOffset<UClass>(0x0258, true);                    // 0x0258(0x0008) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<APlayerState>>              _offPlayerArray                                                = new ExternalOffset<TArray<APlayerState>>(0x0260, false);     // 0x0260(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbReplicatedHasBegunPlay                                    = new ExternalOffset<byte/*(bool)*/>(0x0270);                  // 0x0270(0x0001) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offReplicatedWorldTimeSeconds                                 = new ExternalOffset<float>(0x0274);                           // 0x0274(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offServerWorldTimeSecondsDelta                                = new ExternalOffset<float>(0x0278);                           // 0x0278(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offServerWorldTimeSecondsUpdateFrequency                      = new ExternalOffset<float>(0x027C);                           // 0x027C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UClass                                             GameModeClass                                                  => _offGameModeClass.GetValue();
	public AGameModeBase                                      AuthorityGameMode                                              => _offAuthorityGameMode.GetValue();
	public UClass                                             SpectatorClass                                                 => _offSpectatorClass.GetValue();
	public TArray<APlayerState>                               PlayerArray                                                    => _offPlayerArray.GetValue();
	public byte/*(bool)*/                                     bReplicatedHasBegunPlay                                        => _offbReplicatedHasBegunPlay.GetValue();
	public float                                              ReplicatedWorldTimeSeconds                                     => _offReplicatedWorldTimeSeconds.GetValue();
	public float                                              ServerWorldTimeSecondsDelta                                    => _offServerWorldTimeSecondsDelta.GetValue();
	public float                                              ServerWorldTimeSecondsUpdateFrequency                          => _offServerWorldTimeSecondsUpdateFrequency.GetValue();
	#endregion


}

// Class Engine.GameState
// 0x001C (0x029C - 0x0280)
public class AGameState : AGameStateBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offMatchState                                                 = new ExternalOffset<FName>(0x0288, false);                    // 0x0288(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FName>                             _offPreviousMatchState                                         = new ExternalOffset<FName>(0x0290, false);                    // 0x0290(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offElapsedTime                                                = new ExternalOffset<int>(0x0298);                             // 0x0298(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              MatchState                                                     => _offMatchState.GetValue();
	public FName                                              PreviousMatchState                                             => _offPreviousMatchState.GetValue();
	public int                                                ElapsedTime                                                    => _offElapsedTime.GetValue();
	#endregion


}

// Class Engine.GameEngine
// 0x01A4 (0x0DC8 - 0x0C24)
public class UGameEngine : UEngine
{
	#region Offsets
	private ExternalOffset<float>                             _offMaxDeltaTime                                               = new ExternalOffset<float>(0x0DB8);                           // 0x0DB8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offServerFlushLogInterval                                     = new ExternalOffset<float>(0x0DBC);                           // 0x0DBC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UGameInstance>                     _offGameInstance                                               = new ExternalOffset<UGameInstance>(0x0DC0, true);             // 0x0DC0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              MaxDeltaTime                                                   => _offMaxDeltaTime.GetValue();
	public float                                              ServerFlushLogInterval                                         => _offServerFlushLogInterval.GetValue();
	public UGameInstance                                      GameInstance                                                   => _offGameInstance.GetValue();
	#endregion


}

// Class Engine.GameModeBase
// 0x00D9 (0x0321 - 0x0248)
public class AGameModeBase : AInfo
{
	#region Offsets
	private ExternalOffset<FString>                           _offOptionsString                                              = new ExternalOffset<FString>(0x0248, false);                  // 0x0248(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offGameSessionClass                                           = new ExternalOffset<UClass>(0x0258, true);                    // 0x0258(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offGameStateClass                                             = new ExternalOffset<UClass>(0x0260, true);                    // 0x0260(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offPlayerControllerClass                                      = new ExternalOffset<UClass>(0x0268, true);                    // 0x0268(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offPlayerStateClass                                           = new ExternalOffset<UClass>(0x0270, true);                    // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offHUDClass                                                   = new ExternalOffset<UClass>(0x0278, true);                    // 0x0278(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offDefaultPawnClass                                           = new ExternalOffset<UClass>(0x0280, true);                    // 0x0280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offSpectatorClass                                             = new ExternalOffset<UClass>(0x0288, true);                    // 0x0288(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offReplaySpectatorPlayerControllerClass                       = new ExternalOffset<UClass>(0x0290, true);                    // 0x0290(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offServerStatReplicatorClass                                  = new ExternalOffset<UClass>(0x0298, true);                    // 0x0298(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AGameSession>                      _offGameSession                                                = new ExternalOffset<AGameSession>(0x02A0, true);              // 0x02A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AGameStateBase>                    _offGameState                                                  = new ExternalOffset<AGameStateBase>(0x02A8, true);            // 0x02A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AServerStatReplicator>             _offServerStatReplicator                                       = new ExternalOffset<AServerStatReplicator>(0x02B0, true);     // 0x02B0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FText>                             _offDefaultPlayerName                                          = new ExternalOffset<FText>(0x0308, false);                    // 0x0308(0x0018) (Edit, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseSeamlessTravel                                         = new ExternalOffset<char>(0x0320, false);                     // 0x0320(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStartPlayersAsSpectators                                  = new ExternalOffset<char>(0x0320, false);                     // 0x0320(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbPauseable                                                 = new ExternalOffset<char>(0x0320, false);                     // 0x0320(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FString                                            OptionsString                                                  => _offOptionsString.GetValue();
	public UClass                                             GameSessionClass                                               => _offGameSessionClass.GetValue();
	public UClass                                             GameStateClass                                                 => _offGameStateClass.GetValue();
	public UClass                                             PlayerControllerClass                                          => _offPlayerControllerClass.GetValue();
	public UClass                                             PlayerStateClass                                               => _offPlayerStateClass.GetValue();
	public UClass                                             HUDClass                                                       => _offHUDClass.GetValue();
	public UClass                                             DefaultPawnClass                                               => _offDefaultPawnClass.GetValue();
	public UClass                                             SpectatorClass                                                 => _offSpectatorClass.GetValue();
	public UClass                                             ReplaySpectatorPlayerControllerClass                           => _offReplaySpectatorPlayerControllerClass.GetValue();
	public UClass                                             ServerStatReplicatorClass                                      => _offServerStatReplicatorClass.GetValue();
	public AGameSession                                       GameSession                                                    => _offGameSession.GetValue();
	public AGameStateBase                                     GameState                                                      => _offGameState.GetValue();
	public AServerStatReplicator                              ServerStatReplicator                                           => _offServerStatReplicator.GetValue();
	public FText                                              DefaultPlayerName                                              => _offDefaultPlayerName.GetValue();
	#endregion


}

// Class Engine.GameMode
// 0x0068 (0x0389 - 0x0321)
public class AGameMode : AGameModeBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offMatchState                                                 = new ExternalOffset<FName>(0x0340, false);                    // 0x0340(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbDelayedStart                                              = new ExternalOffset<char>(0x0348, false);                     // 0x0348(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumSpectators                                              = new ExternalOffset<int>(0x034C);                             // 0x034C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumPlayers                                                 = new ExternalOffset<int>(0x0350);                             // 0x0350(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumBots                                                    = new ExternalOffset<int>(0x0354);                             // 0x0354(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinRespawnDelay                                            = new ExternalOffset<float>(0x0358);                           // 0x0358(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumTravellingPlayers                                       = new ExternalOffset<int>(0x035C);                             // 0x035C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offEngineMessageClass                                         = new ExternalOffset<UClass>(0x0368, true);                    // 0x0368(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<APlayerState>>              _offInactivePlayerArray                                        = new ExternalOffset<TArray<APlayerState>>(0x0370, false);     // 0x0370(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInactivePlayerStateLifeSpan                                = new ExternalOffset<float>(0x0380);                           // 0x0380(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offMaxInactivePlayers                                         = new ExternalOffset<int>(0x0384);                             // 0x0384(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbHandleDedicatedServerReplays                              = new ExternalOffset<byte/*(bool)*/>(0x0388);                  // 0x0388(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FName                                              MatchState                                                     => _offMatchState.GetValue();
	public int                                                NumSpectators                                                  => _offNumSpectators.GetValue();
	public int                                                NumPlayers                                                     => _offNumPlayers.GetValue();
	public int                                                NumBots                                                        => _offNumBots.GetValue();
	public float                                              MinRespawnDelay                                                => _offMinRespawnDelay.GetValue();
	public int                                                NumTravellingPlayers                                           => _offNumTravellingPlayers.GetValue();
	public UClass                                             EngineMessageClass                                             => _offEngineMessageClass.GetValue();
	public TArray<APlayerState>                               InactivePlayerArray                                            => _offInactivePlayerArray.GetValue();
	public float                                              InactivePlayerStateLifeSpan                                    => _offInactivePlayerStateLifeSpan.GetValue();
	public int                                                MaxInactivePlayers                                             => _offMaxInactivePlayers.GetValue();
	public byte/*(bool)*/                                     bHandleDedicatedServerReplays                                  => _offbHandleDedicatedServerReplays.GetValue();
	#endregion


}

// Class Engine.NavigationObjectBase
// 0x0031 (0x0269 - 0x0238)
public class ANavigationObjectBase : AActor
{
	#region Offsets
	private ExternalOffset<UCapsuleComponent>                 _offCapsuleComponent                                           = new ExternalOffset<UCapsuleComponent>(0x0250, true);         // 0x0250(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UBillboardComponent>               _offGoodSprite                                                 = new ExternalOffset<UBillboardComponent>(0x0258, true);       // 0x0258(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UBillboardComponent>               _offBadSprite                                                  = new ExternalOffset<UBillboardComponent>(0x0260, true);       // 0x0260(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbIsPIEPlayerStart                                          = new ExternalOffset<char>(0x0268, false);                     // 0x0268(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCapsuleComponent                                  CapsuleComponent                                               => _offCapsuleComponent.GetValue();
	public UBillboardComponent                                GoodSprite                                                     => _offGoodSprite.GetValue();
	public UBillboardComponent                                BadSprite                                                      => _offBadSprite.GetValue();
	#endregion


}

// Class Engine.PlayerStart
// 0x000F (0x0278 - 0x0269)
public class APlayerStart : ANavigationObjectBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offPlayerStartTag                                             = new ExternalOffset<FName>(0x0270, false);                    // 0x0270(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              PlayerStartTag                                                 => _offPlayerStartTag.GetValue();
	#endregion


}

// Class Engine.GameSession
// 0x0018 (0x0260 - 0x0248)
public class AGameSession : AInfo
{
	#region Offsets
	private ExternalOffset<int>                               _offMaxSpectators                                              = new ExternalOffset<int>(0x0248);                             // 0x0248(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxPlayers                                                 = new ExternalOffset<int>(0x024C);                             // 0x024C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxPartySize                                               = new ExternalOffset<int>(0x0250);                             // 0x0250(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offMaxSplitscreensPerConnection                               = new ExternalOffset<char>(0x0254, false);                     // 0x0254(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbRequiresPushToTalk                                        = new ExternalOffset<byte/*(bool)*/>(0x0255);                  // 0x0255(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offSessionName                                                = new ExternalOffset<FName>(0x0258, false);                    // 0x0258(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                MaxSpectators                                                  => _offMaxSpectators.GetValue();
	public int                                                MaxPlayers                                                     => _offMaxPlayers.GetValue();
	public int                                                MaxPartySize                                                   => _offMaxPartySize.GetValue();
	public byte/*(bool)*/                                     bRequiresPushToTalk                                            => _offbRequiresPushToTalk.GetValue();
	public FName                                              SessionName                                                    => _offSessionName.GetValue();
	#endregion


}

// Class Engine.GameUserSettings
// 0x00F0 (0x0118 - 0x0028)
public class UGameUserSettings : UObject
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                    _offbUseVSync                                                  = new ExternalOffset<byte/*(bool)*/>(0x0028);                  // 0x0028(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseDynamicResolution                                      = new ExternalOffset<byte/*(bool)*/>(0x0029);                  // 0x0029(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offResolutionSizeX                                            = new ExternalOffset<uint>(0x0078);                            // 0x0078(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<uint>                              _offResolutionSizeY                                            = new ExternalOffset<uint>(0x007C);                            // 0x007C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<uint>                              _offLastUserConfirmedResolutionSizeX                           = new ExternalOffset<uint>(0x0080);                            // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<uint>                              _offLastUserConfirmedResolutionSizeY                           = new ExternalOffset<uint>(0x0084);                            // 0x0084(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offWindowPosX                                                 = new ExternalOffset<int>(0x0088);                             // 0x0088(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offWindowPosY                                                 = new ExternalOffset<int>(0x008C);                             // 0x008C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offFullscreenMode                                             = new ExternalOffset<int>(0x0090);                             // 0x0090(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offLastConfirmedFullscreenMode                                = new ExternalOffset<int>(0x0094);                             // 0x0094(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offPreferredFullscreenMode                                    = new ExternalOffset<int>(0x0098);                             // 0x0098(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<uint>                              _offVersion                                                    = new ExternalOffset<uint>(0x009C);                            // 0x009C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offAudioQualityLevel                                          = new ExternalOffset<int>(0x00A0);                             // 0x00A0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offLastConfirmedAudioQualityLevel                             = new ExternalOffset<int>(0x00A4);                             // 0x00A4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offFrameRateLimit                                             = new ExternalOffset<float>(0x00A8);                           // 0x00A8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offDesiredScreenWidth                                         = new ExternalOffset<int>(0x00B0);                             // 0x00B0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseDesiredScreenHeight                                    = new ExternalOffset<byte/*(bool)*/>(0x00B4);                  // 0x00B4(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offDesiredScreenHeight                                        = new ExternalOffset<int>(0x00B8);                             // 0x00B8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offLastUserConfirmedDesiredScreenWidth                        = new ExternalOffset<int>(0x00BC);                             // 0x00BC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offLastUserConfirmedDesiredScreenHeight                       = new ExternalOffset<int>(0x00C0);                             // 0x00C0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offLastRecommendedScreenWidth                                 = new ExternalOffset<float>(0x00C4);                           // 0x00C4(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offLastRecommendedScreenHeight                                = new ExternalOffset<float>(0x00C8);                           // 0x00C8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offLastCPUBenchmarkResult                                     = new ExternalOffset<float>(0x00CC);                           // 0x00CC(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offLastGPUBenchmarkResult                                     = new ExternalOffset<float>(0x00D0);                           // 0x00D0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<float>>                     _offLastCPUBenchmarkSteps                                      = new ExternalOffset<TArray<float>>(0x00D8, false);            // 0x00D8(0x0010) (ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<float>>                     _offLastGPUBenchmarkSteps                                      = new ExternalOffset<TArray<float>>(0x00E8, false);            // 0x00E8(0x0010) (ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offLastGPUBenchmarkMultiplier                                 = new ExternalOffset<float>(0x00F8);                           // 0x00F8(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseHDRDisplayOutput                                       = new ExternalOffset<byte/*(bool)*/>(0x00FC);                  // 0x00FC(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offHDRDisplayOutputNits                                       = new ExternalOffset<int>(0x0100);                             // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnGameUserSettingsUINeedsUpdate                            = new ExternalOffset<FScriptMulticastDelegate>(0x0108, false); // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public byte/*(bool)*/                                     bUseVSync                                                      => _offbUseVSync.GetValue();
	public byte/*(bool)*/                                     bUseDynamicResolution                                          => _offbUseDynamicResolution.GetValue();
	public uint                                               ResolutionSizeX                                                => _offResolutionSizeX.GetValue();
	public uint                                               ResolutionSizeY                                                => _offResolutionSizeY.GetValue();
	public uint                                               LastUserConfirmedResolutionSizeX                               => _offLastUserConfirmedResolutionSizeX.GetValue();
	public uint                                               LastUserConfirmedResolutionSizeY                               => _offLastUserConfirmedResolutionSizeY.GetValue();
	public int                                                WindowPosX                                                     => _offWindowPosX.GetValue();
	public int                                                WindowPosY                                                     => _offWindowPosY.GetValue();
	public int                                                FullscreenMode                                                 => _offFullscreenMode.GetValue();
	public int                                                LastConfirmedFullscreenMode                                    => _offLastConfirmedFullscreenMode.GetValue();
	public int                                                PreferredFullscreenMode                                        => _offPreferredFullscreenMode.GetValue();
	public uint                                               Version                                                        => _offVersion.GetValue();
	public int                                                AudioQualityLevel                                              => _offAudioQualityLevel.GetValue();
	public int                                                LastConfirmedAudioQualityLevel                                 => _offLastConfirmedAudioQualityLevel.GetValue();
	public float                                              FrameRateLimit                                                 => _offFrameRateLimit.GetValue();
	public int                                                DesiredScreenWidth                                             => _offDesiredScreenWidth.GetValue();
	public byte/*(bool)*/                                     bUseDesiredScreenHeight                                        => _offbUseDesiredScreenHeight.GetValue();
	public int                                                DesiredScreenHeight                                            => _offDesiredScreenHeight.GetValue();
	public int                                                LastUserConfirmedDesiredScreenWidth                            => _offLastUserConfirmedDesiredScreenWidth.GetValue();
	public int                                                LastUserConfirmedDesiredScreenHeight                           => _offLastUserConfirmedDesiredScreenHeight.GetValue();
	public float                                              LastRecommendedScreenWidth                                     => _offLastRecommendedScreenWidth.GetValue();
	public float                                              LastRecommendedScreenHeight                                    => _offLastRecommendedScreenHeight.GetValue();
	public float                                              LastCPUBenchmarkResult                                         => _offLastCPUBenchmarkResult.GetValue();
	public float                                              LastGPUBenchmarkResult                                         => _offLastGPUBenchmarkResult.GetValue();
	public TArray<float>                                      LastCPUBenchmarkSteps                                          => _offLastCPUBenchmarkSteps.GetValue();
	public TArray<float>                                      LastGPUBenchmarkSteps                                          => _offLastGPUBenchmarkSteps.GetValue();
	public float                                              LastGPUBenchmarkMultiplier                                     => _offLastGPUBenchmarkMultiplier.GetValue();
	public byte/*(bool)*/                                     bUseHDRDisplayOutput                                           => _offbUseHDRDisplayOutput.GetValue();
	public int                                                HDRDisplayOutputNits                                           => _offHDRDisplayOutputNits.GetValue();
	public FScriptMulticastDelegate                           OnGameUserSettingsUINeedsUpdate                                => _offOnGameUserSettingsUINeedsUpdate.GetValue();
	#endregion


}

// Class Engine.HUD
// 0x0090 (0x02C8 - 0x0238)
public class AHUD : AActor
{
	#region Offsets
	private ExternalOffset<APlayerController>                 _offPlayerOwner                                                = new ExternalOffset<APlayerController>(0x0248, true);         // 0x0248(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLostFocusPaused                                           = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowHUD                                                   = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowDebugInfo                                             = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offCurrentTargetIndex                                         = new ExternalOffset<int>(0x0254);                             // 0x0254(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowHitBoxDebugInfo                                       = new ExternalOffset<char>(0x0258, false);                     // 0x0258(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowOverlays                                              = new ExternalOffset<char>(0x0258, false);                     // 0x0258(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableDebugTextShadow                                     = new ExternalOffset<char>(0x0258, false);                     // 0x0258(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offPostRenderedActors                                         = new ExternalOffset<TArray<AActor>>(0x0260, false);           // 0x0260(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offDebugDisplay                                               = new ExternalOffset<TArray<FName>>(0x0278, false);            // 0x0278(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offToggledDebugCategories                                     = new ExternalOffset<TArray<FName>>(0x0288, false);            // 0x0288(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPublic)
	private ExternalOffset<UCanvas>                           _offCanvas                                                     = new ExternalOffset<UCanvas>(0x0298, true);                   // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<UCanvas>                           _offDebugCanvas                                                = new ExternalOffset<UCanvas>(0x02A0, true);                   // 0x02A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FDebugTextInfo>>            _offDebugTextList                                              = new ExternalOffset<TArray<FDebugTextInfo>>(0x02A8, false);   // 0x02A8(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<UClass>                            _offShowDebugTargetDesiredClass                                = new ExternalOffset<UClass>(0x02B8, true);                    // 0x02B8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<AActor>                            _offShowDebugTargetActor                                       = new ExternalOffset<AActor>(0x02C0, true);                    // 0x02C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public APlayerController                                  PlayerOwner                                                    => _offPlayerOwner.GetValue();
	public int                                                CurrentTargetIndex                                             => _offCurrentTargetIndex.GetValue();
	public TArray<AActor>                                     PostRenderedActors                                             => _offPostRenderedActors.GetValue();
	public TArray<FName>                                      DebugDisplay                                                   => _offDebugDisplay.GetValue();
	public TArray<FName>                                      ToggledDebugCategories                                         => _offToggledDebugCategories.GetValue();
	public UCanvas                                            Canvas                                                         => _offCanvas.GetValue();
	public UCanvas                                            DebugCanvas                                                    => _offDebugCanvas.GetValue();
	public TArray<FDebugTextInfo>                             DebugTextList                                                  => _offDebugTextList.GetValue();
	public UClass                                             ShowDebugTargetDesiredClass                                    => _offShowDebugTargetDesiredClass.GetValue();
	public AActor                                             ShowDebugTargetActor                                           => _offShowDebugTargetActor.GetValue();
	#endregion


}

// Class Engine.InputComponent
// 0x0090 (0x0158 - 0x00C8)
public class UInputComponent : UActorComponent
{
	#region Offsets
	private ExternalOffset<TArray<FCachedKeyToActionInfo>>    _offCachedKeyToActionInfo                                      = new ExternalOffset<TArray<FCachedKeyToActionInfo>>(0x0148, false); // 0x0148(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FCachedKeyToActionInfo>                     CachedKeyToActionInfo                                          => _offCachedKeyToActionInfo.GetValue();
	#endregion


}

// Class Engine.Player
// 0x001C (0x0044 - 0x0028)
public class UPlayer : UObject
{
	#region Offsets
	private ExternalOffset<APlayerController>                 _offPlayerController                                           = new ExternalOffset<APlayerController>(0x0030, true);         // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offCurrentNetSpeed                                            = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offConfiguredInternetSpeed                                    = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offConfiguredLanSpeed                                         = new ExternalOffset<int>(0x0040);                             // 0x0040(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public APlayerController                                  PlayerController                                               => _offPlayerController.GetValue();
	public int                                                CurrentNetSpeed                                                => _offCurrentNetSpeed.GetValue();
	public int                                                ConfiguredInternetSpeed                                        => _offConfiguredInternetSpeed.GetValue();
	public int                                                ConfiguredLanSpeed                                             => _offConfiguredLanSpeed.GetValue();
	#endregion


}

// Class Engine.LocalPlayer
// 0x00A0 (0x00E4 - 0x0044)
public class ULocalPlayer : UPlayer
{
	#region Offsets
	private ExternalOffset<UGameViewportClient>               _offViewportClient                                             = new ExternalOffset<UGameViewportClient>(0x0070, true);       // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAspectRatioAxisConstraint>> _offAspectRatioAxisConstraint                                  = new ExternalOffset<TEnumAsByte<EAspectRatioAxisConstraint>>(0x0094, false); // 0x0094(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offPendingLevelPlayerControllerClass                          = new ExternalOffset<UClass>(0x0098, true);                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSentSplitJoin                                             = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offControllerId                                               = new ExternalOffset<int>(0x00E0);                             // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UGameViewportClient                                ViewportClient                                                 => _offViewportClient.GetValue();
	public TEnumAsByte<EAspectRatioAxisConstraint>            AspectRatioAxisConstraint                                      => _offAspectRatioAxisConstraint.GetValue();
	public UClass                                             PendingLevelPlayerControllerClass                              => _offPendingLevelPlayerControllerClass.GetValue();
	public int                                                ControllerId                                                   => _offControllerId.GetValue();
	#endregion


}

// Class Engine.PrimaryDataAsset
// 0x0000 (0x0030 - 0x0030)
public class UPrimaryDataAsset : UDataAsset
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ShapeComponent
// 0x001B (0x0420 - 0x0405)
public class UShapeComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<UBodySetup>                        _offShapeBodySetup                                             = new ExternalOffset<UBodySetup>(0x0408, true);                // 0x0408(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offShapeColor                                                 = new ExternalOffset<FColor>(0x0410, false);                   // 0x0410(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDrawOnlyIfSelected                                        = new ExternalOffset<char>(0x0414, false);                     // 0x0414(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldCollideWhenPlacing                                  = new ExternalOffset<char>(0x0414, false);                     // 0x0414(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDynamicObstacle                                           = new ExternalOffset<char>(0x0414, false);                     // 0x0414(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offAreaClass                                                  = new ExternalOffset<UClass>(0x0418, true);                    // 0x0418(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UBodySetup                                         ShapeBodySetup                                                 => _offShapeBodySetup.GetValue();
	public FColor                                             ShapeColor                                                     => _offShapeColor.GetValue();
	public UClass                                             AreaClass                                                      => _offAreaClass.GetValue();
	#endregion


}

// Class Engine.BoxComponent
// 0x0010 (0x0430 - 0x0420)
public class UBoxComponent : UShapeComponent
{
	#region Offsets
	private ExternalOffset<FVector>                           _offBoxExtent                                                  = new ExternalOffset<FVector>(0x0420, false);                  // 0x0420(0x000C) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offLineThickness                                              = new ExternalOffset<float>(0x042C);                           // 0x042C(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FVector                                            BoxExtent                                                      => _offBoxExtent.GetValue();
	public float                                              LineThickness                                                  => _offLineThickness.GetValue();
	#endregion


}

// Class Engine.TriggerBase
// 0x0018 (0x0250 - 0x0238)
public class ATriggerBase : AActor
{
	#region Offsets
	private ExternalOffset<UShapeComponent>                   _offCollisionComponent                                         = new ExternalOffset<UShapeComponent>(0x0248, true);           // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UShapeComponent                                    CollisionComponent                                             => _offCollisionComponent.GetValue();
	#endregion


}

// Class Engine.TriggerBox
// 0x0000 (0x0250 - 0x0250)
public class ATriggerBox : ATriggerBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PhysicalMaterial
// 0x0040 (0x0068 - 0x0028)
public class UPhysicalMaterial : UObject
{
	#region Offsets
	private ExternalOffset<float>                             _offFriction                                                   = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EFrictionCombineMode>> _offFrictionCombineMode                                        = new ExternalOffset<TEnumAsByte<EFrictionCombineMode>>(0x002C, false); // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbOverrideFrictionCombineMode                               = new ExternalOffset<byte/*(bool)*/>(0x002D);                  // 0x002D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRestitution                                                = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EFrictionCombineMode>> _offRestitutionCombineMode                                     = new ExternalOffset<TEnumAsByte<EFrictionCombineMode>>(0x0034, false); // 0x0034(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbOverrideRestitutionCombineMode                            = new ExternalOffset<byte/*(bool)*/>(0x0035);                  // 0x0035(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDensity                                                    = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRaiseMassToPower                                           = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDestructibleDamageThresholdScale                           = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPhysicalMaterialPropertyBase>     _offPhysicalMaterialProperty                                   = new ExternalOffset<UPhysicalMaterialPropertyBase>(0x0048, true); // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EPhysicalSurface>>     _offSurfaceType                                                = new ExternalOffset<TEnumAsByte<EPhysicalSurface>>(0x0050, false); // 0x0050(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTireFrictionScale                                          = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FTireFrictionScalePair>>    _offTireFrictionScales                                         = new ExternalOffset<TArray<FTireFrictionScalePair>>(0x0058, false); // 0x0058(0x0010) (Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Friction                                                       => _offFriction.GetValue();
	public TEnumAsByte<EFrictionCombineMode>                  FrictionCombineMode                                            => _offFrictionCombineMode.GetValue();
	public byte/*(bool)*/                                     bOverrideFrictionCombineMode                                   => _offbOverrideFrictionCombineMode.GetValue();
	public float                                              Restitution                                                    => _offRestitution.GetValue();
	public TEnumAsByte<EFrictionCombineMode>                  RestitutionCombineMode                                         => _offRestitutionCombineMode.GetValue();
	public byte/*(bool)*/                                     bOverrideRestitutionCombineMode                                => _offbOverrideRestitutionCombineMode.GetValue();
	public float                                              Density                                                        => _offDensity.GetValue();
	public float                                              RaiseMassToPower                                               => _offRaiseMassToPower.GetValue();
	public float                                              DestructibleDamageThresholdScale                               => _offDestructibleDamageThresholdScale.GetValue();
	public UPhysicalMaterialPropertyBase                      PhysicalMaterialProperty                                       => _offPhysicalMaterialProperty.GetValue();
	public TEnumAsByte<EPhysicalSurface>                      SurfaceType                                                    => _offSurfaceType.GetValue();
	public float                                              TireFrictionScale                                              => _offTireFrictionScale.GetValue();
	public TArray<FTireFrictionScalePair>                     TireFrictionScales                                             => _offTireFrictionScales.GetValue();
	#endregion


}

// Class Engine.PhysicsVolume
// 0x000D (0x028D - 0x0280)
public class APhysicsVolume : AVolume
{
	#region Offsets
	private ExternalOffset<float>                             _offTerminalVelocity                                           = new ExternalOffset<float>(0x0280);                           // 0x0280(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPriority                                                   = new ExternalOffset<int>(0x0284);                             // 0x0284(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFluidFriction                                              = new ExternalOffset<float>(0x0288);                           // 0x0288(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbWaterVolume                                               = new ExternalOffset<char>(0x028C, false);                     // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPhysicsOnContact                                          = new ExternalOffset<char>(0x028C, false);                     // 0x028C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              TerminalVelocity                                               => _offTerminalVelocity.GetValue();
	public int                                                Priority                                                       => _offPriority.GetValue();
	public float                                              FluidFriction                                                  => _offFluidFriction.GetValue();
	#endregion


}

// Class Engine.PlayerCameraManager
// 0x24BC (0x26F4 - 0x0238)
public class APlayerCameraManager : AActor
{
	#region Offsets
	private ExternalOffset<APlayerController>                 _offPCOwner                                                    = new ExternalOffset<APlayerController>(0x0248, true);         // 0x0248(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USceneComponent>                   _offTransformComponent                                         = new ExternalOffset<USceneComponent>(0x0250, true);           // 0x0250(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offDefaultFOV                                                 = new ExternalOffset<float>(0x0260);                           // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDefaultOrthoWidth                                          = new ExternalOffset<float>(0x0268);                           // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDefaultAspectRatio                                         = new ExternalOffset<float>(0x0270);                           // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FCameraCacheEntry>                 _offCameraCache                                                = new ExternalOffset<FCameraCacheEntry>(0x02C0, false);        // 0x02C0(0x05D0) (Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<FCameraCacheEntry>                 _offLastFrameCameraCache                                       = new ExternalOffset<FCameraCacheEntry>(0x0890, false);        // 0x0890(0x05D0) (Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<FTViewTarget>                      _offViewTarget                                                 = new ExternalOffset<FTViewTarget>(0x0E60, false);             // 0x0E60(0x05E0) (Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<FTViewTarget>                      _offPendingViewTarget                                          = new ExternalOffset<FTViewTarget>(0x1440, false);             // 0x1440(0x05E0) (Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<FCameraCacheEntry>                 _offCameraCachePrivate                                         = new ExternalOffset<FCameraCacheEntry>(0x1A40, false);        // 0x1A40(0x05D0) (Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<FCameraCacheEntry>                 _offLastFrameCameraCachePrivate                                = new ExternalOffset<FCameraCacheEntry>(0x2010, false);        // 0x2010(0x05D0) (Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UCameraModifier>>           _offModifierList                                               = new ExternalOffset<TArray<UCameraModifier>>(0x25E0, false);  // 0x25E0(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UClass>>                    _offDefaultModifiers                                           = new ExternalOffset<TArray<UClass>>(0x25F0, false);           // 0x25F0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFreeCamDistance                                            = new ExternalOffset<float>(0x2600);                           // 0x2600(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offFreeCamOffset                                              = new ExternalOffset<FVector>(0x2604, false);                  // 0x2604(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offViewTargetOffset                                           = new ExternalOffset<FVector>(0x2610, false);                  // 0x2610(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AEmitterCameraLensEffectBase>> _offCameraLensEffects                                          = new ExternalOffset<TArray<AEmitterCameraLensEffectBase>>(0x2630, false); // 0x2630(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<UCameraModifier_CameraShake>       _offCachedCameraShakeMod                                       = new ExternalOffset<UCameraModifier_CameraShake>(0x2640, true); // 0x2640(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<UCameraAnimInst>                   _offAnimInstPool[0x8]                                          = new ExternalOffset<UCameraAnimInst>(0x2648, true);           // 0x2648(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FPostProcessSettings>>      _offPostProcessBlendCache                                      = new ExternalOffset<TArray<FPostProcessSettings>>(0x2688, false); // 0x2688(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UCameraAnimInst>>           _offActiveAnims                                                = new ExternalOffset<TArray<UCameraAnimInst>>(0x26A8, false);  // 0x26A8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UCameraAnimInst>>           _offFreeAnims                                                  = new ExternalOffset<TArray<UCameraAnimInst>>(0x26B8, false);  // 0x26B8(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<ACameraActor>                      _offAnimCameraActor                                            = new ExternalOffset<ACameraActor>(0x26C8, true);              // 0x26C8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbIsOrthographic                                            = new ExternalOffset<char>(0x26D0, false);                     // 0x26D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDefaultConstrainAspectRatio                               = new ExternalOffset<char>(0x26D0, false);                     // 0x26D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClientSimulatingViewTarget                                = new ExternalOffset<char>(0x26D0, false);                     // 0x26D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseClientSideCameraUpdates                                = new ExternalOffset<char>(0x26D0, false);                     // 0x26D0(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGameCameraCutThisFrame                                    = new ExternalOffset<char>(0x26D1, false);                     // 0x26D1(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offViewPitchMin                                               = new ExternalOffset<float>(0x26D4);                           // 0x26D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offViewPitchMax                                               = new ExternalOffset<float>(0x26D8);                           // 0x26D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offViewYawMin                                                 = new ExternalOffset<float>(0x26DC);                           // 0x26DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offViewYawMax                                                 = new ExternalOffset<float>(0x26E0);                           // 0x26E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offViewRollMin                                                = new ExternalOffset<float>(0x26E4);                           // 0x26E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offViewRollMax                                                = new ExternalOffset<float>(0x26E8);                           // 0x26E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offServerUpdateCameraTimeout                                  = new ExternalOffset<float>(0x26F0);                           // 0x26F0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public APlayerController                                  PCOwner                                                        => _offPCOwner.GetValue();
	public USceneComponent                                    TransformComponent                                             => _offTransformComponent.GetValue();
	public float                                              DefaultFOV                                                     => _offDefaultFOV.GetValue();
	public float                                              DefaultOrthoWidth                                              => _offDefaultOrthoWidth.GetValue();
	public float                                              DefaultAspectRatio                                             => _offDefaultAspectRatio.GetValue();
	public FCameraCacheEntry                                  CameraCache                                                    => _offCameraCache.GetValue();
	public FCameraCacheEntry                                  LastFrameCameraCache                                           => _offLastFrameCameraCache.GetValue();
	public FTViewTarget                                       ViewTarget                                                     => _offViewTarget.GetValue();
	public FTViewTarget                                       PendingViewTarget                                              => _offPendingViewTarget.GetValue();
	public FCameraCacheEntry                                  CameraCachePrivate                                             => _offCameraCachePrivate.GetValue();
	public FCameraCacheEntry                                  LastFrameCameraCachePrivate                                    => _offLastFrameCameraCachePrivate.GetValue();
	public TArray<UCameraModifier>                            ModifierList                                                   => _offModifierList.GetValue();
	public TArray<UClass>                                     DefaultModifiers                                               => _offDefaultModifiers.GetValue();
	public float                                              FreeCamDistance                                                => _offFreeCamDistance.GetValue();
	public FVector                                            FreeCamOffset                                                  => _offFreeCamOffset.GetValue();
	public FVector                                            ViewTargetOffset                                               => _offViewTargetOffset.GetValue();
	public TArray<AEmitterCameraLensEffectBase>               CameraLensEffects                                              => _offCameraLensEffects.GetValue();
	public UCameraModifier_CameraShake                        CachedCameraShakeMod                                           => _offCachedCameraShakeMod.GetValue();
	public TArray<FPostProcessSettings>                       PostProcessBlendCache                                          => _offPostProcessBlendCache.GetValue();
	public TArray<UCameraAnimInst>                            ActiveAnims                                                    => _offActiveAnims.GetValue();
	public TArray<UCameraAnimInst>                            FreeAnims                                                      => _offFreeAnims.GetValue();
	public ACameraActor                                       AnimCameraActor                                                => _offAnimCameraActor.GetValue();
	public float                                              ViewPitchMin                                                   => _offViewPitchMin.GetValue();
	public float                                              ViewPitchMax                                                   => _offViewPitchMax.GetValue();
	public float                                              ViewYawMin                                                     => _offViewYawMin.GetValue();
	public float                                              ViewYawMax                                                     => _offViewYawMax.GetValue();
	public float                                              ViewRollMin                                                    => _offViewRollMin.GetValue();
	public float                                              ViewRollMax                                                    => _offViewRollMax.GetValue();
	public float                                              ServerUpdateCameraTimeout                                      => _offServerUpdateCameraTimeout.GetValue();
	#endregion


}

// Class Engine.PlayerState
// 0x0118 (0x0360 - 0x0248)
public class APlayerState : AInfo
{
	#region Offsets
	private ExternalOffset<float>                             _offScore                                                      = new ExternalOffset<float>(0x0248);                           // 0x0248(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offPlayerName                                                 = new ExternalOffset<FString>(0x0250, false);                  // 0x0250(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPlayerId                                                   = new ExternalOffset<int>(0x0270);                             // 0x0270(0x0004) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offPing                                                       = new ExternalOffset<char>(0x0274, false);                     // 0x0274(0x0001) (BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldUpdateReplicatedPing                                = new ExternalOffset<char>(0x0276, false);                     // 0x0276(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbIsSpectator                                               = new ExternalOffset<char>(0x0276, false);                     // 0x0276(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOnlySpectator                                             = new ExternalOffset<char>(0x0276, false);                     // 0x0276(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsABot                                                    = new ExternalOffset<char>(0x0276, false);                     // 0x0276(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsInactive                                                = new ExternalOffset<char>(0x0276, false);                     // 0x0276(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFromPreviousLevel                                         = new ExternalOffset<char>(0x0276, false);                     // 0x0276(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offStartTime                                                  = new ExternalOffset<int>(0x0278);                             // 0x0278(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offEngineMessageClass                                         = new ExternalOffset<UClass>(0x0280, true);                    // 0x0280(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offSavedNetworkAddress                                        = new ExternalOffset<FString>(0x0290, false);                  // 0x0290(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FUniqueNetIdRepl>                  _offUniqueID                                                   = new ExternalOffset<FUniqueNetIdRepl>(0x02A0, false);         // 0x02A0(0x0028) (Net, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APawn>                             _offPawnPrivate                                                = new ExternalOffset<APawn>(0x02D0, true);                     // 0x02D0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FString>                           _offPlayerNamePrivate                                          = new ExternalOffset<FString>(0x0350, false);                  // 0x0350(0x0010) (Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public float                                              Score                                                          => _offScore.GetValue();
	public FString                                            PlayerName                                                     => _offPlayerName.GetValue();
	public int                                                PlayerId                                                       => _offPlayerId.GetValue();
	public int                                                StartTime                                                      => _offStartTime.GetValue();
	public UClass                                             EngineMessageClass                                             => _offEngineMessageClass.GetValue();
	public FString                                            SavedNetworkAddress                                            => _offSavedNetworkAddress.GetValue();
	public FUniqueNetIdRepl                                   UniqueID                                                       => _offUniqueID.GetValue();
	public APawn                                              PawnPrivate                                                    => _offPawnPrivate.GetValue();
	public FString                                            PlayerNamePrivate                                              => _offPlayerNamePrivate.GetValue();
	#endregion


}

// Class Engine.ProjectileMovementComponent
// 0x0084 (0x0198 - 0x0114)
public class UProjectileMovementComponent : UMovementComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offInitialSpeed                                               = new ExternalOffset<float>(0x0118);                           // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxSpeed                                                   = new ExternalOffset<float>(0x011C);                           // 0x011C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRotationFollowsVelocity                                   = new ExternalOffset<char>(0x0120, false);                     // 0x0120(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRotationRemainsVertical                                   = new ExternalOffset<char>(0x0120, false);                     // 0x0120(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldBounce                                              = new ExternalOffset<char>(0x0120, false);                     // 0x0120(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInitialVelocityInLocalSpace                               = new ExternalOffset<char>(0x0120, false);                     // 0x0120(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceSubStepping                                          = new ExternalOffset<char>(0x0120, false);                     // 0x0120(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSimulationEnabled                                         = new ExternalOffset<char>(0x0120, false);                     // 0x0120(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSweepCollision                                            = new ExternalOffset<char>(0x0120, false);                     // 0x0120(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsHomingProjectile                                        = new ExternalOffset<char>(0x0120, false);                     // 0x0120(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbBounceAngleAffectsFriction                                = new ExternalOffset<char>(0x0121, false);                     // 0x0121(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsSliding                                                 = new ExternalOffset<char>(0x0121, false);                     // 0x0121(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInterpMovement                                            = new ExternalOffset<char>(0x0121, false);                     // 0x0121(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInterpRotation                                            = new ExternalOffset<char>(0x0121, false);                     // 0x0121(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPreviousHitTime                                            = new ExternalOffset<float>(0x0124);                           // 0x0124(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offPreviousHitNormal                                          = new ExternalOffset<FVector>(0x0128, false);                  // 0x0128(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offProjectileGravityScale                                     = new ExternalOffset<float>(0x0134);                           // 0x0134(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBuoyancy                                                   = new ExternalOffset<float>(0x0138);                           // 0x0138(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBounciness                                                 = new ExternalOffset<float>(0x013C);                           // 0x013C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFriction                                                   = new ExternalOffset<float>(0x0140);                           // 0x0140(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBounceVelocityStopSimulatingThreshold                      = new ExternalOffset<float>(0x0144);                           // 0x0144(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinFrictionFraction                                        = new ExternalOffset<float>(0x0148);                           // 0x0148(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnProjectileBounce                                         = new ExternalOffset<FScriptMulticastDelegate>(0x0150, false); // 0x0150(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnProjectileStop                                           = new ExternalOffset<FScriptMulticastDelegate>(0x0160, false); // 0x0160(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offHomingAccelerationMagnitude                                = new ExternalOffset<float>(0x0170);                           // 0x0170(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<USceneComponent>>   _offHomingTargetComponent                                      = new ExternalOffset<TWeakObjectPtr<USceneComponent>>(0x0174, false); // 0x0174(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxSimulationTimeStep                                      = new ExternalOffset<float>(0x017C);                           // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxSimulationIterations                                    = new ExternalOffset<int>(0x0180);                             // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offBounceAdditionalIterations                                 = new ExternalOffset<int>(0x0184);                             // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInterpLocationTime                                         = new ExternalOffset<float>(0x0188);                           // 0x0188(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInterpRotationTime                                         = new ExternalOffset<float>(0x018C);                           // 0x018C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInterpLocationMaxLagDistance                               = new ExternalOffset<float>(0x0190);                           // 0x0190(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInterpLocationSnapToTargetDistance                         = new ExternalOffset<float>(0x0194);                           // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              InitialSpeed                                                   => _offInitialSpeed.GetValue();
	public float                                              MaxSpeed                                                       => _offMaxSpeed.GetValue();
	public float                                              PreviousHitTime                                                => _offPreviousHitTime.GetValue();
	public FVector                                            PreviousHitNormal                                              => _offPreviousHitNormal.GetValue();
	public float                                              ProjectileGravityScale                                         => _offProjectileGravityScale.GetValue();
	public float                                              Buoyancy                                                       => _offBuoyancy.GetValue();
	public float                                              Bounciness                                                     => _offBounciness.GetValue();
	public float                                              Friction                                                       => _offFriction.GetValue();
	public float                                              BounceVelocityStopSimulatingThreshold                          => _offBounceVelocityStopSimulatingThreshold.GetValue();
	public float                                              MinFrictionFraction                                            => _offMinFrictionFraction.GetValue();
	public FScriptMulticastDelegate                           OnProjectileBounce                                             => _offOnProjectileBounce.GetValue();
	public FScriptMulticastDelegate                           OnProjectileStop                                               => _offOnProjectileStop.GetValue();
	public float                                              HomingAccelerationMagnitude                                    => _offHomingAccelerationMagnitude.GetValue();
	public TWeakObjectPtr<USceneComponent>                    HomingTargetComponent                                          => _offHomingTargetComponent.GetValue();
	public float                                              MaxSimulationTimeStep                                          => _offMaxSimulationTimeStep.GetValue();
	public int                                                MaxSimulationIterations                                        => _offMaxSimulationIterations.GetValue();
	public int                                                BounceAdditionalIterations                                     => _offBounceAdditionalIterations.GetValue();
	public float                                              InterpLocationTime                                             => _offInterpLocationTime.GetValue();
	public float                                              InterpRotationTime                                             => _offInterpRotationTime.GetValue();
	public float                                              InterpLocationMaxLagDistance                                   => _offInterpLocationMaxLagDistance.GetValue();
	public float                                              InterpLocationSnapToTargetDistance                             => _offInterpLocationSnapToTargetDistance.GetValue();
	#endregion


}

// Class Engine.ReplicationDriver
// 0x0000 (0x0028 - 0x0028)
public class UReplicationDriver : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AudioComponent
// 0x04D0 (0x0650 - 0x0180)
public class UAudioComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<USoundBase>                        _offSound                                                      = new ExternalOffset<USoundBase>(0x0218, true);                // 0x0218(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAudioComponentParam>>      _offInstanceParameters                                         = new ExternalOffset<TArray<FAudioComponentParam>>(0x0220, false); // 0x0220(0x0010) (Edit, BlueprintVisible, ZeroConstructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundClass>                       _offSoundClassOverride                                         = new ExternalOffset<USoundClass>(0x0230, true);               // 0x0230(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoDestroy                                               = new ExternalOffset<char>(0x0238, false);                     // 0x0238(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStopWhenOwnerDestroyed                                    = new ExternalOffset<char>(0x0238, false);                     // 0x0238(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldRemainActiveIfDropped                               = new ExternalOffset<char>(0x0238, false);                     // 0x0238(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowSpatialization                                       = new ExternalOffset<char>(0x0238, false);                     // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideAttenuation                                       = new ExternalOffset<char>(0x0238, false);                     // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideSubtitlePriority                                  = new ExternalOffset<char>(0x0238, false);                     // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsUISound                                                 = new ExternalOffset<char>(0x0238, false);                     // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableLowPassFilter                                       = new ExternalOffset<char>(0x0238, false);                     // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverridePriority                                          = new ExternalOffset<char>(0x0239, false);                     // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSuppressSubtitles                                         = new ExternalOffset<char>(0x0239, false);                     // 0x0239(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoManageAttachment                                      = new ExternalOffset<char>(0x023A, false);                     // 0x023A(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offAudioComponentUserID                                       = new ExternalOffset<FName>(0x0240, false);                    // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsFadingOut                                               = new ExternalOffset<char>(0x0248, false);                     // 0x0248(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStartedPlayingTime                                         = new ExternalOffset<float>(0x024C);                           // 0x024C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitchModulationMin                                         = new ExternalOffset<float>(0x0250);                           // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitchModulationMax                                         = new ExternalOffset<float>(0x0254);                           // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeModulationMin                                        = new ExternalOffset<float>(0x0258);                           // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeModulationMax                                        = new ExternalOffset<float>(0x025C);                           // 0x025C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeMultiplier                                           = new ExternalOffset<float>(0x0260);                           // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offEnvelopeFollowerAttackTime                                 = new ExternalOffset<int>(0x0264);                             // 0x0264(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offEnvelopeFollowerReleaseTime                                = new ExternalOffset<int>(0x0268);                             // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPriority                                                   = new ExternalOffset<float>(0x026C);                           // 0x026C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSubtitlePriority                                           = new ExternalOffset<float>(0x0270);                           // 0x0270(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitchMultiplier                                            = new ExternalOffset<float>(0x0274);                           // 0x0274(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLowPassFilterFrequency                                     = new ExternalOffset<float>(0x0278);                           // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundAttenuation>                 _offAttenuationSettings                                        = new ExternalOffset<USoundAttenuation>(0x0280, true);         // 0x0280(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoundAttenuationSettings>         _offAttenuationOverrides                                       = new ExternalOffset<FSoundAttenuationSettings>(0x0288, false); // 0x0288(0x02E8) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundConcurrency>                 _offConcurrencySettings                                        = new ExternalOffset<USoundConcurrency>(0x0570, true);         // 0x0570(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAttachmentRule>                   _offAutoAttachLocationRule                                     = new ExternalOffset<EAttachmentRule>(0x05CC, false);          // 0x05CC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAttachmentRule>                   _offAutoAttachRotationRule                                     = new ExternalOffset<EAttachmentRule>(0x05CD, false);          // 0x05CD(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAttachmentRule>                   _offAutoAttachScaleRule                                        = new ExternalOffset<EAttachmentRule>(0x05CE, false);          // 0x05CE(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnAudioFinished                                            = new ExternalOffset<FScriptMulticastDelegate>(0x05D0, false); // 0x05D0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnAudioPlaybackPercent                                     = new ExternalOffset<FScriptMulticastDelegate>(0x05F8, false); // 0x05F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnAudioSingleEnvelopeValue                                 = new ExternalOffset<FScriptMulticastDelegate>(0x0620, false); // 0x0620(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnAudioMultiEnvelopeValue                                  = new ExternalOffset<FScriptMulticastDelegate>(0x0648, false); // 0x0648(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoundModulation>                  _offModulation                                                 = new ExternalOffset<FSoundModulation>(0x0670, false);         // 0x0670(0x0010) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptDelegate>                   _offOnQueueSubtitles                                           = new ExternalOffset<FScriptDelegate>(0x0680, false);          // 0x0680(0x0010) (ZeroConstructor, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<USceneComponent>>   _offAutoAttachParent                                           = new ExternalOffset<TWeakObjectPtr<USceneComponent>>(0x0690, false); // 0x0690(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offAutoAttachSocketName                                       = new ExternalOffset<FName>(0x0698, false);                    // 0x0698(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundBase                                         Sound                                                          => _offSound.GetValue();
	public TArray<FAudioComponentParam>                       InstanceParameters                                             => _offInstanceParameters.GetValue();
	public USoundClass                                        SoundClassOverride                                             => _offSoundClassOverride.GetValue();
	public FName                                              AudioComponentUserID                                           => _offAudioComponentUserID.GetValue();
	public float                                              StartedPlayingTime                                             => _offStartedPlayingTime.GetValue();
	public float                                              PitchModulationMin                                             => _offPitchModulationMin.GetValue();
	public float                                              PitchModulationMax                                             => _offPitchModulationMax.GetValue();
	public float                                              VolumeModulationMin                                            => _offVolumeModulationMin.GetValue();
	public float                                              VolumeModulationMax                                            => _offVolumeModulationMax.GetValue();
	public float                                              VolumeMultiplier                                               => _offVolumeMultiplier.GetValue();
	public int                                                EnvelopeFollowerAttackTime                                     => _offEnvelopeFollowerAttackTime.GetValue();
	public int                                                EnvelopeFollowerReleaseTime                                    => _offEnvelopeFollowerReleaseTime.GetValue();
	public float                                              Priority                                                       => _offPriority.GetValue();
	public float                                              SubtitlePriority                                               => _offSubtitlePriority.GetValue();
	public float                                              PitchMultiplier                                                => _offPitchMultiplier.GetValue();
	public float                                              LowPassFilterFrequency                                         => _offLowPassFilterFrequency.GetValue();
	public USoundAttenuation                                  AttenuationSettings                                            => _offAttenuationSettings.GetValue();
	public FSoundAttenuationSettings                          AttenuationOverrides                                           => _offAttenuationOverrides.GetValue();
	public USoundConcurrency                                  ConcurrencySettings                                            => _offConcurrencySettings.GetValue();
	public EAttachmentRule                                    AutoAttachLocationRule                                         => _offAutoAttachLocationRule.GetValue();
	public EAttachmentRule                                    AutoAttachRotationRule                                         => _offAutoAttachRotationRule.GetValue();
	public EAttachmentRule                                    AutoAttachScaleRule                                            => _offAutoAttachScaleRule.GetValue();
	public FScriptMulticastDelegate                           OnAudioFinished                                                => _offOnAudioFinished.GetValue();
	public FScriptMulticastDelegate                           OnAudioPlaybackPercent                                         => _offOnAudioPlaybackPercent.GetValue();
	public FScriptMulticastDelegate                           OnAudioSingleEnvelopeValue                                     => _offOnAudioSingleEnvelopeValue.GetValue();
	public FScriptMulticastDelegate                           OnAudioMultiEnvelopeValue                                      => _offOnAudioMultiEnvelopeValue.GetValue();
	public FSoundModulation                                   Modulation                                                     => _offModulation.GetValue();
	public FScriptDelegate                                    OnQueueSubtitles                                               => _offOnQueueSubtitles.GetValue();
	public TWeakObjectPtr<USceneComponent>                    AutoAttachParent                                               => _offAutoAttachParent.GetValue();
	public FName                                              AutoAttachSocketName                                           => _offAutoAttachSocketName.GetValue();
	#endregion


}

// Class Engine.CharacterMovementComponent
// 0x05AC (0x070C - 0x0160)
public class UCharacterMovementComponent : UPawnMovementComponent
{
	#region Offsets
	private ExternalOffset<ACharacter>                        _offCharacterOwner                                             = new ExternalOffset<ACharacter>(0x0170, true);                // 0x0170(0x0008) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offGravityScale                                               = new ExternalOffset<float>(0x0178);                           // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxStepHeight                                              = new ExternalOffset<float>(0x017C);                           // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offJumpZVelocity                                              = new ExternalOffset<float>(0x0180);                           // 0x0180(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offJumpOffJumpZFactor                                         = new ExternalOffset<float>(0x0184);                           // 0x0184(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWalkableFloorAngle                                         = new ExternalOffset<float>(0x0188);                           // 0x0188(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offWalkableFloorZ                                             = new ExternalOffset<float>(0x018C);                           // 0x018C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TEnumAsByte<EMovementMode>>        _offMovementMode                                               = new ExternalOffset<TEnumAsByte<EMovementMode>>(0x0190, false); // 0x0190(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offCustomMovementMode                                         = new ExternalOffset<char>(0x0191, false);                     // 0x0191(0x0001) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ENetworkSmoothingMode>             _offNetworkSmoothingMode                                       = new ExternalOffset<ENetworkSmoothingMode>(0x0192, false);    // 0x0192(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGroundFriction                                             = new ExternalOffset<float>(0x0194);                           // 0x0194(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxWalkSpeed                                               = new ExternalOffset<float>(0x01BC);                           // 0x01BC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxWalkSpeedCrouched                                       = new ExternalOffset<float>(0x01C0);                           // 0x01C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxSwimSpeed                                               = new ExternalOffset<float>(0x01C4);                           // 0x01C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxFlySpeed                                                = new ExternalOffset<float>(0x01C8);                           // 0x01C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxCustomMovementSpeed                                     = new ExternalOffset<float>(0x01CC);                           // 0x01CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxAcceleration                                            = new ExternalOffset<float>(0x01D0);                           // 0x01D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinAnalogWalkSpeed                                         = new ExternalOffset<float>(0x01D4);                           // 0x01D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBrakingFrictionFactor                                      = new ExternalOffset<float>(0x01D8);                           // 0x01D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBrakingFriction                                            = new ExternalOffset<float>(0x01DC);                           // 0x01DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBrakingSubStepTime                                         = new ExternalOffset<float>(0x01E0);                           // 0x01E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBrakingDecelerationWalking                                 = new ExternalOffset<float>(0x01E4);                           // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBrakingDecelerationFalling                                 = new ExternalOffset<float>(0x01E8);                           // 0x01E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBrakingDecelerationSwimming                                = new ExternalOffset<float>(0x01EC);                           // 0x01EC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBrakingDecelerationFlying                                  = new ExternalOffset<float>(0x01F0);                           // 0x01F0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAirControl                                                 = new ExternalOffset<float>(0x01F4);                           // 0x01F4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAirControlBoostMultiplier                                  = new ExternalOffset<float>(0x01F8);                           // 0x01F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAirControlBoostVelocityThreshold                           = new ExternalOffset<float>(0x01FC);                           // 0x01FC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFallingLateralFriction                                     = new ExternalOffset<float>(0x0200);                           // 0x0200(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCrouchedHalfHeight                                         = new ExternalOffset<float>(0x0204);                           // 0x0204(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBuoyancy                                                   = new ExternalOffset<float>(0x0208);                           // 0x0208(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPerchRadiusThreshold                                       = new ExternalOffset<float>(0x020C);                           // 0x020C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPerchAdditionalHeight                                      = new ExternalOffset<float>(0x0210);                           // 0x0210(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offRotationRate                                               = new ExternalOffset<FRotator>(0x0214, false);                 // 0x0214(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseSeparateBrakingFriction                                = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbApplyGravityWhileJumping                                  = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseControllerDesiredRotation                              = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOrientRotationToMovement                                  = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSweepWhileNavWalking                                      = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMovementInProgress                                        = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbEnableScopedMovementUpdates                               = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableServerDualMoveScopedMovementUpdates                 = new ExternalOffset<char>(0x0221, false);                     // 0x0221(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceMaxAccel                                             = new ExternalOffset<char>(0x0221, false);                     // 0x0221(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRunPhysicsWithNoController                                = new ExternalOffset<char>(0x0221, false);                     // 0x0221(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceNextFloorCheck                                       = new ExternalOffset<char>(0x0221, false);                     // 0x0221(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShrinkProxyCapsule                                        = new ExternalOffset<char>(0x0221, false);                     // 0x0221(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCanWalkOffLedges                                          = new ExternalOffset<char>(0x0221, false);                     // 0x0221(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCanWalkOffLedgesWhenCrouching                             = new ExternalOffset<char>(0x0221, false);                     // 0x0221(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNetworkSkipProxyPredictionOnNetUpdate                     = new ExternalOffset<char>(0x0222, false);                     // 0x0222(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNetworkAlwaysReplicateTransformUpdateTimestamp            = new ExternalOffset<char>(0x0222, false);                     // 0x0222(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDeferUpdateMoveComponent                                  = new ExternalOffset<char>(0x0222, false);                     // 0x0222(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnablePhysicsInteraction                                  = new ExternalOffset<char>(0x0222, false);                     // 0x0222(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTouchForceScaledToMass                                    = new ExternalOffset<char>(0x0222, false);                     // 0x0222(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPushForceScaledToMass                                     = new ExternalOffset<char>(0x0222, false);                     // 0x0222(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPushForceUsingZOffset                                     = new ExternalOffset<char>(0x0222, false);                     // 0x0222(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbScalePushForceToVelocity                                  = new ExternalOffset<char>(0x0223, false);                     // 0x0223(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USceneComponent>                   _offDeferredUpdatedMoveComponent                               = new ExternalOffset<USceneComponent>(0x0228, true);           // 0x0228(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxOutOfWaterStepHeight                                    = new ExternalOffset<float>(0x0230);                           // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOutofWaterZ                                                = new ExternalOffset<float>(0x0234);                           // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMass                                                       = new ExternalOffset<float>(0x0238);                           // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStandingDownwardForceScale                                 = new ExternalOffset<float>(0x023C);                           // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInitialPushForceFactor                                     = new ExternalOffset<float>(0x0240);                           // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPushForceFactor                                            = new ExternalOffset<float>(0x0244);                           // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPushForcePointZOffsetFactor                                = new ExternalOffset<float>(0x0248);                           // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTouchForceFactor                                           = new ExternalOffset<float>(0x024C);                           // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinTouchForce                                              = new ExternalOffset<float>(0x0250);                           // 0x0250(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxTouchForce                                              = new ExternalOffset<float>(0x0254);                           // 0x0254(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRepulsionForce                                             = new ExternalOffset<float>(0x0258);                           // 0x0258(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offAcceleration                                               = new ExternalOffset<FVector>(0x025C, false);                  // 0x025C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FQuat>                             _offLastUpdateRotation                                         = new ExternalOffset<FQuat>(0x0270, false);                    // 0x0270(0x0010) (IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<FVector>                           _offLastUpdateLocation                                         = new ExternalOffset<FVector>(0x0280, false);                  // 0x0280(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FVector>                           _offLastUpdateVelocity                                         = new ExternalOffset<FVector>(0x028C, false);                  // 0x028C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offServerLastTransformUpdateTimeStamp                         = new ExternalOffset<float>(0x0298);                           // 0x0298(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offServerLastClientGoodMoveAckTime                            = new ExternalOffset<float>(0x029C);                           // 0x029C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offServerLastClientAdjustmentTime                             = new ExternalOffset<float>(0x02A0);                           // 0x02A0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FVector>                           _offPendingImpulseToApply                                      = new ExternalOffset<FVector>(0x02A4, false);                  // 0x02A4(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FVector>                           _offPendingForceToApply                                        = new ExternalOffset<FVector>(0x02B0, false);                  // 0x02B0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offAnalogInputModifier                                        = new ExternalOffset<float>(0x02BC);                           // 0x02BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offMaxSimulationTimeStep                                      = new ExternalOffset<float>(0x02CC);                           // 0x02CC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxSimulationIterations                                    = new ExternalOffset<int>(0x02D0);                             // 0x02D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxJumpApexAttemptsPerSimulation                           = new ExternalOffset<int>(0x02D4);                             // 0x02D4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxDepenetrationWithGeometry                               = new ExternalOffset<float>(0x02D8);                           // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxDepenetrationWithGeometryAsProxy                        = new ExternalOffset<float>(0x02DC);                           // 0x02DC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxDepenetrationWithPawn                                   = new ExternalOffset<float>(0x02E0);                           // 0x02E0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxDepenetrationWithPawnAsProxy                            = new ExternalOffset<float>(0x02E4);                           // 0x02E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetworkSimulatedSmoothLocationTime                         = new ExternalOffset<float>(0x02E8);                           // 0x02E8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetworkSimulatedSmoothRotationTime                         = new ExternalOffset<float>(0x02EC);                           // 0x02EC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offListenServerNetworkSimulatedSmoothLocationTime             = new ExternalOffset<float>(0x02F0);                           // 0x02F0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offListenServerNetworkSimulatedSmoothRotationTime             = new ExternalOffset<float>(0x02F4);                           // 0x02F4(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetProxyShrinkRadius                                       = new ExternalOffset<float>(0x02F8);                           // 0x02F8(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetProxyShrinkHalfHeight                                   = new ExternalOffset<float>(0x02FC);                           // 0x02FC(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetworkMaxSmoothUpdateDistance                             = new ExternalOffset<float>(0x0300);                           // 0x0300(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetworkNoSmoothUpdateDistance                              = new ExternalOffset<float>(0x0304);                           // 0x0304(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetworkMinTimeBetweenClientAckGoodMoves                    = new ExternalOffset<float>(0x0308);                           // 0x0308(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetworkMinTimeBetweenClientAdjustments                     = new ExternalOffset<float>(0x030C);                           // 0x030C(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetworkMinTimeBetweenClientAdjustmentsLargeCorrection      = new ExternalOffset<float>(0x0310);                           // 0x0310(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNetworkLargeClientCorrectionDistance                       = new ExternalOffset<float>(0x0314);                           // 0x0314(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLedgeCheckThreshold                                        = new ExternalOffset<float>(0x0318);                           // 0x0318(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offJumpOutOfWaterPitch                                        = new ExternalOffset<float>(0x031C);                           // 0x031C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FFindFloorResult>                  _offCurrentFloor                                               = new ExternalOffset<FFindFloorResult>(0x0320, false);         // 0x0320(0x0094) (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMovementMode>>        _offDefaultLandMovementMode                                    = new ExternalOffset<TEnumAsByte<EMovementMode>>(0x03B4, false); // 0x03B4(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMovementMode>>        _offDefaultWaterMovementMode                                   = new ExternalOffset<TEnumAsByte<EMovementMode>>(0x03B5, false); // 0x03B5(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMovementMode>>        _offGroundMovementMode                                         = new ExternalOffset<TEnumAsByte<EMovementMode>>(0x03B6, false); // 0x03B6(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbMaintainHorizontalGroundVelocity                          = new ExternalOffset<char>(0x03B7, false);                     // 0x03B7(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbImpartBaseVelocityX                                       = new ExternalOffset<char>(0x03B7, false);                     // 0x03B7(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbImpartBaseVelocityY                                       = new ExternalOffset<char>(0x03B7, false);                     // 0x03B7(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbImpartBaseVelocityZ                                       = new ExternalOffset<char>(0x03B7, false);                     // 0x03B7(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbImpartBaseAngularVelocity                                 = new ExternalOffset<char>(0x03B7, false);                     // 0x03B7(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbJustTeleported                                            = new ExternalOffset<char>(0x03B7, false);                     // 0x03B7(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNetworkUpdateReceived                                     = new ExternalOffset<char>(0x03B7, false);                     // 0x03B7(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNetworkMovementModeChanged                                = new ExternalOffset<char>(0x03B7, false);                     // 0x03B7(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreClientMovementErrorChecksAndCorrection              = new ExternalOffset<char>(0x03B8, false);                     // 0x03B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbServerAcceptClientAuthoritativePosition                   = new ExternalOffset<char>(0x03B8, false);                     // 0x03B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNotifyApex                                                = new ExternalOffset<char>(0x03B8, false);                     // 0x03B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCheatFlying                                               = new ExternalOffset<char>(0x03B8, false);                     // 0x03B8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbWantsToCrouch                                             = new ExternalOffset<char>(0x03B8, false);                     // 0x03B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCrouchMaintainsBaseLocation                               = new ExternalOffset<char>(0x03B8, false);                     // 0x03B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreBaseRotation                                        = new ExternalOffset<char>(0x03B8, false);                     // 0x03B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFastAttachedMove                                          = new ExternalOffset<char>(0x03B8, false);                     // 0x03B8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAlwaysCheckFloor                                          = new ExternalOffset<char>(0x03B9, false);                     // 0x03B9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseFlatBaseForFloorChecks                                 = new ExternalOffset<char>(0x03B9, false);                     // 0x03B9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPerformingJumpOff                                         = new ExternalOffset<char>(0x03B9, false);                     // 0x03B9(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbWantsToLeaveNavWalking                                    = new ExternalOffset<char>(0x03B9, false);                     // 0x03B9(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseRVOAvoidance                                           = new ExternalOffset<char>(0x03B9, false);                     // 0x03B9(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRequestedMoveUseAcceleration                              = new ExternalOffset<char>(0x03B9, false);                     // 0x03B9(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbWasSimulatingRootMotion                                   = new ExternalOffset<char>(0x03B9, false);                     // 0x03B9(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowPhysicsRotationDuringAnimRootMotion                  = new ExternalOffset<char>(0x03BA, false);                     // 0x03BA(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasRequestedVelocity                                      = new ExternalOffset<char>(0x03BA, false);                     // 0x03BA(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbRequestedMoveWithMaxSpeed                                 = new ExternalOffset<char>(0x03BA, false);                     // 0x03BA(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbWasAvoidanceUpdated                                       = new ExternalOffset<char>(0x03BA, false);                     // 0x03BA(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbProjectNavMeshWalking                                     = new ExternalOffset<char>(0x03BA, false);                     // 0x03BA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbProjectNavMeshOnBothWorldChannels                         = new ExternalOffset<char>(0x03BA, false);                     // 0x03BA(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offAvoidanceConsiderationRadius                               = new ExternalOffset<float>(0x03CC);                           // 0x03CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offRequestedVelocity                                          = new ExternalOffset<FVector>(0x03D0, false);                  // 0x03D0(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offAvoidanceUID                                               = new ExternalOffset<int>(0x03DC);                             // 0x03DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FNavAvoidanceMask>                 _offAvoidanceGroup                                             = new ExternalOffset<FNavAvoidanceMask>(0x03E0, false);        // 0x03E0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<FNavAvoidanceMask>                 _offGroupsToAvoid                                              = new ExternalOffset<FNavAvoidanceMask>(0x03E4, false);        // 0x03E4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<FNavAvoidanceMask>                 _offGroupsToIgnore                                             = new ExternalOffset<FNavAvoidanceMask>(0x03E8, false);        // 0x03E8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAvoidanceWeight                                            = new ExternalOffset<float>(0x03EC);                           // 0x03EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offPendingLaunchVelocity                                      = new ExternalOffset<FVector>(0x03F0, false);                  // 0x03F0(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNavMeshProjectionInterval                                  = new ExternalOffset<float>(0x04A0);                           // 0x04A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNavMeshProjectionTimer                                     = new ExternalOffset<float>(0x04A4);                           // 0x04A4(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNavMeshProjectionInterpSpeed                               = new ExternalOffset<float>(0x04A8);                           // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNavMeshProjectionHeightScaleUp                             = new ExternalOffset<float>(0x04AC);                           // 0x04AC(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNavMeshProjectionHeightScaleDown                           = new ExternalOffset<float>(0x04B0);                           // 0x04B0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNavWalkingFloorDistTolerance                               = new ExternalOffset<float>(0x04B4);                           // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FCharacterMovementComponentPostPhysicsTickFunction> _offPostPhysicsTickFunction                                    = new ExternalOffset<FCharacterMovementComponentPostPhysicsTickFunction>(0x04B8, false); // 0x04B8(0x0058) (NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinTimeBetweenTimeStampResets                              = new ExternalOffset<float>(0x0528);                           // 0x0528(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionSourceGroup>            _offCurrentRootMotion                                          = new ExternalOffset<FRootMotionSourceGroup>(0x0530, false);   // 0x0530(0x00F8) (Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<FRootMotionMovementParams>         _offRootMotionParams                                           = new ExternalOffset<FRootMotionMovementParams>(0x06C0, false); // 0x06C0(0x0040) (Transient, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offAnimRootMotionVelocity                                     = new ExternalOffset<FVector>(0x0700, false);                  // 0x0700(0x000C) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ACharacter                                         CharacterOwner                                                 => _offCharacterOwner.GetValue();
	public float                                              GravityScale                                                   => _offGravityScale.GetValue();
	public float                                              MaxStepHeight                                                  => _offMaxStepHeight.GetValue();
	public float                                              JumpZVelocity                                                  => _offJumpZVelocity.GetValue();
	public float                                              JumpOffJumpZFactor                                             => _offJumpOffJumpZFactor.GetValue();
	public float                                              WalkableFloorAngle                                             => _offWalkableFloorAngle.GetValue();
	public float                                              WalkableFloorZ                                                 => _offWalkableFloorZ.GetValue();
	public TEnumAsByte<EMovementMode>                         MovementMode                                                   => _offMovementMode.GetValue();
	public ENetworkSmoothingMode                              NetworkSmoothingMode                                           => _offNetworkSmoothingMode.GetValue();
	public float                                              GroundFriction                                                 => _offGroundFriction.GetValue();
	public float                                              MaxWalkSpeed                                                   => _offMaxWalkSpeed.GetValue();
	public float                                              MaxWalkSpeedCrouched                                           => _offMaxWalkSpeedCrouched.GetValue();
	public float                                              MaxSwimSpeed                                                   => _offMaxSwimSpeed.GetValue();
	public float                                              MaxFlySpeed                                                    => _offMaxFlySpeed.GetValue();
	public float                                              MaxCustomMovementSpeed                                         => _offMaxCustomMovementSpeed.GetValue();
	public float                                              MaxAcceleration                                                => _offMaxAcceleration.GetValue();
	public float                                              MinAnalogWalkSpeed                                             => _offMinAnalogWalkSpeed.GetValue();
	public float                                              BrakingFrictionFactor                                          => _offBrakingFrictionFactor.GetValue();
	public float                                              BrakingFriction                                                => _offBrakingFriction.GetValue();
	public float                                              BrakingSubStepTime                                             => _offBrakingSubStepTime.GetValue();
	public float                                              BrakingDecelerationWalking                                     => _offBrakingDecelerationWalking.GetValue();
	public float                                              BrakingDecelerationFalling                                     => _offBrakingDecelerationFalling.GetValue();
	public float                                              BrakingDecelerationSwimming                                    => _offBrakingDecelerationSwimming.GetValue();
	public float                                              BrakingDecelerationFlying                                      => _offBrakingDecelerationFlying.GetValue();
	public float                                              AirControl                                                     => _offAirControl.GetValue();
	public float                                              AirControlBoostMultiplier                                      => _offAirControlBoostMultiplier.GetValue();
	public float                                              AirControlBoostVelocityThreshold                               => _offAirControlBoostVelocityThreshold.GetValue();
	public float                                              FallingLateralFriction                                         => _offFallingLateralFriction.GetValue();
	public float                                              CrouchedHalfHeight                                             => _offCrouchedHalfHeight.GetValue();
	public float                                              Buoyancy                                                       => _offBuoyancy.GetValue();
	public float                                              PerchRadiusThreshold                                           => _offPerchRadiusThreshold.GetValue();
	public float                                              PerchAdditionalHeight                                          => _offPerchAdditionalHeight.GetValue();
	public FRotator                                           RotationRate                                                   => _offRotationRate.GetValue();
	public USceneComponent                                    DeferredUpdatedMoveComponent                                   => _offDeferredUpdatedMoveComponent.GetValue();
	public float                                              MaxOutOfWaterStepHeight                                        => _offMaxOutOfWaterStepHeight.GetValue();
	public float                                              OutofWaterZ                                                    => _offOutofWaterZ.GetValue();
	public float                                              Mass                                                           => _offMass.GetValue();
	public float                                              StandingDownwardForceScale                                     => _offStandingDownwardForceScale.GetValue();
	public float                                              InitialPushForceFactor                                         => _offInitialPushForceFactor.GetValue();
	public float                                              PushForceFactor                                                => _offPushForceFactor.GetValue();
	public float                                              PushForcePointZOffsetFactor                                    => _offPushForcePointZOffsetFactor.GetValue();
	public float                                              TouchForceFactor                                               => _offTouchForceFactor.GetValue();
	public float                                              MinTouchForce                                                  => _offMinTouchForce.GetValue();
	public float                                              MaxTouchForce                                                  => _offMaxTouchForce.GetValue();
	public float                                              RepulsionForce                                                 => _offRepulsionForce.GetValue();
	public FVector                                            Acceleration                                                   => _offAcceleration.GetValue();
	public FQuat                                              LastUpdateRotation                                             => _offLastUpdateRotation.GetValue();
	public FVector                                            LastUpdateLocation                                             => _offLastUpdateLocation.GetValue();
	public FVector                                            LastUpdateVelocity                                             => _offLastUpdateVelocity.GetValue();
	public float                                              ServerLastTransformUpdateTimeStamp                             => _offServerLastTransformUpdateTimeStamp.GetValue();
	public float                                              ServerLastClientGoodMoveAckTime                                => _offServerLastClientGoodMoveAckTime.GetValue();
	public float                                              ServerLastClientAdjustmentTime                                 => _offServerLastClientAdjustmentTime.GetValue();
	public FVector                                            PendingImpulseToApply                                          => _offPendingImpulseToApply.GetValue();
	public FVector                                            PendingForceToApply                                            => _offPendingForceToApply.GetValue();
	public float                                              AnalogInputModifier                                            => _offAnalogInputModifier.GetValue();
	public float                                              MaxSimulationTimeStep                                          => _offMaxSimulationTimeStep.GetValue();
	public int                                                MaxSimulationIterations                                        => _offMaxSimulationIterations.GetValue();
	public int                                                MaxJumpApexAttemptsPerSimulation                               => _offMaxJumpApexAttemptsPerSimulation.GetValue();
	public float                                              MaxDepenetrationWithGeometry                                   => _offMaxDepenetrationWithGeometry.GetValue();
	public float                                              MaxDepenetrationWithGeometryAsProxy                            => _offMaxDepenetrationWithGeometryAsProxy.GetValue();
	public float                                              MaxDepenetrationWithPawn                                       => _offMaxDepenetrationWithPawn.GetValue();
	public float                                              MaxDepenetrationWithPawnAsProxy                                => _offMaxDepenetrationWithPawnAsProxy.GetValue();
	public float                                              NetworkSimulatedSmoothLocationTime                             => _offNetworkSimulatedSmoothLocationTime.GetValue();
	public float                                              NetworkSimulatedSmoothRotationTime                             => _offNetworkSimulatedSmoothRotationTime.GetValue();
	public float                                              ListenServerNetworkSimulatedSmoothLocationTime                 => _offListenServerNetworkSimulatedSmoothLocationTime.GetValue();
	public float                                              ListenServerNetworkSimulatedSmoothRotationTime                 => _offListenServerNetworkSimulatedSmoothRotationTime.GetValue();
	public float                                              NetProxyShrinkRadius                                           => _offNetProxyShrinkRadius.GetValue();
	public float                                              NetProxyShrinkHalfHeight                                       => _offNetProxyShrinkHalfHeight.GetValue();
	public float                                              NetworkMaxSmoothUpdateDistance                                 => _offNetworkMaxSmoothUpdateDistance.GetValue();
	public float                                              NetworkNoSmoothUpdateDistance                                  => _offNetworkNoSmoothUpdateDistance.GetValue();
	public float                                              NetworkMinTimeBetweenClientAckGoodMoves                        => _offNetworkMinTimeBetweenClientAckGoodMoves.GetValue();
	public float                                              NetworkMinTimeBetweenClientAdjustments                         => _offNetworkMinTimeBetweenClientAdjustments.GetValue();
	public float                                              NetworkMinTimeBetweenClientAdjustmentsLargeCorrection          => _offNetworkMinTimeBetweenClientAdjustmentsLargeCorrection.GetValue();
	public float                                              NetworkLargeClientCorrectionDistance                           => _offNetworkLargeClientCorrectionDistance.GetValue();
	public float                                              LedgeCheckThreshold                                            => _offLedgeCheckThreshold.GetValue();
	public float                                              JumpOutOfWaterPitch                                            => _offJumpOutOfWaterPitch.GetValue();
	public FFindFloorResult                                   CurrentFloor                                                   => _offCurrentFloor.GetValue();
	public TEnumAsByte<EMovementMode>                         DefaultLandMovementMode                                        => _offDefaultLandMovementMode.GetValue();
	public TEnumAsByte<EMovementMode>                         DefaultWaterMovementMode                                       => _offDefaultWaterMovementMode.GetValue();
	public TEnumAsByte<EMovementMode>                         GroundMovementMode                                             => _offGroundMovementMode.GetValue();
	public float                                              AvoidanceConsiderationRadius                                   => _offAvoidanceConsiderationRadius.GetValue();
	public FVector                                            RequestedVelocity                                              => _offRequestedVelocity.GetValue();
	public int                                                AvoidanceUID                                                   => _offAvoidanceUID.GetValue();
	public FNavAvoidanceMask                                  AvoidanceGroup                                                 => _offAvoidanceGroup.GetValue();
	public FNavAvoidanceMask                                  GroupsToAvoid                                                  => _offGroupsToAvoid.GetValue();
	public FNavAvoidanceMask                                  GroupsToIgnore                                                 => _offGroupsToIgnore.GetValue();
	public float                                              AvoidanceWeight                                                => _offAvoidanceWeight.GetValue();
	public FVector                                            PendingLaunchVelocity                                          => _offPendingLaunchVelocity.GetValue();
	public float                                              NavMeshProjectionInterval                                      => _offNavMeshProjectionInterval.GetValue();
	public float                                              NavMeshProjectionTimer                                         => _offNavMeshProjectionTimer.GetValue();
	public float                                              NavMeshProjectionInterpSpeed                                   => _offNavMeshProjectionInterpSpeed.GetValue();
	public float                                              NavMeshProjectionHeightScaleUp                                 => _offNavMeshProjectionHeightScaleUp.GetValue();
	public float                                              NavMeshProjectionHeightScaleDown                               => _offNavMeshProjectionHeightScaleDown.GetValue();
	public float                                              NavWalkingFloorDistTolerance                                   => _offNavWalkingFloorDistTolerance.GetValue();
	public FCharacterMovementComponentPostPhysicsTickFunction PostPhysicsTickFunction                                        => _offPostPhysicsTickFunction.GetValue();
	public float                                              MinTimeBetweenTimeStampResets                                  => _offMinTimeBetweenTimeStampResets.GetValue();
	public FRootMotionSourceGroup                             CurrentRootMotion                                              => _offCurrentRootMotion.GetValue();
	public FRootMotionMovementParams                          RootMotionParams                                               => _offRootMotionParams.GetValue();
	public FVector                                            AnimRootMotionVelocity                                         => _offAnimRootMotionVelocity.GetValue();
	#endregion


}

// Class Engine.SoundNode
// 0x0010 (0x0038 - 0x0028)
public class USoundNode : UObject
{
	#region Offsets
	private ExternalOffset<TArray<USoundNode>>                _offChildNodes                                                 = new ExternalOffset<TArray<USoundNode>>(0x0028, false);       // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<USoundNode>                                 ChildNodes                                                     => _offChildNodes.GetValue();
	#endregion


}

// Class Engine.SoundBase
// 0x0098 (0x00C0 - 0x0028)
public class USoundBase : UObject
{
	#region Offsets
	private ExternalOffset<USoundClass>                       _offSoundClassObject                                           = new ExternalOffset<USoundClass>(0x0028, true);               // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDebug                                                     = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideConcurrency                                       = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOutputToBusOnly                                           = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasDelayNode                                              = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasConcatenatorNode                                       = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbBypassVolumeScaleForPriority                              = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EVirtualizationMode>               _offVirtualizationMode                                         = new ExternalOffset<EVirtualizationMode>(0x0031, false);      // 0x0031(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoundConcurrencySettings>         _offConcurrencyOverrides                                       = new ExternalOffset<FSoundConcurrencySettings>(0x0088, false); // 0x0088(0x0020) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDuration                                                   = new ExternalOffset<float>(0x00A8);                           // 0x00A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxDistance                                                = new ExternalOffset<float>(0x00AC);                           // 0x00AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTotalSamples                                               = new ExternalOffset<float>(0x00B0);                           // 0x00B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPriority                                                   = new ExternalOffset<float>(0x00B4);                           // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundAttenuation>                 _offAttenuationSettings                                        = new ExternalOffset<USoundAttenuation>(0x00B8, true);         // 0x00B8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoundModulation>                  _offModulation                                                 = new ExternalOffset<FSoundModulation>(0x00C0, false);         // 0x00C0(0x0010) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundSubmix>                      _offSoundSubmixObject                                          = new ExternalOffset<USoundSubmix>(0x00D0, true);              // 0x00D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSoundSubmixSendInfo>>      _offSoundSubmixSends                                           = new ExternalOffset<TArray<FSoundSubmixSendInfo>>(0x00D8, false); // 0x00D8(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundEffectSourcePresetChain>     _offSourceEffectChain                                          = new ExternalOffset<USoundEffectSourcePresetChain>(0x00E8, true); // 0x00E8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSoundSourceBusSendInfo>>   _offBusSends                                                   = new ExternalOffset<TArray<FSoundSourceBusSendInfo>>(0x00F0, false); // 0x00F0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSoundSourceBusSendInfo>>   _offPreEffectBusSends                                          = new ExternalOffset<TArray<FSoundSourceBusSendInfo>>(0x0100, false); // 0x0100(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundClass                                        SoundClassObject                                               => _offSoundClassObject.GetValue();
	public EVirtualizationMode                                VirtualizationMode                                             => _offVirtualizationMode.GetValue();
	public FSoundConcurrencySettings                          ConcurrencyOverrides                                           => _offConcurrencyOverrides.GetValue();
	public float                                              Duration                                                       => _offDuration.GetValue();
	public float                                              MaxDistance                                                    => _offMaxDistance.GetValue();
	public float                                              TotalSamples                                                   => _offTotalSamples.GetValue();
	public float                                              Priority                                                       => _offPriority.GetValue();
	public USoundAttenuation                                  AttenuationSettings                                            => _offAttenuationSettings.GetValue();
	public FSoundModulation                                   Modulation                                                     => _offModulation.GetValue();
	public USoundSubmix                                       SoundSubmixObject                                              => _offSoundSubmixObject.GetValue();
	public TArray<FSoundSubmixSendInfo>                       SoundSubmixSends                                               => _offSoundSubmixSends.GetValue();
	public USoundEffectSourcePresetChain                      SourceEffectChain                                              => _offSourceEffectChain.GetValue();
	public TArray<FSoundSourceBusSendInfo>                    BusSends                                                       => _offBusSends.GetValue();
	public TArray<FSoundSourceBusSendInfo>                    PreEffectBusSends                                              => _offPreEffectBusSends.GetValue();
	#endregion


}

// Class Engine.SoundWave
// 0x00E8 (0x01A8 - 0x00C0)
public class USoundWave : USoundBase
{
	#region Offsets
	private ExternalOffset<int>                               _offCompressionQuality                                         = new ExternalOffset<int>(0x0110);                             // 0x0110(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offStreamingPriority                                          = new ExternalOffset<int>(0x0114);                             // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ESoundwaveSampleRateSettings>      _offSampleRateQuality                                          = new ExternalOffset<ESoundwaveSampleRateSettings>(0x0118, false); // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESoundGroup>>          _offSoundGroup                                                 = new ExternalOffset<TEnumAsByte<ESoundGroup>>(0x011A, false); // 0x011A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLooping                                                   = new ExternalOffset<char>(0x011B, false);                     // 0x011B(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStreaming                                                 = new ExternalOffset<char>(0x011B, false);                     // 0x011B(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSeekableStreaming                                         = new ExternalOffset<char>(0x011B, false);                     // 0x011B(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMature                                                    = new ExternalOffset<char>(0x011C, false);                     // 0x011C(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbManualWordWrap                                            = new ExternalOffset<char>(0x011C, false);                     // 0x011C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSingleLine                                                = new ExternalOffset<char>(0x011C, false);                     // 0x011C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsAmbisonics                                              = new ExternalOffset<char>(0x011C, false);                     // 0x011C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                     _offFrequenciesToAnalyze                                       = new ExternalOffset<TArray<float>>(0x0120, false);            // 0x0120(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSoundWaveSpectralTimeData>> _offCookedSpectralTimeData                                     = new ExternalOffset<TArray<FSoundWaveSpectralTimeData>>(0x0130, false); // 0x0130(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSoundWaveEnvelopeTimeData>> _offCookedEnvelopeTimeData                                     = new ExternalOffset<TArray<FSoundWaveEnvelopeTimeData>>(0x0140, false); // 0x0140(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offSpokenText                                                 = new ExternalOffset<FString>(0x0160, false);                  // 0x0160(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSubtitlePriority                                           = new ExternalOffset<float>(0x0170);                           // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolume                                                     = new ExternalOffset<float>(0x0174);                           // 0x0174(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitch                                                      = new ExternalOffset<float>(0x0178);                           // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumChannels                                                = new ExternalOffset<int>(0x017C);                             // 0x017C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSampleRate                                                 = new ExternalOffset<int>(0x0180);                             // 0x0180(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FSubtitleCue>>              _offSubtitles                                                  = new ExternalOffset<TArray<FSubtitleCue>>(0x0188, false);     // 0x0188(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveTable>                       _offCurves                                                     = new ExternalOffset<UCurveTable>(0x0198, true);               // 0x0198(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<UCurveTable>                       _offInternalCurves                                             = new ExternalOffset<UCurveTable>(0x01A0, true);               // 0x01A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public int                                                CompressionQuality                                             => _offCompressionQuality.GetValue();
	public int                                                StreamingPriority                                              => _offStreamingPriority.GetValue();
	public ESoundwaveSampleRateSettings                       SampleRateQuality                                              => _offSampleRateQuality.GetValue();
	public TEnumAsByte<ESoundGroup>                           SoundGroup                                                     => _offSoundGroup.GetValue();
	public TArray<float>                                      FrequenciesToAnalyze                                           => _offFrequenciesToAnalyze.GetValue();
	public TArray<FSoundWaveSpectralTimeData>                 CookedSpectralTimeData                                         => _offCookedSpectralTimeData.GetValue();
	public TArray<FSoundWaveEnvelopeTimeData>                 CookedEnvelopeTimeData                                         => _offCookedEnvelopeTimeData.GetValue();
	public FString                                            SpokenText                                                     => _offSpokenText.GetValue();
	public float                                              SubtitlePriority                                               => _offSubtitlePriority.GetValue();
	public float                                              Volume                                                         => _offVolume.GetValue();
	public float                                              Pitch                                                          => _offPitch.GetValue();
	public int                                                NumChannels                                                    => _offNumChannels.GetValue();
	public int                                                SampleRate                                                     => _offSampleRate.GetValue();
	public TArray<FSubtitleCue>                               Subtitles                                                      => _offSubtitles.GetValue();
	public UCurveTable                                        Curves                                                         => _offCurves.GetValue();
	public UCurveTable                                        InternalCurves                                                 => _offInternalCurves.GetValue();
	#endregion


}

// Class Engine.DefaultPawn
// 0x0025 (0x02C9 - 0x02A4)
public class ADefaultPawn : APawn
{
	#region Offsets
	private ExternalOffset<float>                             _offBaseTurnRate                                               = new ExternalOffset<float>(0x02A8);                           // 0x02A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBaseLookUpRate                                             = new ExternalOffset<float>(0x02AC);                           // 0x02AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPawnMovementComponent>            _offMovementComponent                                          = new ExternalOffset<UPawnMovementComponent>(0x02B0, true);    // 0x02B0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<USphereComponent>                  _offCollisionComponent                                         = new ExternalOffset<USphereComponent>(0x02B8, true);          // 0x02B8(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UStaticMeshComponent>              _offMeshComponent                                              = new ExternalOffset<UStaticMeshComponent>(0x02C0, true);      // 0x02C0(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbAddDefaultMovementBindings                                = new ExternalOffset<char>(0x02C8, false);                     // 0x02C8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              BaseTurnRate                                                   => _offBaseTurnRate.GetValue();
	public float                                              BaseLookUpRate                                                 => _offBaseLookUpRate.GetValue();
	public UPawnMovementComponent                             MovementComponent                                              => _offMovementComponent.GetValue();
	public USphereComponent                                   CollisionComponent                                             => _offCollisionComponent.GetValue();
	public UStaticMeshComponent                               MeshComponent                                                  => _offMeshComponent.GetValue();
	#endregion


}

// Class Engine.SpectatorPawn
// 0x0007 (0x02D0 - 0x02C9)
public class ASpectatorPawn : ADefaultPawn
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.WorldSettings
// 0x0180 (0x03C8 - 0x0248)
public class AWorldSettings : AInfo
{
	#region Offsets
	private ExternalOffset<int>                               _offVisibilityCellSize                                         = new ExternalOffset<int>(0x0250);                             // 0x0250(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EVisibilityAggressiveness>> _offVisibilityAggressiveness                                   = new ExternalOffset<TEnumAsByte<EVisibilityAggressiveness>>(0x0254, false); // 0x0254(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPrecomputeVisibility                                      = new ExternalOffset<char>(0x0255, false);                     // 0x0255(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPlaceCellsOnlyAlongCameraTracks                           = new ExternalOffset<char>(0x0255, false);                     // 0x0255(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableWorldBoundsChecks                                   = new ExternalOffset<char>(0x0255, false);                     // 0x0255(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableNavigationSystem                                    = new ExternalOffset<char>(0x0255, false);                     // 0x0255(0x0001) BIT_FIELD (BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbEnableAISystem                                            = new ExternalOffset<char>(0x0255, false);                     // 0x0255(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableWorldComposition                                    = new ExternalOffset<char>(0x0255, false);                     // 0x0255(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseClientSideLevelStreamingVolumes                        = new ExternalOffset<char>(0x0255, false);                     // 0x0255(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableWorldOriginRebasing                                 = new ExternalOffset<char>(0x0255, false);                     // 0x0255(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbWorldGravitySet                                           = new ExternalOffset<char>(0x0256, false);                     // 0x0256(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGlobalGravitySet                                          = new ExternalOffset<char>(0x0256, false);                     // 0x0256(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMinimizeBSPSections                                       = new ExternalOffset<char>(0x0256, false);                     // 0x0256(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceNoPrecomputedLighting                                = new ExternalOffset<char>(0x0256, false);                     // 0x0256(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHighPriorityLoading                                       = new ExternalOffset<char>(0x0256, false);                     // 0x0256(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHighPriorityLoadingLocal                                  = new ExternalOffset<char>(0x0256, false);                     // 0x0256(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideDefaultBroadphaseSettings                         = new ExternalOffset<char>(0x0256, false);                     // 0x0256(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UNavigationSystemConfig>           _offNavigationSystemConfig                                     = new ExternalOffset<UNavigationSystemConfig>(0x0258, true);   // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<UNavigationSystemConfig>           _offNavigationSystemConfigOverride                             = new ExternalOffset<UNavigationSystemConfig>(0x0260, true);   // 0x0260(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offWorldToMeters                                              = new ExternalOffset<float>(0x0268);                           // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offKillZ                                                      = new ExternalOffset<float>(0x026C);                           // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offKillZDamageType                                            = new ExternalOffset<UClass>(0x0270, true);                    // 0x0270(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWorldGravityZ                                              = new ExternalOffset<float>(0x0278);                           // 0x0278(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGlobalGravityZ                                             = new ExternalOffset<float>(0x027C);                           // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offDefaultPhysicsVolumeClass                                  = new ExternalOffset<UClass>(0x0280, true);                    // 0x0280(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offPhysicsCollisionHandlerClass                               = new ExternalOffset<UClass>(0x0288, true);                    // 0x0288(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offDefaultGameMode                                            = new ExternalOffset<UClass>(0x0290, true);                    // 0x0290(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offGameNetworkManagerClass                                    = new ExternalOffset<UClass>(0x0298, true);                    // 0x0298(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPackedLightAndShadowMapTextureSize                         = new ExternalOffset<int>(0x02A0);                             // 0x02A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offDefaultColorScale                                          = new ExternalOffset<FVector>(0x02A4, false);                  // 0x02A4(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDefaultMaxDistanceFieldOcclusionDistance                   = new ExternalOffset<float>(0x02B0);                           // 0x02B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGlobalDistanceFieldViewDistance                            = new ExternalOffset<float>(0x02B4);                           // 0x02B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDynamicIndirectShadowsSelfShadowingIntensity               = new ExternalOffset<float>(0x02B8);                           // 0x02B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FReverbSettings>                   _offDefaultReverbSettings                                      = new ExternalOffset<FReverbSettings>(0x02C0, false);          // 0x02C0(0x0020) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FInteriorSettings>                 _offDefaultAmbientZoneSettings                                 = new ExternalOffset<FInteriorSettings>(0x02E0, false);        // 0x02E0(0x0024) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMonoCullingDistance                                        = new ExternalOffset<float>(0x0304);                           // 0x0304(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundMix>                         _offDefaultBaseSoundMix                                        = new ExternalOffset<USoundMix>(0x0308, true);                 // 0x0308(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTimeDilation                                               = new ExternalOffset<float>(0x0310);                           // 0x0310(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMatineeTimeDilation                                        = new ExternalOffset<float>(0x0314);                           // 0x0314(0x0004) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDemoPlayTimeDilation                                       = new ExternalOffset<float>(0x0318);                           // 0x0318(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinGlobalTimeDilation                                      = new ExternalOffset<float>(0x031C);                           // 0x031C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxGlobalTimeDilation                                      = new ExternalOffset<float>(0x0320);                           // 0x0320(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinUndilatedFrameTime                                      = new ExternalOffset<float>(0x0324);                           // 0x0324(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxUndilatedFrameTime                                      = new ExternalOffset<float>(0x0328);                           // 0x0328(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBroadphaseSettings>               _offBroadphaseSettings                                         = new ExternalOffset<FBroadphaseSettings>(0x032C, false);      // 0x032C(0x0040) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<APlayerState>                      _offPauser                                                     = new ExternalOffset<APlayerState>(0x0370, true);              // 0x0370(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FNetViewer>>                _offReplicationViewers                                         = new ExternalOffset<TArray<FNetViewer>>(0x0378, false);       // 0x0378(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UAssetUserData>>            _offAssetUserData                                              = new ExternalOffset<TArray<UAssetUserData>>(0x0388, false);   // 0x0388(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<APlayerState>                      _offPauserPlayerState                                          = new ExternalOffset<APlayerState>(0x0398, true);              // 0x0398(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offMaxNumberOfBookmarks                                       = new ExternalOffset<int>(0x03A0);                             // 0x03A0(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UClass>                            _offDefaultBookmarkClass                                       = new ExternalOffset<UClass>(0x03A8, true);                    // 0x03A8(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UBookmarkBase>>             _offBookmarkArray                                              = new ExternalOffset<TArray<UBookmarkBase>>(0x03B0, false);    // 0x03B0(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<UClass>                            _offLastBookmarkClass                                          = new ExternalOffset<UClass>(0x03C0, true);                    // 0x03C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public int                                                VisibilityCellSize                                             => _offVisibilityCellSize.GetValue();
	public TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness                                       => _offVisibilityAggressiveness.GetValue();
	public UNavigationSystemConfig                            NavigationSystemConfig                                         => _offNavigationSystemConfig.GetValue();
	public UNavigationSystemConfig                            NavigationSystemConfigOverride                                 => _offNavigationSystemConfigOverride.GetValue();
	public float                                              WorldToMeters                                                  => _offWorldToMeters.GetValue();
	public float                                              KillZ                                                          => _offKillZ.GetValue();
	public UClass                                             KillZDamageType                                                => _offKillZDamageType.GetValue();
	public float                                              WorldGravityZ                                                  => _offWorldGravityZ.GetValue();
	public float                                              GlobalGravityZ                                                 => _offGlobalGravityZ.GetValue();
	public UClass                                             DefaultPhysicsVolumeClass                                      => _offDefaultPhysicsVolumeClass.GetValue();
	public UClass                                             PhysicsCollisionHandlerClass                                   => _offPhysicsCollisionHandlerClass.GetValue();
	public UClass                                             DefaultGameMode                                                => _offDefaultGameMode.GetValue();
	public UClass                                             GameNetworkManagerClass                                        => _offGameNetworkManagerClass.GetValue();
	public int                                                PackedLightAndShadowMapTextureSize                             => _offPackedLightAndShadowMapTextureSize.GetValue();
	public FVector                                            DefaultColorScale                                              => _offDefaultColorScale.GetValue();
	public float                                              DefaultMaxDistanceFieldOcclusionDistance                       => _offDefaultMaxDistanceFieldOcclusionDistance.GetValue();
	public float                                              GlobalDistanceFieldViewDistance                                => _offGlobalDistanceFieldViewDistance.GetValue();
	public float                                              DynamicIndirectShadowsSelfShadowingIntensity                   => _offDynamicIndirectShadowsSelfShadowingIntensity.GetValue();
	public FReverbSettings                                    DefaultReverbSettings                                          => _offDefaultReverbSettings.GetValue();
	public FInteriorSettings                                  DefaultAmbientZoneSettings                                     => _offDefaultAmbientZoneSettings.GetValue();
	public float                                              MonoCullingDistance                                            => _offMonoCullingDistance.GetValue();
	public USoundMix                                          DefaultBaseSoundMix                                            => _offDefaultBaseSoundMix.GetValue();
	public float                                              TimeDilation                                                   => _offTimeDilation.GetValue();
	public float                                              MatineeTimeDilation                                            => _offMatineeTimeDilation.GetValue();
	public float                                              DemoPlayTimeDilation                                           => _offDemoPlayTimeDilation.GetValue();
	public float                                              MinGlobalTimeDilation                                          => _offMinGlobalTimeDilation.GetValue();
	public float                                              MaxGlobalTimeDilation                                          => _offMaxGlobalTimeDilation.GetValue();
	public float                                              MinUndilatedFrameTime                                          => _offMinUndilatedFrameTime.GetValue();
	public float                                              MaxUndilatedFrameTime                                          => _offMaxUndilatedFrameTime.GetValue();
	public FBroadphaseSettings                                BroadphaseSettings                                             => _offBroadphaseSettings.GetValue();
	public APlayerState                                       Pauser                                                         => _offPauser.GetValue();
	public TArray<FNetViewer>                                 ReplicationViewers                                             => _offReplicationViewers.GetValue();
	public TArray<UAssetUserData>                             AssetUserData                                                  => _offAssetUserData.GetValue();
	public APlayerState                                       PauserPlayerState                                              => _offPauserPlayerState.GetValue();
	public int                                                MaxNumberOfBookmarks                                           => _offMaxNumberOfBookmarks.GetValue();
	public UClass                                             DefaultBookmarkClass                                           => _offDefaultBookmarkClass.GetValue();
	public TArray<UBookmarkBase>                              BookmarkArray                                                  => _offBookmarkArray.GetValue();
	public UClass                                             LastBookmarkClass                                              => _offLastBookmarkClass.GetValue();
	#endregion


}

// Class Engine.Channel
// 0x0008 (0x0030 - 0x0028)
public class UChannel : UObject
{
	#region Offsets
	private ExternalOffset<UNetConnection>                    _offConnection                                                 = new ExternalOffset<UNetConnection>(0x0028, true);            // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UNetConnection                                     Connection                                                     => _offConnection.GetValue();
	#endregion


}

// Class Engine.VoiceChannel
// 0x0040 (0x0070 - 0x0030)
public class UVoiceChannel : UChannel
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NetConnection
// 0x1484 (0x14C8 - 0x0044)
public class UNetConnection : UPlayer
{
	#region Offsets
	private ExternalOffset<TArray<UChildConnection>>          _offChildren                                                   = new ExternalOffset<TArray<UChildConnection>>(0x0048, false); // 0x0048(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<UNetDriver>                        _offDriver                                                     = new ExternalOffset<UNetDriver>(0x0058, true);                // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offPackageMapClass                                            = new ExternalOffset<UClass>(0x0060, true);                    // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPackageMap>                       _offPackageMap                                                 = new ExternalOffset<UPackageMap>(0x0068, true);               // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UChannel>>                  _offOpenChannels                                               = new ExternalOffset<TArray<UChannel>>(0x0070, false);         // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offSentTemporaries                                            = new ExternalOffset<TArray<AActor>>(0x0080, false);           // 0x0080(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                            _offViewTarget                                                 = new ExternalOffset<AActor>(0x0090, true);                    // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                            _offOwningActor                                                = new ExternalOffset<AActor>(0x0098, true);                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxPacket                                                  = new ExternalOffset<int>(0x00A0);                             // 0x00A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offInternalAck                                                = new ExternalOffset<char>(0x00A4, false);                     // 0x00A4(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FUniqueNetIdRepl>                  _offPlayerId                                                   = new ExternalOffset<FUniqueNetIdRepl>(0x0160, false);         // 0x0160(0x0028) (HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<double>                            _offLastReceiveTime                                            = new ExternalOffset<double>(0x01F0, false);                   // 0x01F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UChannel>>                  _offChannelsToTick                                             = new ExternalOffset<TArray<UChannel>>(0x14B8, false);         // 0x14B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<UChildConnection>                           Children                                                       => _offChildren.GetValue();
	public UNetDriver                                         Driver                                                         => _offDriver.GetValue();
	public UClass                                             PackageMapClass                                                => _offPackageMapClass.GetValue();
	public UPackageMap                                        PackageMap                                                     => _offPackageMap.GetValue();
	public TArray<UChannel>                                   OpenChannels                                                   => _offOpenChannels.GetValue();
	public TArray<AActor>                                     SentTemporaries                                                => _offSentTemporaries.GetValue();
	public AActor                                             ViewTarget                                                     => _offViewTarget.GetValue();
	public AActor                                             OwningActor                                                    => _offOwningActor.GetValue();
	public int                                                MaxPacket                                                      => _offMaxPacket.GetValue();
	public FUniqueNetIdRepl                                   PlayerId                                                       => _offPlayerId.GetValue();
	public double                                             LastReceiveTime                                                => _offLastReceiveTime.GetValue();
	public TArray<UChannel>                                   ChannelsToTick                                                 => _offChannelsToTick.GetValue();
	#endregion


}

// Class Engine.NetDriver
// 0x0700 (0x0728 - 0x0028)
public class UNetDriver : UObject
{
	#region Offsets
	private ExternalOffset<FString>                           _offNetConnectionClassName                                     = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offReplicationDriverClassName                                 = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxDownloadSize                                            = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClampListenServerTickRate                                 = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNetServerMaxTickRate                                       = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxNetTickRate                                             = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxInternetClientRate                                      = new ExternalOffset<int>(0x0060);                             // 0x0060(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxClientRate                                              = new ExternalOffset<int>(0x0064);                             // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offServerTravelPause                                          = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpawnPrioritySeconds                                       = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRelevantTimeout                                            = new ExternalOffset<float>(0x0070);                           // 0x0070(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offKeepAliveTime                                              = new ExternalOffset<float>(0x0074);                           // 0x0074(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInitialConnectTimeout                                      = new ExternalOffset<float>(0x0078);                           // 0x0078(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConnectionTimeout                                          = new ExternalOffset<float>(0x007C);                           // 0x007C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTimeoutMultiplierForUnoptimizedBuilds                      = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbNoTimeouts                                                = new ExternalOffset<byte/*(bool)*/>(0x0084);                  // 0x0084(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UNetConnection>                    _offServerConnection                                           = new ExternalOffset<UNetConnection>(0x0088, true);            // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UNetConnection>>            _offClientConnections                                          = new ExternalOffset<TArray<UNetConnection>>(0x0090, false);   // 0x0090(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offRecentlyDisconnectedTrackingTime                           = new ExternalOffset<int>(0x0100);                             // 0x0100(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UWorld>                            _offWorld                                                      = new ExternalOffset<UWorld>(0x0140, true);                    // 0x0140(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPackage>                          _offWorldPackage                                               = new ExternalOffset<UPackage>(0x0148, true);                  // 0x0148(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offNetConnectionClass                                         = new ExternalOffset<UClass>(0x0170, true);                    // 0x0170(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offReplicationDriverClass                                     = new ExternalOffset<UClass>(0x0178, true);                    // 0x0178(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UProperty>                         _offRoleProperty                                               = new ExternalOffset<UProperty>(0x0180, true);                 // 0x0180(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UProperty>                         _offRemoteRoleProperty                                         = new ExternalOffset<UProperty>(0x0188, true);                 // 0x0188(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offNetDriverName                                              = new ExternalOffset<FName>(0x0190, false);                    // 0x0190(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FChannelDefinition>>        _offChannelDefinitions                                         = new ExternalOffset<TArray<FChannelDefinition>>(0x01D8, false); // 0x01D8(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
//	private TMap<struct FName, struct FChannelDefinition>     _offChannelDefinitionMap                                       = new ExternalOffset<TMap<FChannelDefinition>>(0x01E8, false); // 0x01E8(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UChannel>>                  _offActorChannelPool                                           = new ExternalOffset<TArray<UChannel>>(0x0238, false);         // 0x0238(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offTime                                                       = new ExternalOffset<float>(0x0250);                           // 0x0250(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UReplicationDriver>                _offReplicationDriver                                          = new ExternalOffset<UReplicationDriver>(0x0720, true);        // 0x0720(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FString                                            NetConnectionClassName                                         => _offNetConnectionClassName.GetValue();
	public FString                                            ReplicationDriverClassName                                     => _offReplicationDriverClassName.GetValue();
	public int                                                MaxDownloadSize                                                => _offMaxDownloadSize.GetValue();
	public int                                                NetServerMaxTickRate                                           => _offNetServerMaxTickRate.GetValue();
	public int                                                MaxNetTickRate                                                 => _offMaxNetTickRate.GetValue();
	public int                                                MaxInternetClientRate                                          => _offMaxInternetClientRate.GetValue();
	public int                                                MaxClientRate                                                  => _offMaxClientRate.GetValue();
	public float                                              ServerTravelPause                                              => _offServerTravelPause.GetValue();
	public float                                              SpawnPrioritySeconds                                           => _offSpawnPrioritySeconds.GetValue();
	public float                                              RelevantTimeout                                                => _offRelevantTimeout.GetValue();
	public float                                              KeepAliveTime                                                  => _offKeepAliveTime.GetValue();
	public float                                              InitialConnectTimeout                                          => _offInitialConnectTimeout.GetValue();
	public float                                              ConnectionTimeout                                              => _offConnectionTimeout.GetValue();
	public float                                              TimeoutMultiplierForUnoptimizedBuilds                          => _offTimeoutMultiplierForUnoptimizedBuilds.GetValue();
	public byte/*(bool)*/                                     bNoTimeouts                                                    => _offbNoTimeouts.GetValue();
	public UNetConnection                                     ServerConnection                                               => _offServerConnection.GetValue();
	public TArray<UNetConnection>                             ClientConnections                                              => _offClientConnections.GetValue();
	public int                                                RecentlyDisconnectedTrackingTime                               => _offRecentlyDisconnectedTrackingTime.GetValue();
	public UWorld                                             World                                                          => _offWorld.GetValue();
	public UPackage                                           WorldPackage                                                   => _offWorldPackage.GetValue();
	public UClass                                             NetConnectionClass                                             => _offNetConnectionClass.GetValue();
	public UClass                                             ReplicationDriverClass                                         => _offReplicationDriverClass.GetValue();
	public UProperty                                          RoleProperty                                                   => _offRoleProperty.GetValue();
	public UProperty                                          RemoteRoleProperty                                             => _offRemoteRoleProperty.GetValue();
	public FName                                              NetDriverName                                                  => _offNetDriverName.GetValue();
	public TArray<FChannelDefinition>                         ChannelDefinitions                                             => _offChannelDefinitions.GetValue();
	public TArray<UChannel>                                   ActorChannelPool                                               => _offActorChannelPool.GetValue();
	public float                                              Time                                                           => _offTime.GetValue();
	public UReplicationDriver                                 ReplicationDriver                                              => _offReplicationDriver.GetValue();
	#endregion


}

// Class Engine.BlueprintAsyncActionBase
// 0x0000 (0x0028 - 0x0028)
public class UBlueprintAsyncActionBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.OnlineEngineInterface
// 0x0000 (0x0028 - 0x0028)
public class UOnlineEngineInterface : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.OnlineSession
// 0x0000 (0x0028 - 0x0028)
public class UOnlineSession : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ReplicationConnectionDriver
// 0x0000 (0x0028 - 0x0028)
public class UReplicationConnectionDriver : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Exporter
// 0x0048 (0x0070 - 0x0028)
public class UExporter : UObject
{
	#region Offsets
	private ExternalOffset<UClass>                            _offSupportedClass                                             = new ExternalOffset<UClass>(0x0028, true);                    // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                           _offExportRootScope                                            = new ExternalOffset<UObject>(0x0030, true);                   // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offFormatExtension                                            = new ExternalOffset<TArray<FString>>(0x0038, false);          // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offFormatDescription                                          = new ExternalOffset<TArray<FString>>(0x0048, false);          // 0x0048(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPreferredFormatIndex                                       = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offTextIndent                                                 = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbText                                                      = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSelectedOnly                                              = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceFileOperations                                       = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAssetExportTask>                  _offExportTask                                                 = new ExternalOffset<UAssetExportTask>(0x0068, true);          // 0x0068(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                             SupportedClass                                                 => _offSupportedClass.GetValue();
	public UObject                                            ExportRootScope                                                => _offExportRootScope.GetValue();
	public TArray<FString>                                    FormatExtension                                                => _offFormatExtension.GetValue();
	public TArray<FString>                                    FormatDescription                                              => _offFormatDescription.GetValue();
	public int                                                PreferredFormatIndex                                           => _offPreferredFormatIndex.GetValue();
	public int                                                TextIndent                                                     => _offTextIndent.GetValue();
	public UAssetExportTask                                   ExportTask                                                     => _offExportTask.GetValue();
	#endregion


}

// Class Engine.AssetImportData
// 0x0000 (0x0028 - 0x0028)
public class UAssetImportData : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AssetUserData
// 0x0000 (0x0028 - 0x0028)
public class UAssetUserData : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SkyLight
// 0x0009 (0x0251 - 0x0248)
public class ASkyLight : AInfo
{
	#region Offsets
	private ExternalOffset<USkyLightComponent>                _offLightComponent                                             = new ExternalOffset<USkyLightComponent>(0x0248, true);        // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USkyLightComponent                                 LightComponent                                                 => _offLightComponent.GetValue();
	#endregion


}

// Class Engine.StreamableRenderAsset
// 0x0016 (0x003E - 0x0028)
public class UStreamableRenderAsset : UObject
{
	#region Offsets
	private ExternalOffset<double>                            _offForceMipLevelsToBeResidentTimestamp                        = new ExternalOffset<double>(0x0028, false);                   // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offNumCinematicMipLevels                                      = new ExternalOffset<int>(0x0030);                             // 0x0030(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offStreamingIndex                                             = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offCachedCombinedLODBias                                      = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offCachedNumResidentLODs                                      = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbCachedReadyForStreaming                                   = new ExternalOffset<char>(0x003D, false);                     // 0x003D(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offNeverStream                                                = new ExternalOffset<char>(0x003D, false);                     // 0x003D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGlobalForceMipLevelsToBeResident                          = new ExternalOffset<char>(0x003D, false);                     // 0x003D(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsStreamable                                              = new ExternalOffset<char>(0x003D, false);                     // 0x003D(0x0001) BIT_FIELD (Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasStreamingUpdatePending                                 = new ExternalOffset<char>(0x003D, false);                     // 0x003D(0x0001) BIT_FIELD (Transient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceMiplevelsToBeResident                                = new ExternalOffset<char>(0x003D, false);                     // 0x003D(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreStreamingMipBias                                    = new ExternalOffset<char>(0x003D, false);                     // 0x003D(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseCinematicMipLevels                                     = new ExternalOffset<char>(0x003D, false);                     // 0x003D(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public double                                             ForceMipLevelsToBeResidentTimestamp                            => _offForceMipLevelsToBeResidentTimestamp.GetValue();
	public int                                                NumCinematicMipLevels                                          => _offNumCinematicMipLevels.GetValue();
	public int                                                StreamingIndex                                                 => _offStreamingIndex.GetValue();
	public int                                                CachedCombinedLODBias                                          => _offCachedCombinedLODBias.GetValue();
	#endregion


}

// Class Engine.Texture
// 0x003A (0x0078 - 0x003E)
public class UTexture : UStreamableRenderAsset
{
	#region Offsets
	private ExternalOffset<FGuid>                             _offLightingGuid                                               = new ExternalOffset<FGuid>(0x0048, false);                    // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                               _offLODBias                                                    = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureCompressionSettings>> _offCompressionSettings                                        = new ExternalOffset<TEnumAsByte<ETextureCompressionSettings>>(0x005C, false); // 0x005C(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureFilter>>       _offFilter                                                     = new ExternalOffset<TEnumAsByte<ETextureFilter>>(0x005D, false); // 0x005D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ETextureMipLoadOptions>            _offMipLoadOptions                                             = new ExternalOffset<ETextureMipLoadOptions>(0x005E, false);   // 0x005E(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureGroup>>        _offLODGroup                                                   = new ExternalOffset<TEnumAsByte<ETextureGroup>>(0x005F, false); // 0x005F(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offSRGB                                                       = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNoTiling                                                  = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offVirtualTextureStreaming                                    = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAsyncResourceReleaseHasBeenStarted                        = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UAssetUserData>>            _offAssetUserData                                              = new ExternalOffset<TArray<UAssetUserData>>(0x0068, false);   // 0x0068(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FGuid                                              LightingGuid                                                   => _offLightingGuid.GetValue();
	public int                                                LODBias                                                        => _offLODBias.GetValue();
	public TEnumAsByte<ETextureCompressionSettings>           CompressionSettings                                            => _offCompressionSettings.GetValue();
	public TEnumAsByte<ETextureFilter>                        Filter                                                         => _offFilter.GetValue();
	public ETextureMipLoadOptions                             MipLoadOptions                                                 => _offMipLoadOptions.GetValue();
	public TEnumAsByte<ETextureGroup>                         LODGroup                                                       => _offLODGroup.GetValue();
	public TArray<UAssetUserData>                             AssetUserData                                                  => _offAssetUserData.GetValue();
	#endregion


}

// Class Engine.TextureCube
// 0x0058 (0x00D0 - 0x0078)
public class UTextureCube : UTexture
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InstancedStaticMeshComponent
// 0x0090 (0x0528 - 0x0498)
public class UInstancedStaticMeshComponent : UStaticMeshComponent
{
	#region Offsets
	private ExternalOffset<TArray<FInstancedStaticMeshInstanceData>> _offPerInstanceSMData                                          = new ExternalOffset<TArray<FInstancedStaticMeshInstanceData>>(0x0498, false); // 0x0498(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic, CPF_SkipSerialization)
	private ExternalOffset<int>                               _offInstancingRandomSeed                                       = new ExternalOffset<int>(0x04A8);                             // 0x04A8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offInstanceStartCullDistance                                  = new ExternalOffset<int>(0x04AC);                             // 0x04AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offInstanceEndCullDistance                                    = new ExternalOffset<int>(0x04B0);                             // 0x04B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                       _offInstanceReorderTable                                       = new ExternalOffset<TArray<int>>(0x04B8, false);              // 0x04B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumPendingLightmaps                                        = new ExternalOffset<int>(0x0510);                             // 0x0510(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, Protected, TextExportTransient, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FInstancedStaticMeshMappingInfo>> _offCachedMappings                                             = new ExternalOffset<TArray<FInstancedStaticMeshMappingInfo>>(0x0518, false); // 0x0518(0x0010) (ZeroConstructor, Transient, DuplicateTransient, Protected, TextExportTransient, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<FInstancedStaticMeshInstanceData>           PerInstanceSMData                                              => _offPerInstanceSMData.GetValue();
	public int                                                InstancingRandomSeed                                           => _offInstancingRandomSeed.GetValue();
	public int                                                InstanceStartCullDistance                                      => _offInstanceStartCullDistance.GetValue();
	public int                                                InstanceEndCullDistance                                        => _offInstanceEndCullDistance.GetValue();
	public TArray<int>                                        InstanceReorderTable                                           => _offInstanceReorderTable.GetValue();
	public int                                                NumPendingLightmaps                                            => _offNumPendingLightmaps.GetValue();
	public TArray<FInstancedStaticMeshMappingInfo>            CachedMappings                                                 => _offCachedMappings.GetValue();
	#endregion


}

// Class Engine.HierarchicalInstancedStaticMeshComponent
// 0x00A4 (0x05CC - 0x0528)
public class UHierarchicalInstancedStaticMeshComponent : UInstancedStaticMeshComponent
{
	#region Offsets
	private ExternalOffset<TArray<int>>                       _offSortedInstances                                            = new ExternalOffset<TArray<int>>(0x0538, false);              // 0x0538(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumBuiltInstances                                          = new ExternalOffset<int>(0x0548);                             // 0x0548(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBox>                              _offBuiltInstanceBounds                                        = new ExternalOffset<FBox>(0x0550, false);                     // 0x0550(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FBox>                              _offUnbuiltInstanceBounds                                      = new ExternalOffset<FBox>(0x056C, false);                     // 0x056C(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBox>>                      _offUnbuiltInstanceBoundsList                                  = new ExternalOffset<TArray<FBox>>(0x0588, false);             // 0x0588(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableDensityScaling                                      = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offOcclusionLayerNumNodes                                     = new ExternalOffset<int>(0x05A0);                             // 0x05A0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBoxSphereBounds>                  _offCacheMeshExtendedBounds                                    = new ExternalOffset<FBoxSphereBounds>(0x05A4, false);         // 0x05A4(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbDisableCollision                                          = new ExternalOffset<byte/*(bool)*/>(0x05C4);                  // 0x05C4(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offInstanceCountToRender                                      = new ExternalOffset<int>(0x05C8);                             // 0x05C8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<int>                                        SortedInstances                                                => _offSortedInstances.GetValue();
	public int                                                NumBuiltInstances                                              => _offNumBuiltInstances.GetValue();
	public FBox                                               BuiltInstanceBounds                                            => _offBuiltInstanceBounds.GetValue();
	public FBox                                               UnbuiltInstanceBounds                                          => _offUnbuiltInstanceBounds.GetValue();
	public TArray<FBox>                                       UnbuiltInstanceBoundsList                                      => _offUnbuiltInstanceBoundsList.GetValue();
	public int                                                OcclusionLayerNumNodes                                         => _offOcclusionLayerNumNodes.GetValue();
	public FBoxSphereBounds                                   CacheMeshExtendedBounds                                        => _offCacheMeshExtendedBounds.GetValue();
	public byte/*(bool)*/                                     bDisableCollision                                              => _offbDisableCollision.GetValue();
	public int                                                InstanceCountToRender                                          => _offInstanceCountToRender.GetValue();
	#endregion


}

// Class Engine.StaticMeshActor
// 0x001A (0x0252 - 0x0238)
public class AStaticMeshActor : AActor
{
	#region Offsets
	private ExternalOffset<UStaticMeshComponent>              _offStaticMeshComponent                                        = new ExternalOffset<UStaticMeshComponent>(0x0248, true);      // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                    _offbStaticMeshReplicateMovement                               = new ExternalOffset<byte/*(bool)*/>(0x0250);                  // 0x0250(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ENavDataGatheringMode>             _offNavigationGeometryGatheringMode                            = new ExternalOffset<ENavDataGatheringMode>(0x0251, false);    // 0x0251(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UStaticMeshComponent                               StaticMeshComponent                                            => _offStaticMeshComponent.GetValue();
	public byte/*(bool)*/                                     bStaticMeshReplicateMovement                                   => _offbStaticMeshReplicateMovement.GetValue();
	public ENavDataGatheringMode                              NavigationGeometryGatheringMode                                => _offNavigationGeometryGatheringMode.GetValue();
	#endregion


}

// Class Engine.MaterialInterface
// 0x0060 (0x0088 - 0x0028)
public class UMaterialInterface : UObject
{
	#region Offsets
	private ExternalOffset<USubsurfaceProfile>                _offSubsurfaceProfile                                          = new ExternalOffset<USubsurfaceProfile>(0x0038, true);        // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLightmassMaterialInterfaceSettings> _offLightmassSettings                                          = new ExternalOffset<FLightmassMaterialInterfaceSettings>(0x0050, false); // 0x0050(0x0014) (Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FMaterialTextureInfo>>      _offTextureStreamingData                                       = new ExternalOffset<TArray<FMaterialTextureInfo>>(0x0068, false); // 0x0068(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UAssetUserData>>            _offAssetUserData                                              = new ExternalOffset<TArray<UAssetUserData>>(0x0078, false);   // 0x0078(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public USubsurfaceProfile                                 SubsurfaceProfile                                              => _offSubsurfaceProfile.GetValue();
	public FLightmassMaterialInterfaceSettings                LightmassSettings                                              => _offLightmassSettings.GetValue();
	public TArray<FMaterialTextureInfo>                       TextureStreamingData                                           => _offTextureStreamingData.GetValue();
	public TArray<UAssetUserData>                             AssetUserData                                                  => _offAssetUserData.GetValue();
	#endregion


}

// Class Engine.MaterialInstance
// 0x00C0 (0x0148 - 0x0088)
public class UMaterialInstance : UMaterialInterface
{
	#region Offsets
	private ExternalOffset<UPhysicalMaterial>                 _offPhysMaterial                                               = new ExternalOffset<UPhysicalMaterial>(0x0088, true);         // 0x0088(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInterface>                _offParent                                                     = new ExternalOffset<UMaterialInterface>(0x0090, true);        // 0x0090(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasStaticPermutationResource                              = new ExternalOffset<char>(0x009A, false);                     // 0x009A(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideSubsurfaceProfile                                 = new ExternalOffset<char>(0x009A, false);                     // 0x009A(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FScalarParameterValue>>     _offScalarParameterValues                                      = new ExternalOffset<TArray<FScalarParameterValue>>(0x00A0, false); // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FVectorParameterValue>>     _offVectorParameterValues                                      = new ExternalOffset<TArray<FVectorParameterValue>>(0x00B0, false); // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FTextureParameterValue>>    _offTextureParameterValues                                     = new ExternalOffset<TArray<FTextureParameterValue>>(0x00C0, false); // 0x00C0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FFontParameterValue>>       _offFontParameterValues                                        = new ExternalOffset<TArray<FFontParameterValue>>(0x00D0, false); // 0x00D0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialInstanceBasePropertyOverrides> _offBasePropertyOverrides                                      = new ExternalOffset<FMaterialInstanceBasePropertyOverrides>(0x00E0, false); // 0x00E0(0x0008) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObject>>                   _offPermutationTextureReferences                               = new ExternalOffset<TArray<UObject>>(0x00F8, false);          // 0x00F8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<FStaticParameterSet>               _offStaticParameters                                           = new ExternalOffset<FStaticParameterSet>(0x0108, false);      // 0x0108(0x0040) (NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UPhysicalMaterial                                  PhysMaterial                                                   => _offPhysMaterial.GetValue();
	public UMaterialInterface                                 Parent                                                         => _offParent.GetValue();
	public TArray<FScalarParameterValue>                      ScalarParameterValues                                          => _offScalarParameterValues.GetValue();
	public TArray<FVectorParameterValue>                      VectorParameterValues                                          => _offVectorParameterValues.GetValue();
	public TArray<FTextureParameterValue>                     TextureParameterValues                                         => _offTextureParameterValues.GetValue();
	public TArray<FFontParameterValue>                        FontParameterValues                                            => _offFontParameterValues.GetValue();
	public FMaterialInstanceBasePropertyOverrides             BasePropertyOverrides                                          => _offBasePropertyOverrides.GetValue();
	public TArray<UObject>                                    PermutationTextureReferences                                   => _offPermutationTextureReferences.GetValue();
	public FStaticParameterSet                                StaticParameters                                               => _offStaticParameters.GetValue();
	#endregion


}

// Class Engine.MaterialInstanceConstant
// 0x0080 (0x01C8 - 0x0148)
public class UMaterialInstanceConstant : UMaterialInstance
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpression
// 0x0011 (0x0039 - 0x0028)
public class UMaterialExpression : UObject
{
	#region Offsets
	private ExternalOffset<UMaterial>                         _offMaterial                                                   = new ExternalOffset<UMaterial>(0x0028, true);                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialFunction>                 _offFunction                                                   = new ExternalOffset<UMaterialFunction>(0x0030, true);         // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsParameterExpression                                     = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterial                                          Material                                                       => _offMaterial.GetValue();
	public UMaterialFunction                                  Function                                                       => _offFunction.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionCustomOutput
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionCustomOutput : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.EngineCustomTimeStep
// 0x0000 (0x0028 - 0x0028)
public class UEngineCustomTimeStep : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimNotifyState
// 0x0000 (0x0028 - 0x0028)
public class UAnimNotifyState : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DynamicBlueprintBinding
// 0x0000 (0x0028 - 0x0028)
public class UDynamicBlueprintBinding : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.BlueprintGeneratedClass
// 0x0210 (0x02A8 - 0x0098)
public class UBlueprintGeneratedClass : UClass
{
	#region Offsets
	private ExternalOffset<int>                               _offNumReplicatedProperties                                    = new ExternalOffset<int>(0x0200);                             // 0x0200(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasNativizedParent                                        = new ExternalOffset<char>(0x0204, false);                     // 0x0204(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasCookedComponentInstancingData                          = new ExternalOffset<char>(0x0204, false);                     // 0x0204(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UDynamicBlueprintBinding>>  _offDynamicBindingObjects                                      = new ExternalOffset<TArray<UDynamicBlueprintBinding>>(0x0208, false); // 0x0208(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UActorComponent>>           _offComponentTemplates                                         = new ExternalOffset<TArray<UActorComponent>>(0x0218, false);  // 0x0218(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UTimelineTemplate>>         _offTimelines                                                  = new ExternalOffset<TArray<UTimelineTemplate>>(0x0228, false); // 0x0228(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<USimpleConstructionScript>         _offSimpleConstructionScript                                   = new ExternalOffset<USimpleConstructionScript>(0x0238, true); // 0x0238(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInheritableComponentHandler>      _offInheritableComponentHandler                                = new ExternalOffset<UInheritableComponentHandler>(0x0240, true); // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UStructProperty>                   _offUberGraphFramePointerProperty                              = new ExternalOffset<UStructProperty>(0x0248, true);           // 0x0248(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UFunction>                         _offUberGraphFunction                                          = new ExternalOffset<UFunction>(0x0250, true);                 // 0x0250(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private TMap<struct FName, struct FBlueprintCookedComponentInstancingData> _offCookedComponentInstancingData                              = new ExternalOffset<TMap<FBlueprintCookedComponentInstancingData>>(0x0258, false); // 0x0258(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                NumReplicatedProperties                                        => _offNumReplicatedProperties.GetValue();
	public TArray<UDynamicBlueprintBinding>                   DynamicBindingObjects                                          => _offDynamicBindingObjects.GetValue();
	public TArray<UActorComponent>                            ComponentTemplates                                             => _offComponentTemplates.GetValue();
	public TArray<UTimelineTemplate>                          Timelines                                                      => _offTimelines.GetValue();
	public USimpleConstructionScript                          SimpleConstructionScript                                       => _offSimpleConstructionScript.GetValue();
	public UInheritableComponentHandler                       InheritableComponentHandler                                    => _offInheritableComponentHandler.GetValue();
	public UStructProperty                                    UberGraphFramePointerProperty                                  => _offUberGraphFramePointerProperty.GetValue();
	public UFunction                                          UberGraphFunction                                              => _offUberGraphFunction.GetValue();
	#endregion


}

// Class Engine.CameraActor
// 0x0578 (0x07B0 - 0x0238)
public class ACameraActor : AActor
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EAutoReceiveInput>>    _offAutoActivateForPlayer                                      = new ExternalOffset<TEnumAsByte<EAutoReceiveInput>>(0x0248, false); // 0x0248(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UCameraComponent>                  _offCameraComponent                                            = new ExternalOffset<UCameraComponent>(0x0250, true);          // 0x0250(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<USceneComponent>                   _offSceneComponent                                             = new ExternalOffset<USceneComponent>(0x0258, true);           // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbConstrainAspectRatio                                      = new ExternalOffset<char>(0x0268, false);                     // 0x0268(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offAspectRatio                                                = new ExternalOffset<float>(0x026C);                           // 0x026C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offFOVAngle                                                   = new ExternalOffset<float>(0x0270);                           // 0x0270(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offPostProcessBlendWeight                                     = new ExternalOffset<float>(0x0274);                           // 0x0274(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FPostProcessSettings>              _offPostProcessSettings                                        = new ExternalOffset<FPostProcessSettings>(0x0280, false);     // 0x0280(0x0530) (Deprecated, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TEnumAsByte<EAutoReceiveInput>                     AutoActivateForPlayer                                          => _offAutoActivateForPlayer.GetValue();
	public UCameraComponent                                   CameraComponent                                                => _offCameraComponent.GetValue();
	public USceneComponent                                    SceneComponent                                                 => _offSceneComponent.GetValue();
	public float                                              AspectRatio                                                    => _offAspectRatio.GetValue();
	public float                                              FOVAngle                                                       => _offFOVAngle.GetValue();
	public float                                              PostProcessBlendWeight                                         => _offPostProcessBlendWeight.GetValue();
	public FPostProcessSettings                               PostProcessSettings                                            => _offPostProcessSettings.GetValue();
	#endregion


}

// Class Engine.CameraComponent
// 0x0640 (0x07C0 - 0x0180)
public class UCameraComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offOrthoWidth                                                 = new ExternalOffset<float>(0x021C);                           // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOrthoNearClipPlane                                         = new ExternalOffset<float>(0x0220);                           // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOrthoFarClipPlane                                          = new ExternalOffset<float>(0x0224);                           // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAspectRatio                                                = new ExternalOffset<float>(0x0228);                           // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbConstrainAspectRatio                                      = new ExternalOffset<char>(0x022C, false);                     // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseFieldOfViewForLOD                                      = new ExternalOffset<char>(0x022C, false);                     // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockToHmd                                                 = new ExternalOffset<char>(0x022C, false);                     // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsePawnControlRotation                                    = new ExternalOffset<char>(0x022C, false);                     // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECameraProjectionMode>> _offProjectionMode                                             = new ExternalOffset<TEnumAsByte<ECameraProjectionMode>>(0x022D, false); // 0x022D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPostProcessBlendWeight                                     = new ExternalOffset<float>(0x0260);                           // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPostProcessSettings>              _offPostProcessSettings                                        = new ExternalOffset<FPostProcessSettings>(0x0290, false);     // 0x0290(0x0530) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              OrthoWidth                                                     => _offOrthoWidth.GetValue();
	public float                                              OrthoNearClipPlane                                             => _offOrthoNearClipPlane.GetValue();
	public float                                              OrthoFarClipPlane                                              => _offOrthoFarClipPlane.GetValue();
	public float                                              AspectRatio                                                    => _offAspectRatio.GetValue();
	public TEnumAsByte<ECameraProjectionMode>                 ProjectionMode                                                 => _offProjectionMode.GetValue();
	public float                                              PostProcessBlendWeight                                         => _offPostProcessBlendWeight.GetValue();
	public FPostProcessSettings                               PostProcessSettings                                            => _offPostProcessSettings.GetValue();
	#endregion


}

// Class Engine.SoundEffectPreset
// 0x0000 (0x0028 - 0x0028)
public class USoundEffectPreset : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SoundEffectSubmixPreset
// 0x0018 (0x0040 - 0x0028)
public class USoundEffectSubmixPreset : USoundEffectPreset
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SoundWaveProcedural
// 0x0118 (0x02C0 - 0x01A8)
public class USoundWaveProcedural : USoundWave
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.BlueprintCore
// 0x0024 (0x004C - 0x0028)
public class UBlueprintCore : UObject
{
	#region Offsets
	private ExternalOffset<UClass>                            _offSkeletonGeneratedClass                                     = new ExternalOffset<UClass>(0x0028, true);                    // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offGeneratedClass                                             = new ExternalOffset<UClass>(0x0030, true);                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbLegacyNeedToPurgeSkelRefs                                 = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offBlueprintGuid                                              = new ExternalOffset<FGuid>(0x003C, false);                    // 0x003C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UClass                                             SkeletonGeneratedClass                                         => _offSkeletonGeneratedClass.GetValue();
	public UClass                                             GeneratedClass                                                 => _offGeneratedClass.GetValue();
	public byte/*(bool)*/                                     bLegacyNeedToPurgeSkelRefs                                     => _offbLegacyNeedToPurgeSkelRefs.GetValue();
	public FGuid                                              BlueprintGuid                                                  => _offBlueprintGuid.GetValue();
	#endregion


}

// Class Engine.Blueprint
// 0x0085 (0x00D1 - 0x004C)
public class UBlueprint : UBlueprintCore
{
	#region Offsets
//	private ExternalOffset<char>                              _offbRecompileOnLoad                                           = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offParentClass                                                = new ExternalOffset<UClass>(0x0058, true);                    // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasBeenRegenerated                                        = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsRegeneratingOnLoad                                      = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USimpleConstructionScript>         _offSimpleConstructionScript                                   = new ExternalOffset<USimpleConstructionScript>(0x0068, true); // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UActorComponent>>           _offComponentTemplates                                         = new ExternalOffset<TArray<UActorComponent>>(0x0070, false);  // 0x0070(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UTimelineTemplate>>         _offTimelines                                                  = new ExternalOffset<TArray<UTimelineTemplate>>(0x0080, false); // 0x0080(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UInheritableComponentHandler>      _offInheritableComponentHandler                                = new ExternalOffset<UInheritableComponentHandler>(0x0090, true); // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBlueprintType>>       _offBlueprintType                                              = new ExternalOffset<TEnumAsByte<EBlueprintType>>(0x0098, false); // 0x0098(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offBlueprintSystemVersion                                     = new ExternalOffset<int>(0x009C);                             // 0x009C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbNativize                                                  = new ExternalOffset<byte/*(bool)*/>(0x00D0);                  // 0x00D0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UClass                                             ParentClass                                                    => _offParentClass.GetValue();
	public USimpleConstructionScript                          SimpleConstructionScript                                       => _offSimpleConstructionScript.GetValue();
	public TArray<UActorComponent>                            ComponentTemplates                                             => _offComponentTemplates.GetValue();
	public TArray<UTimelineTemplate>                          Timelines                                                      => _offTimelines.GetValue();
	public UInheritableComponentHandler                       InheritableComponentHandler                                    => _offInheritableComponentHandler.GetValue();
	public TEnumAsByte<EBlueprintType>                        BlueprintType                                                  => _offBlueprintType.GetValue();
	public int                                                BlueprintSystemVersion                                         => _offBlueprintSystemVersion.GetValue();
	public byte/*(bool)*/                                     bNativize                                                      => _offbNativize.GetValue();
	#endregion


}

// Class Engine.Model
// 0x0000 (0x0028 - 0x0028)
public class UModel : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ActorChannel
// 0x0148 (0x0178 - 0x0030)
public class UActorChannel : UChannel
{
	#region Offsets
	private ExternalOffset<AActor>                            _offActor                                                      = new ExternalOffset<AActor>(0x0070, true);                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObject>>                   _offCreateSubObjects                                           = new ExternalOffset<TArray<UObject>>(0x0168, false);          // 0x0168(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public AActor                                             Actor                                                          => _offActor.GetValue();
	public TArray<UObject>                                    CreateSubObjects                                               => _offCreateSubObjects.GetValue();
	#endregion


}

// Class Engine.AnimationAsset
// 0x0058 (0x0080 - 0x0028)
public class UAnimationAsset : UObject
{
	#region Offsets
	private ExternalOffset<USkeleton>                         _offSkeleton                                                   = new ExternalOffset<USkeleton>(0x0038, true);                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UAnimMetaData>>             _offMetaData                                                   = new ExternalOffset<TArray<UAnimMetaData>>(0x0060, false);    // 0x0060(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UAssetUserData>>            _offAssetUserData                                              = new ExternalOffset<TArray<UAssetUserData>>(0x0070, false);   // 0x0070(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public USkeleton                                          Skeleton                                                       => _offSkeleton.GetValue();
	public TArray<UAnimMetaData>                              MetaData                                                       => _offMetaData.GetValue();
	public TArray<UAssetUserData>                             AssetUserData                                                  => _offAssetUserData.GetValue();
	#endregion


}

// Class Engine.BlendSpaceBase
// 0x00C8 (0x0148 - 0x0080)
public class UBlendSpaceBase : UAnimationAsset
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                    _offbRotationBlendInMeshSpace                                  = new ExternalOffset<byte/*(bool)*/>(0x0088);                  // 0x0088(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAnimLength                                                 = new ExternalOffset<float>(0x008C);                           // 0x008C(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<FInterpolationParameter>           _offInterpolationParam[0x3]                                    = new ExternalOffset<FInterpolationParameter>(0x0090, false);  // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTargetWeightInterpolationSpeedPerSec                       = new ExternalOffset<float>(0x00A8);                           // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ENotifyTriggerMode>>   _offNotifyTriggerMode                                          = new ExternalOffset<TEnumAsByte<ENotifyTriggerMode>>(0x00AC, false); // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPerBoneInterpolation>>     _offPerBoneBlend                                               = new ExternalOffset<TArray<FPerBoneInterpolation>>(0x00B0, false); // 0x00B0(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offSampleIndexWithMarkers                                     = new ExternalOffset<int>(0x00C0);                             // 0x00C0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FBlendSample>>              _offSampleData                                                 = new ExternalOffset<TArray<FBlendSample>>(0x00C8, false);     // 0x00C8(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FEditorElement>>            _offGridSamples                                                = new ExternalOffset<TArray<FEditorElement>>(0x00D8, false);   // 0x00D8(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
//	private ExternalOffset<FBlendParameter>                   _offBlendParameters[0x3]                                       = new ExternalOffset<FBlendParameter>(0x00E8, false);          // 0x00E8(0x0020) (Edit, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public byte/*(bool)*/                                     bRotationBlendInMeshSpace                                      => _offbRotationBlendInMeshSpace.GetValue();
	public float                                              AnimLength                                                     => _offAnimLength.GetValue();
	public float                                              TargetWeightInterpolationSpeedPerSec                           => _offTargetWeightInterpolationSpeedPerSec.GetValue();
	public TEnumAsByte<ENotifyTriggerMode>                    NotifyTriggerMode                                              => _offNotifyTriggerMode.GetValue();
	public TArray<FPerBoneInterpolation>                      PerBoneBlend                                                   => _offPerBoneBlend.GetValue();
	public int                                                SampleIndexWithMarkers                                         => _offSampleIndexWithMarkers.GetValue();
	public TArray<FBlendSample>                               SampleData                                                     => _offSampleData.GetValue();
	public TArray<FEditorElement>                             GridSamples                                                    => _offGridSamples.GetValue();
	#endregion


}

// Class Engine.BlendSpace
// 0x0001 (0x0149 - 0x0148)
public class UBlendSpace : UBlendSpaceBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EBlendSpaceAxis>>      _offAxisToScaleAnimation                                       = new ExternalOffset<TEnumAsByte<EBlendSpaceAxis>>(0x0148, false); // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TEnumAsByte<EBlendSpaceAxis>                       AxisToScaleAnimation                                           => _offAxisToScaleAnimation.GetValue();
	#endregion


}

// Class Engine.AimOffsetBlendSpace
// 0x0007 (0x0150 - 0x0149)
public class UAimOffsetBlendSpace : UBlendSpace
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.BlendSpace1D
// 0x0001 (0x0149 - 0x0148)
public class UBlendSpace1D : UBlendSpaceBase
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                    _offbScaleAnimation                                            = new ExternalOffset<byte/*(bool)*/>(0x0148);                  // 0x0148(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                     bScaleAnimation                                                => _offbScaleAnimation.GetValue();
	#endregion


}

// Class Engine.AimOffsetBlendSpace1D
// 0x0007 (0x0150 - 0x0149)
public class UAimOffsetBlendSpace1D : UBlendSpace1D
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AISystemBase
// 0x0029 (0x0051 - 0x0028)
public class UAISystemBase : UObject
{
	#region Offsets
	private ExternalOffset<FSoftClassPath>                    _offAISystemClassName                                          = new ExternalOffset<FSoftClassPath>(0x0028, false);           // 0x0028(0x0018) (ZeroConstructor, Config, GlobalConfig, NoClear, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                             _offAISystemModuleName                                         = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                    _offbInstantiateAISystemOnClient                               = new ExternalOffset<byte/*(bool)*/>(0x0050);                  // 0x0050(0x0001) (ZeroConstructor, Config, GlobalConfig, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FSoftClassPath                                     AISystemClassName                                              => _offAISystemClassName.GetValue();
	public FName                                              AISystemModuleName                                             => _offAISystemModuleName.GetValue();
	public byte/*(bool)*/                                     bInstantiateAISystemOnClient                                   => _offbInstantiateAISystemOnClient.GetValue();
	#endregion


}

// Class Engine.AmbientSound
// 0x0018 (0x0250 - 0x0238)
public class AAmbientSound : AActor
{
	#region Offsets
	private ExternalOffset<UAudioComponent>                   _offAudioComponent                                             = new ExternalOffset<UAudioComponent>(0x0248, true);           // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UAudioComponent                                    AudioComponent                                                 => _offAudioComponent.GetValue();
	#endregion


}

// Class Engine.AnimationSettings
// 0x0046 (0x006E - 0x0028)
public class UAnimationSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<int>                               _offCompressCommandletVersion                                  = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, ZeroConstructor, Config, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offKeyEndEffectorsMatchNameArray                              = new ExternalOffset<TArray<FString>>(0x0040, false);          // 0x0040(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offDefaultCompressionAlgorithm                                = new ExternalOffset<UClass>(0x0050, true);                    // 0x0050(0x0008) (Edit, ZeroConstructor, Config, NoClear, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>> _offRotationCompressionFormat                                  = new ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>>(0x0058, false); // 0x0058(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>> _offTranslationCompressionFormat                               = new ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>>(0x0059, false); // 0x0059(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxCurveError                                              = new ExternalOffset<float>(0x005C);                           // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAlternativeCompressionThreshold                            = new ExternalOffset<float>(0x0060);                           // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offForceRecompression                                         = new ExternalOffset<byte/*(bool)*/>(0x0064);                  // 0x0064(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbOnlyCheckForMissingSkeletalMeshes                         = new ExternalOffset<byte/*(bool)*/>(0x0065);                  // 0x0065(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbForceBelowThreshold                                       = new ExternalOffset<byte/*(bool)*/>(0x0066);                  // 0x0066(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbFirstRecompressUsingCurrentOrDefault                      = new ExternalOffset<byte/*(bool)*/>(0x0067);                  // 0x0067(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbRaiseMaxErrorToExisting                                   = new ExternalOffset<byte/*(bool)*/>(0x0068);                  // 0x0068(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbTryExhaustiveSearch                                       = new ExternalOffset<byte/*(bool)*/>(0x0069);                  // 0x0069(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableSegmenting                                          = new ExternalOffset<byte/*(bool)*/>(0x006A);                  // 0x006A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnablePerformanceLog                                      = new ExternalOffset<byte/*(bool)*/>(0x006B);                  // 0x006B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbStripAnimationDataOnDedicatedServer                       = new ExternalOffset<byte/*(bool)*/>(0x006C);                  // 0x006C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbTickAnimationOnSkeletalMeshInit                           = new ExternalOffset<byte/*(bool)*/>(0x006D);                  // 0x006D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                CompressCommandletVersion                                      => _offCompressCommandletVersion.GetValue();
	public TArray<FString>                                    KeyEndEffectorsMatchNameArray                                  => _offKeyEndEffectorsMatchNameArray.GetValue();
	public UClass                                             DefaultCompressionAlgorithm                                    => _offDefaultCompressionAlgorithm.GetValue();
	public TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat                                      => _offRotationCompressionFormat.GetValue();
	public TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat                                   => _offTranslationCompressionFormat.GetValue();
	public float                                              MaxCurveError                                                  => _offMaxCurveError.GetValue();
	public float                                              AlternativeCompressionThreshold                                => _offAlternativeCompressionThreshold.GetValue();
	public byte/*(bool)*/                                     ForceRecompression                                             => _offForceRecompression.GetValue();
	public byte/*(bool)*/                                     bOnlyCheckForMissingSkeletalMeshes                             => _offbOnlyCheckForMissingSkeletalMeshes.GetValue();
	public byte/*(bool)*/                                     bForceBelowThreshold                                           => _offbForceBelowThreshold.GetValue();
	public byte/*(bool)*/                                     bFirstRecompressUsingCurrentOrDefault                          => _offbFirstRecompressUsingCurrentOrDefault.GetValue();
	public byte/*(bool)*/                                     bRaiseMaxErrorToExisting                                       => _offbRaiseMaxErrorToExisting.GetValue();
	public byte/*(bool)*/                                     bTryExhaustiveSearch                                           => _offbTryExhaustiveSearch.GetValue();
	public byte/*(bool)*/                                     bEnableSegmenting                                              => _offbEnableSegmenting.GetValue();
	public byte/*(bool)*/                                     bEnablePerformanceLog                                          => _offbEnablePerformanceLog.GetValue();
	public byte/*(bool)*/                                     bStripAnimationDataOnDedicatedServer                           => _offbStripAnimationDataOnDedicatedServer.GetValue();
	public byte/*(bool)*/                                     bTickAnimationOnSkeletalMeshInit                               => _offbTickAnimationOnSkeletalMeshInit.GetValue();
	#endregion


}

// Class Engine.AnimBlueprint
// 0x0029 (0x00FA - 0x00D1)
public class UAnimBlueprint : UBlueprint
{
	#region Offsets
	private ExternalOffset<USkeleton>                         _offTargetSkeleton                                             = new ExternalOffset<USkeleton>(0x00E0, true);                 // 0x00E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimGroupInfo>>            _offGroups                                                     = new ExternalOffset<TArray<FAnimGroupInfo>>(0x00E8, false);   // 0x00E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseMultiThreadedAnimationUpdate                           = new ExternalOffset<byte/*(bool)*/>(0x00F8);                  // 0x00F8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbWarnAboutBlueprintUsage                                   = new ExternalOffset<byte/*(bool)*/>(0x00F9);                  // 0x00F9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USkeleton                                          TargetSkeleton                                                 => _offTargetSkeleton.GetValue();
	public TArray<FAnimGroupInfo>                             Groups                                                         => _offGroups.GetValue();
	public byte/*(bool)*/                                     bUseMultiThreadedAnimationUpdate                               => _offbUseMultiThreadedAnimationUpdate.GetValue();
	public byte/*(bool)*/                                     bWarnAboutBlueprintUsage                                       => _offbWarnAboutBlueprintUsage.GetValue();
	#endregion


}

// Class Engine.AnimBlueprintGeneratedClass
// 0x0118 (0x03C0 - 0x02A8)
public class UAnimBlueprintGeneratedClass : UBlueprintGeneratedClass
{
	#region Offsets
	private ExternalOffset<TArray<FBakedAnimationStateMachine>> _offBakedStateMachines                                         = new ExternalOffset<TArray<FBakedAnimationStateMachine>>(0x02E8, false); // 0x02E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<USkeleton>                         _offTargetSkeleton                                             = new ExternalOffset<USkeleton>(0x02F8, true);                 // 0x02F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimNotifyEvent>>          _offAnimNotifies                                               = new ExternalOffset<TArray<FAnimNotifyEvent>>(0x0300, false); // 0x0300(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private TMap<struct FName, struct FCachedPoseIndices>     _offOrderedSavedPoseIndicesMap                                 = new ExternalOffset<TMap<FCachedPoseIndices>>(0x0310, false); // 0x0310(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offSyncGroupNames                                             = new ExternalOffset<TArray<FName>>(0x03A0, false);            // 0x03A0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FExposedValueHandler>>      _offEvaluateGraphExposedInputs                                 = new ExternalOffset<TArray<FExposedValueHandler>>(0x03B0, false); // 0x03B0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBakedAnimationStateMachine>                BakedStateMachines                                             => _offBakedStateMachines.GetValue();
	public USkeleton                                          TargetSkeleton                                                 => _offTargetSkeleton.GetValue();
	public TArray<FAnimNotifyEvent>                           AnimNotifies                                                   => _offAnimNotifies.GetValue();
	public TArray<FName>                                      SyncGroupNames                                                 => _offSyncGroupNames.GetValue();
	public TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs                                     => _offEvaluateGraphExposedInputs.GetValue();
	#endregion


}

// Class Engine.AnimClassData
// 0x00E0 (0x0108 - 0x0028)
public class UAnimClassData : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FBakedAnimationStateMachine>> _offBakedStateMachines                                         = new ExternalOffset<TArray<FBakedAnimationStateMachine>>(0x0030, false); // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<USkeleton>                         _offTargetSkeleton                                             = new ExternalOffset<USkeleton>(0x0040, true);                 // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimNotifyEvent>>          _offAnimNotifies                                               = new ExternalOffset<TArray<FAnimNotifyEvent>>(0x0048, false); // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private TMap<struct FName, struct FCachedPoseIndices>     _offOrderedSavedPoseIndicesMap                                 = new ExternalOffset<TMap<FCachedPoseIndices>>(0x0058, false); // 0x0058(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimBlueprintFunction>>    _offAnimBlueprintFunctions                                     = new ExternalOffset<TArray<FAnimBlueprintFunction>>(0x00A8, false); // 0x00A8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UStructProperty>>           _offAnimNodeProperties                                         = new ExternalOffset<TArray<UStructProperty>>(0x00B8, false);  // 0x00B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UStructProperty>>           _offSubInstanceNodeProperties                                  = new ExternalOffset<TArray<UStructProperty>>(0x00C8, false);  // 0x00C8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UStructProperty>>           _offLayerNodeProperties                                        = new ExternalOffset<TArray<UStructProperty>>(0x00D8, false);  // 0x00D8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offSyncGroupNames                                             = new ExternalOffset<TArray<FName>>(0x00E8, false);            // 0x00E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FExposedValueHandler>>      _offEvaluateGraphExposedInputs                                 = new ExternalOffset<TArray<FExposedValueHandler>>(0x00F8, false); // 0x00F8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBakedAnimationStateMachine>                BakedStateMachines                                             => _offBakedStateMachines.GetValue();
	public USkeleton                                          TargetSkeleton                                                 => _offTargetSkeleton.GetValue();
	public TArray<FAnimNotifyEvent>                           AnimNotifies                                                   => _offAnimNotifies.GetValue();
	public TArray<FAnimBlueprintFunction>                     AnimBlueprintFunctions                                         => _offAnimBlueprintFunctions.GetValue();
	public TArray<UStructProperty>                            AnimNodeProperties                                             => _offAnimNodeProperties.GetValue();
	public TArray<UStructProperty>                            SubInstanceNodeProperties                                      => _offSubInstanceNodeProperties.GetValue();
	public TArray<UStructProperty>                            LayerNodeProperties                                            => _offLayerNodeProperties.GetValue();
	public TArray<FName>                                      SyncGroupNames                                                 => _offSyncGroupNames.GetValue();
	public TArray<FExposedValueHandler>                       EvaluateGraphExposedInputs                                     => _offEvaluateGraphExposedInputs.GetValue();
	#endregion


}

// Class Engine.AnimClassInterface
// 0x0000 (0x0028 - 0x0028)
public class UAnimClassInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimSequenceBase
// 0x0028 (0x00A8 - 0x0080)
public class UAnimSequenceBase : UAnimationAsset
{
	#region Offsets
	private ExternalOffset<TArray<FAnimNotifyEvent>>          _offNotifies                                                   = new ExternalOffset<TArray<FAnimNotifyEvent>>(0x0080, false); // 0x0080(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSequenceLength                                             = new ExternalOffset<float>(0x0090);                           // 0x0090(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRateScale                                                  = new ExternalOffset<float>(0x0094);                           // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawCurveTracks>                   _offRawCurveData                                               = new ExternalOffset<FRawCurveTracks>(0x0098, false);          // 0x0098(0x0010) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FAnimNotifyEvent>                           Notifies                                                       => _offNotifies.GetValue();
	public float                                              SequenceLength                                                 => _offSequenceLength.GetValue();
	public float                                              RateScale                                                      => _offRateScale.GetValue();
	public FRawCurveTracks                                    RawCurveData                                                   => _offRawCurveData.GetValue();
	#endregion


}

// Class Engine.AnimCompositeBase
// 0x0000 (0x00A8 - 0x00A8)
public class UAnimCompositeBase : UAnimSequenceBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimComposite
// 0x0010 (0x00B8 - 0x00A8)
public class UAnimComposite : UAnimCompositeBase
{
	#region Offsets
	private ExternalOffset<FAnimTrack>                        _offAnimationTrack                                             = new ExternalOffset<FAnimTrack>(0x00A8, false);               // 0x00A8(0x0010) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FAnimTrack                                         AnimationTrack                                                 => _offAnimationTrack.GetValue();
	#endregion


}

// Class Engine.AnimCompress
// 0x0024 (0x004C - 0x0028)
public class UAnimCompress : UObject
{
	#region Offsets
	private ExternalOffset<FString>                           _offDescription                                                = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNeedsSkeleton                                             = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableSegmenting                                          = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offIdealNumFramesPerSegment                                   = new ExternalOffset<uint>(0x003C);                            // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offMaxNumFramesPerSegment                                     = new ExternalOffset<uint>(0x0040);                            // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>> _offTranslationCompressionFormat                               = new ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>>(0x0044, false); // 0x0044(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>> _offRotationCompressionFormat                                  = new ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>>(0x0045, false); // 0x0045(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>> _offScaleCompressionFormat                                     = new ExternalOffset<TEnumAsByte<EAnimationCompressionFormat>>(0x0046, false); // 0x0046(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxCurveError                                              = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            Description                                                    => _offDescription.GetValue();
	public uint                                               IdealNumFramesPerSegment                                       => _offIdealNumFramesPerSegment.GetValue();
	public uint                                               MaxNumFramesPerSegment                                         => _offMaxNumFramesPerSegment.GetValue();
	public TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat                                   => _offTranslationCompressionFormat.GetValue();
	public TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat                                      => _offRotationCompressionFormat.GetValue();
	public TEnumAsByte<EAnimationCompressionFormat>           ScaleCompressionFormat                                         => _offScaleCompressionFormat.GetValue();
	public float                                              MaxCurveError                                                  => _offMaxCurveError.GetValue();
	#endregion


}

// Class Engine.AnimCompress_Automatic
// 0x0009 (0x0055 - 0x004C)
public class UAnimCompress_Automatic : UAnimCompress
{
	#region Offsets
	private ExternalOffset<float>                             _offMaxEndEffectorError                                        = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRunCurrentDefaultCompressor                               = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoReplaceIfExistingErrorTooGreat                        = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRaiseMaxErrorToExisting                                   = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTryExhaustiveSearch                                       = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              MaxEndEffectorError                                            => _offMaxEndEffectorError.GetValue();
	#endregion


}

// Class Engine.AnimCompress_BitwiseCompressOnly
// 0x0004 (0x0050 - 0x004C)
public class UAnimCompress_BitwiseCompressOnly : UAnimCompress
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimCompress_LeastDestructive
// 0x0004 (0x0050 - 0x004C)
public class UAnimCompress_LeastDestructive : UAnimCompress
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimCompress_RemoveLinearKeys
// 0x0021 (0x006D - 0x004C)
public class UAnimCompress_RemoveLinearKeys : UAnimCompress
{
	#region Offsets
	private ExternalOffset<float>                             _offMaxPosDiff                                                 = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxAngleDiff                                               = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxScaleDiff                                               = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxEffectorDiff                                            = new ExternalOffset<float>(0x005C);                           // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinEffectorDiff                                            = new ExternalOffset<float>(0x0060);                           // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEffectorDiffSocket                                         = new ExternalOffset<float>(0x0064);                           // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offParentKeyScale                                             = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRetarget                                                  = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbActuallyFilterLinearKeys                                  = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOptimizeForForwardPlayback                                = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseDecompression                                          = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseMultithreading                                         = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              MaxPosDiff                                                     => _offMaxPosDiff.GetValue();
	public float                                              MaxAngleDiff                                                   => _offMaxAngleDiff.GetValue();
	public float                                              MaxScaleDiff                                                   => _offMaxScaleDiff.GetValue();
	public float                                              MaxEffectorDiff                                                => _offMaxEffectorDiff.GetValue();
	public float                                              MinEffectorDiff                                                => _offMinEffectorDiff.GetValue();
	public float                                              EffectorDiffSocket                                             => _offEffectorDiffSocket.GetValue();
	public float                                              ParentKeyScale                                                 => _offParentKeyScale.GetValue();
	#endregion


}

// Class Engine.AnimCompress_PerTrackCompression
// 0x0077 (0x00E4 - 0x006D)
public class UAnimCompress_PerTrackCompression : UAnimCompress_RemoveLinearKeys
{
	#region Offsets
	private ExternalOffset<float>                             _offMaxZeroingThreshold                                        = new ExternalOffset<float>(0x0070);                           // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxPosDiffBitwise                                          = new ExternalOffset<float>(0x0074);                           // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxAngleDiffBitwise                                        = new ExternalOffset<float>(0x0078);                           // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxScaleDiffBitwise                                        = new ExternalOffset<float>(0x007C);                           // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<TEnumAsByte<EAnimationCompressionFormat>>> _offAllowedRotationFormats                                     = new ExternalOffset<TArray<TEnumAsByte<EAnimationCompressionFormat>>>(0x0080, false); // 0x0080(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<TEnumAsByte<EAnimationCompressionFormat>>> _offAllowedTranslationFormats                                  = new ExternalOffset<TArray<TEnumAsByte<EAnimationCompressionFormat>>>(0x0090, false); // 0x0090(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<TEnumAsByte<EAnimationCompressionFormat>>> _offAllowedScaleFormats                                        = new ExternalOffset<TArray<TEnumAsByte<EAnimationCompressionFormat>>>(0x00A0, false); // 0x00A0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbResampleAnimation                                         = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offResampledFramerate                                         = new ExternalOffset<float>(0x00B4);                           // 0x00B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMinKeysForResampling                                       = new ExternalOffset<int>(0x00B8);                             // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseAdaptiveError                                          = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseOverrideForEndEffectors                                = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offTrackHeightBias                                            = new ExternalOffset<int>(0x00C0);                             // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offParentingDivisor                                           = new ExternalOffset<float>(0x00C4);                           // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offParentingDivisorExponent                                   = new ExternalOffset<float>(0x00C8);                           // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseAdaptiveError2                                         = new ExternalOffset<char>(0x00CC, false);                     // 0x00CC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRotationErrorSourceRatio                                   = new ExternalOffset<float>(0x00D0);                           // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTranslationErrorSourceRatio                                = new ExternalOffset<float>(0x00D4);                           // 0x00D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offScaleErrorSourceRatio                                      = new ExternalOffset<float>(0x00D8);                           // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxErrorPerTrackRatio                                      = new ExternalOffset<float>(0x00DC);                           // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPerturbationProbeSize                                      = new ExternalOffset<float>(0x00E0);                           // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              MaxZeroingThreshold                                            => _offMaxZeroingThreshold.GetValue();
	public float                                              MaxPosDiffBitwise                                              => _offMaxPosDiffBitwise.GetValue();
	public float                                              MaxAngleDiffBitwise                                            => _offMaxAngleDiffBitwise.GetValue();
	public float                                              MaxScaleDiffBitwise                                            => _offMaxScaleDiffBitwise.GetValue();
	public TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedRotationFormats                                         => _offAllowedRotationFormats.GetValue();
	public TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedTranslationFormats                                      => _offAllowedTranslationFormats.GetValue();
	public TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedScaleFormats                                            => _offAllowedScaleFormats.GetValue();
	public float                                              ResampledFramerate                                             => _offResampledFramerate.GetValue();
	public int                                                MinKeysForResampling                                           => _offMinKeysForResampling.GetValue();
	public int                                                TrackHeightBias                                                => _offTrackHeightBias.GetValue();
	public float                                              ParentingDivisor                                               => _offParentingDivisor.GetValue();
	public float                                              ParentingDivisorExponent                                       => _offParentingDivisorExponent.GetValue();
	public float                                              RotationErrorSourceRatio                                       => _offRotationErrorSourceRatio.GetValue();
	public float                                              TranslationErrorSourceRatio                                    => _offTranslationErrorSourceRatio.GetValue();
	public float                                              ScaleErrorSourceRatio                                          => _offScaleErrorSourceRatio.GetValue();
	public float                                              MaxErrorPerTrackRatio                                          => _offMaxErrorPerTrackRatio.GetValue();
	public float                                              PerturbationProbeSize                                          => _offPerturbationProbeSize.GetValue();
	#endregion


}

// Class Engine.AnimCompress_RemoveEverySecondKey
// 0x0009 (0x0055 - 0x004C)
public class UAnimCompress_RemoveEverySecondKey : UAnimCompress
{
	#region Offsets
	private ExternalOffset<int>                               _offMinKeys                                                    = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStartAtSecondKey                                          = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                MinKeys                                                        => _offMinKeys.GetValue();
	#endregion


}

// Class Engine.AnimCompress_RemoveTrivialKeys
// 0x0010 (0x005C - 0x004C)
public class UAnimCompress_RemoveTrivialKeys : UAnimCompress
{
	#region Offsets
	private ExternalOffset<float>                             _offMaxPosDiff                                                 = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxAngleDiff                                               = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxScaleDiff                                               = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              MaxPosDiff                                                     => _offMaxPosDiff.GetValue();
	public float                                              MaxAngleDiff                                                   => _offMaxAngleDiff.GetValue();
	public float                                              MaxScaleDiff                                                   => _offMaxScaleDiff.GetValue();
	#endregion


}

// Class Engine.AnimCurveCompressionCodec
// 0x0000 (0x0028 - 0x0028)
public class UAnimCurveCompressionCodec : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimCurveCompressionCodec_CompressedRichCurve
// 0x0000 (0x0028 - 0x0028)
public class UAnimCurveCompressionCodec_CompressedRichCurve : UAnimCurveCompressionCodec
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimCurveCompressionCodec_UniformlySampled
// 0x0000 (0x0028 - 0x0028)
public class UAnimCurveCompressionCodec_UniformlySampled : UAnimCurveCompressionCodec
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimCurveCompressionSettings
// 0x0008 (0x0030 - 0x0028)
public class UAnimCurveCompressionSettings : UObject
{
	#region Offsets
	private ExternalOffset<UAnimCurveCompressionCodec>        _offCodec                                                      = new ExternalOffset<UAnimCurveCompressionCodec>(0x0028, true); // 0x0028(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimCurveCompressionCodec                         Codec                                                          => _offCodec.GetValue();
	#endregion


}

// Class Engine.AnimLayerInterface
// 0x0000 (0x0028 - 0x0028)
public class UAnimLayerInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimMetaData
// 0x0000 (0x0028 - 0x0028)
public class UAnimMetaData : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimMontage
// 0x0128 (0x01D0 - 0x00A8)
public class UAnimMontage : UAnimCompositeBase
{
	#region Offsets
	private ExternalOffset<FAlphaBlend>                       _offBlendIn                                                    = new ExternalOffset<FAlphaBlend>(0x00A8, false);              // 0x00A8(0x0030) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBlendInTime                                                = new ExternalOffset<float>(0x00D8);                           // 0x00D8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FAlphaBlend>                       _offBlendOut                                                   = new ExternalOffset<FAlphaBlend>(0x00E0, false);              // 0x00E0(0x0030) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offblendOutTime                                               = new ExternalOffset<float>(0x0110);                           // 0x0110(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBlendOutTriggerTime                                        = new ExternalOffset<float>(0x0114);                           // 0x0114(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offSyncGroup                                                  = new ExternalOffset<FName>(0x0118, false);                    // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSyncSlotIndex                                              = new ExternalOffset<int>(0x0120);                             // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMarkerSyncData>                   _offMarkerData                                                 = new ExternalOffset<FMarkerSyncData>(0x0128, false);          // 0x0128(0x0020) (NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FCompositeSection>>         _offCompositeSections                                          = new ExternalOffset<TArray<FCompositeSection>>(0x0148, false); // 0x0148(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSlotAnimationTrack>>       _offSlotAnimTracks                                             = new ExternalOffset<TArray<FSlotAnimationTrack>>(0x0158, false); // 0x0158(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBranchingPoint>>           _offBranchingPoints                                            = new ExternalOffset<TArray<FBranchingPoint>>(0x0168, false);  // 0x0168(0x0010) (ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableRootMotionTranslation                               = new ExternalOffset<byte/*(bool)*/>(0x0178);                  // 0x0178(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableRootMotionRotation                                  = new ExternalOffset<byte/*(bool)*/>(0x0179);                  // 0x0179(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableAutoBlendOut                                        = new ExternalOffset<byte/*(bool)*/>(0x017A);                  // 0x017A(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERootMotionRootLock>>  _offRootMotionRootLock                                         = new ExternalOffset<TEnumAsByte<ERootMotionRootLock>>(0x017B, false); // 0x017B(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBranchingPointMarker>>     _offBranchingPointMarkers                                      = new ExternalOffset<TArray<FBranchingPointMarker>>(0x0180, false); // 0x0180(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<int>>                       _offBranchingPointStateNotifyIndices                           = new ExternalOffset<TArray<int>>(0x0190, false);              // 0x0190(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FTimeStretchCurve>                 _offTimeStretchCurve                                           = new ExternalOffset<FTimeStretchCurve>(0x01A0, false);        // 0x01A0(0x0028) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offTimeStretchCurveName                                       = new ExternalOffset<FName>(0x01C8, false);                    // 0x01C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FAlphaBlend                                        BlendIn                                                        => _offBlendIn.GetValue();
	public float                                              BlendInTime                                                    => _offBlendInTime.GetValue();
	public FAlphaBlend                                        BlendOut                                                       => _offBlendOut.GetValue();
	public float                                              blendOutTime                                                   => _offblendOutTime.GetValue();
	public float                                              BlendOutTriggerTime                                            => _offBlendOutTriggerTime.GetValue();
	public FName                                              SyncGroup                                                      => _offSyncGroup.GetValue();
	public int                                                SyncSlotIndex                                                  => _offSyncSlotIndex.GetValue();
	public FMarkerSyncData                                    MarkerData                                                     => _offMarkerData.GetValue();
	public TArray<FCompositeSection>                          CompositeSections                                              => _offCompositeSections.GetValue();
	public TArray<FSlotAnimationTrack>                        SlotAnimTracks                                                 => _offSlotAnimTracks.GetValue();
	public TArray<FBranchingPoint>                            BranchingPoints                                                => _offBranchingPoints.GetValue();
	public byte/*(bool)*/                                     bEnableRootMotionTranslation                                   => _offbEnableRootMotionTranslation.GetValue();
	public byte/*(bool)*/                                     bEnableRootMotionRotation                                      => _offbEnableRootMotionRotation.GetValue();
	public byte/*(bool)*/                                     bEnableAutoBlendOut                                            => _offbEnableAutoBlendOut.GetValue();
	public TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock                                             => _offRootMotionRootLock.GetValue();
	public TArray<FBranchingPointMarker>                      BranchingPointMarkers                                          => _offBranchingPointMarkers.GetValue();
	public TArray<int>                                        BranchingPointStateNotifyIndices                               => _offBranchingPointStateNotifyIndices.GetValue();
	public FTimeStretchCurve                                  TimeStretchCurve                                               => _offTimeStretchCurve.GetValue();
	public FName                                              TimeStretchCurveName                                           => _offTimeStretchCurveName.GetValue();
	#endregion


}

// Class Engine.AnimNotify_PauseClothingSimulation
// 0x0010 (0x0038 - 0x0028)
public class UAnimNotify_PauseClothingSimulation : UAnimNotify
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimNotify_PlayParticleEffect
// 0x0064 (0x008C - 0x0028)
public class UAnimNotify_PlayParticleEffect : UAnimNotify
{
	#region Offsets
	private ExternalOffset<UParticleSystem>                   _offPSTemplate                                                 = new ExternalOffset<UParticleSystem>(0x0038, true);           // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offLocationOffset                                             = new ExternalOffset<FVector>(0x0040, false);                  // 0x0040(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offRotationOffset                                             = new ExternalOffset<FRotator>(0x004C, false);                 // 0x004C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offScale                                                      = new ExternalOffset<FVector>(0x0058, false);                  // 0x0058(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offAttached                                                   = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offSocketName                                                 = new ExternalOffset<FName>(0x0084, false);                    // 0x0084(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UParticleSystem                                    PSTemplate                                                     => _offPSTemplate.GetValue();
	public FVector                                            LocationOffset                                                 => _offLocationOffset.GetValue();
	public FRotator                                           RotationOffset                                                 => _offRotationOffset.GetValue();
	public FVector                                            Scale                                                          => _offScale.GetValue();
	public FName                                              SocketName                                                     => _offSocketName.GetValue();
	#endregion


}

// Class Engine.AnimNotify_PlaySound
// 0x002C (0x0054 - 0x0028)
public class UAnimNotify_PlaySound : UAnimNotify
{
	#region Offsets
	private ExternalOffset<USoundBase>                        _offSound                                                      = new ExternalOffset<USoundBase>(0x0038, true);                // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeMultiplier                                           = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitchMultiplier                                            = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFollow                                                    = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offAttachName                                                 = new ExternalOffset<FName>(0x004C, false);                    // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundBase                                         Sound                                                          => _offSound.GetValue();
	public float                                              VolumeMultiplier                                               => _offVolumeMultiplier.GetValue();
	public float                                              PitchMultiplier                                                => _offPitchMultiplier.GetValue();
	public FName                                              AttachName                                                     => _offAttachName.GetValue();
	#endregion


}

// Class Engine.AnimNotify_ResetClothingSimulation
// 0x0010 (0x0038 - 0x0028)
public class UAnimNotify_ResetClothingSimulation : UAnimNotify
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimNotify_ResetDynamics
// 0x0010 (0x0038 - 0x0028)
public class UAnimNotify_ResetDynamics : UAnimNotify
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimNotify_ResumeClothingSimulation
// 0x0010 (0x0038 - 0x0028)
public class UAnimNotify_ResumeClothingSimulation : UAnimNotify
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimNotifyState_DisableRootMotion
// 0x0008 (0x0030 - 0x0028)
public class UAnimNotifyState_DisableRootMotion : UAnimNotifyState
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimNotifyState_TimedParticleEffect
// 0x0031 (0x0059 - 0x0028)
public class UAnimNotifyState_TimedParticleEffect : UAnimNotifyState
{
	#region Offsets
	private ExternalOffset<UParticleSystem>                   _offPSTemplate                                                 = new ExternalOffset<UParticleSystem>(0x0030, true);           // 0x0030(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offSocketName                                                 = new ExternalOffset<FName>(0x0038, false);                    // 0x0038(0x0008) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offLocationOffset                                             = new ExternalOffset<FVector>(0x0040, false);                  // 0x0040(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offRotationOffset                                             = new ExternalOffset<FRotator>(0x004C, false);                 // 0x004C(0x000C) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbDestroyAtEnd                                              = new ExternalOffset<byte/*(bool)*/>(0x0058);                  // 0x0058(0x0001) (Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UParticleSystem                                    PSTemplate                                                     => _offPSTemplate.GetValue();
	public FName                                              SocketName                                                     => _offSocketName.GetValue();
	public FVector                                            LocationOffset                                                 => _offLocationOffset.GetValue();
	public FRotator                                           RotationOffset                                                 => _offRotationOffset.GetValue();
	public byte/*(bool)*/                                     bDestroyAtEnd                                                  => _offbDestroyAtEnd.GetValue();
	#endregion


}

// Class Engine.AnimNotifyState_Trail
// 0x002D (0x0055 - 0x0028)
public class UAnimNotifyState_Trail : UAnimNotifyState
{
	#region Offsets
	private ExternalOffset<UParticleSystem>                   _offPSTemplate                                                 = new ExternalOffset<UParticleSystem>(0x0030, true);           // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offFirstSocketName                                            = new ExternalOffset<FName>(0x0038, false);                    // 0x0038(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offSecondSocketName                                           = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETrailWidthMode>>      _offWidthScaleMode                                             = new ExternalOffset<TEnumAsByte<ETrailWidthMode>>(0x0048, false); // 0x0048(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offWidthScaleCurve                                            = new ExternalOffset<FName>(0x004C, false);                    // 0x004C(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRecycleSpawnedSystems                                     = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UParticleSystem                                    PSTemplate                                                     => _offPSTemplate.GetValue();
	public FName                                              FirstSocketName                                                => _offFirstSocketName.GetValue();
	public FName                                              SecondSocketName                                               => _offSecondSocketName.GetValue();
	public TEnumAsByte<ETrailWidthMode>                       WidthScaleMode                                                 => _offWidthScaleMode.GetValue();
	public FName                                              WidthScaleCurve                                                => _offWidthScaleCurve.GetValue();
	#endregion


}

// Class Engine.AnimSequence
// 0x0138 (0x01E0 - 0x00A8)
public class UAnimSequence : UAnimSequenceBase
{
	#region Offsets
	private ExternalOffset<int>                               _offNumFrames                                                  = new ExternalOffset<int>(0x00A8);                             // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FTrackToSkeletonMap>>       _offTrackToSkeletonMapTable                                    = new ExternalOffset<TArray<FTrackToSkeletonMap>>(0x00B0, false); // 0x00B0(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<UAnimCurveCompressionSettings>     _offCurveCompressionSettings                                   = new ExternalOffset<UAnimCurveCompressionSettings>(0x00D0, true); // 0x00D0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAdditiveAnimationType>> _offAdditiveAnimType                                           = new ExternalOffset<TEnumAsByte<EAdditiveAnimationType>>(0x01A8, false); // 0x01A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAdditiveBasePoseType>> _offRefPoseType                                                = new ExternalOffset<TEnumAsByte<EAdditiveBasePoseType>>(0x01A9, false); // 0x01A9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimSequence>                     _offRefPoseSeq                                                 = new ExternalOffset<UAnimSequence>(0x01B0, true);             // 0x01B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offRefFrameIndex                                              = new ExternalOffset<int>(0x01B8);                             // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offRetargetSource                                             = new ExternalOffset<FName>(0x01BC, false);                    // 0x01BC(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAnimInterpolationType>            _offInterpolation                                              = new ExternalOffset<EAnimInterpolationType>(0x01C4, false);   // 0x01C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableRootMotion                                          = new ExternalOffset<byte/*(bool)*/>(0x01C5);                  // 0x01C5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERootMotionRootLock>>  _offRootMotionRootLock                                         = new ExternalOffset<TEnumAsByte<ERootMotionRootLock>>(0x01C6, false); // 0x01C6(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbForceRootLock                                             = new ExternalOffset<byte/*(bool)*/>(0x01C7);                  // 0x01C7(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseNormalizedRootMotionScale                              = new ExternalOffset<byte/*(bool)*/>(0x01C8);                  // 0x01C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbRootMotionSettingsCopiedFromMontage                       = new ExternalOffset<byte/*(bool)*/>(0x01C9);                  // 0x01C9(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimSyncMarker>>           _offAuthoredSyncMarkers                                        = new ExternalOffset<TArray<FAnimSyncMarker>>(0x01D0, false);  // 0x01D0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                NumFrames                                                      => _offNumFrames.GetValue();
	public TArray<FTrackToSkeletonMap>                        TrackToSkeletonMapTable                                        => _offTrackToSkeletonMapTable.GetValue();
	public UAnimCurveCompressionSettings                      CurveCompressionSettings                                       => _offCurveCompressionSettings.GetValue();
	public TEnumAsByte<EAdditiveAnimationType>                AdditiveAnimType                                               => _offAdditiveAnimType.GetValue();
	public TEnumAsByte<EAdditiveBasePoseType>                 RefPoseType                                                    => _offRefPoseType.GetValue();
	public UAnimSequence                                      RefPoseSeq                                                     => _offRefPoseSeq.GetValue();
	public int                                                RefFrameIndex                                                  => _offRefFrameIndex.GetValue();
	public FName                                              RetargetSource                                                 => _offRetargetSource.GetValue();
	public EAnimInterpolationType                             Interpolation                                                  => _offInterpolation.GetValue();
	public byte/*(bool)*/                                     bEnableRootMotion                                              => _offbEnableRootMotion.GetValue();
	public TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock                                             => _offRootMotionRootLock.GetValue();
	public byte/*(bool)*/                                     bForceRootLock                                                 => _offbForceRootLock.GetValue();
	public byte/*(bool)*/                                     bUseNormalizedRootMotionScale                                  => _offbUseNormalizedRootMotionScale.GetValue();
	public byte/*(bool)*/                                     bRootMotionSettingsCopiedFromMontage                           => _offbRootMotionSettingsCopiedFromMontage.GetValue();
	public TArray<FAnimSyncMarker>                            AuthoredSyncMarkers                                            => _offAuthoredSyncMarkers.GetValue();
	#endregion


}

// Class Engine.AnimSet
// 0x0078 (0x00A0 - 0x0028)
public class UAnimSet : UObject
{
	#region Offsets
//	private ExternalOffset<char>                              _offbAnimRotationOnly                                          = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FName>>                     _offTrackBoneNames                                             = new ExternalOffset<TArray<FName>>(0x0030, false);            // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimSetMeshLinkup>>        _offLinkupCache                                                = new ExternalOffset<TArray<FAnimSetMeshLinkup>>(0x0040, false); // 0x0040(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<char>>                      _offBoneUseAnimTranslation                                     = new ExternalOffset<TArray<char>>(0x0050, false);             // 0x0050(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<char>>                      _offForceUseMeshTranslation                                    = new ExternalOffset<TArray<char>>(0x0060, false);             // 0x0060(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FName>>                     _offUseTranslationBoneNames                                    = new ExternalOffset<TArray<FName>>(0x0070, false);            // 0x0070(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FName>>                     _offForceMeshTranslationBoneNames                              = new ExternalOffset<TArray<FName>>(0x0080, false);            // 0x0080(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                             _offPreviewSkelMeshName                                        = new ExternalOffset<FName>(0x0090, false);                    // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offBestRatioSkelMeshName                                      = new ExternalOffset<FName>(0x0098, false);                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FName>                                      TrackBoneNames                                                 => _offTrackBoneNames.GetValue();
	public TArray<FAnimSetMeshLinkup>                         LinkupCache                                                    => _offLinkupCache.GetValue();
	public TArray<char>                                       BoneUseAnimTranslation                                         => _offBoneUseAnimTranslation.GetValue();
	public TArray<char>                                       ForceUseMeshTranslation                                        => _offForceUseMeshTranslation.GetValue();
	public TArray<FName>                                      UseTranslationBoneNames                                        => _offUseTranslationBoneNames.GetValue();
	public TArray<FName>                                      ForceMeshTranslationBoneNames                                  => _offForceMeshTranslationBoneNames.GetValue();
	public FName                                              PreviewSkelMeshName                                            => _offPreviewSkelMeshName.GetValue();
	public FName                                              BestRatioSkelMeshName                                          => _offBestRatioSkelMeshName.GetValue();
	#endregion


}

// Class Engine.AnimSingleNodeInstance
// 0x0100 (0x0280 - 0x0180)
public class UAnimSingleNodeInstance : UAnimInstance
{
	#region Offsets
	private ExternalOffset<UAnimationAsset>                   _offCurrentAsset                                               = new ExternalOffset<UAnimationAsset>(0x0268, true);           // 0x0268(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptDelegate>                   _offPostEvaluateAnimEvent                                      = new ExternalOffset<FScriptDelegate>(0x0270, false);          // 0x0270(0x0010) (ZeroConstructor, Transient, InstancedReference, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimationAsset                                    CurrentAsset                                                   => _offCurrentAsset.GetValue();
	public FScriptDelegate                                    PostEvaluateAnimEvent                                          => _offPostEvaluateAnimEvent.GetValue();
	#endregion


}

// Class Engine.AnimStateMachineTypes
// 0x0000 (0x0028 - 0x0028)
public class UAnimStateMachineTypes : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AnimStreamable
// 0x002C (0x00D4 - 0x00A8)
public class UAnimStreamable : UAnimSequenceBase
{
	#region Offsets
	private ExternalOffset<int>                               _offNumFrames                                                  = new ExternalOffset<int>(0x00A8);                             // 0x00A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAnimInterpolationType>            _offInterpolation                                              = new ExternalOffset<EAnimInterpolationType>(0x00AC, false);   // 0x00AC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offRetargetSource                                             = new ExternalOffset<FName>(0x00B0, false);                    // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAnimCurveCompressionSettings>     _offCurveCompressionSettings                                   = new ExternalOffset<UAnimCurveCompressionSettings>(0x00C8, true); // 0x00C8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableRootMotion                                          = new ExternalOffset<byte/*(bool)*/>(0x00D0);                  // 0x00D0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERootMotionRootLock>>  _offRootMotionRootLock                                         = new ExternalOffset<TEnumAsByte<ERootMotionRootLock>>(0x00D1, false); // 0x00D1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbForceRootLock                                             = new ExternalOffset<byte/*(bool)*/>(0x00D2);                  // 0x00D2(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseNormalizedRootMotionScale                              = new ExternalOffset<byte/*(bool)*/>(0x00D3);                  // 0x00D3(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                NumFrames                                                      => _offNumFrames.GetValue();
	public EAnimInterpolationType                             Interpolation                                                  => _offInterpolation.GetValue();
	public FName                                              RetargetSource                                                 => _offRetargetSource.GetValue();
	public UAnimCurveCompressionSettings                      CurveCompressionSettings                                       => _offCurveCompressionSettings.GetValue();
	public byte/*(bool)*/                                     bEnableRootMotion                                              => _offbEnableRootMotion.GetValue();
	public TEnumAsByte<ERootMotionRootLock>                   RootMotionRootLock                                             => _offRootMotionRootLock.GetValue();
	public byte/*(bool)*/                                     bForceRootLock                                                 => _offbForceRootLock.GetValue();
	public byte/*(bool)*/                                     bUseNormalizedRootMotionScale                                  => _offbUseNormalizedRootMotionScale.GetValue();
	#endregion


}

// Class Engine.ApplicationLifecycleComponent
// 0x00A0 (0x0168 - 0x00C8)
public class UApplicationLifecycleComponent : UActorComponent
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationWillDeactivateDelegate                          = new ExternalOffset<FScriptMulticastDelegate>(0x00D8, false); // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationHasReactivatedDelegate                          = new ExternalOffset<FScriptMulticastDelegate>(0x00E8, false); // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationWillEnterBackgroundDelegate                     = new ExternalOffset<FScriptMulticastDelegate>(0x00F8, false); // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationHasEnteredForegroundDelegate                    = new ExternalOffset<FScriptMulticastDelegate>(0x0108, false); // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationWillTerminateDelegate                           = new ExternalOffset<FScriptMulticastDelegate>(0x0118, false); // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationShouldUnloadResourcesDelegate                   = new ExternalOffset<FScriptMulticastDelegate>(0x0128, false); // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationReceivedStartupArgumentsDelegate                = new ExternalOffset<FScriptMulticastDelegate>(0x0138, false); // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnTemperatureChangeDelegate                                = new ExternalOffset<FScriptMulticastDelegate>(0x0148, false); // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnLowPowerModeDelegate                                     = new ExternalOffset<FScriptMulticastDelegate>(0x0158, false); // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           ApplicationWillDeactivateDelegate                              => _offApplicationWillDeactivateDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationHasReactivatedDelegate                              => _offApplicationHasReactivatedDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationWillEnterBackgroundDelegate                         => _offApplicationWillEnterBackgroundDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationHasEnteredForegroundDelegate                        => _offApplicationHasEnteredForegroundDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationWillTerminateDelegate                               => _offApplicationWillTerminateDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationShouldUnloadResourcesDelegate                       => _offApplicationShouldUnloadResourcesDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationReceivedStartupArgumentsDelegate                    => _offApplicationReceivedStartupArgumentsDelegate.GetValue();
	public FScriptMulticastDelegate                           OnTemperatureChangeDelegate                                    => _offOnTemperatureChangeDelegate.GetValue();
	public FScriptMulticastDelegate                           OnLowPowerModeDelegate                                         => _offOnLowPowerModeDelegate.GetValue();
	#endregion


}

// Class Engine.ArrowComponent
// 0x0014 (0x0419 - 0x0405)
public class UArrowComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offArrowSize                                                  = new ExternalOffset<float>(0x040C);                           // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsScreenSizeScaled                                        = new ExternalOffset<byte/*(bool)*/>(0x0410);                  // 0x0410(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offScreenSize                                                 = new ExternalOffset<float>(0x0414);                           // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTreatAsASprite                                            = new ExternalOffset<char>(0x0418, false);                     // 0x0418(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              ArrowSize                                                      => _offArrowSize.GetValue();
	public byte/*(bool)*/                                     bIsScreenSizeScaled                                            => _offbIsScreenSizeScaled.GetValue();
	public float                                              ScreenSize                                                     => _offScreenSize.GetValue();
	#endregion


}

// Class Engine.AssetExportTask
// 0x0050 (0x0078 - 0x0028)
public class UAssetExportTask : UObject
{
	#region Offsets
	private ExternalOffset<UObject>                           _offObject                                                     = new ExternalOffset<UObject>(0x0028, true);                   // 0x0028(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UExporter>                         _offExporter                                                   = new ExternalOffset<UExporter>(0x0030, true);                 // 0x0030(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offFilename                                                   = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbSelected                                                  = new ExternalOffset<byte/*(bool)*/>(0x0048);                  // 0x0048(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbReplaceIdentical                                          = new ExternalOffset<byte/*(bool)*/>(0x0049);                  // 0x0049(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbPrompt                                                    = new ExternalOffset<byte/*(bool)*/>(0x004A);                  // 0x004A(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbAutomated                                                 = new ExternalOffset<byte/*(bool)*/>(0x004B);                  // 0x004B(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseFileArchive                                            = new ExternalOffset<byte/*(bool)*/>(0x004C);                  // 0x004C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbWriteEmptyFiles                                           = new ExternalOffset<byte/*(bool)*/>(0x004D);                  // 0x004D(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObject>>                   _offIgnoreObjectList                                           = new ExternalOffset<TArray<UObject>>(0x0050, false);          // 0x0050(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                           _offOptions                                                    = new ExternalOffset<UObject>(0x0060, true);                   // 0x0060(0x0008) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offErrors                                                     = new ExternalOffset<TArray<FString>>(0x0068, false);          // 0x0068(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UObject                                            Object                                                         => _offObject.GetValue();
	public UExporter                                          Exporter                                                       => _offExporter.GetValue();
	public FString                                            Filename                                                       => _offFilename.GetValue();
	public byte/*(bool)*/                                     bSelected                                                      => _offbSelected.GetValue();
	public byte/*(bool)*/                                     bReplaceIdentical                                              => _offbReplaceIdentical.GetValue();
	public byte/*(bool)*/                                     bPrompt                                                        => _offbPrompt.GetValue();
	public byte/*(bool)*/                                     bAutomated                                                     => _offbAutomated.GetValue();
	public byte/*(bool)*/                                     bUseFileArchive                                                => _offbUseFileArchive.GetValue();
	public byte/*(bool)*/                                     bWriteEmptyFiles                                               => _offbWriteEmptyFiles.GetValue();
	public TArray<UObject>                                    IgnoreObjectList                                               => _offIgnoreObjectList.GetValue();
	public UObject                                            Options                                                        => _offOptions.GetValue();
	public TArray<FString>                                    Errors                                                         => _offErrors.GetValue();
	#endregion


}

// Class Engine.AssetManagerSettings
// 0x0088 (0x00B0 - 0x0028)
public class UAssetManagerSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<TArray<FPrimaryAssetTypeInfo>>     _offPrimaryAssetTypesToScan                                    = new ExternalOffset<TArray<FPrimaryAssetTypeInfo>>(0x0038, false); // 0x0038(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FDirectoryPath>>            _offDirectoriesToExclude                                       = new ExternalOffset<TArray<FDirectoryPath>>(0x0048, false);   // 0x0048(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPrimaryAssetRulesOverride>> _offPrimaryAssetRules                                          = new ExternalOffset<TArray<FPrimaryAssetRulesOverride>>(0x0058, false); // 0x0058(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPrimaryAssetRulesCustomOverride>> _offCustomPrimaryAssetRules                                    = new ExternalOffset<TArray<FPrimaryAssetRulesCustomOverride>>(0x0068, false); // 0x0068(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbOnlyCookProductionAssets                                  = new ExternalOffset<byte/*(bool)*/>(0x0078);                  // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbShouldManagerDetermineTypeAndName                         = new ExternalOffset<byte/*(bool)*/>(0x0079);                  // 0x0079(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbShouldGuessTypeAndNameInEditor                            = new ExternalOffset<byte/*(bool)*/>(0x007A);                  // 0x007A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbShouldAcquireMissingChunksOnLoad                          = new ExternalOffset<byte/*(bool)*/>(0x007B);                  // 0x007B(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAssetManagerRedirect>>     _offPrimaryAssetIdRedirects                                    = new ExternalOffset<TArray<FAssetManagerRedirect>>(0x0080, false); // 0x0080(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAssetManagerRedirect>>     _offPrimaryAssetTypeRedirects                                  = new ExternalOffset<TArray<FAssetManagerRedirect>>(0x0090, false); // 0x0090(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAssetManagerRedirect>>     _offAssetPathRedirects                                         = new ExternalOffset<TArray<FAssetManagerRedirect>>(0x00A0, false); // 0x00A0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FPrimaryAssetTypeInfo>                      PrimaryAssetTypesToScan                                        => _offPrimaryAssetTypesToScan.GetValue();
	public TArray<FDirectoryPath>                             DirectoriesToExclude                                           => _offDirectoriesToExclude.GetValue();
	public TArray<FPrimaryAssetRulesOverride>                 PrimaryAssetRules                                              => _offPrimaryAssetRules.GetValue();
	public TArray<FPrimaryAssetRulesCustomOverride>           CustomPrimaryAssetRules                                        => _offCustomPrimaryAssetRules.GetValue();
	public byte/*(bool)*/                                     bOnlyCookProductionAssets                                      => _offbOnlyCookProductionAssets.GetValue();
	public byte/*(bool)*/                                     bShouldManagerDetermineTypeAndName                             => _offbShouldManagerDetermineTypeAndName.GetValue();
	public byte/*(bool)*/                                     bShouldGuessTypeAndNameInEditor                                => _offbShouldGuessTypeAndNameInEditor.GetValue();
	public byte/*(bool)*/                                     bShouldAcquireMissingChunksOnLoad                              => _offbShouldAcquireMissingChunksOnLoad.GetValue();
	public TArray<FAssetManagerRedirect>                      PrimaryAssetIdRedirects                                        => _offPrimaryAssetIdRedirects.GetValue();
	public TArray<FAssetManagerRedirect>                      PrimaryAssetTypeRedirects                                      => _offPrimaryAssetTypeRedirects.GetValue();
	public TArray<FAssetManagerRedirect>                      AssetPathRedirects                                             => _offAssetPathRedirects.GetValue();
	#endregion


}

// Class Engine.AssetMappingTable
// 0x0010 (0x0038 - 0x0028)
public class UAssetMappingTable : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FAssetMapping>>             _offMappedAssets                                               = new ExternalOffset<TArray<FAssetMapping>>(0x0028, false);    // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FAssetMapping>                              MappedAssets                                                   => _offMappedAssets.GetValue();
	#endregion


}

// Class Engine.AsyncActionHandleSaveGame
// 0x0040 (0x0068 - 0x0028)
public class UAsyncActionHandleSaveGame : UBlueprintAsyncActionBase
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offCompleted                                                  = new ExternalOffset<FScriptMulticastDelegate>(0x0030, false); // 0x0030(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<USaveGame>                         _offSaveGameObject                                             = new ExternalOffset<USaveGame>(0x0060, true);                 // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           Completed                                                      => _offCompleted.GetValue();
	public USaveGame                                          SaveGameObject                                                 => _offSaveGameObject.GetValue();
	#endregion


}

// Class Engine.AsyncActionLoadPrimaryAssetBase
// 0x0008 (0x0030 - 0x0028)
public class UAsyncActionLoadPrimaryAssetBase : UBlueprintAsyncActionBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.AsyncActionLoadPrimaryAsset
// 0x0058 (0x0088 - 0x0030)
public class UAsyncActionLoadPrimaryAsset : UAsyncActionLoadPrimaryAssetBase
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offCompleted                                                  = new ExternalOffset<FScriptMulticastDelegate>(0x0078, false); // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           Completed                                                      => _offCompleted.GetValue();
	#endregion


}

// Class Engine.AsyncActionLoadPrimaryAssetClass
// 0x0058 (0x0088 - 0x0030)
public class UAsyncActionLoadPrimaryAssetClass : UAsyncActionLoadPrimaryAssetBase
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offCompleted                                                  = new ExternalOffset<FScriptMulticastDelegate>(0x0078, false); // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           Completed                                                      => _offCompleted.GetValue();
	#endregion


}

// Class Engine.AsyncActionLoadPrimaryAssetList
// 0x0058 (0x0088 - 0x0030)
public class UAsyncActionLoadPrimaryAssetList : UAsyncActionLoadPrimaryAssetBase
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offCompleted                                                  = new ExternalOffset<FScriptMulticastDelegate>(0x0078, false); // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           Completed                                                      => _offCompleted.GetValue();
	#endregion


}

// Class Engine.AsyncActionLoadPrimaryAssetClassList
// 0x0058 (0x0088 - 0x0030)
public class UAsyncActionLoadPrimaryAssetClassList : UAsyncActionLoadPrimaryAssetBase
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offCompleted                                                  = new ExternalOffset<FScriptMulticastDelegate>(0x0078, false); // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           Completed                                                      => _offCompleted.GetValue();
	#endregion


}

// Class Engine.AsyncActionChangePrimaryAssetBundles
// 0x0058 (0x0088 - 0x0030)
public class UAsyncActionChangePrimaryAssetBundles : UAsyncActionLoadPrimaryAssetBase
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offCompleted                                                  = new ExternalOffset<FScriptMulticastDelegate>(0x0078, false); // 0x0078(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           Completed                                                      => _offCompleted.GetValue();
	#endregion


}

// Class Engine.AtmosphericFog
// 0x0008 (0x0250 - 0x0248)
public class AAtmosphericFog : AInfo
{
	#region Offsets
	private ExternalOffset<UAtmosphericFogComponent>          _offAtmosphericFogComponent                                    = new ExternalOffset<UAtmosphericFogComponent>(0x0248, true);  // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UAtmosphericFogComponent                           AtmosphericFogComponent                                        => _offAtmosphericFogComponent.GetValue();
	#endregion


}

// Class Engine.AtmosphericFogComponent
// 0x0108 (0x0288 - 0x0180)
public class UAtmosphericFogComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offFogMultiplier                                              = new ExternalOffset<float>(0x021C);                           // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDensityMultiplier                                          = new ExternalOffset<float>(0x0220);                           // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDensityOffset                                              = new ExternalOffset<float>(0x0224);                           // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceScale                                              = new ExternalOffset<float>(0x0228);                           // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAltitudeScale                                              = new ExternalOffset<float>(0x022C);                           // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceOffset                                             = new ExternalOffset<float>(0x0230);                           // 0x0230(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGroundOffset                                               = new ExternalOffset<float>(0x0234);                           // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStartDistance                                              = new ExternalOffset<float>(0x0238);                           // 0x0238(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSunDiscScale                                               = new ExternalOffset<float>(0x023C);                           // 0x023C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDefaultBrightness                                          = new ExternalOffset<float>(0x0240);                           // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offDefaultLightColor                                          = new ExternalOffset<FColor>(0x0244, false);                   // 0x0244(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableSunDisk                                            = new ExternalOffset<char>(0x0248, false);                     // 0x0248(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAtmosphereAffectsSunIlluminance                           = new ExternalOffset<char>(0x0248, false);                     // 0x0248(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableGroundScattering                                   = new ExternalOffset<char>(0x0248, false);                     // 0x0248(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FAtmospherePrecomputeParameters>   _offPrecomputeParams                                           = new ExternalOffset<FAtmospherePrecomputeParameters>(0x024C, false); // 0x024C(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<UTexture2D>                        _offTransmittanceTexture                                       = new ExternalOffset<UTexture2D>(0x0278, true);                // 0x0278(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offIrradianceTexture                                          = new ExternalOffset<UTexture2D>(0x0280, true);                // 0x0280(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              FogMultiplier                                                  => _offFogMultiplier.GetValue();
	public float                                              DensityMultiplier                                              => _offDensityMultiplier.GetValue();
	public float                                              DensityOffset                                                  => _offDensityOffset.GetValue();
	public float                                              DistanceScale                                                  => _offDistanceScale.GetValue();
	public float                                              AltitudeScale                                                  => _offAltitudeScale.GetValue();
	public float                                              DistanceOffset                                                 => _offDistanceOffset.GetValue();
	public float                                              GroundOffset                                                   => _offGroundOffset.GetValue();
	public float                                              StartDistance                                                  => _offStartDistance.GetValue();
	public float                                              SunDiscScale                                                   => _offSunDiscScale.GetValue();
	public float                                              DefaultBrightness                                              => _offDefaultBrightness.GetValue();
	public FColor                                             DefaultLightColor                                              => _offDefaultLightColor.GetValue();
	public FAtmospherePrecomputeParameters                    PrecomputeParams                                               => _offPrecomputeParams.GetValue();
	public UTexture2D                                         TransmittanceTexture                                           => _offTransmittanceTexture.GetValue();
	public UTexture2D                                         IrradianceTexture                                              => _offIrradianceTexture.GetValue();
	#endregion


}

// Class Engine.AudioSettings
// 0x00D5 (0x00FD - 0x0028)
public class UAudioSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<FSoftObjectPath>                   _offDefaultSoundClassName                                      = new ExternalOffset<FSoftObjectPath>(0x0038, false);          // 0x0038(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultMediaSoundClassName                                 = new ExternalOffset<FSoftObjectPath>(0x0050, false);          // 0x0050(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultSoundConcurrencyName                                = new ExternalOffset<FSoftObjectPath>(0x0068, false);          // 0x0068(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultBaseSoundMix                                        = new ExternalOffset<FSoftObjectPath>(0x0080, false);          // 0x0080(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offVoiPSoundClass                                             = new ExternalOffset<FSoftObjectPath>(0x0098, false);          // 0x0098(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EVoiceSampleRate>                  _offVoiPSampleRate                                             = new ExternalOffset<EVoiceSampleRate>(0x00B0, false);         // 0x00B0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVoipBufferingDelay                                         = new ExternalOffset<float>(0x00B4);                           // 0x00B4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDefaultReverbSendLevel                                     = new ExternalOffset<float>(0x00B8);                           // 0x00B8(0x0004) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableLegacyReverb                                        = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaximumConcurrentStreams                                   = new ExternalOffset<int>(0x00C0);                             // 0x00C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGlobalMinPitchScale                                        = new ExternalOffset<float>(0x00C4);                           // 0x00C4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGlobalMaxPitchScale                                        = new ExternalOffset<float>(0x00C8);                           // 0x00C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAudioQualitySettings>>     _offQualityLevels                                              = new ExternalOffset<TArray<FAudioQualitySettings>>(0x00D0, false); // 0x00D0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowPlayWhenSilent                                       = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableMasterEQ                                           = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowCenterChannel3DPanning                               = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumStoppingSources                                         = new ExternalOffset<uint>(0x00E4);                            // 0x00E4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EPanningMethod>                    _offPanningMethod                                              = new ExternalOffset<EPanningMethod>(0x00E8, false);           // 0x00E8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EMonoChannelUpmixMethod>           _offMonoChannelUpmixMethod                                     = new ExternalOffset<EMonoChannelUpmixMethod>(0x00E9, false);  // 0x00E9(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offDialogueFilenameFormat                                     = new ExternalOffset<FString>(0x00F0, false);                  // 0x00F0(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FSoftObjectPath                                    DefaultSoundClassName                                          => _offDefaultSoundClassName.GetValue();
	public FSoftObjectPath                                    DefaultMediaSoundClassName                                     => _offDefaultMediaSoundClassName.GetValue();
	public FSoftObjectPath                                    DefaultSoundConcurrencyName                                    => _offDefaultSoundConcurrencyName.GetValue();
	public FSoftObjectPath                                    DefaultBaseSoundMix                                            => _offDefaultBaseSoundMix.GetValue();
	public FSoftObjectPath                                    VoiPSoundClass                                                 => _offVoiPSoundClass.GetValue();
	public EVoiceSampleRate                                   VoiPSampleRate                                                 => _offVoiPSampleRate.GetValue();
	public float                                              VoipBufferingDelay                                             => _offVoipBufferingDelay.GetValue();
	public float                                              DefaultReverbSendLevel                                         => _offDefaultReverbSendLevel.GetValue();
	public int                                                MaximumConcurrentStreams                                       => _offMaximumConcurrentStreams.GetValue();
	public float                                              GlobalMinPitchScale                                            => _offGlobalMinPitchScale.GetValue();
	public float                                              GlobalMaxPitchScale                                            => _offGlobalMaxPitchScale.GetValue();
	public TArray<FAudioQualitySettings>                      QualityLevels                                                  => _offQualityLevels.GetValue();
	public uint                                               NumStoppingSources                                             => _offNumStoppingSources.GetValue();
	public EPanningMethod                                     PanningMethod                                                  => _offPanningMethod.GetValue();
	public EMonoChannelUpmixMethod                            MonoChannelUpmixMethod                                         => _offMonoChannelUpmixMethod.GetValue();
	public FString                                            DialogueFilenameFormat                                         => _offDialogueFilenameFormat.GetValue();
	#endregion


}

// Class Engine.AutomationTestSettings
// 0x0300 (0x0328 - 0x0028)
public class UAutomationTestSettings : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FString>>                   _offEngineTestModules                                          = new ExternalOffset<TArray<FString>>(0x0028, false);          // 0x0028(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offEditorTestModules                                          = new ExternalOffset<TArray<FString>>(0x0038, false);          // 0x0038(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftObjectPath>                   _offAutomationTestmap                                          = new ExternalOffset<FSoftObjectPath>(0x0048, false);          // 0x0048(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FEditorMapPerformanceTestDefinition>> _offEditorPerformanceTestMaps                                  = new ExternalOffset<TArray<FEditorMapPerformanceTestDefinition>>(0x0060, false); // 0x0060(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSoftObjectPath>>           _offAssetsToOpen                                               = new ExternalOffset<TArray<FSoftObjectPath>>(0x0070, false);  // 0x0070(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FBuildPromotionTestSettings>       _offBuildPromotionTest                                         = new ExternalOffset<FBuildPromotionTestSettings>(0x0080, false); // 0x0080(0x01F0) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialEditorPromotionSettings>  _offMaterialEditorPromotionTest                                = new ExternalOffset<FMaterialEditorPromotionSettings>(0x0270, false); // 0x0270(0x0030) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FParticleEditorPromotionSettings>  _offParticleEditorPromotionTest                                = new ExternalOffset<FParticleEditorPromotionSettings>(0x02A0, false); // 0x02A0(0x0010) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FBlueprintEditorPromotionSettings> _offBlueprintEditorPromotionTest                               = new ExternalOffset<FBlueprintEditorPromotionSettings>(0x02B0, false); // 0x02B0(0x0030) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offTestLevelFolders                                           = new ExternalOffset<TArray<FString>>(0x02E0, false);          // 0x02E0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FExternalToolDefinition>>   _offExternalTools                                              = new ExternalOffset<TArray<FExternalToolDefinition>>(0x02F0, false); // 0x02F0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FEditorImportExportTestDefinition>> _offImportExportTestDefinitions                                = new ExternalOffset<TArray<FEditorImportExportTestDefinition>>(0x0300, false); // 0x0300(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLaunchOnTestSettings>>     _offLaunchOnSettings                                           = new ExternalOffset<TArray<FLaunchOnTestSettings>>(0x0310, false); // 0x0310(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                         _offDefaultScreenshotResolution                                = new ExternalOffset<FIntPoint>(0x0320, false);                // 0x0320(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FString>                                    EngineTestModules                                              => _offEngineTestModules.GetValue();
	public TArray<FString>                                    EditorTestModules                                              => _offEditorTestModules.GetValue();
	public FSoftObjectPath                                    AutomationTestmap                                              => _offAutomationTestmap.GetValue();
	public TArray<FEditorMapPerformanceTestDefinition>        EditorPerformanceTestMaps                                      => _offEditorPerformanceTestMaps.GetValue();
	public TArray<FSoftObjectPath>                            AssetsToOpen                                                   => _offAssetsToOpen.GetValue();
	public FBuildPromotionTestSettings                        BuildPromotionTest                                             => _offBuildPromotionTest.GetValue();
	public FMaterialEditorPromotionSettings                   MaterialEditorPromotionTest                                    => _offMaterialEditorPromotionTest.GetValue();
	public FParticleEditorPromotionSettings                   ParticleEditorPromotionTest                                    => _offParticleEditorPromotionTest.GetValue();
	public FBlueprintEditorPromotionSettings                  BlueprintEditorPromotionTest                                   => _offBlueprintEditorPromotionTest.GetValue();
	public TArray<FString>                                    TestLevelFolders                                               => _offTestLevelFolders.GetValue();
	public TArray<FExternalToolDefinition>                    ExternalTools                                                  => _offExternalTools.GetValue();
	public TArray<FEditorImportExportTestDefinition>          ImportExportTestDefinitions                                    => _offImportExportTestDefinitions.GetValue();
	public TArray<FLaunchOnTestSettings>                      LaunchOnSettings                                               => _offLaunchOnSettings.GetValue();
	public FIntPoint                                          DefaultScreenshotResolution                                    => _offDefaultScreenshotResolution.GetValue();
	#endregion


}

// Class Engine.AvoidanceManager
// 0x0024 (0x004C - 0x0028)
public class UAvoidanceManager : UObject
{
	#region Offsets
	private ExternalOffset<float>                             _offDefaultTimeToLive                                          = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLockTimeAfterAvoid                                         = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLockTimeAfterClean                                         = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDeltaTimeToPredict                                         = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offArtificialRadiusExpansion                                  = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTestHeightDifference                                       = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offHeightCheckMargin                                          = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              DefaultTimeToLive                                              => _offDefaultTimeToLive.GetValue();
	public float                                              LockTimeAfterAvoid                                             => _offLockTimeAfterAvoid.GetValue();
	public float                                              LockTimeAfterClean                                             => _offLockTimeAfterClean.GetValue();
	public float                                              DeltaTimeToPredict                                             => _offDeltaTimeToPredict.GetValue();
	public float                                              ArtificialRadiusExpansion                                      => _offArtificialRadiusExpansion.GetValue();
	public float                                              TestHeightDifference                                           => _offTestHeightDifference.GetValue();
	public float                                              HeightCheckMargin                                              => _offHeightCheckMargin.GetValue();
	#endregion


}

// Class Engine.BillboardComponent
// 0x0023 (0x0428 - 0x0405)
public class UBillboardComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<UTexture2D>                        _offSprite                                                     = new ExternalOffset<UTexture2D>(0x0408, true);                // 0x0408(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsScreenSizeScaled                                        = new ExternalOffset<char>(0x0410, false);                     // 0x0410(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offScreenSize                                                 = new ExternalOffset<float>(0x0414);                           // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offU                                                          = new ExternalOffset<float>(0x0418);                           // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offUL                                                         = new ExternalOffset<float>(0x041C);                           // 0x041C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offV                                                          = new ExternalOffset<float>(0x0420);                           // 0x0420(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVL                                                         = new ExternalOffset<float>(0x0424);                           // 0x0424(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTexture2D                                         Sprite                                                         => _offSprite.GetValue();
	public float                                              ScreenSize                                                     => _offScreenSize.GetValue();
	public float                                              U                                                              => _offU.GetValue();
	public float                                              UL                                                             => _offUL.GetValue();
	public float                                              V                                                              => _offV.GetValue();
	public float                                              VL                                                             => _offVL.GetValue();
	#endregion


}

// Class Engine.BlendableInterface
// 0x0000 (0x0028 - 0x0028)
public class UBlendableInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Skeleton
// 0x0338 (0x0360 - 0x0028)
public class USkeleton : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FBoneNode>>                 _offBoneTree                                                   = new ExternalOffset<TArray<FBoneNode>>(0x0038, false);        // 0x0038(0x0010) (Edit, ZeroConstructor, EditConst, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FTransform>>                _offRefLocalPoses                                              = new ExternalOffset<TArray<FTransform>>(0x0048, false);       // 0x0048(0x0010) (ZeroConstructor, Deprecated, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<FGuid>                             _offVirtualBoneGuid                                            = new ExternalOffset<FGuid>(0x0170, false);                    // 0x0170(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FVirtualBone>>              _offVirtualBones                                               = new ExternalOffset<TArray<FVirtualBone>>(0x0180, false);     // 0x0180(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<USkeletalMeshSocket>>       _offSockets                                                    = new ExternalOffset<TArray<USkeletalMeshSocket>>(0x0190, false); // 0x0190(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FSmartNameContainer>               _offSmartNames                                                 = new ExternalOffset<FSmartNameContainer>(0x01F0, false);      // 0x01F0(0x0050) (Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UBlendProfile>>             _offBlendProfiles                                              = new ExternalOffset<TArray<UBlendProfile>>(0x0268, false);    // 0x0268(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimSlotGroup>>            _offSlotGroups                                                 = new ExternalOffset<TArray<FAnimSlotGroup>>(0x0278, false);   // 0x0278(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UAssetUserData>>            _offAssetUserData                                              = new ExternalOffset<TArray<UAssetUserData>>(0x0350, false);   // 0x0350(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<FBoneNode>                                  BoneTree                                                       => _offBoneTree.GetValue();
	public TArray<FTransform>                                 RefLocalPoses                                                  => _offRefLocalPoses.GetValue();
	public FGuid                                              VirtualBoneGuid                                                => _offVirtualBoneGuid.GetValue();
	public TArray<FVirtualBone>                               VirtualBones                                                   => _offVirtualBones.GetValue();
	public TArray<USkeletalMeshSocket>                        Sockets                                                        => _offSockets.GetValue();
	public FSmartNameContainer                                SmartNames                                                     => _offSmartNames.GetValue();
	public TArray<UBlendProfile>                              BlendProfiles                                                  => _offBlendProfiles.GetValue();
	public TArray<FAnimSlotGroup>                             SlotGroups                                                     => _offSlotGroups.GetValue();
	public TArray<UAssetUserData>                             AssetUserData                                                  => _offAssetUserData.GetValue();
	#endregion


}

// Class Engine.BlendProfile
// 0x0020 (0x0048 - 0x0028)
public class UBlendProfile : UObject
{
	#region Offsets
	private ExternalOffset<USkeleton>                         _offOwningSkeleton                                             = new ExternalOffset<USkeleton>(0x0030, true);                 // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBlendProfileBoneEntry>>    _offProfileEntries                                             = new ExternalOffset<TArray<FBlendProfileBoneEntry>>(0x0038, false); // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USkeleton                                          OwningSkeleton                                                 => _offOwningSkeleton.GetValue();
	public TArray<FBlendProfileBoneEntry>                     ProfileEntries                                                 => _offProfileEntries.GetValue();
	#endregion


}

// Class Engine.BlockingVolume
// 0x0000 (0x0280 - 0x0280)
public class ABlockingVolume : AVolume
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.BlueprintMapLibrary
// 0x0000 (0x0028 - 0x0028)
public class UBlueprintMapLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.BlueprintPathsLibrary
// 0x0000 (0x0028 - 0x0028)
public class UBlueprintPathsLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PlatformGameInstance
// 0x01D8 (0x0238 - 0x0060)
public class UPlatformGameInstance : UGameInstance
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationWillDeactivateDelegate                          = new ExternalOffset<FScriptMulticastDelegate>(0x0168, false); // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationHasReactivatedDelegate                          = new ExternalOffset<FScriptMulticastDelegate>(0x0178, false); // 0x0178(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationWillEnterBackgroundDelegate                     = new ExternalOffset<FScriptMulticastDelegate>(0x0188, false); // 0x0188(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationHasEnteredForegroundDelegate                    = new ExternalOffset<FScriptMulticastDelegate>(0x0198, false); // 0x0198(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationWillTerminateDelegate                           = new ExternalOffset<FScriptMulticastDelegate>(0x01A8, false); // 0x01A8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationShouldUnloadResourcesDelegate                   = new ExternalOffset<FScriptMulticastDelegate>(0x01B8, false); // 0x01B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationReceivedStartupArgumentsDelegate                = new ExternalOffset<FScriptMulticastDelegate>(0x01C8, false); // 0x01C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationRegisteredForRemoteNotificationsDelegate        = new ExternalOffset<FScriptMulticastDelegate>(0x01D8, false); // 0x01D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationRegisteredForUserNotificationsDelegate          = new ExternalOffset<FScriptMulticastDelegate>(0x01E8, false); // 0x01E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationFailedToRegisterForRemoteNotificationsDelegate  = new ExternalOffset<FScriptMulticastDelegate>(0x01F8, false); // 0x01F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationReceivedRemoteNotificationDelegate              = new ExternalOffset<FScriptMulticastDelegate>(0x0208, false); // 0x0208(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationReceivedLocalNotificationDelegate               = new ExternalOffset<FScriptMulticastDelegate>(0x0218, false); // 0x0218(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offApplicationReceivedScreenOrientationChangedNotificationDelegate = new ExternalOffset<FScriptMulticastDelegate>(0x0228, false); // 0x0228(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           ApplicationWillDeactivateDelegate                              => _offApplicationWillDeactivateDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationHasReactivatedDelegate                              => _offApplicationHasReactivatedDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationWillEnterBackgroundDelegate                         => _offApplicationWillEnterBackgroundDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationHasEnteredForegroundDelegate                        => _offApplicationHasEnteredForegroundDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationWillTerminateDelegate                               => _offApplicationWillTerminateDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationShouldUnloadResourcesDelegate                       => _offApplicationShouldUnloadResourcesDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationReceivedStartupArgumentsDelegate                    => _offApplicationReceivedStartupArgumentsDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationRegisteredForRemoteNotificationsDelegate            => _offApplicationRegisteredForRemoteNotificationsDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationRegisteredForUserNotificationsDelegate              => _offApplicationRegisteredForUserNotificationsDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationFailedToRegisterForRemoteNotificationsDelegate      => _offApplicationFailedToRegisterForRemoteNotificationsDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationReceivedRemoteNotificationDelegate                  => _offApplicationReceivedRemoteNotificationDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationReceivedLocalNotificationDelegate                   => _offApplicationReceivedLocalNotificationDelegate.GetValue();
	public FScriptMulticastDelegate                           ApplicationReceivedScreenOrientationChangedNotificationDelegate => _offApplicationReceivedScreenOrientationChangedNotificationDelegate.GetValue();
	#endregion


}

// Class Engine.BlueprintPlatformLibrary
// 0x0000 (0x0028 - 0x0028)
public class UBlueprintPlatformLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.BlueprintSetLibrary
// 0x0000 (0x0028 - 0x0028)
public class UBlueprintSetLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.BodySetup
// 0x020C (0x0234 - 0x0028)
public class UBodySetup : UObject
{
	#region Offsets
	private ExternalOffset<FKAggregateGeom>                   _offAggGeom                                                    = new ExternalOffset<FKAggregateGeom>(0x0028, false);          // 0x0028(0x0058) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offBoneName                                                   = new ExternalOffset<FName>(0x0080, false);                    // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EPhysicsType>>         _offPhysicsType                                                = new ExternalOffset<TEnumAsByte<EPhysicsType>>(0x0088, false); // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAlwaysFullAnimWeight                                      = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbConsiderForBounds                                         = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMeshCollideAll                                            = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDoubleSidedGeometry                                       = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGenerateNonMirroredCollision                              = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSharedCookedData                                          = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGenerateMirroredCollision                                 = new ExternalOffset<char>(0x0089, false);                     // 0x0089(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBodyCollisionResponse>> _offCollisionReponse                                           = new ExternalOffset<TEnumAsByte<EBodyCollisionResponse>>(0x008B, false); // 0x008B(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionTraceFlag>>  _offCollisionTraceFlag                                         = new ExternalOffset<TEnumAsByte<ECollisionTraceFlag>>(0x008C, false); // 0x008C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPhysicalMaterial>                 _offPhysMaterial                                               = new ExternalOffset<UPhysicalMaterial>(0x0090, true);         // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FWalkableSlopeOverride>            _offWalkableSlopeOverride                                      = new ExternalOffset<FWalkableSlopeOverride>(0x0098, false);   // 0x0098(0x0010) (Edit, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<FBodyInstance>                     _offDefaultInstance                                            = new ExternalOffset<FBodyInstance>(0x0110, false);            // 0x0110(0x0110) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offBuildScale3D                                               = new ExternalOffset<FVector>(0x0228, false);                  // 0x0228(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FKAggregateGeom                                    AggGeom                                                        => _offAggGeom.GetValue();
	public FName                                              BoneName                                                       => _offBoneName.GetValue();
	public TEnumAsByte<EPhysicsType>                          PhysicsType                                                    => _offPhysicsType.GetValue();
	public TEnumAsByte<EBodyCollisionResponse>                CollisionReponse                                               => _offCollisionReponse.GetValue();
	public TEnumAsByte<ECollisionTraceFlag>                   CollisionTraceFlag                                             => _offCollisionTraceFlag.GetValue();
	public UPhysicalMaterial                                  PhysMaterial                                                   => _offPhysMaterial.GetValue();
	public FWalkableSlopeOverride                             WalkableSlopeOverride                                          => _offWalkableSlopeOverride.GetValue();
	public FBodyInstance                                      DefaultInstance                                                => _offDefaultInstance.GetValue();
	public FVector                                            BuildScale3D                                                   => _offBuildScale3D.GetValue();
	#endregion


}

// Class Engine.BoneMaskFilter
// 0x0010 (0x0038 - 0x0028)
public class UBoneMaskFilter : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FInputBlendPose>>           _offBlendPoses                                                 = new ExternalOffset<TArray<FInputBlendPose>>(0x0028, false);  // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FInputBlendPose>                            BlendPoses                                                     => _offBlendPoses.GetValue();
	#endregion


}

// Class Engine.BookmarkBase
// 0x0000 (0x0028 - 0x0028)
public class UBookmarkBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.BookMark
// 0x0028 (0x0050 - 0x0028)
public class UBookMark : UBookmarkBase
{
	#region Offsets
	private ExternalOffset<FVector>                           _offLocation                                                   = new ExternalOffset<FVector>(0x0028, false);                  // 0x0028(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offRotation                                                   = new ExternalOffset<FRotator>(0x0034, false);                 // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offHiddenLevels                                               = new ExternalOffset<TArray<FString>>(0x0040, false);          // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            Location                                                       => _offLocation.GetValue();
	public FRotator                                           Rotation                                                       => _offRotation.GetValue();
	public TArray<FString>                                    HiddenLevels                                                   => _offHiddenLevels.GetValue();
	#endregion


}

// Class Engine.BookMark2D
// 0x000C (0x0034 - 0x0028)
public class UBookMark2D : UBookmarkBase
{
	#region Offsets
	private ExternalOffset<float>                             _offZoom2D                                                     = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                         _offLocation                                                   = new ExternalOffset<FIntPoint>(0x002C, false);                // 0x002C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Zoom2D                                                         => _offZoom2D.GetValue();
	public FIntPoint                                          Location                                                       => _offLocation.GetValue();
	#endregion


}

// Class Engine.ReflectionCapture
// 0x0018 (0x0250 - 0x0238)
public class AReflectionCapture : AActor
{
	#region Offsets
	private ExternalOffset<UReflectionCaptureComponent>       _offCaptureComponent                                           = new ExternalOffset<UReflectionCaptureComponent>(0x0248, true); // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UReflectionCaptureComponent                        CaptureComponent                                               => _offCaptureComponent.GetValue();
	#endregion


}

// Class Engine.BoxReflectionCapture
// 0x0000 (0x0250 - 0x0250)
public class ABoxReflectionCapture : AReflectionCapture
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ReflectionCaptureComponent
// 0x00D4 (0x0254 - 0x0180)
public class UReflectionCaptureComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<UBillboardComponent>               _offCaptureOffsetComponent                                     = new ExternalOffset<UBillboardComponent>(0x0218, true);       // 0x0218(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EReflectionSourceType>             _offReflectionSourceType                                       = new ExternalOffset<EReflectionSourceType>(0x0220, false);    // 0x0220(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTextureCube>                      _offCubemap                                                    = new ExternalOffset<UTextureCube>(0x0228, true);              // 0x0228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSourceCubemapAngle                                         = new ExternalOffset<float>(0x0230);                           // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBrightness                                                 = new ExternalOffset<float>(0x0234);                           // 0x0234(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offCaptureOffset                                              = new ExternalOffset<FVector>(0x0238, false);                  // 0x0238(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offMapBuildDataId                                             = new ExternalOffset<FGuid>(0x0244, false);                    // 0x0244(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UBillboardComponent                                CaptureOffsetComponent                                         => _offCaptureOffsetComponent.GetValue();
	public EReflectionSourceType                              ReflectionSourceType                                           => _offReflectionSourceType.GetValue();
	public UTextureCube                                       Cubemap                                                        => _offCubemap.GetValue();
	public float                                              SourceCubemapAngle                                             => _offSourceCubemapAngle.GetValue();
	public float                                              Brightness                                                     => _offBrightness.GetValue();
	public FVector                                            CaptureOffset                                                  => _offCaptureOffset.GetValue();
	public FGuid                                              MapBuildDataId                                                 => _offMapBuildDataId.GetValue();
	#endregion


}

// Class Engine.BoxReflectionCaptureComponent
// 0x0054 (0x02A8 - 0x0254)
public class UBoxReflectionCaptureComponent : UReflectionCaptureComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offBoxTransitionDistance                                      = new ExternalOffset<float>(0x0290);                           // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UBoxComponent>                     _offPreviewInfluenceBox                                        = new ExternalOffset<UBoxComponent>(0x0298, true);             // 0x0298(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UBoxComponent>                     _offPreviewCaptureBox                                          = new ExternalOffset<UBoxComponent>(0x02A0, true);             // 0x02A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              BoxTransitionDistance                                          => _offBoxTransitionDistance.GetValue();
	public UBoxComponent                                      PreviewInfluenceBox                                            => _offPreviewInfluenceBox.GetValue();
	public UBoxComponent                                      PreviewCaptureBox                                              => _offPreviewCaptureBox.GetValue();
	#endregion


}

// Class Engine.Breakpoint
// 0x0011 (0x0039 - 0x0028)
public class UBreakpoint : UObject
{
	#region Offsets
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UEdGraphNode>                      _offNode                                                       = new ExternalOffset<UEdGraphNode>(0x0030, true);              // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbStepOnce                                                  = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbStepOnce_WasPreviouslyDisabled                            = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbStepOnce_RemoveAfterHit                                   = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UEdGraphNode                                       Node                                                           => _offNode.GetValue();
	#endregion


}

// Class Engine.BrushBuilder
// 0x0051 (0x0079 - 0x0028)
public class UBrushBuilder : UObject
{
	#region Offsets
	private ExternalOffset<FString>                           _offBitmapFilename                                             = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offTooltip                                                    = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offNotifyBadParams                                            = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FVector>>                   _offVertices                                                   = new ExternalOffset<TArray<FVector>>(0x0050, false);          // 0x0050(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FBuilderPoly>>              _offPolys                                                      = new ExternalOffset<TArray<FBuilderPoly>>(0x0060, false);     // 0x0060(0x0010) (ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<FName>                             _offLayer                                                      = new ExternalOffset<FName>(0x0070, false);                    // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offMergeCoplanars                                             = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FString                                            BitmapFilename                                                 => _offBitmapFilename.GetValue();
	public FString                                            Tooltip                                                        => _offTooltip.GetValue();
	public TArray<FVector>                                    Vertices                                                       => _offVertices.GetValue();
	public TArray<FBuilderPoly>                               Polys                                                          => _offPolys.GetValue();
	public FName                                              Layer                                                          => _offLayer.GetValue();
	#endregion


}

// Class Engine.BrushComponent
// 0x0013 (0x0418 - 0x0405)
public class UBrushComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<UModel>                            _offBrush                                                      = new ExternalOffset<UModel>(0x0408, true);                    // 0x0408(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UBodySetup>                        _offBrushBodySetup                                             = new ExternalOffset<UBodySetup>(0x0410, true);                // 0x0410(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UModel                                             Brush                                                          => _offBrush.GetValue();
	public UBodySetup                                         BrushBodySetup                                                 => _offBrushBodySetup.GetValue();
	#endregion


}

// Class Engine.BrushShape
// 0x0000 (0x0280 - 0x0280)
public class ABrushShape : ABrush
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ButtonStyleAsset
// 0x0278 (0x02A0 - 0x0028)
public class UButtonStyleAsset : UObject
{
	#region Offsets
	private ExternalOffset<FButtonStyle>                      _offButtonStyle                                                = new ExternalOffset<FButtonStyle>(0x0028, false);             // 0x0028(0x0278) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FButtonStyle                                       ButtonStyle                                                    => _offButtonStyle.GetValue();
	#endregion


}

// Class Engine.CameraAnim
// 0x056C (0x0594 - 0x0028)
public class UCameraAnim : UObject
{
	#region Offsets
	private ExternalOffset<UInterpGroup>                      _offCameraInterpGroup                                          = new ExternalOffset<UInterpGroup>(0x0028, true);              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAnimLength                                                 = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBox>                              _offBoundingBox                                                = new ExternalOffset<FBox>(0x0034, false);                     // 0x0034(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRelativeToInitialTransform                                = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRelativeToInitialFOV                                      = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBaseFOV                                                    = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPostProcessSettings>              _offBasePostProcessSettings                                    = new ExternalOffset<FPostProcessSettings>(0x0060, false);     // 0x0060(0x0530) (NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBasePostProcessBlendWeight                                 = new ExternalOffset<float>(0x0590);                           // 0x0590(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UInterpGroup                                       CameraInterpGroup                                              => _offCameraInterpGroup.GetValue();
	public float                                              AnimLength                                                     => _offAnimLength.GetValue();
	public FBox                                               BoundingBox                                                    => _offBoundingBox.GetValue();
	public float                                              BaseFOV                                                        => _offBaseFOV.GetValue();
	public FPostProcessSettings                               BasePostProcessSettings                                        => _offBasePostProcessSettings.GetValue();
	public float                                              BasePostProcessBlendWeight                                     => _offBasePostProcessBlendWeight.GetValue();
	#endregion


}

// Class Engine.CameraAnimInst
// 0x0051 (0x0079 - 0x0028)
public class UCameraAnimInst : UObject
{
	#region Offsets
	private ExternalOffset<UCameraAnim>                       _offCamAnim                                                    = new ExternalOffset<UCameraAnim>(0x0028, true);               // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpGroupInst>                  _offInterpGroupInst                                            = new ExternalOffset<UInterpGroupInst>(0x0030, true);          // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offPlayRate                                                   = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpTrackMove>                  _offMoveTrack                                                  = new ExternalOffset<UInterpTrackMove>(0x0068, true);          // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpTrackInstMove>              _offMoveInst                                                   = new ExternalOffset<UInterpTrackInstMove>(0x0070, true);      // 0x0070(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECameraAnimPlaySpace>> _offPlaySpace                                                  = new ExternalOffset<TEnumAsByte<ECameraAnimPlaySpace>>(0x0078, false); // 0x0078(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCameraAnim                                        CamAnim                                                        => _offCamAnim.GetValue();
	public UInterpGroupInst                                   InterpGroupInst                                                => _offInterpGroupInst.GetValue();
	public float                                              PlayRate                                                       => _offPlayRate.GetValue();
	public UInterpTrackMove                                   MoveTrack                                                      => _offMoveTrack.GetValue();
	public UInterpTrackInstMove                               MoveInst                                                       => _offMoveInst.GetValue();
	public TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace                                                      => _offPlaySpace.GetValue();
	#endregion


}

// Class Engine.CameraBlockingVolume
// 0x0000 (0x0280 - 0x0280)
public class ACameraBlockingVolume : AVolume
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.CameraModifier
// 0x001C (0x0044 - 0x0028)
public class UCameraModifier : UObject
{
	#region Offsets
//	private ExternalOffset<char>                              _offbDebug                                                     = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbExclusive                                                 = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offPriority                                                   = new ExternalOffset<char>(0x002C, false);                     // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APlayerCameraManager>              _offCameraOwner                                                = new ExternalOffset<APlayerCameraManager>(0x0030, true);      // 0x0030(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offAlphaInTime                                                = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offAlphaOutTime                                               = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offAlpha                                                      = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public APlayerCameraManager                               CameraOwner                                                    => _offCameraOwner.GetValue();
	public float                                              AlphaInTime                                                    => _offAlphaInTime.GetValue();
	public float                                              AlphaOutTime                                                   => _offAlphaOutTime.GetValue();
	public float                                              Alpha                                                          => _offAlpha.GetValue();
	#endregion


}

// Class Engine.CameraModifier_CameraShake
// 0x0068 (0x00AC - 0x0044)
public class UCameraModifier_CameraShake : UCameraModifier
{
	#region Offsets
	private ExternalOffset<TArray<UCameraShake>>              _offActiveShakes                                               = new ExternalOffset<TArray<UCameraShake>>(0x0048, false);     // 0x0048(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private TMap<class UClass*, struct FPooledCameraShakes>   _offExpiredPooledShakesMap                                     = new ExternalOffset<TMap<FPooledCameraShakes>>(0x0058, false); // 0x0058(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSplitScreenShakeScale                                      = new ExternalOffset<float>(0x00A8);                           // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<UCameraShake>                               ActiveShakes                                                   => _offActiveShakes.GetValue();
	public float                                              SplitScreenShakeScale                                          => _offSplitScreenShakeScale.GetValue();
	#endregion


}

// Class Engine.CameraShake
// 0x0130 (0x0158 - 0x0028)
public class UCameraShake : UObject
{
	#region Offsets
//	private ExternalOffset<char>                              _offbSingleInstance                                            = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOscillationDuration                                        = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOscillationBlendInTime                                     = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOscillationBlendOutTime                                    = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FROscillator>                      _offRotOscillation                                             = new ExternalOffset<FROscillator>(0x0038, false);             // 0x0038(0x0024) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVOscillator>                      _offLocOscillation                                             = new ExternalOffset<FVOscillator>(0x005C, false);             // 0x005C(0x0024) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FFOscillator>                      _offFOVOscillation                                             = new ExternalOffset<FFOscillator>(0x0080, false);             // 0x0080(0x000C) (Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAnimPlayRate                                               = new ExternalOffset<float>(0x008C);                           // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAnimScale                                                  = new ExternalOffset<float>(0x0090);                           // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAnimBlendInTime                                            = new ExternalOffset<float>(0x0094);                           // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAnimBlendOutTime                                           = new ExternalOffset<float>(0x0098);                           // 0x0098(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRandomAnimSegmentDuration                                  = new ExternalOffset<float>(0x009C);                           // 0x009C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCameraAnim>                       _offAnim                                                       = new ExternalOffset<UCameraAnim>(0x00A0, true);               // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRandomAnimSegment                                         = new ExternalOffset<char>(0x00A8, false);                     // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APlayerCameraManager>              _offCameraOwner                                                = new ExternalOffset<APlayerCameraManager>(0x00C0, true);      // 0x00C0(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offShakeScale                                                 = new ExternalOffset<float>(0x0148);                           // 0x0148(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOscillatorTimeRemaining                                    = new ExternalOffset<float>(0x014C);                           // 0x014C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCameraAnimInst>                   _offAnimInst                                                   = new ExternalOffset<UCameraAnimInst>(0x0150, true);           // 0x0150(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              OscillationDuration                                            => _offOscillationDuration.GetValue();
	public float                                              OscillationBlendInTime                                         => _offOscillationBlendInTime.GetValue();
	public float                                              OscillationBlendOutTime                                        => _offOscillationBlendOutTime.GetValue();
	public FROscillator                                       RotOscillation                                                 => _offRotOscillation.GetValue();
	public FVOscillator                                       LocOscillation                                                 => _offLocOscillation.GetValue();
	public FFOscillator                                       FOVOscillation                                                 => _offFOVOscillation.GetValue();
	public float                                              AnimPlayRate                                                   => _offAnimPlayRate.GetValue();
	public float                                              AnimScale                                                      => _offAnimScale.GetValue();
	public float                                              AnimBlendInTime                                                => _offAnimBlendInTime.GetValue();
	public float                                              AnimBlendOutTime                                               => _offAnimBlendOutTime.GetValue();
	public float                                              RandomAnimSegmentDuration                                      => _offRandomAnimSegmentDuration.GetValue();
	public UCameraAnim                                        Anim                                                           => _offAnim.GetValue();
	public APlayerCameraManager                               CameraOwner                                                    => _offCameraOwner.GetValue();
	public float                                              ShakeScale                                                     => _offShakeScale.GetValue();
	public float                                              OscillatorTimeRemaining                                        => _offOscillatorTimeRemaining.GetValue();
	public UCameraAnimInst                                    AnimInst                                                       => _offAnimInst.GetValue();
	#endregion


}

// Class Engine.Canvas
// 0x0050 (0x0078 - 0x0028)
public class UCanvas : UObject
{
	#region Offsets
	private ExternalOffset<float>                             _offOrgX                                                       = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOrgY                                                       = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offClipX                                                      = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offClipY                                                      = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offDrawColor                                                  = new ExternalOffset<FColor>(0x0038, false);                   // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCenterX                                                   = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCenterY                                                   = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNoSmooth                                                  = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSizeX                                                      = new ExternalOffset<int>(0x0040);                             // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSizeY                                                      = new ExternalOffset<int>(0x0044);                             // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPlane>                            _offColorModulate                                              = new ExternalOffset<FPlane>(0x0050, false);                   // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offDefaultTexture                                             = new ExternalOffset<UTexture2D>(0x0060, true);                // 0x0060(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offGradientTexture0                                           = new ExternalOffset<UTexture2D>(0x0068, true);                // 0x0068(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UReporterGraph>                    _offReporterGraph                                              = new ExternalOffset<UReporterGraph>(0x0070, true);            // 0x0070(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              OrgX                                                           => _offOrgX.GetValue();
	public float                                              OrgY                                                           => _offOrgY.GetValue();
	public float                                              ClipX                                                          => _offClipX.GetValue();
	public float                                              ClipY                                                          => _offClipY.GetValue();
	public FColor                                             DrawColor                                                      => _offDrawColor.GetValue();
	public int                                                SizeX                                                          => _offSizeX.GetValue();
	public int                                                SizeY                                                          => _offSizeY.GetValue();
	public FPlane                                             ColorModulate                                                  => _offColorModulate.GetValue();
	public UTexture2D                                         DefaultTexture                                                 => _offDefaultTexture.GetValue();
	public UTexture2D                                         GradientTexture0                                               => _offGradientTexture0.GetValue();
	public UReporterGraph                                     ReporterGraph                                                  => _offReporterGraph.GetValue();
	#endregion


}

// Class Engine.TextureRenderTarget
// 0x005C (0x00D4 - 0x0078)
public class UTextureRenderTarget : UTexture
{
	#region Offsets
	private ExternalOffset<float>                             _offTargetGamma                                                = new ExternalOffset<float>(0x00D0);                           // 0x00D0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              TargetGamma                                                    => _offTargetGamma.GetValue();
	#endregion


}

// Class Engine.TextureRenderTarget2D
// 0x0025 (0x00F9 - 0x00D4)
public class UTextureRenderTarget2D : UTextureRenderTarget
{
	#region Offsets
	private ExternalOffset<int>                               _offSizeX                                                      = new ExternalOffset<int>(0x00D8);                             // 0x00D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSizeY                                                      = new ExternalOffset<int>(0x00DC);                             // 0x00DC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offClearColor                                                 = new ExternalOffset<FLinearColor>(0x00E0, false);             // 0x00E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureAddress>>      _offAddressX                                                   = new ExternalOffset<TEnumAsByte<ETextureAddress>>(0x00F0, false); // 0x00F0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureAddress>>      _offAddressY                                                   = new ExternalOffset<TEnumAsByte<ETextureAddress>>(0x00F1, false); // 0x00F1(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceLinearGamma                                          = new ExternalOffset<char>(0x00F2, false);                     // 0x00F2(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHDR                                                       = new ExternalOffset<char>(0x00F2, false);                     // 0x00F2(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGPUSharedFlag                                             = new ExternalOffset<char>(0x00F2, false);                     // 0x00F2(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureRenderTargetFormat>> _offRenderTargetFormat                                         = new ExternalOffset<TEnumAsByte<ETextureRenderTargetFormat>>(0x00F3, false); // 0x00F3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoGenerateMips                                          = new ExternalOffset<char>(0x00F4, false);                     // 0x00F4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureFilter>>       _offMipsSamplerFilter                                          = new ExternalOffset<TEnumAsByte<ETextureFilter>>(0x00F5, false); // 0x00F5(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureAddress>>      _offMipsAddressU                                               = new ExternalOffset<TEnumAsByte<ETextureAddress>>(0x00F6, false); // 0x00F6(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureAddress>>      _offMipsAddressV                                               = new ExternalOffset<TEnumAsByte<ETextureAddress>>(0x00F7, false); // 0x00F7(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EPixelFormat>>         _offOverrideFormat                                             = new ExternalOffset<TEnumAsByte<EPixelFormat>>(0x00F8, false); // 0x00F8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                SizeX                                                          => _offSizeX.GetValue();
	public int                                                SizeY                                                          => _offSizeY.GetValue();
	public FLinearColor                                       ClearColor                                                     => _offClearColor.GetValue();
	public TEnumAsByte<ETextureAddress>                       AddressX                                                       => _offAddressX.GetValue();
	public TEnumAsByte<ETextureAddress>                       AddressY                                                       => _offAddressY.GetValue();
	public TEnumAsByte<ETextureRenderTargetFormat>            RenderTargetFormat                                             => _offRenderTargetFormat.GetValue();
	public TEnumAsByte<ETextureFilter>                        MipsSamplerFilter                                              => _offMipsSamplerFilter.GetValue();
	public TEnumAsByte<ETextureAddress>                       MipsAddressU                                                   => _offMipsAddressU.GetValue();
	public TEnumAsByte<ETextureAddress>                       MipsAddressV                                                   => _offMipsAddressV.GetValue();
	public TEnumAsByte<EPixelFormat>                          OverrideFormat                                                 => _offOverrideFormat.GetValue();
	#endregion


}

// Class Engine.CanvasRenderTarget2D
// 0x0020 (0x0119 - 0x00F9)
public class UCanvasRenderTarget2D : UTextureRenderTarget2D
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offOnCanvasRenderTargetUpdate                                 = new ExternalOffset<FScriptMulticastDelegate>(0x0100, false); // 0x0100(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<UWorld>>            _offWorld                                                      = new ExternalOffset<TWeakObjectPtr<UWorld>>(0x0110, false);   // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbShouldClearRenderTargetOnReceiveUpdate                    = new ExternalOffset<byte/*(bool)*/>(0x0118);                  // 0x0118(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           OnCanvasRenderTargetUpdate                                     => _offOnCanvasRenderTargetUpdate.GetValue();
	public TWeakObjectPtr<UWorld>                             World                                                          => _offWorld.GetValue();
	public byte/*(bool)*/                                     bShouldClearRenderTargetOnReceiveUpdate                        => _offbShouldClearRenderTargetOnReceiveUpdate.GetValue();
	#endregion


}

// Class Engine.CapsuleComponent
// 0x0008 (0x0428 - 0x0420)
public class UCapsuleComponent : UShapeComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offCapsuleHalfHeight                                          = new ExternalOffset<float>(0x0420);                           // 0x0420(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offCapsuleRadius                                              = new ExternalOffset<float>(0x0424);                           // 0x0424(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public float                                              CapsuleHalfHeight                                              => _offCapsuleHalfHeight.GetValue();
	public float                                              CapsuleRadius                                                  => _offCapsuleRadius.GetValue();
	#endregion


}

// Class Engine.ChaosPhysicalMaterial
// 0x0010 (0x0038 - 0x0028)
public class UChaosPhysicalMaterial : UObject
{
	#region Offsets
	private ExternalOffset<float>                             _offFriction                                                   = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRestitution                                                = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSleepingLinearVelocityThreshold                            = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSleepingAngularVelocityThreshold                           = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Friction                                                       => _offFriction.GetValue();
	public float                                              Restitution                                                    => _offRestitution.GetValue();
	public float                                              SleepingLinearVelocityThreshold                                => _offSleepingLinearVelocityThreshold.GetValue();
	public float                                              SleepingAngularVelocityThreshold                               => _offSleepingAngularVelocityThreshold.GetValue();
	#endregion


}

// Class Engine.CheckBoxStyleAsset
// 0x0580 (0x05A8 - 0x0028)
public class UCheckBoxStyleAsset : UObject
{
	#region Offsets
	private ExternalOffset<FCheckBoxStyle>                    _offCheckBoxStyle                                              = new ExternalOffset<FCheckBoxStyle>(0x0028, false);           // 0x0028(0x0580) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FCheckBoxStyle                                     CheckBoxStyle                                                  => _offCheckBoxStyle.GetValue();
	#endregion


}

// Class Engine.ChildConnection
// 0x04E0 (0x19A8 - 0x14C8)
public class UChildConnection : UNetConnection
{
	#region Offsets
	private ExternalOffset<UNetConnection>                    _offParent                                                     = new ExternalOffset<UNetConnection>(0x19A0, true);            // 0x19A0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UNetConnection                                     Parent                                                         => _offParent.GetValue();
	#endregion


}

// Class Engine.PlatformInterfaceBase
// 0x0010 (0x0038 - 0x0028)
public class UPlatformInterfaceBase : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FDelegateArray>>            _offAllDelegates                                               = new ExternalOffset<TArray<FDelegateArray>>(0x0028, false);   // 0x0028(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FDelegateArray>                             AllDelegates                                                   => _offAllDelegates.GetValue();
	#endregion


}

// Class Engine.CloudStorageBase
// 0x0011 (0x0049 - 0x0038)
public class UCloudStorageBase : UPlatformInterfaceBase
{
	#region Offsets
	private ExternalOffset<TArray<FString>>                   _offLocalCloudFiles                                            = new ExternalOffset<TArray<FString>>(0x0038, false);          // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSuppressDelegateCalls                                     = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FString>                                    LocalCloudFiles                                                => _offLocalCloudFiles.GetValue();
	#endregion


}

// Class Engine.CollisionProfile
// 0x0060 (0x0088 - 0x0028)
public class UCollisionProfile : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<TArray<FCollisionResponseTemplate>> _offProfiles                                                   = new ExternalOffset<TArray<FCollisionResponseTemplate>>(0x0038, false); // 0x0038(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FCustomChannelSetup>>       _offDefaultChannelResponses                                    = new ExternalOffset<TArray<FCustomChannelSetup>>(0x0048, false); // 0x0048(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FCustomProfile>>            _offEditProfiles                                               = new ExternalOffset<TArray<FCustomProfile>>(0x0058, false);   // 0x0058(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FRedirector>>               _offProfileRedirects                                           = new ExternalOffset<TArray<FRedirector>>(0x0068, false);      // 0x0068(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FRedirector>>               _offCollisionChannelRedirects                                  = new ExternalOffset<TArray<FRedirector>>(0x0078, false);      // 0x0078(0x0010) (ZeroConstructor, Config, GlobalConfig, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FCollisionResponseTemplate>                 Profiles                                                       => _offProfiles.GetValue();
	public TArray<FCustomChannelSetup>                        DefaultChannelResponses                                        => _offDefaultChannelResponses.GetValue();
	public TArray<FCustomProfile>                             EditProfiles                                                   => _offEditProfiles.GetValue();
	public TArray<FRedirector>                                ProfileRedirects                                               => _offProfileRedirects.GetValue();
	public TArray<FRedirector>                                CollisionChannelRedirects                                      => _offCollisionChannelRedirects.GetValue();
	#endregion


}

// Class Engine.Commandlet
// 0x0051 (0x0079 - 0x0028)
public class UCommandlet : UObject
{
	#region Offsets
	private ExternalOffset<FString>                           _offHelpDescription                                            = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offHelpUsage                                                  = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offHelpWebLink                                                = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offHelpParamNames                                             = new ExternalOffset<TArray<FString>>(0x0058, false);          // 0x0058(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offHelpParamDescriptions                                      = new ExternalOffset<TArray<FString>>(0x0068, false);          // 0x0068(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offIsServer                                                   = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offIsClient                                                   = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offIsEditor                                                   = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offLogToConsole                                               = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offShowErrorCount                                             = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offShowProgress                                               = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            HelpDescription                                                => _offHelpDescription.GetValue();
	public FString                                            HelpUsage                                                      => _offHelpUsage.GetValue();
	public FString                                            HelpWebLink                                                    => _offHelpWebLink.GetValue();
	public TArray<FString>                                    HelpParamNames                                                 => _offHelpParamNames.GetValue();
	public TArray<FString>                                    HelpParamDescriptions                                          => _offHelpParamDescriptions.GetValue();
	#endregion


}

// Class Engine.ComponentDelegateBinding
// 0x0010 (0x0038 - 0x0028)
public class UComponentDelegateBinding : UDynamicBlueprintBinding
{
	#region Offsets
	private ExternalOffset<TArray<FBlueprintComponentDelegateBinding>> _offComponentDelegateBindings                                  = new ExternalOffset<TArray<FBlueprintComponentDelegateBinding>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBlueprintComponentDelegateBinding>         ComponentDelegateBindings                                      => _offComponentDelegateBindings.GetValue();
	#endregion


}

// Class Engine.CurveTable
// 0x0000 (0x0028 - 0x0028)
public class UCurveTable : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.CompositeCurveTable
// 0x00A0 (0x00C8 - 0x0028)
public class UCompositeCurveTable : UCurveTable
{
	#region Offsets
	private ExternalOffset<TArray<UCurveTable>>               _offParentTables                                               = new ExternalOffset<TArray<UCurveTable>>(0x00A0, false);      // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UCurveTable>>               _offOldParentTables                                            = new ExternalOffset<TArray<UCurveTable>>(0x00B8, false);      // 0x00B8(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<UCurveTable>                                ParentTables                                                   => _offParentTables.GetValue();
	public TArray<UCurveTable>                                OldParentTables                                                => _offOldParentTables.GetValue();
	#endregion


}

// Class Engine.DataTable
// 0x0070 (0x0098 - 0x0028)
public class UDataTable : UObject
{
	#region Offsets
	private ExternalOffset<UScriptStruct>                     _offRowStruct                                                  = new ExternalOffset<UScriptStruct>(0x0028, true);             // 0x0028(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStripFromClientBuilds                                     = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreExtraFields                                         = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreMissingFields                                       = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offImportKeyField                                             = new ExternalOffset<FString>(0x0088, false);                  // 0x0088(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UScriptStruct                                      RowStruct                                                      => _offRowStruct.GetValue();
	public FString                                            ImportKeyField                                                 => _offImportKeyField.GetValue();
	#endregion


}

// Class Engine.CompositeDataTable
// 0x0040 (0x00D8 - 0x0098)
public class UCompositeDataTable : UDataTable
{
	#region Offsets
	private ExternalOffset<TArray<UDataTable>>                _offParentTables                                               = new ExternalOffset<TArray<UDataTable>>(0x00B0, false);       // 0x00B0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UDataTable>>                _offOldParentTables                                            = new ExternalOffset<TArray<UDataTable>>(0x00C8, false);       // 0x00C8(0x0010) (ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public TArray<UDataTable>                                 ParentTables                                                   => _offParentTables.GetValue();
	public TArray<UDataTable>                                 OldParentTables                                                => _offOldParentTables.GetValue();
	#endregion


}

// Class Engine.ControlChannel
// 0x0040 (0x0070 - 0x0030)
public class UControlChannel : UChannel
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ControlRigInterface
// 0x0000 (0x0028 - 0x0028)
public class UControlRigInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.StreamingSettings
// 0x0041 (0x0069 - 0x0028)
public class UStreamingSettings : UDeveloperSettings
{
	#region Offsets
//	private ExternalOffset<char>                              _offAsyncLoadingThreadEnabled                                  = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offWarnIfTimeLimitExceeded                                    = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offTimeLimitExceededMultiplier                                = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offTimeLimitExceededMinTime                                   = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offMinBulkDataSizeForAsyncLoading                             = new ExternalOffset<int>(0x0044);                             // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offUseBackgroundLevelStreaming                                = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offAsyncLoadingUseFullTimeLimit                               = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offAsyncLoadingTimeLimit                                      = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offPriorityAsyncLoadingExtraTime                              = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offLevelStreamingActorsUpdateTimeLimit                        = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offPriorityLevelStreamingActorsUpdateExtraTime                = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offLevelStreamingComponentsRegistrationGranularity            = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offLevelStreamingUnregisterComponentsTimeLimit                = new ExternalOffset<float>(0x0060);                           // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offLevelStreamingComponentsUnregistrationGranularity          = new ExternalOffset<int>(0x0064);                             // 0x0064(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offEventDrivenLoaderEnabled                                   = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public float                                              TimeLimitExceededMultiplier                                    => _offTimeLimitExceededMultiplier.GetValue();
	public float                                              TimeLimitExceededMinTime                                       => _offTimeLimitExceededMinTime.GetValue();
	public int                                                MinBulkDataSizeForAsyncLoading                                 => _offMinBulkDataSizeForAsyncLoading.GetValue();
	public float                                              AsyncLoadingTimeLimit                                          => _offAsyncLoadingTimeLimit.GetValue();
	public float                                              PriorityAsyncLoadingExtraTime                                  => _offPriorityAsyncLoadingExtraTime.GetValue();
	public float                                              LevelStreamingActorsUpdateTimeLimit                            => _offLevelStreamingActorsUpdateTimeLimit.GetValue();
	public float                                              PriorityLevelStreamingActorsUpdateExtraTime                    => _offPriorityLevelStreamingActorsUpdateExtraTime.GetValue();
	public int                                                LevelStreamingComponentsRegistrationGranularity                => _offLevelStreamingComponentsRegistrationGranularity.GetValue();
	public float                                              LevelStreamingUnregisterComponentsTimeLimit                    => _offLevelStreamingUnregisterComponentsTimeLimit.GetValue();
	public int                                                LevelStreamingComponentsUnregistrationGranularity              => _offLevelStreamingComponentsUnregistrationGranularity.GetValue();
	#endregion


}

// Class Engine.GarbageCollectionSettings
// 0x0030 (0x0058 - 0x0028)
public class UGarbageCollectionSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<float>                             _offTimeBetweenPurgingPendingKillObjects                       = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offFlushStreamingOnGC                                         = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offAllowParallelGC                                            = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offIncrementalBeginDestroyEnabled                             = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offMultithreadedDestructionEnabled                            = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offCreateGCClusters                                           = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offActorClusteringEnabled                                     = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offBlueprintClusteringEnabled                                 = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offUseDisregardForGCOnDedicatedServers                        = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offMinGCClusterSize                                           = new ExternalOffset<int>(0x0040);                             // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offNumRetriesBeforeForcingGC                                  = new ExternalOffset<int>(0x0044);                             // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offMaxObjectsNotConsideredByGC                                = new ExternalOffset<int>(0x0048);                             // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offSizeOfPermanentObjectPool                                  = new ExternalOffset<int>(0x004C);                             // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offMaxObjectsInGame                                           = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offMaxObjectsInEditor                                         = new ExternalOffset<int>(0x0054);                             // 0x0054(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public float                                              TimeBetweenPurgingPendingKillObjects                           => _offTimeBetweenPurgingPendingKillObjects.GetValue();
	public int                                                MinGCClusterSize                                               => _offMinGCClusterSize.GetValue();
	public int                                                NumRetriesBeforeForcingGC                                      => _offNumRetriesBeforeForcingGC.GetValue();
	public int                                                MaxObjectsNotConsideredByGC                                    => _offMaxObjectsNotConsideredByGC.GetValue();
	public int                                                SizeOfPermanentObjectPool                                      => _offSizeOfPermanentObjectPool.GetValue();
	public int                                                MaxObjectsInGame                                               => _offMaxObjectsInGame.GetValue();
	public int                                                MaxObjectsInEditor                                             => _offMaxObjectsInEditor.GetValue();
	#endregion


}

// Class Engine.CullDistanceVolume
// 0x0011 (0x0291 - 0x0280)
public class ACullDistanceVolume : AVolume
{
	#region Offsets
	private ExternalOffset<TArray<FCullDistanceSizePair>>     _offCullDistances                                              = new ExternalOffset<TArray<FCullDistanceSizePair>>(0x0280, false); // 0x0280(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x0290, false);                     // 0x0290(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FCullDistanceSizePair>                      CullDistances                                                  => _offCullDistances.GetValue();
	#endregion


}

// Class Engine.CurveBase
// 0x0000 (0x0028 - 0x0028)
public class UCurveBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.CurveEdPresetCurve
// 0x0000 (0x0028 - 0x0028)
public class UCurveEdPresetCurve : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.CurveFloat
// 0x0089 (0x00B1 - 0x0028)
public class UCurveFloat : UCurveBase
{
	#region Offsets
	private ExternalOffset<FRichCurve>                        _offFloatCurve                                                 = new ExternalOffset<FRichCurve>(0x0030, false);               // 0x0030(0x0080) (NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsEventCurve                                              = new ExternalOffset<byte/*(bool)*/>(0x00B0);                  // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRichCurve                                         FloatCurve                                                     => _offFloatCurve.GetValue();
	public byte/*(bool)*/                                     bIsEventCurve                                                  => _offbIsEventCurve.GetValue();
	#endregion


}

// Class Engine.CurveLinearColor
// 0x0224 (0x024C - 0x0028)
public class UCurveLinearColor : UCurveBase
{
	#region Offsets
//	private ExternalOffset<FRichCurve>                        _offFloatCurves[0x4]                                           = new ExternalOffset<FRichCurve>(0x0030, false);               // 0x0030(0x0080) (NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAdjustHue                                                  = new ExternalOffset<float>(0x0230);                           // 0x0230(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAdjustSaturation                                           = new ExternalOffset<float>(0x0234);                           // 0x0234(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAdjustBrightness                                           = new ExternalOffset<float>(0x0238);                           // 0x0238(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAdjustBrightnessCurve                                      = new ExternalOffset<float>(0x023C);                           // 0x023C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAdjustVibrance                                             = new ExternalOffset<float>(0x0240);                           // 0x0240(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAdjustMinAlpha                                             = new ExternalOffset<float>(0x0244);                           // 0x0244(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAdjustMaxAlpha                                             = new ExternalOffset<float>(0x0248);                           // 0x0248(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              AdjustHue                                                      => _offAdjustHue.GetValue();
	public float                                              AdjustSaturation                                               => _offAdjustSaturation.GetValue();
	public float                                              AdjustBrightness                                               => _offAdjustBrightness.GetValue();
	public float                                              AdjustBrightnessCurve                                          => _offAdjustBrightnessCurve.GetValue();
	public float                                              AdjustVibrance                                                 => _offAdjustVibrance.GetValue();
	public float                                              AdjustMinAlpha                                                 => _offAdjustMinAlpha.GetValue();
	public float                                              AdjustMaxAlpha                                                 => _offAdjustMaxAlpha.GetValue();
	#endregion


}

// Class Engine.Texture2D
// 0x006C (0x00E4 - 0x0078)
public class UTexture2D : UTexture
{
	#region Offsets
	private ExternalOffset<int>                               _offLevelIndex                                                 = new ExternalOffset<int>(0x00D0);                             // 0x00D0(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offFirstResourceMemMip                                        = new ExternalOffset<int>(0x00D4);                             // 0x00D4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTemporarilyDisableStreaming                               = new ExternalOffset<char>(0x00D8, false);                     // 0x00D8(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TEnumAsByte<ETextureAddress>>      _offAddressX                                                   = new ExternalOffset<TEnumAsByte<ETextureAddress>>(0x00D9, false); // 0x00D9(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureAddress>>      _offAddressY                                                   = new ExternalOffset<TEnumAsByte<ETextureAddress>>(0x00DA, false); // 0x00DA(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntPoint>                         _offImportedSize                                               = new ExternalOffset<FIntPoint>(0x00DC, false);                // 0x00DC(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public int                                                LevelIndex                                                     => _offLevelIndex.GetValue();
	public int                                                FirstResourceMemMip                                            => _offFirstResourceMemMip.GetValue();
	public TEnumAsByte<ETextureAddress>                       AddressX                                                       => _offAddressX.GetValue();
	public TEnumAsByte<ETextureAddress>                       AddressY                                                       => _offAddressY.GetValue();
	public FIntPoint                                          ImportedSize                                                   => _offImportedSize.GetValue();
	#endregion


}

// Class Engine.CurveLinearColorAtlas
// 0x0034 (0x0118 - 0x00E4)
public class UCurveLinearColorAtlas : UTexture2D
{
	#region Offsets
	private ExternalOffset<uint>                              _offTextureSize                                                = new ExternalOffset<uint>(0x0100);                            // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offGradientPixelSize                                          = new ExternalOffset<uint>(0x0104);                            // 0x0104(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UCurveLinearColor>>         _offGradientCurves                                             = new ExternalOffset<TArray<UCurveLinearColor>>(0x0108, false); // 0x0108(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public uint                                               TextureSize                                                    => _offTextureSize.GetValue();
	public uint                                               GradientPixelSize                                              => _offGradientPixelSize.GetValue();
	public TArray<UCurveLinearColor>                          GradientCurves                                                 => _offGradientCurves.GetValue();
	#endregion


}

// Class Engine.CurveSourceInterface
// 0x0000 (0x0028 - 0x0028)
public class UCurveSourceInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.CurveVector
// 0x0188 (0x01B0 - 0x0028)
public class UCurveVector : UCurveBase
{
	#region Offsets
//	private ExternalOffset<FRichCurve>                        _offFloatCurves[0x3]                                           = new ExternalOffset<FRichCurve>(0x0030, false);               // 0x0030(0x0080) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.DataTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
public class UDataTableFunctionLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DebugCameraController
// 0x00D4 (0x0660 - 0x058C)
public class ADebugCameraController : APlayerController
{
	#region Offsets
//	private ExternalOffset<char>                              _offbShowSelectedInfo                                          = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (Config, GlobalConfig, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsFrozenRendering                                         = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsOrbitingSelectedActor                                   = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOrbitPivotUseCenter                                       = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableBufferVisualization                                 = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableBufferVisualizationFullMode                         = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsBufferVisualizationInputSetup                           = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLastDisplayEnabled                                        = new ExternalOffset<char>(0x0598, false);                     // 0x0598(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UDrawFrustumComponent>             _offDrawFrustum                                                = new ExternalOffset<UDrawFrustumComponent>(0x05A0, true);     // 0x05A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                            _offSelectedActor                                              = new ExternalOffset<AActor>(0x05A8, true);                    // 0x05A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPrimitiveComponent>               _offSelectedComponent                                          = new ExternalOffset<UPrimitiveComponent>(0x05B0, true);       // 0x05B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FHitResult>                        _offSelectedHitPoint                                           = new ExternalOffset<FHitResult>(0x05B8, false);               // 0x05B8(0x0088) (IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<APlayerController>                 _offOriginalControllerRef                                      = new ExternalOffset<APlayerController>(0x0640, true);         // 0x0640(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPlayer>                           _offOriginalPlayer                                             = new ExternalOffset<UPlayer>(0x0648, true);                   // 0x0648(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpeedScale                                                 = new ExternalOffset<float>(0x0650);                           // 0x0650(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInitialMaxSpeed                                            = new ExternalOffset<float>(0x0654);                           // 0x0654(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInitialAccel                                               = new ExternalOffset<float>(0x0658);                           // 0x0658(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInitialDecel                                               = new ExternalOffset<float>(0x065C);                           // 0x065C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UDrawFrustumComponent                              DrawFrustum                                                    => _offDrawFrustum.GetValue();
	public AActor                                             SelectedActor                                                  => _offSelectedActor.GetValue();
	public UPrimitiveComponent                                SelectedComponent                                              => _offSelectedComponent.GetValue();
	public FHitResult                                         SelectedHitPoint                                               => _offSelectedHitPoint.GetValue();
	public APlayerController                                  OriginalControllerRef                                          => _offOriginalControllerRef.GetValue();
	public UPlayer                                            OriginalPlayer                                                 => _offOriginalPlayer.GetValue();
	public float                                              SpeedScale                                                     => _offSpeedScale.GetValue();
	public float                                              InitialMaxSpeed                                                => _offInitialMaxSpeed.GetValue();
	public float                                              InitialAccel                                                   => _offInitialAccel.GetValue();
	public float                                              InitialDecel                                                   => _offInitialDecel.GetValue();
	#endregion


}

// Class Engine.DebugCameraControllerSettings
// 0x0020 (0x0048 - 0x0028)
public class UDebugCameraControllerSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<TArray<FDebugCameraControllerSettingsViewModeIndex>> _offCycleViewModes                                             = new ExternalOffset<TArray<FDebugCameraControllerSettingsViewModeIndex>>(0x0038, false); // 0x0038(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FDebugCameraControllerSettingsViewModeIndex> CycleViewModes                                                 => _offCycleViewModes.GetValue();
	#endregion


}

// Class Engine.DebugCameraHUD
// 0x0070 (0x0338 - 0x02C8)
public class ADebugCameraHUD : AHUD
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DebugDrawService
// 0x0000 (0x0028 - 0x0028)
public class UDebugDrawService : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DecalActor
// 0x0018 (0x0250 - 0x0238)
public class ADecalActor : AActor
{
	#region Offsets
	private ExternalOffset<UDecalComponent>                   _offDecal                                                      = new ExternalOffset<UDecalComponent>(0x0248, true);           // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UDecalComponent                                    Decal                                                          => _offDecal.GetValue();
	#endregion


}

// Class Engine.DecalComponent
// 0x00C8 (0x0248 - 0x0180)
public class UDecalComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<UMaterialInterface>                _offDecalMaterial                                              = new ExternalOffset<UMaterialInterface>(0x0218, true);        // 0x0218(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offSortOrder                                                  = new ExternalOffset<int>(0x0220);                             // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFadeScreenSize                                             = new ExternalOffset<float>(0x0224);                           // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFadeStartDelay                                             = new ExternalOffset<float>(0x0228);                           // 0x0228(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFadeDuration                                               = new ExternalOffset<float>(0x022C);                           // 0x022C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFadeInDuration                                             = new ExternalOffset<float>(0x0230);                           // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFadeInStartDelay                                           = new ExternalOffset<float>(0x0234);                           // 0x0234(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDestroyOwnerAfterFade                                     = new ExternalOffset<char>(0x0238, false);                     // 0x0238(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offDecalSize                                                  = new ExternalOffset<FVector>(0x023C, false);                  // 0x023C(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialInterface                                 DecalMaterial                                                  => _offDecalMaterial.GetValue();
	public int                                                SortOrder                                                      => _offSortOrder.GetValue();
	public float                                              FadeScreenSize                                                 => _offFadeScreenSize.GetValue();
	public float                                              FadeStartDelay                                                 => _offFadeStartDelay.GetValue();
	public float                                              FadeDuration                                                   => _offFadeDuration.GetValue();
	public float                                              FadeInDuration                                                 => _offFadeInDuration.GetValue();
	public float                                              FadeInStartDelay                                               => _offFadeInStartDelay.GetValue();
	public FVector                                            DecalSize                                                      => _offDecalSize.GetValue();
	#endregion


}

// Class Engine.DefaultPhysicsVolume
// 0x0003 (0x0290 - 0x028D)
public class ADefaultPhysicsVolume : APhysicsVolume
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DemoNetConnection
// 0x04D8 (0x19A0 - 0x14C8)
public class UDemoNetConnection : UNetConnection
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DemoNetDriver
// 0x0578 (0x0CA0 - 0x0728)
public class UDemoNetDriver : UNetDriver
{
	#region Offsets
//	private TMap<struct FString, struct FRollbackNetStartupActorInfo> _offRollbackNetStartupActors                                   = new ExternalOffset<TMap<FRollbackNetStartupActorInfo>>(0x0840, false); // 0x0840(0x0050) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCheckpointSaveMaxMSPerFrame                                = new ExternalOffset<float>(0x0C44);                           // 0x0C44(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FMulticastRecordOptions>>   _offMulticastRecordOptions                                     = new ExternalOffset<TArray<FMulticastRecordOptions>>(0x0C78, false); // 0x0C78(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsLocalReplay                                             = new ExternalOffset<byte/*(bool)*/>(0x0C88);                  // 0x0C88(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<APlayerController>>         _offSpectatorControllers                                       = new ExternalOffset<TArray<APlayerController>>(0x0C90, false); // 0x0C90(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public float                                              CheckpointSaveMaxMSPerFrame                                    => _offCheckpointSaveMaxMSPerFrame.GetValue();
	public TArray<FMulticastRecordOptions>                    MulticastRecordOptions                                         => _offMulticastRecordOptions.GetValue();
	public byte/*(bool)*/                                     bIsLocalReplay                                                 => _offbIsLocalReplay.GetValue();
	public TArray<APlayerController>                          SpectatorControllers                                           => _offSpectatorControllers.GetValue();
	#endregion


}

// Class Engine.PendingNetGame
// 0x0018 (0x0040 - 0x0028)
public class UPendingNetGame : UObject
{
	#region Offsets
	private ExternalOffset<UNetDriver>                        _offNetDriver                                                  = new ExternalOffset<UNetDriver>(0x0030, true);                // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UDemoNetDriver>                    _offDemoNetDriver                                              = new ExternalOffset<UDemoNetDriver>(0x0038, true);            // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UNetDriver                                         NetDriver                                                      => _offNetDriver.GetValue();
	public UDemoNetDriver                                     DemoNetDriver                                                  => _offDemoNetDriver.GetValue();
	#endregion


}

// Class Engine.DemoPendingNetGame
// 0x0080 (0x00C0 - 0x0040)
public class UDemoPendingNetGame : UPendingNetGame
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DestructibleInterface
// 0x0000 (0x0028 - 0x0028)
public class UDestructibleInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.TextureLODSettings
// 0x0010 (0x0038 - 0x0028)
public class UTextureLODSettings : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FTextureLODGroup>>          _offTextureLODGroups                                           = new ExternalOffset<TArray<FTextureLODGroup>>(0x0028, false); // 0x0028(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FTextureLODGroup>                           TextureLODGroups                                               => _offTextureLODGroups.GetValue();
	#endregion


}

// Class Engine.DeviceProfile
// 0x0050 (0x0088 - 0x0038)
public class UDeviceProfile : UTextureLODSettings
{
	#region Offsets
	private ExternalOffset<FString>                           _offDeviceType                                                 = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (Edit, ZeroConstructor, Config, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offBaseProfileName                                            = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                           _offParent                                                     = new ExternalOffset<UObject>(0x0058, true);                   // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offCVars                                                      = new ExternalOffset<TArray<FString>>(0x0078, false);          // 0x0078(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            DeviceType                                                     => _offDeviceType.GetValue();
	public FString                                            BaseProfileName                                                => _offBaseProfileName.GetValue();
	public UObject                                            Parent                                                         => _offParent.GetValue();
	public TArray<FString>                                    CVars                                                          => _offCVars.GetValue();
	#endregion


}

// Class Engine.DeviceProfileManager
// 0x0010 (0x0038 - 0x0028)
public class UDeviceProfileManager : UObject
{
	#region Offsets
	private ExternalOffset<TArray<UObject>>                   _offProfiles                                                   = new ExternalOffset<TArray<UObject>>(0x0028, false);          // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UObject>                                    Profiles                                                       => _offProfiles.GetValue();
	#endregion


}

// Class Engine.DialogueSoundWaveProxy
// 0x0050 (0x0110 - 0x00C0)
public class UDialogueSoundWaveProxy : USoundBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DialogueVoice
// 0x0014 (0x003C - 0x0028)
public class UDialogueVoice : UObject
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EGrammaticalGender>>   _offGender                                                     = new ExternalOffset<TEnumAsByte<EGrammaticalGender>>(0x0028, false); // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EGrammaticalNumber>>   _offPlurality                                                  = new ExternalOffset<TEnumAsByte<EGrammaticalNumber>>(0x0029, false); // 0x0029(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offLocalizationGUID                                           = new ExternalOffset<FGuid>(0x002C, false);                    // 0x002C(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EGrammaticalGender>                    Gender                                                         => _offGender.GetValue();
	public TEnumAsByte<EGrammaticalNumber>                    Plurality                                                      => _offPlurality.GetValue();
	public FGuid                                              LocalizationGUID                                               => _offLocalizationGUID.GetValue();
	#endregion


}

// Class Engine.DialogueWave
// 0x0048 (0x0070 - 0x0028)
public class UDialogueWave : UObject
{
	#region Offsets
//	private ExternalOffset<char>                              _offbMature                                                    = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverride_SubtitleOverride                                 = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offSpokenText                                                 = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offSubtitleOverride                                           = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FDialogueContextMapping>>   _offContextMappings                                            = new ExternalOffset<TArray<FDialogueContextMapping>>(0x0050, false); // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offLocalizationGUID                                           = new ExternalOffset<FGuid>(0x0060, false);                    // 0x0060(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            SpokenText                                                     => _offSpokenText.GetValue();
	public FString                                            SubtitleOverride                                               => _offSubtitleOverride.GetValue();
	public TArray<FDialogueContextMapping>                    ContextMappings                                                => _offContextMappings.GetValue();
	public FGuid                                              LocalizationGUID                                               => _offLocalizationGUID.GetValue();
	#endregion


}

// Class Engine.Light
// 0x0019 (0x0251 - 0x0238)
public class ALight : AActor
{
	#region Offsets
	private ExternalOffset<ULightComponent>                   _offLightComponent                                             = new ExternalOffset<ULightComponent>(0x0248, true);           // 0x0248(0x0008) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ULightComponent                                    LightComponent                                                 => _offLightComponent.GetValue();
	#endregion


}

// Class Engine.DirectionalLight
// 0x0007 (0x0258 - 0x0251)
public class ADirectionalLight : ALight
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LightComponentBase
// 0x00C4 (0x0244 - 0x0180)
public class ULightComponentBase : USceneComponent
{
	#region Offsets
	private ExternalOffset<FGuid>                             _offLightGuid                                                  = new ExternalOffset<FGuid>(0x0218, false);                    // 0x0218(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBrightness                                                 = new ExternalOffset<float>(0x0228);                           // 0x0228(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offIntensity                                                  = new ExternalOffset<float>(0x022C);                           // 0x022C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offLightColor                                                 = new ExternalOffset<FColor>(0x0230, false);                   // 0x0230(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAffectsWorld                                              = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offCastShadows                                                = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offCastStaticShadows                                          = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offCastDynamicShadows                                         = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAffectTranslucentLighting                                 = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTransmission                                              = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastVolumetricShadow                                      = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastRaytracedShadow                                       = new ExternalOffset<char>(0x0234, false);                     // 0x0234(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAffectReflection                                          = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAffectGlobalIllumination                                  = new ExternalOffset<char>(0x0235, false);                     // 0x0235(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offIndirectLightingIntensity                                  = new ExternalOffset<float>(0x0238);                           // 0x0238(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumetricScatteringIntensity                              = new ExternalOffset<float>(0x023C);                           // 0x023C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSamplesPerPixel                                            = new ExternalOffset<int>(0x0240);                             // 0x0240(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FGuid                                              LightGuid                                                      => _offLightGuid.GetValue();
	public float                                              Brightness                                                     => _offBrightness.GetValue();
	public float                                              Intensity                                                      => _offIntensity.GetValue();
	public FColor                                             LightColor                                                     => _offLightColor.GetValue();
	public float                                              IndirectLightingIntensity                                      => _offIndirectLightingIntensity.GetValue();
	public float                                              VolumetricScatteringIntensity                                  => _offVolumetricScatteringIntensity.GetValue();
	public int                                                SamplesPerPixel                                                => _offSamplesPerPixel.GetValue();
	#endregion


}

// Class Engine.LightComponent
// 0x008C (0x02D0 - 0x0244)
public class ULightComponent : ULightComponentBase
{
	#region Offsets
	private ExternalOffset<float>                             _offMaxDrawDistance                                            = new ExternalOffset<float>(0x024C);                           // 0x024C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxDistanceFadeRange                                       = new ExternalOffset<float>(0x0250);                           // 0x0250(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseTemperature                                            = new ExternalOffset<char>(0x0254, false);                     // 0x0254(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offShadowMapChannel                                           = new ExternalOffset<int>(0x0258);                             // 0x0258(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinRoughness                                               = new ExternalOffset<float>(0x0260);                           // 0x0260(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpecularScale                                              = new ExternalOffset<float>(0x0264);                           // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offShadowResolutionScale                                      = new ExternalOffset<float>(0x0268);                           // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offShadowBias                                                 = new ExternalOffset<float>(0x026C);                           // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offShadowSlopeBias                                            = new ExternalOffset<float>(0x0270);                           // 0x0270(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offShadowSharpen                                              = new ExternalOffset<float>(0x0274);                           // 0x0274(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offContactShadowLength                                        = new ExternalOffset<float>(0x0278);                           // 0x0278(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offContactShadowLengthInWS                                    = new ExternalOffset<char>(0x027C, false);                     // 0x027C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offInverseSquaredFalloff                                      = new ExternalOffset<char>(0x027C, false);                     // 0x027C(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offCastTranslucentShadows                                     = new ExternalOffset<char>(0x027C, false);                     // 0x027C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastShadowsFromCinematicObjectsOnly                       = new ExternalOffset<char>(0x027C, false);                     // 0x027C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAffectDynamicIndirectLighting                             = new ExternalOffset<char>(0x027C, false);                     // 0x027C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceCachedShadowsForMovablePrimitives                    = new ExternalOffset<char>(0x027C, false);                     // 0x027C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLightingChannels>                 _offLightingChannels                                           = new ExternalOffset<FLightingChannels>(0x0280, false);        // 0x0280(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInterface>                _offLightFunctionMaterial                                      = new ExternalOffset<UMaterialInterface>(0x0288, true);        // 0x0288(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offLightFunctionScale                                         = new ExternalOffset<FVector>(0x0290, false);                  // 0x0290(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTextureLightProfile>              _offIESTexture                                                 = new ExternalOffset<UTextureLightProfile>(0x02A0, true);      // 0x02A0(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseIESBrightness                                          = new ExternalOffset<char>(0x02A8, false);                     // 0x02A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offIESBrightnessScale                                         = new ExternalOffset<float>(0x02AC);                           // 0x02AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLightFunctionFadeDistance                                  = new ExternalOffset<float>(0x02B0);                           // 0x02B0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDisabledBrightness                                         = new ExternalOffset<float>(0x02B4);                           // 0x02B4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableLightShaftBloom                                     = new ExternalOffset<char>(0x02B8, false);                     // 0x02B8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBloomScale                                                 = new ExternalOffset<float>(0x02BC);                           // 0x02BC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBloomThreshold                                             = new ExternalOffset<float>(0x02C0);                           // 0x02C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offBloomTint                                                  = new ExternalOffset<FColor>(0x02C4, false);                   // 0x02C4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseRayTracedDistanceFieldShadows                          = new ExternalOffset<byte/*(bool)*/>(0x02C8);                  // 0x02C8(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRayStartOffsetDepthScale                                   = new ExternalOffset<float>(0x02CC);                           // 0x02CC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              MaxDrawDistance                                                => _offMaxDrawDistance.GetValue();
	public float                                              MaxDistanceFadeRange                                           => _offMaxDistanceFadeRange.GetValue();
	public int                                                ShadowMapChannel                                               => _offShadowMapChannel.GetValue();
	public float                                              MinRoughness                                                   => _offMinRoughness.GetValue();
	public float                                              SpecularScale                                                  => _offSpecularScale.GetValue();
	public float                                              ShadowResolutionScale                                          => _offShadowResolutionScale.GetValue();
	public float                                              ShadowBias                                                     => _offShadowBias.GetValue();
	public float                                              ShadowSlopeBias                                                => _offShadowSlopeBias.GetValue();
	public float                                              ShadowSharpen                                                  => _offShadowSharpen.GetValue();
	public float                                              ContactShadowLength                                            => _offContactShadowLength.GetValue();
	public FLightingChannels                                  LightingChannels                                               => _offLightingChannels.GetValue();
	public UMaterialInterface                                 LightFunctionMaterial                                          => _offLightFunctionMaterial.GetValue();
	public FVector                                            LightFunctionScale                                             => _offLightFunctionScale.GetValue();
	public UTextureLightProfile                               IESTexture                                                     => _offIESTexture.GetValue();
	public float                                              IESBrightnessScale                                             => _offIESBrightnessScale.GetValue();
	public float                                              LightFunctionFadeDistance                                      => _offLightFunctionFadeDistance.GetValue();
	public float                                              DisabledBrightness                                             => _offDisabledBrightness.GetValue();
	public float                                              BloomScale                                                     => _offBloomScale.GetValue();
	public float                                              BloomThreshold                                                 => _offBloomThreshold.GetValue();
	public FColor                                             BloomTint                                                      => _offBloomTint.GetValue();
	public byte/*(bool)*/                                     bUseRayTracedDistanceFieldShadows                              => _offbUseRayTracedDistanceFieldShadows.GetValue();
	public float                                              RayStartOffsetDepthScale                                       => _offRayStartOffsetDepthScale.GetValue();
	#endregion


}

// Class Engine.DirectionalLightComponent
// 0x00F5 (0x03C5 - 0x02D0)
public class UDirectionalLightComponent : ULightComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offOcclusionMaskDarkness                                      = new ExternalOffset<float>(0x0360);                           // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOcclusionDepthRange                                        = new ExternalOffset<float>(0x0364);                           // 0x0364(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offLightShaftOverrideDirection                                = new ExternalOffset<FVector>(0x0368, false);                  // 0x0368(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWholeSceneDynamicShadowRadius                              = new ExternalOffset<float>(0x0374);                           // 0x0374(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDynamicShadowDistanceMovableLight                          = new ExternalOffset<float>(0x0378);                           // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDynamicShadowDistanceStationaryLight                       = new ExternalOffset<float>(0x037C);                           // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offDynamicShadowCascades                                      = new ExternalOffset<int>(0x0380);                             // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCascadeDistributionExponent                                = new ExternalOffset<float>(0x0384);                           // 0x0384(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCascadeTransitionFraction                                  = new ExternalOffset<float>(0x0388);                           // 0x0388(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offShadowDistanceFadeoutFraction                              = new ExternalOffset<float>(0x038C);                           // 0x038C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseInsetShadowsForMovableObjects                          = new ExternalOffset<char>(0x0390, false);                     // 0x0390(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offFarShadowCascadeCount                                      = new ExternalOffset<int>(0x0394);                             // 0x0394(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFarShadowDistance                                          = new ExternalOffset<float>(0x0398);                           // 0x0398(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceFieldShadowDistance                                = new ExternalOffset<float>(0x039C);                           // 0x039C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLightSourceAngle                                           = new ExternalOffset<float>(0x03A0);                           // 0x03A0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLightSourceSoftAngle                                       = new ExternalOffset<float>(0x03A4);                           // 0x03A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTraceDistance                                              = new ExternalOffset<float>(0x03A8);                           // 0x03A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLightmassDirectionalLightSettings> _offLightmassSettings                                          = new ExternalOffset<FLightmassDirectionalLightSettings>(0x03AC, false); // 0x03AC(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastModulatedShadows                                      = new ExternalOffset<char>(0x03BC, false);                     // 0x03BC(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offModulatedShadowColor                                       = new ExternalOffset<FColor>(0x03C0, false);                   // 0x03C0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedAsAtmosphereSunLight                                  = new ExternalOffset<char>(0x03C4, false);                     // 0x03C4(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              OcclusionMaskDarkness                                          => _offOcclusionMaskDarkness.GetValue();
	public float                                              OcclusionDepthRange                                            => _offOcclusionDepthRange.GetValue();
	public FVector                                            LightShaftOverrideDirection                                    => _offLightShaftOverrideDirection.GetValue();
	public float                                              WholeSceneDynamicShadowRadius                                  => _offWholeSceneDynamicShadowRadius.GetValue();
	public float                                              DynamicShadowDistanceMovableLight                              => _offDynamicShadowDistanceMovableLight.GetValue();
	public float                                              DynamicShadowDistanceStationaryLight                           => _offDynamicShadowDistanceStationaryLight.GetValue();
	public int                                                DynamicShadowCascades                                          => _offDynamicShadowCascades.GetValue();
	public float                                              CascadeDistributionExponent                                    => _offCascadeDistributionExponent.GetValue();
	public float                                              CascadeTransitionFraction                                      => _offCascadeTransitionFraction.GetValue();
	public float                                              ShadowDistanceFadeoutFraction                                  => _offShadowDistanceFadeoutFraction.GetValue();
	public int                                                FarShadowCascadeCount                                          => _offFarShadowCascadeCount.GetValue();
	public float                                              FarShadowDistance                                              => _offFarShadowDistance.GetValue();
	public float                                              DistanceFieldShadowDistance                                    => _offDistanceFieldShadowDistance.GetValue();
	public float                                              LightSourceAngle                                               => _offLightSourceAngle.GetValue();
	public float                                              LightSourceSoftAngle                                           => _offLightSourceSoftAngle.GetValue();
	public float                                              TraceDistance                                                  => _offTraceDistance.GetValue();
	public FLightmassDirectionalLightSettings                 LightmassSettings                                              => _offLightmassSettings.GetValue();
	public FColor                                             ModulatedShadowColor                                           => _offModulatedShadowColor.GetValue();
	#endregion


}

// Class Engine.Distribution
// 0x0000 (0x0028 - 0x0028)
public class UDistribution : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DistributionFloat
// 0x0009 (0x0031 - 0x0028)
public class UDistributionFloat : UDistribution
{
	#region Offsets
//	private ExternalOffset<char>                              _offbCanBeBaked                                                = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbBakedDataSuccesfully                                      = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	#endregion


}

// Class Engine.DistributionFloatConstant
// 0x000B (0x003C - 0x0031)
public class UDistributionFloatConstant : UDistributionFloat
{
	#region Offsets
	private ExternalOffset<float>                             _offConstant                                                   = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Constant                                                       => _offConstant.GetValue();
	#endregion


}

// Class Engine.DistributionFloatConstantCurve
// 0x001F (0x0050 - 0x0031)
public class UDistributionFloatConstantCurve : UDistributionFloat
{
	#region Offsets
	private ExternalOffset<FInterpCurveFloat>                 _offConstantCurve                                              = new ExternalOffset<FInterpCurveFloat>(0x0038, false);        // 0x0038(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInterpCurveFloat                                  ConstantCurve                                                  => _offConstantCurve.GetValue();
	#endregion


}

// Class Engine.DistributionFloatParameterBase
// 0x001D (0x0059 - 0x003C)
public class UDistributionFloatParameterBase : UDistributionFloatConstant
{
	#region Offsets
	private ExternalOffset<FName>                             _offParameterName                                              = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinInput                                                   = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxInput                                                   = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinOutput                                                  = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxOutput                                                  = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EDistributionParamMode>> _offParamMode                                                  = new ExternalOffset<TEnumAsByte<EDistributionParamMode>>(0x0058, false); // 0x0058(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              ParameterName                                                  => _offParameterName.GetValue();
	public float                                              MinInput                                                       => _offMinInput.GetValue();
	public float                                              MaxInput                                                       => _offMaxInput.GetValue();
	public float                                              MinOutput                                                      => _offMinOutput.GetValue();
	public float                                              MaxOutput                                                      => _offMaxOutput.GetValue();
	public TEnumAsByte<EDistributionParamMode>                ParamMode                                                      => _offParamMode.GetValue();
	#endregion


}

// Class Engine.DistributionFloatParticleParameter
// 0x0007 (0x0060 - 0x0059)
public class UDistributionFloatParticleParameter : UDistributionFloatParameterBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DistributionFloatUniform
// 0x000F (0x0040 - 0x0031)
public class UDistributionFloatUniform : UDistributionFloat
{
	#region Offsets
	private ExternalOffset<float>                             _offMin                                                        = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMax                                                        = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Min                                                            => _offMin.GetValue();
	public float                                              Max                                                            => _offMax.GetValue();
	#endregion


}

// Class Engine.DistributionFloatUniformCurve
// 0x001F (0x0050 - 0x0031)
public class UDistributionFloatUniformCurve : UDistributionFloat
{
	#region Offsets
	private ExternalOffset<FInterpCurveVector2D>              _offConstantCurve                                              = new ExternalOffset<FInterpCurveVector2D>(0x0038, false);     // 0x0038(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInterpCurveVector2D                               ConstantCurve                                                  => _offConstantCurve.GetValue();
	#endregion


}

// Class Engine.DistributionVector
// 0x0009 (0x0031 - 0x0028)
public class UDistributionVector : UDistribution
{
	#region Offsets
//	private ExternalOffset<char>                              _offbCanBeBaked                                                = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsDirty                                                   = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbBakedDataSuccesfully                                      = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	#endregion


}

// Class Engine.DistributionVectorConstant
// 0x0018 (0x0049 - 0x0031)
public class UDistributionVectorConstant : UDistributionVector
{
	#region Offsets
	private ExternalOffset<FVector>                           _offConstant                                                   = new ExternalOffset<FVector>(0x0038, false);                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockAxes                                                  = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EDistributionVectorLockFlags>> _offLockedAxes                                                 = new ExternalOffset<TEnumAsByte<EDistributionVectorLockFlags>>(0x0048, false); // 0x0048(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            Constant                                                       => _offConstant.GetValue();
	public TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes                                                     => _offLockedAxes.GetValue();
	#endregion


}

// Class Engine.DistributionVectorConstantCurve
// 0x0024 (0x0055 - 0x0031)
public class UDistributionVectorConstantCurve : UDistributionVector
{
	#region Offsets
	private ExternalOffset<FInterpCurveVector>                _offConstantCurve                                              = new ExternalOffset<FInterpCurveVector>(0x0038, false);       // 0x0038(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockAxes                                                  = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EDistributionVectorLockFlags>> _offLockedAxes                                                 = new ExternalOffset<TEnumAsByte<EDistributionVectorLockFlags>>(0x0054, false); // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInterpCurveVector                                 ConstantCurve                                                  => _offConstantCurve.GetValue();
	public TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes                                                     => _offLockedAxes.GetValue();
	#endregion


}

// Class Engine.DistributionVectorParameterBase
// 0x0042 (0x008B - 0x0049)
public class UDistributionVectorParameterBase : UDistributionVectorConstant
{
	#region Offsets
	private ExternalOffset<FName>                             _offParameterName                                              = new ExternalOffset<FName>(0x0050, false);                    // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offMinInput                                                   = new ExternalOffset<FVector>(0x0058, false);                  // 0x0058(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offMaxInput                                                   = new ExternalOffset<FVector>(0x0064, false);                  // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offMinOutput                                                  = new ExternalOffset<FVector>(0x0070, false);                  // 0x0070(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offMaxOutput                                                  = new ExternalOffset<FVector>(0x007C, false);                  // 0x007C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<TEnumAsByte<EDistributionParamMode>> _offParamModes[0x3]                                            = new ExternalOffset<TEnumAsByte<EDistributionParamMode>>(0x0088, false); // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              ParameterName                                                  => _offParameterName.GetValue();
	public FVector                                            MinInput                                                       => _offMinInput.GetValue();
	public FVector                                            MaxInput                                                       => _offMaxInput.GetValue();
	public FVector                                            MinOutput                                                      => _offMinOutput.GetValue();
	public FVector                                            MaxOutput                                                      => _offMaxOutput.GetValue();
	#endregion


}

// Class Engine.DistributionVectorParticleParameter
// 0x0005 (0x0090 - 0x008B)
public class UDistributionVectorParticleParameter : UDistributionVectorParameterBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DistributionVectorUniform
// 0x0028 (0x0059 - 0x0031)
public class UDistributionVectorUniform : UDistributionVector
{
	#region Offsets
	private ExternalOffset<FVector>                           _offMax                                                        = new ExternalOffset<FVector>(0x0038, false);                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offMin                                                        = new ExternalOffset<FVector>(0x0044, false);                  // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockAxes                                                  = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EDistributionVectorLockFlags>> _offLockedAxes                                                 = new ExternalOffset<TEnumAsByte<EDistributionVectorLockFlags>>(0x0054, false); // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<TEnumAsByte<EDistributionVectorMirrorFlags>> _offMirrorFlags[0x3]                                           = new ExternalOffset<TEnumAsByte<EDistributionVectorMirrorFlags>>(0x0055, false); // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseExtremes                                               = new ExternalOffset<char>(0x0058, false);                     // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            Max                                                            => _offMax.GetValue();
	public FVector                                            Min                                                            => _offMin.GetValue();
	public TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes                                                     => _offLockedAxes.GetValue();
	#endregion


}

// Class Engine.DistributionVectorUniformCurve
// 0x002C (0x005D - 0x0031)
public class UDistributionVectorUniformCurve : UDistributionVector
{
	#region Offsets
	private ExternalOffset<FInterpCurveTwoVectors>            _offConstantCurve                                              = new ExternalOffset<FInterpCurveTwoVectors>(0x0038, false);   // 0x0038(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockAxes1                                                 = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockAxes2                                                 = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<TEnumAsByte<EDistributionVectorLockFlags>> _offLockedAxes[0x2]                                            = new ExternalOffset<TEnumAsByte<EDistributionVectorLockFlags>>(0x0054, false); // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<TEnumAsByte<EDistributionVectorMirrorFlags>> _offMirrorFlags[0x3]                                           = new ExternalOffset<TEnumAsByte<EDistributionVectorMirrorFlags>>(0x0056, false); // 0x0056(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseExtremes                                               = new ExternalOffset<char>(0x005C, false);                     // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInterpCurveTwoVectors                             ConstantCurve                                                  => _offConstantCurve.GetValue();
	#endregion


}

// Class Engine.DocumentationActor
// 0x0010 (0x0248 - 0x0238)
public class ADocumentationActor : AActor
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.DrawFrustumComponent
// 0x0023 (0x0428 - 0x0405)
public class UDrawFrustumComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offFrustumAngle                                               = new ExternalOffset<float>(0x040C);                           // 0x040C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFrustumAspectRatio                                         = new ExternalOffset<float>(0x0410);                           // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFrustumStartDist                                           = new ExternalOffset<float>(0x0414);                           // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFrustumEndDist                                             = new ExternalOffset<float>(0x0418);                           // 0x0418(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture>                          _offTexture                                                    = new ExternalOffset<UTexture>(0x0420, true);                  // 0x0420(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              FrustumAngle                                                   => _offFrustumAngle.GetValue();
	public float                                              FrustumAspectRatio                                             => _offFrustumAspectRatio.GetValue();
	public float                                              FrustumStartDist                                               => _offFrustumStartDist.GetValue();
	public float                                              FrustumEndDist                                                 => _offFrustumEndDist.GetValue();
	public UTexture                                           Texture                                                        => _offTexture.GetValue();
	#endregion


}

// Class Engine.SphereComponent
// 0x0004 (0x0424 - 0x0420)
public class USphereComponent : UShapeComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offSphereRadius                                               = new ExternalOffset<float>(0x0420);                           // 0x0420(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public float                                              SphereRadius                                                   => _offSphereRadius.GetValue();
	#endregion


}

// Class Engine.DrawSphereComponent
// 0x000C (0x0430 - 0x0424)
public class UDrawSphereComponent : USphereComponent
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.EdGraph
// 0x0019 (0x0041 - 0x0028)
public class UEdGraph : UObject
{
	#region Offsets
	private ExternalOffset<UClass>                            _offSchema                                                     = new ExternalOffset<UClass>(0x0028, true);                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UEdGraphNode>>              _offNodes                                                      = new ExternalOffset<TArray<UEdGraphNode>>(0x0030, false);     // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEditable                                                  = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowDeletion                                             = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowRenaming                                             = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UClass                                             Schema                                                         => _offSchema.GetValue();
	public TArray<UEdGraphNode>                               Nodes                                                          => _offNodes.GetValue();
	#endregion


}

// Class Engine.EdGraphNode
// 0x0070 (0x0098 - 0x0028)
public class UEdGraphNode : UObject
{
	#region Offsets
	private ExternalOffset<TArray<UEdGraphPin_Deprecated>>    _offDeprecatedPins                                             = new ExternalOffset<TArray<UEdGraphPin_Deprecated>>(0x0038, false); // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNodePosX                                                   = new ExternalOffset<int>(0x0048);                             // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNodePosY                                                   = new ExternalOffset<int>(0x004C);                             // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNodeWidth                                                  = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNodeHeight                                                 = new ExternalOffset<int>(0x0054);                             // 0x0054(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ENodeAdvancedPins>>    _offAdvancedPinDisplay                                         = new ExternalOffset<TEnumAsByte<ENodeAdvancedPins>>(0x0058, false); // 0x0058(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ENodeEnabledState>                 _offEnabledState                                               = new ExternalOffset<ENodeEnabledState>(0x0059, false);        // 0x0059(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbDisplayAsDisabled                                         = new ExternalOffset<char>(0x005B, false);                     // 0x005B(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbUserSetEnabledState                                       = new ExternalOffset<char>(0x005B, false);                     // 0x005B(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbIsNodeEnabled                                             = new ExternalOffset<char>(0x005B, false);                     // 0x005B(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbHasCompilerMessage                                        = new ExternalOffset<char>(0x005B, false);                     // 0x005B(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offNodeComment                                                = new ExternalOffset<FString>(0x0060, false);                  // 0x0060(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offErrorType                                                  = new ExternalOffset<int>(0x0070);                             // 0x0070(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offErrorMsg                                                   = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offNodeGuid                                                   = new ExternalOffset<FGuid>(0x0088, false);                    // 0x0088(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UEdGraphPin_Deprecated>                     DeprecatedPins                                                 => _offDeprecatedPins.GetValue();
	public int                                                NodePosX                                                       => _offNodePosX.GetValue();
	public int                                                NodePosY                                                       => _offNodePosY.GetValue();
	public int                                                NodeWidth                                                      => _offNodeWidth.GetValue();
	public int                                                NodeHeight                                                     => _offNodeHeight.GetValue();
	public TEnumAsByte<ENodeAdvancedPins>                     AdvancedPinDisplay                                             => _offAdvancedPinDisplay.GetValue();
	public ENodeEnabledState                                  EnabledState                                                   => _offEnabledState.GetValue();
	public FString                                            NodeComment                                                    => _offNodeComment.GetValue();
	public int                                                ErrorType                                                      => _offErrorType.GetValue();
	public FString                                            ErrorMsg                                                       => _offErrorMsg.GetValue();
	public FGuid                                              NodeGuid                                                       => _offNodeGuid.GetValue();
	#endregion


}

// Class Engine.EdGraphNode_Documentation
// 0x0020 (0x00B8 - 0x0098)
public class UEdGraphNode_Documentation : UEdGraphNode
{
	#region Offsets
	private ExternalOffset<FString>                           _offLink                                                       = new ExternalOffset<FString>(0x0098, false);                  // 0x0098(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offExcerpt                                                    = new ExternalOffset<FString>(0x00A8, false);                  // 0x00A8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            Link                                                           => _offLink.GetValue();
	public FString                                            Excerpt                                                        => _offExcerpt.GetValue();
	#endregion


}

// Class Engine.EdGraphPin_Deprecated
// 0x00F0 (0x0118 - 0x0028)
public class UEdGraphPin_Deprecated : UObject
{
	#region Offsets
	private ExternalOffset<FString>                           _offPinName                                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offPinToolTip                                                 = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EEdGraphPinDirection>> _offDirection                                                  = new ExternalOffset<TEnumAsByte<EEdGraphPinDirection>>(0x0048, false); // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FEdGraphPinType>                   _offPinType                                                    = new ExternalOffset<FEdGraphPinType>(0x0050, false);          // 0x0050(0x0058) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offDefaultValue                                               = new ExternalOffset<FString>(0x00A8, false);                  // 0x00A8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offAutogeneratedDefaultValue                                  = new ExternalOffset<FString>(0x00B8, false);                  // 0x00B8(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                           _offDefaultObject                                              = new ExternalOffset<UObject>(0x00C8, true);                   // 0x00C8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FText>                             _offDefaultTextValue                                           = new ExternalOffset<FText>(0x00D0, false);                    // 0x00D0(0x0018) (NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UEdGraphPin_Deprecated>>    _offLinkedTo                                                   = new ExternalOffset<TArray<UEdGraphPin_Deprecated>>(0x00E8, false); // 0x00E8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UEdGraphPin_Deprecated>>    _offSubPins                                                    = new ExternalOffset<TArray<UEdGraphPin_Deprecated>>(0x00F8, false); // 0x00F8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UEdGraphPin_Deprecated>            _offParentPin                                                  = new ExternalOffset<UEdGraphPin_Deprecated>(0x0108, true);    // 0x0108(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UEdGraphPin_Deprecated>            _offReferencePassThroughConnection                             = new ExternalOffset<UEdGraphPin_Deprecated>(0x0110, true);    // 0x0110(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            PinName                                                        => _offPinName.GetValue();
	public FString                                            PinToolTip                                                     => _offPinToolTip.GetValue();
	public TEnumAsByte<EEdGraphPinDirection>                  Direction                                                      => _offDirection.GetValue();
	public FEdGraphPinType                                    PinType                                                        => _offPinType.GetValue();
	public FString                                            DefaultValue                                                   => _offDefaultValue.GetValue();
	public FString                                            AutogeneratedDefaultValue                                      => _offAutogeneratedDefaultValue.GetValue();
	public UObject                                            DefaultObject                                                  => _offDefaultObject.GetValue();
	public FText                                              DefaultTextValue                                               => _offDefaultTextValue.GetValue();
	public TArray<UEdGraphPin_Deprecated>                     LinkedTo                                                       => _offLinkedTo.GetValue();
	public TArray<UEdGraphPin_Deprecated>                     SubPins                                                        => _offSubPins.GetValue();
	public UEdGraphPin_Deprecated                             ParentPin                                                      => _offParentPin.GetValue();
	public UEdGraphPin_Deprecated                             ReferencePassThroughConnection                                 => _offReferencePassThroughConnection.GetValue();
	#endregion


}

// Class Engine.EdGraphSchema
// 0x0000 (0x0028 - 0x0028)
public class UEdGraphSchema : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Emitter
// 0x0060 (0x0298 - 0x0238)
public class AEmitter : AActor
{
	#region Offsets
	private ExternalOffset<UParticleSystemComponent>          _offParticleSystemComponent                                    = new ExternalOffset<UParticleSystemComponent>(0x0248, true);  // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbDestroyOnSystemFinish                                     = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPostUpdateTickGroup                                       = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCurrentlyActive                                           = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnParticleSpawn                                            = new ExternalOffset<FScriptMulticastDelegate>(0x0258, false); // 0x0258(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnParticleBurst                                            = new ExternalOffset<FScriptMulticastDelegate>(0x0268, false); // 0x0268(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnParticleDeath                                            = new ExternalOffset<FScriptMulticastDelegate>(0x0278, false); // 0x0278(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnParticleCollide                                          = new ExternalOffset<FScriptMulticastDelegate>(0x0288, false); // 0x0288(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UParticleSystemComponent                           ParticleSystemComponent                                        => _offParticleSystemComponent.GetValue();
	public FScriptMulticastDelegate                           OnParticleSpawn                                                => _offOnParticleSpawn.GetValue();
	public FScriptMulticastDelegate                           OnParticleBurst                                                => _offOnParticleBurst.GetValue();
	public FScriptMulticastDelegate                           OnParticleDeath                                                => _offOnParticleDeath.GetValue();
	public FScriptMulticastDelegate                           OnParticleCollide                                              => _offOnParticleCollide.GetValue();
	#endregion


}

// Class Engine.EmitterCameraLensEffectBase
// 0x0064 (0x02FC - 0x0298)
public class AEmitterCameraLensEffectBase : AEmitter
{
	#region Offsets
	private ExternalOffset<UParticleSystem>                   _offPS_CameraEffect                                            = new ExternalOffset<UParticleSystem>(0x0298, true);           // 0x0298(0x0008) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<UParticleSystem>                   _offPS_CameraEffectNonExtremeContent                           = new ExternalOffset<UParticleSystem>(0x02A0, true);           // 0x02A0(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<APlayerCameraManager>              _offBaseCamera                                                 = new ExternalOffset<APlayerCameraManager>(0x02A8, true);      // 0x02A8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FTransform>                        _offRelativeTransform                                          = new ExternalOffset<FTransform>(0x02B0, false);               // 0x02B0(0x0030) (Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offBaseFOV                                                    = new ExternalOffset<float>(0x02E0);                           // 0x02E0(0x0004) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowMultipleInstances                                    = new ExternalOffset<char>(0x02E4, false);                     // 0x02E4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbResetWhenRetriggered                                      = new ExternalOffset<char>(0x02E4, false);                     // 0x02E4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UClass>>                    _offEmittersToTreatAsSame                                      = new ExternalOffset<TArray<UClass>>(0x02E8, false);           // 0x02E8(0x0010) (Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistFromCamera                                             = new ExternalOffset<float>(0x02F8);                           // 0x02F8(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UParticleSystem                                    PS_CameraEffect                                                => _offPS_CameraEffect.GetValue();
	public UParticleSystem                                    PS_CameraEffectNonExtremeContent                               => _offPS_CameraEffectNonExtremeContent.GetValue();
	public APlayerCameraManager                               BaseCamera                                                     => _offBaseCamera.GetValue();
	public FTransform                                         RelativeTransform                                              => _offRelativeTransform.GetValue();
	public float                                              BaseFOV                                                        => _offBaseFOV.GetValue();
	public TArray<UClass>                                     EmittersToTreatAsSame                                          => _offEmittersToTreatAsSame.GetValue();
	public float                                              DistFromCamera                                                 => _offDistFromCamera.GetValue();
	#endregion


}

// Class Engine.EngineBaseTypes
// 0x0000 (0x0028 - 0x0028)
public class UEngineBaseTypes : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.EngineHandlerComponentFactory
// 0x0000 (0x0028 - 0x0028)
public class UEngineHandlerComponentFactory : UHandlerComponentFactory
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LocalMessage
// 0x0000 (0x0028 - 0x0028)
public class ULocalMessage : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.EngineMessage
// 0x0080 (0x00A8 - 0x0028)
public class UEngineMessage : ULocalMessage
{
	#region Offsets
	private ExternalOffset<FString>                           _offFailedPlaceMessage                                         = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offMaxedOutMessage                                            = new ExternalOffset<FString>(0x0038, false);                  // 0x0038(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offEnteredMessage                                             = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offLeftMessage                                                = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offGlobalNameChange                                           = new ExternalOffset<FString>(0x0068, false);                  // 0x0068(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offSpecEnteredMessage                                         = new ExternalOffset<FString>(0x0078, false);                  // 0x0078(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offNewPlayerMessage                                           = new ExternalOffset<FString>(0x0088, false);                  // 0x0088(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offNewSpecMessage                                             = new ExternalOffset<FString>(0x0098, false);                  // 0x0098(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            FailedPlaceMessage                                             => _offFailedPlaceMessage.GetValue();
	public FString                                            MaxedOutMessage                                                => _offMaxedOutMessage.GetValue();
	public FString                                            EnteredMessage                                                 => _offEnteredMessage.GetValue();
	public FString                                            LeftMessage                                                    => _offLeftMessage.GetValue();
	public FString                                            GlobalNameChange                                               => _offGlobalNameChange.GetValue();
	public FString                                            SpecEnteredMessage                                             => _offSpecEnteredMessage.GetValue();
	public FString                                            NewPlayerMessage                                               => _offNewPlayerMessage.GetValue();
	public FString                                            NewSpecMessage                                                 => _offNewSpecMessage.GetValue();
	#endregion


}

// Class Engine.DynamicSubsystem
// 0x0008 (0x0030 - 0x0028)
public class UDynamicSubsystem : USubsystem
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.EngineSubsystem
// 0x0000 (0x0030 - 0x0030)
public class UEngineSubsystem : UDynamicSubsystem
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.EngineTypes
// 0x0000 (0x0028 - 0x0028)
public class UEngineTypes : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ExponentialHeightFog
// 0x0009 (0x0251 - 0x0248)
public class AExponentialHeightFog : AInfo
{
	#region Offsets
	private ExternalOffset<UExponentialHeightFogComponent>    _offComponent                                                  = new ExternalOffset<UExponentialHeightFogComponent>(0x0248, true); // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UExponentialHeightFogComponent                     Component                                                      => _offComponent.GetValue();
	#endregion


}

// Class Engine.ExponentialHeightFogComponent
// 0x0131 (0x02B1 - 0x0180)
public class UExponentialHeightFogComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offFogHeightFalloff                                           = new ExternalOffset<float>(0x021C);                           // 0x021C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExponentialHeightFogData>         _offSecondFogData                                              = new ExternalOffset<FExponentialHeightFogData>(0x0220, false); // 0x0220(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offFogInscatteringColor                                       = new ExternalOffset<FLinearColor>(0x022C, false);             // 0x022C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTextureCube>                      _offInscatteringColorCubemap                                   = new ExternalOffset<UTextureCube>(0x0240, true);              // 0x0240(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInscatteringColorCubemapAngle                              = new ExternalOffset<float>(0x0248);                           // 0x0248(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offInscatteringTextureTint                                    = new ExternalOffset<FLinearColor>(0x024C, false);             // 0x024C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFullyDirectionalInscatteringColorDistance                  = new ExternalOffset<float>(0x025C);                           // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNonDirectionalInscatteringColorDistance                    = new ExternalOffset<float>(0x0260);                           // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDirectionalInscatteringExponent                            = new ExternalOffset<float>(0x0264);                           // 0x0264(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDirectionalInscatteringStartDistance                       = new ExternalOffset<float>(0x0268);                           // 0x0268(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offDirectionalInscatteringColor                               = new ExternalOffset<FLinearColor>(0x026C, false);             // 0x026C(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFogMaxOpacity                                              = new ExternalOffset<float>(0x027C);                           // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStartDistance                                              = new ExternalOffset<float>(0x0280);                           // 0x0280(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFogCutoffDistance                                          = new ExternalOffset<float>(0x0284);                           // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableVolumetricFog                                       = new ExternalOffset<byte/*(bool)*/>(0x0288);                  // 0x0288(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumetricFogScatteringDistribution                        = new ExternalOffset<float>(0x028C);                           // 0x028C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offVolumetricFogAlbedo                                        = new ExternalOffset<FColor>(0x0290, false);                   // 0x0290(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offVolumetricFogEmissive                                      = new ExternalOffset<FLinearColor>(0x0294, false);             // 0x0294(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumetricFogExtinctionScale                               = new ExternalOffset<float>(0x02A4);                           // 0x02A4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumetricFogDistance                                      = new ExternalOffset<float>(0x02A8);                           // 0x02A8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumetricFogStaticLightingScatteringIntensity             = new ExternalOffset<float>(0x02AC);                           // 0x02AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbOverrideLightColorsWithFogInscatteringColors              = new ExternalOffset<byte/*(bool)*/>(0x02B0);                  // 0x02B0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              FogHeightFalloff                                               => _offFogHeightFalloff.GetValue();
	public FExponentialHeightFogData                          SecondFogData                                                  => _offSecondFogData.GetValue();
	public FLinearColor                                       FogInscatteringColor                                           => _offFogInscatteringColor.GetValue();
	public UTextureCube                                       InscatteringColorCubemap                                       => _offInscatteringColorCubemap.GetValue();
	public float                                              InscatteringColorCubemapAngle                                  => _offInscatteringColorCubemapAngle.GetValue();
	public FLinearColor                                       InscatteringTextureTint                                        => _offInscatteringTextureTint.GetValue();
	public float                                              FullyDirectionalInscatteringColorDistance                      => _offFullyDirectionalInscatteringColorDistance.GetValue();
	public float                                              NonDirectionalInscatteringColorDistance                        => _offNonDirectionalInscatteringColorDistance.GetValue();
	public float                                              DirectionalInscatteringExponent                                => _offDirectionalInscatteringExponent.GetValue();
	public float                                              DirectionalInscatteringStartDistance                           => _offDirectionalInscatteringStartDistance.GetValue();
	public FLinearColor                                       DirectionalInscatteringColor                                   => _offDirectionalInscatteringColor.GetValue();
	public float                                              FogMaxOpacity                                                  => _offFogMaxOpacity.GetValue();
	public float                                              StartDistance                                                  => _offStartDistance.GetValue();
	public float                                              FogCutoffDistance                                              => _offFogCutoffDistance.GetValue();
	public byte/*(bool)*/                                     bEnableVolumetricFog                                           => _offbEnableVolumetricFog.GetValue();
	public float                                              VolumetricFogScatteringDistribution                            => _offVolumetricFogScatteringDistribution.GetValue();
	public FColor                                             VolumetricFogAlbedo                                            => _offVolumetricFogAlbedo.GetValue();
	public FLinearColor                                       VolumetricFogEmissive                                          => _offVolumetricFogEmissive.GetValue();
	public float                                              VolumetricFogExtinctionScale                                   => _offVolumetricFogExtinctionScale.GetValue();
	public float                                              VolumetricFogDistance                                          => _offVolumetricFogDistance.GetValue();
	public float                                              VolumetricFogStaticLightingScatteringIntensity                 => _offVolumetricFogStaticLightingScatteringIntensity.GetValue();
	public byte/*(bool)*/                                     bOverrideLightColorsWithFogInscatteringColors                  => _offbOverrideLightColorsWithFogInscatteringColors.GetValue();
	#endregion


}

// Class Engine.FloatingPawnMovement
// 0x0011 (0x0171 - 0x0160)
public class UFloatingPawnMovement : UPawnMovementComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offMaxSpeed                                                   = new ExternalOffset<float>(0x0160);                           // 0x0160(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAcceleration                                               = new ExternalOffset<float>(0x0164);                           // 0x0164(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDeceleration                                               = new ExternalOffset<float>(0x0168);                           // 0x0168(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTurningBoost                                               = new ExternalOffset<float>(0x016C);                           // 0x016C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPositionCorrected                                         = new ExternalOffset<char>(0x0170, false);                     // 0x0170(0x0001) BIT_FIELD (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public float                                              MaxSpeed                                                       => _offMaxSpeed.GetValue();
	public float                                              Acceleration                                                   => _offAcceleration.GetValue();
	public float                                              Deceleration                                                   => _offDeceleration.GetValue();
	public float                                              TurningBoost                                                   => _offTurningBoost.GetValue();
	#endregion


}

// Class Engine.Font
// 0x0158 (0x0180 - 0x0028)
public class UFont : UObject
{
	#region Offsets
	private ExternalOffset<EFontCacheType>                    _offFontCacheType                                              = new ExternalOffset<EFontCacheType>(0x0030, false);           // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FFontCharacter>>            _offCharacters                                                 = new ExternalOffset<TArray<FFontCharacter>>(0x0038, false);   // 0x0038(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UTexture2D>>                _offTextures                                                   = new ExternalOffset<TArray<UTexture2D>>(0x0048, false);       // 0x0048(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offIsRemapped                                                 = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEmScale                                                    = new ExternalOffset<float>(0x005C);                           // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAscent                                                     = new ExternalOffset<float>(0x0060);                           // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDescent                                                    = new ExternalOffset<float>(0x0064);                           // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLeading                                                    = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offKerning                                                    = new ExternalOffset<int>(0x006C);                             // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FFontImportOptionsData>            _offImportOptions                                              = new ExternalOffset<FFontImportOptionsData>(0x0070, false);   // 0x0070(0x00B0) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumCharacters                                              = new ExternalOffset<int>(0x0120);                             // 0x0120(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                       _offMaxCharHeight                                              = new ExternalOffset<TArray<int>>(0x0128, false);              // 0x0128(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offScalingFactor                                              = new ExternalOffset<float>(0x0138);                           // 0x0138(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offLegacyFontSize                                             = new ExternalOffset<int>(0x013C);                             // 0x013C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offLegacyFontName                                             = new ExternalOffset<FName>(0x0140, false);                    // 0x0140(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FCompositeFont>                    _offCompositeFont                                              = new ExternalOffset<FCompositeFont>(0x0148, false);           // 0x0148(0x0038) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public EFontCacheType                                     FontCacheType                                                  => _offFontCacheType.GetValue();
	public TArray<FFontCharacter>                             Characters                                                     => _offCharacters.GetValue();
	public TArray<UTexture2D>                                 Textures                                                       => _offTextures.GetValue();
	public int                                                IsRemapped                                                     => _offIsRemapped.GetValue();
	public float                                              EmScale                                                        => _offEmScale.GetValue();
	public float                                              Ascent                                                         => _offAscent.GetValue();
	public float                                              Descent                                                        => _offDescent.GetValue();
	public float                                              Leading                                                        => _offLeading.GetValue();
	public int                                                Kerning                                                        => _offKerning.GetValue();
	public FFontImportOptionsData                             ImportOptions                                                  => _offImportOptions.GetValue();
	public int                                                NumCharacters                                                  => _offNumCharacters.GetValue();
	public TArray<int>                                        MaxCharHeight                                                  => _offMaxCharHeight.GetValue();
	public float                                              ScalingFactor                                                  => _offScalingFactor.GetValue();
	public int                                                LegacyFontSize                                                 => _offLegacyFontSize.GetValue();
	public FName                                              LegacyFontName                                                 => _offLegacyFontName.GetValue();
	public FCompositeFont                                     CompositeFont                                                  => _offCompositeFont.GetValue();
	#endregion


}

// Class Engine.FontFace
// 0x001B (0x0043 - 0x0028)
public class UFontFace : UObject
{
	#region Offsets
	private ExternalOffset<FString>                           _offSourceFilename                                             = new ExternalOffset<FString>(0x0030, false);                  // 0x0030(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EFontHinting>                      _offHinting                                                    = new ExternalOffset<EFontHinting>(0x0040, false);             // 0x0040(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EFontLoadingPolicy>                _offLoadingPolicy                                              = new ExternalOffset<EFontLoadingPolicy>(0x0041, false);       // 0x0041(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EFontLayoutMethod>                 _offLayoutMethod                                               = new ExternalOffset<EFontLayoutMethod>(0x0042, false);        // 0x0042(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            SourceFilename                                                 => _offSourceFilename.GetValue();
	public EFontHinting                                       Hinting                                                        => _offHinting.GetValue();
	public EFontLoadingPolicy                                 LoadingPolicy                                                  => _offLoadingPolicy.GetValue();
	public EFontLayoutMethod                                  LayoutMethod                                                   => _offLayoutMethod.GetValue();
	#endregion


}

// Class Engine.FontImportOptions
// 0x00B0 (0x00D8 - 0x0028)
public class UFontImportOptions : UObject
{
	#region Offsets
	private ExternalOffset<FFontImportOptionsData>            _offData                                                       = new ExternalOffset<FFontImportOptionsData>(0x0028, false);   // 0x0028(0x00B0) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FFontImportOptionsData                             Data                                                           => _offData.GetValue();
	#endregion


}

// Class Engine.ForceFeedbackAttenuation
// 0x00B0 (0x00D8 - 0x0028)
public class UForceFeedbackAttenuation : UObject
{
	#region Offsets
	private ExternalOffset<FForceFeedbackAttenuationSettings> _offAttenuation                                                = new ExternalOffset<FForceFeedbackAttenuationSettings>(0x0028, false); // 0x0028(0x00B0) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FForceFeedbackAttenuationSettings                  Attenuation                                                    => _offAttenuation.GetValue();
	#endregion


}

// Class Engine.ForceFeedbackComponent
// 0x0170 (0x02F0 - 0x0180)
public class UForceFeedbackComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<UForceFeedbackEffect>              _offForceFeedbackEffect                                        = new ExternalOffset<UForceFeedbackEffect>(0x0218, true);      // 0x0218(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoDestroy                                               = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStopWhenOwnerDestroyed                                    = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLooping                                                   = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreTimeDilation                                        = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideAttenuation                                       = new ExternalOffset<char>(0x0220, false);                     // 0x0220(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offIntensityMultiplier                                        = new ExternalOffset<float>(0x0224);                           // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UForceFeedbackAttenuation>         _offAttenuationSettings                                        = new ExternalOffset<UForceFeedbackAttenuation>(0x0228, true); // 0x0228(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FForceFeedbackAttenuationSettings> _offAttenuationOverrides                                       = new ExternalOffset<FForceFeedbackAttenuationSettings>(0x0230, false); // 0x0230(0x00B0) (Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnForceFeedbackFinished                                    = new ExternalOffset<FScriptMulticastDelegate>(0x02E0, false); // 0x02E0(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UForceFeedbackEffect                               ForceFeedbackEffect                                            => _offForceFeedbackEffect.GetValue();
	public float                                              IntensityMultiplier                                            => _offIntensityMultiplier.GetValue();
	public UForceFeedbackAttenuation                          AttenuationSettings                                            => _offAttenuationSettings.GetValue();
	public FForceFeedbackAttenuationSettings                  AttenuationOverrides                                           => _offAttenuationOverrides.GetValue();
	public FScriptMulticastDelegate                           OnForceFeedbackFinished                                        => _offOnForceFeedbackFinished.GetValue();
	#endregion


}

// Class Engine.ForceFeedbackEffect
// 0x0014 (0x003C - 0x0028)
public class UForceFeedbackEffect : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FForceFeedbackChannelDetails>> _offChannelDetails                                             = new ExternalOffset<TArray<FForceFeedbackChannelDetails>>(0x0028, false); // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDuration                                                   = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FForceFeedbackChannelDetails>               ChannelDetails                                                 => _offChannelDetails.GetValue();
	public float                                              Duration                                                       => _offDuration.GetValue();
	#endregion


}

// Class Engine.GameNetworkManager
// 0x00A2 (0x02EA - 0x0248)
public class AGameNetworkManager : AInfo
{
	#region Offsets
	private ExternalOffset<float>                             _offBadPacketLossThreshold                                     = new ExternalOffset<float>(0x0248);                           // 0x0248(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSeverePacketLossThreshold                                  = new ExternalOffset<float>(0x024C);                           // 0x024C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offBadPingThreshold                                           = new ExternalOffset<int>(0x0250);                             // 0x0250(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSeverePingThreshold                                        = new ExternalOffset<int>(0x0254);                             // 0x0254(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offAdjustedNetSpeed                                           = new ExternalOffset<int>(0x0258);                             // 0x0258(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLastNetSpeedUpdateTime                                     = new ExternalOffset<float>(0x025C);                           // 0x025C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offTotalNetBandwidth                                          = new ExternalOffset<int>(0x0260);                             // 0x0260(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMinDynamicBandwidth                                        = new ExternalOffset<int>(0x0264);                             // 0x0264(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxDynamicBandwidth                                        = new ExternalOffset<int>(0x0268);                             // 0x0268(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsStandbyCheckingEnabled                                  = new ExternalOffset<char>(0x026C, false);                     // 0x026C(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasStandbyCheatTriggered                                  = new ExternalOffset<char>(0x026C, false);                     // 0x026C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStandbyRxCheatTime                                         = new ExternalOffset<float>(0x0270);                           // 0x0270(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStandbyTxCheatTime                                         = new ExternalOffset<float>(0x0274);                           // 0x0274(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPercentMissingForRxStandby                                 = new ExternalOffset<float>(0x0278);                           // 0x0278(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPercentMissingForTxStandby                                 = new ExternalOffset<float>(0x027C);                           // 0x027C(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPercentForBadPing                                          = new ExternalOffset<float>(0x0280);                           // 0x0280(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offJoinInProgressStandbyWaitTime                              = new ExternalOffset<float>(0x0284);                           // 0x0284(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMoveRepSize                                                = new ExternalOffset<float>(0x0288);                           // 0x0288(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMAXPOSITIONERRORSQUARED                                    = new ExternalOffset<float>(0x028C);                           // 0x028C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMAXNEARZEROVELOCITYSQUARED                                 = new ExternalOffset<float>(0x0290);                           // 0x0290(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCLIENTADJUSTUPDATECOST                                     = new ExternalOffset<float>(0x0294);                           // 0x0294(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMAXCLIENTUPDATEINTERVAL                                    = new ExternalOffset<float>(0x0298);                           // 0x0298(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxClientForcedUpdateDuration                              = new ExternalOffset<float>(0x029C);                           // 0x029C(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offServerForcedUpdateHitchThreshold                           = new ExternalOffset<float>(0x02A0);                           // 0x02A0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offServerForcedUpdateHitchCooldown                            = new ExternalOffset<float>(0x02A4);                           // 0x02A4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxMoveDeltaTime                                           = new ExternalOffset<float>(0x02A8);                           // 0x02A8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxClientSmoothingDeltaTime                                = new ExternalOffset<float>(0x02AC);                           // 0x02AC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offClientNetSendMoveDeltaTime                                 = new ExternalOffset<float>(0x02B0);                           // 0x02B0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offClientNetSendMoveDeltaTimeThrottled                        = new ExternalOffset<float>(0x02B4);                           // 0x02B4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offClientNetSendMoveDeltaTimeStationary                       = new ExternalOffset<float>(0x02B8);                           // 0x02B8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offClientNetSendMoveThrottleAtNetSpeed                        = new ExternalOffset<int>(0x02BC);                             // 0x02BC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offClientNetSendMoveThrottleOverPlayerCount                   = new ExternalOffset<int>(0x02C0);                             // 0x02C0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offClientAuthorativePosition                                  = new ExternalOffset<byte/*(bool)*/>(0x02C4);                  // 0x02C4(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offClientErrorUpdateRateLimit                                 = new ExternalOffset<float>(0x02C8);                           // 0x02C8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offClientNetCamUpdateDeltaTime                                = new ExternalOffset<float>(0x02CC);                           // 0x02CC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offClientNetCamUpdatePositionLimit                            = new ExternalOffset<float>(0x02D0);                           // 0x02D0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbMovementTimeDiscrepancyDetection                          = new ExternalOffset<byte/*(bool)*/>(0x02D4);                  // 0x02D4(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbMovementTimeDiscrepancyResolution                         = new ExternalOffset<byte/*(bool)*/>(0x02D5);                  // 0x02D5(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMovementTimeDiscrepancyMaxTimeMargin                       = new ExternalOffset<float>(0x02D8);                           // 0x02D8(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMovementTimeDiscrepancyMinTimeMargin                       = new ExternalOffset<float>(0x02DC);                           // 0x02DC(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMovementTimeDiscrepancyResolutionRate                      = new ExternalOffset<float>(0x02E0);                           // 0x02E0(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMovementTimeDiscrepancyDriftAllowance                      = new ExternalOffset<float>(0x02E4);                           // 0x02E4(0x0004) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbMovementTimeDiscrepancyForceCorrectionsDuringResolution   = new ExternalOffset<byte/*(bool)*/>(0x02E8);                  // 0x02E8(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseDistanceBasedRelevancy                                 = new ExternalOffset<byte/*(bool)*/>(0x02E9);                  // 0x02E9(0x0001) (ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              BadPacketLossThreshold                                         => _offBadPacketLossThreshold.GetValue();
	public float                                              SeverePacketLossThreshold                                      => _offSeverePacketLossThreshold.GetValue();
	public int                                                BadPingThreshold                                               => _offBadPingThreshold.GetValue();
	public int                                                SeverePingThreshold                                            => _offSeverePingThreshold.GetValue();
	public int                                                AdjustedNetSpeed                                               => _offAdjustedNetSpeed.GetValue();
	public float                                              LastNetSpeedUpdateTime                                         => _offLastNetSpeedUpdateTime.GetValue();
	public int                                                TotalNetBandwidth                                              => _offTotalNetBandwidth.GetValue();
	public int                                                MinDynamicBandwidth                                            => _offMinDynamicBandwidth.GetValue();
	public int                                                MaxDynamicBandwidth                                            => _offMaxDynamicBandwidth.GetValue();
	public float                                              StandbyRxCheatTime                                             => _offStandbyRxCheatTime.GetValue();
	public float                                              StandbyTxCheatTime                                             => _offStandbyTxCheatTime.GetValue();
	public float                                              PercentMissingForRxStandby                                     => _offPercentMissingForRxStandby.GetValue();
	public float                                              PercentMissingForTxStandby                                     => _offPercentMissingForTxStandby.GetValue();
	public float                                              PercentForBadPing                                              => _offPercentForBadPing.GetValue();
	public float                                              JoinInProgressStandbyWaitTime                                  => _offJoinInProgressStandbyWaitTime.GetValue();
	public float                                              MoveRepSize                                                    => _offMoveRepSize.GetValue();
	public float                                              MAXPOSITIONERRORSQUARED                                        => _offMAXPOSITIONERRORSQUARED.GetValue();
	public float                                              MAXNEARZEROVELOCITYSQUARED                                     => _offMAXNEARZEROVELOCITYSQUARED.GetValue();
	public float                                              CLIENTADJUSTUPDATECOST                                         => _offCLIENTADJUSTUPDATECOST.GetValue();
	public float                                              MAXCLIENTUPDATEINTERVAL                                        => _offMAXCLIENTUPDATEINTERVAL.GetValue();
	public float                                              MaxClientForcedUpdateDuration                                  => _offMaxClientForcedUpdateDuration.GetValue();
	public float                                              ServerForcedUpdateHitchThreshold                               => _offServerForcedUpdateHitchThreshold.GetValue();
	public float                                              ServerForcedUpdateHitchCooldown                                => _offServerForcedUpdateHitchCooldown.GetValue();
	public float                                              MaxMoveDeltaTime                                               => _offMaxMoveDeltaTime.GetValue();
	public float                                              MaxClientSmoothingDeltaTime                                    => _offMaxClientSmoothingDeltaTime.GetValue();
	public float                                              ClientNetSendMoveDeltaTime                                     => _offClientNetSendMoveDeltaTime.GetValue();
	public float                                              ClientNetSendMoveDeltaTimeThrottled                            => _offClientNetSendMoveDeltaTimeThrottled.GetValue();
	public float                                              ClientNetSendMoveDeltaTimeStationary                           => _offClientNetSendMoveDeltaTimeStationary.GetValue();
	public int                                                ClientNetSendMoveThrottleAtNetSpeed                            => _offClientNetSendMoveThrottleAtNetSpeed.GetValue();
	public int                                                ClientNetSendMoveThrottleOverPlayerCount                       => _offClientNetSendMoveThrottleOverPlayerCount.GetValue();
	public byte/*(bool)*/                                     ClientAuthorativePosition                                      => _offClientAuthorativePosition.GetValue();
	public float                                              ClientErrorUpdateRateLimit                                     => _offClientErrorUpdateRateLimit.GetValue();
	public float                                              ClientNetCamUpdateDeltaTime                                    => _offClientNetCamUpdateDeltaTime.GetValue();
	public float                                              ClientNetCamUpdatePositionLimit                                => _offClientNetCamUpdatePositionLimit.GetValue();
	public byte/*(bool)*/                                     bMovementTimeDiscrepancyDetection                              => _offbMovementTimeDiscrepancyDetection.GetValue();
	public byte/*(bool)*/                                     bMovementTimeDiscrepancyResolution                             => _offbMovementTimeDiscrepancyResolution.GetValue();
	public float                                              MovementTimeDiscrepancyMaxTimeMargin                           => _offMovementTimeDiscrepancyMaxTimeMargin.GetValue();
	public float                                              MovementTimeDiscrepancyMinTimeMargin                           => _offMovementTimeDiscrepancyMinTimeMargin.GetValue();
	public float                                              MovementTimeDiscrepancyResolutionRate                          => _offMovementTimeDiscrepancyResolutionRate.GetValue();
	public float                                              MovementTimeDiscrepancyDriftAllowance                          => _offMovementTimeDiscrepancyDriftAllowance.GetValue();
	public byte/*(bool)*/                                     bMovementTimeDiscrepancyForceCorrectionsDuringResolution       => _offbMovementTimeDiscrepancyForceCorrectionsDuringResolution.GetValue();
	public byte/*(bool)*/                                     bUseDistanceBasedRelevancy                                     => _offbUseDistanceBasedRelevancy.GetValue();
	#endregion


}

// Class Engine.GameplayStatics
// 0x0000 (0x0028 - 0x0028)
public class UGameplayStatics : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SpotLight
// 0x000F (0x0260 - 0x0251)
public class ASpotLight : ALight
{
	#region Offsets
	private ExternalOffset<USpotLightComponent>               _offSpotLightComponent                                         = new ExternalOffset<USpotLightComponent>(0x0258, true);       // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USpotLightComponent                                SpotLightComponent                                             => _offSpotLightComponent.GetValue();
	#endregion


}

// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x0260 - 0x0260)
public class AGeneratedMeshAreaLight : ASpotLight
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.HapticFeedbackEffect_Base
// 0x0000 (0x0028 - 0x0028)
public class UHapticFeedbackEffect_Base : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.HapticFeedbackEffect_Buffer
// 0x0014 (0x003C - 0x0028)
public class UHapticFeedbackEffect_Buffer : UHapticFeedbackEffect_Base
{
	#region Offsets
	private ExternalOffset<TArray<char>>                      _offAmplitudes                                                 = new ExternalOffset<TArray<char>>(0x0028, false);             // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSampleRate                                                 = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<char>                                       Amplitudes                                                     => _offAmplitudes.GetValue();
	public int                                                SampleRate                                                     => _offSampleRate.GetValue();
	#endregion


}

// Class Engine.HapticFeedbackEffect_Curve
// 0x0110 (0x0138 - 0x0028)
public class UHapticFeedbackEffect_Curve : UHapticFeedbackEffect_Base
{
	#region Offsets
	private ExternalOffset<FHapticFeedbackDetails_Curve>      _offHapticDetails                                              = new ExternalOffset<FHapticFeedbackDetails_Curve>(0x0028, false); // 0x0028(0x0110) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FHapticFeedbackDetails_Curve                       HapticDetails                                                  => _offHapticDetails.GetValue();
	#endregion


}

// Class Engine.HapticFeedbackEffect_SoundWave
// 0x0008 (0x0030 - 0x0028)
public class UHapticFeedbackEffect_SoundWave : UHapticFeedbackEffect_Base
{
	#region Offsets
	private ExternalOffset<USoundWave>                        _offSoundWave                                                  = new ExternalOffset<USoundWave>(0x0028, true);                // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundWave                                         SoundWave                                                      => _offSoundWave.GetValue();
	#endregion


}

// Class Engine.HealthSnapshotBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
public class UHealthSnapshotBlueprintLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.HLODProxy
// 0x0010 (0x0038 - 0x0028)
public class UHLODProxy : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FHLODProxyMesh>>            _offProxyMeshes                                                = new ExternalOffset<TArray<FHLODProxyMesh>>(0x0028, false);   // 0x0028(0x0010) (Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FHLODProxyMesh>                             ProxyMeshes                                                    => _offProxyMeshes.GetValue();
	#endregion


}

// Class Engine.AmbisonicsSubmixSettingsBase
// 0x0000 (0x0028 - 0x0028)
public class UAmbisonicsSubmixSettingsBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SpatializationPluginSourceSettingsBase
// 0x0000 (0x0028 - 0x0028)
public class USpatializationPluginSourceSettingsBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.OcclusionPluginSourceSettingsBase
// 0x0000 (0x0028 - 0x0028)
public class UOcclusionPluginSourceSettingsBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SoundModulationPluginSourceSettingsBase
// 0x0000 (0x0028 - 0x0028)
public class USoundModulationPluginSourceSettingsBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ReverbPluginSourceSettingsBase
// 0x0000 (0x0028 - 0x0028)
public class UReverbPluginSourceSettingsBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ImportanceSamplingLibrary
// 0x0000 (0x0028 - 0x0028)
public class UImportanceSamplingLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ImportantToggleSettingInterface
// 0x0000 (0x0028 - 0x0028)
public class UImportantToggleSettingInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InGameAdManager
// 0x0028 (0x0060 - 0x0038)
public class UInGameAdManager : UPlatformInterfaceBase
{
	#region Offsets
//	private ExternalOffset<char>                              _offbShouldPauseWhileAdOpen                                    = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FScriptDelegate>>           _offClickedBannerDelegates                                     = new ExternalOffset<TArray<FScriptDelegate>>(0x0040, false);  // 0x0040(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FScriptDelegate>>           _offClosedAdDelegates                                          = new ExternalOffset<TArray<FScriptDelegate>>(0x0050, false);  // 0x0050(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FScriptDelegate>                            ClickedBannerDelegates                                         => _offClickedBannerDelegates.GetValue();
	public TArray<FScriptDelegate>                            ClosedAdDelegates                                              => _offClosedAdDelegates.GetValue();
	#endregion


}

// Class Engine.InheritableComponentHandler
// 0x0020 (0x0048 - 0x0028)
public class UInheritableComponentHandler : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FComponentOverrideRecord>>  _offRecords                                                    = new ExternalOffset<TArray<FComponentOverrideRecord>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UActorComponent>>           _offUnnecessaryComponents                                      = new ExternalOffset<TArray<UActorComponent>>(0x0038, false);  // 0x0038(0x0010) (ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FComponentOverrideRecord>                   Records                                                        => _offRecords.GetValue();
	public TArray<UActorComponent>                            UnnecessaryComponents                                          => _offUnnecessaryComponents.GetValue();
	#endregion


}

// Class Engine.InputDelegateBinding
// 0x0000 (0x0028 - 0x0028)
public class UInputDelegateBinding : UDynamicBlueprintBinding
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InputActionDelegateBinding
// 0x0010 (0x0038 - 0x0028)
public class UInputActionDelegateBinding : UInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<TArray<FBlueprintInputActionDelegateBinding>> _offInputActionDelegateBindings                                = new ExternalOffset<TArray<FBlueprintInputActionDelegateBinding>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBlueprintInputActionDelegateBinding>       InputActionDelegateBindings                                    => _offInputActionDelegateBindings.GetValue();
	#endregion


}

// Class Engine.InputAxisDelegateBinding
// 0x0010 (0x0038 - 0x0028)
public class UInputAxisDelegateBinding : UInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<TArray<FBlueprintInputAxisDelegateBinding>> _offInputAxisDelegateBindings                                  = new ExternalOffset<TArray<FBlueprintInputAxisDelegateBinding>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBlueprintInputAxisDelegateBinding>         InputAxisDelegateBindings                                      => _offInputAxisDelegateBindings.GetValue();
	#endregion


}

// Class Engine.InputAxisKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
public class UInputAxisKeyDelegateBinding : UInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<TArray<FBlueprintInputAxisKeyDelegateBinding>> _offInputAxisKeyDelegateBindings                               = new ExternalOffset<TArray<FBlueprintInputAxisKeyDelegateBinding>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBlueprintInputAxisKeyDelegateBinding>      InputAxisKeyDelegateBindings                                   => _offInputAxisKeyDelegateBindings.GetValue();
	#endregion


}

// Class Engine.InputKeyDelegateBinding
// 0x0010 (0x0038 - 0x0028)
public class UInputKeyDelegateBinding : UInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<TArray<FBlueprintInputKeyDelegateBinding>> _offInputKeyDelegateBindings                                   = new ExternalOffset<TArray<FBlueprintInputKeyDelegateBinding>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBlueprintInputKeyDelegateBinding>          InputKeyDelegateBindings                                       => _offInputKeyDelegateBindings.GetValue();
	#endregion


}

// Class Engine.InputSettings
// 0x00C8 (0x00F0 - 0x0028)
public class UInputSettings : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FInputAxisConfigEntry>>     _offAxisConfig                                                 = new ExternalOffset<TArray<FInputAxisConfigEntry>>(0x0028, false); // 0x0028(0x0010) (Edit, EditFixedSize, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAltEnterTogglesFullscreen                                 = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbF11TogglesFullscreen                                      = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseMouseForTouch                                          = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableMouseSmoothing                                      = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableFOVScaling                                          = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCaptureMouseOnLaunch                                      = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDefaultViewportMouseLock                                  = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Config, Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAlwaysShowTouchInterface                                  = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowConsoleOnFourFingerTap                                = new ExternalOffset<char>(0x0039, false);                     // 0x0039(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableGestureRecognizer                                   = new ExternalOffset<char>(0x0039, false);                     // 0x0039(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseAutocorrect                                            = new ExternalOffset<byte/*(bool)*/>(0x003A);                  // 0x003A(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offExcludedAutocorrectOS                                      = new ExternalOffset<TArray<FString>>(0x0040, false);          // 0x0040(0x0010) (Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offExcludedAutocorrectCultures                                = new ExternalOffset<TArray<FString>>(0x0050, false);          // 0x0050(0x0010) (Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FString>>                   _offExcludedAutocorrectDeviceModels                            = new ExternalOffset<TArray<FString>>(0x0060, false);          // 0x0060(0x0010) (Edit, ZeroConstructor, Config, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<EMouseCaptureMode>                 _offDefaultViewportMouseCaptureMode                            = new ExternalOffset<EMouseCaptureMode>(0x0070, false);        // 0x0070(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EMouseLockMode>                    _offDefaultViewportMouseLockMode                               = new ExternalOffset<EMouseLockMode>(0x0071, false);           // 0x0071(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFOVScale                                                   = new ExternalOffset<float>(0x0074);                           // 0x0074(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDoubleClickTime                                            = new ExternalOffset<float>(0x0078);                           // 0x0078(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FInputActionKeyMapping>>    _offActionMappings                                             = new ExternalOffset<TArray<FInputActionKeyMapping>>(0x0080, false); // 0x0080(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FInputAxisKeyMapping>>      _offAxisMappings                                               = new ExternalOffset<TArray<FInputAxisKeyMapping>>(0x0090, false); // 0x0090(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FInputActionSpeechMapping>> _offSpeechMappings                                             = new ExternalOffset<TArray<FInputActionSpeechMapping>>(0x00A0, false); // 0x00A0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	private ExternalOffset<FSoftObjectPath>                   _offDefaultTouchInterface                                      = new ExternalOffset<FSoftObjectPath>(0x00B0, false);          // 0x00B0(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FKey>                              _offConsoleKey                                                 = new ExternalOffset<FKey>(0x00C8, false);                     // 0x00C8(0x0018) (Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FKey>>                      _offConsoleKeys                                                = new ExternalOffset<TArray<FKey>>(0x00E0, false);             // 0x00E0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FInputAxisConfigEntry>                      AxisConfig                                                     => _offAxisConfig.GetValue();
	public byte/*(bool)*/                                     bUseAutocorrect                                                => _offbUseAutocorrect.GetValue();
	public TArray<FString>                                    ExcludedAutocorrectOS                                          => _offExcludedAutocorrectOS.GetValue();
	public TArray<FString>                                    ExcludedAutocorrectCultures                                    => _offExcludedAutocorrectCultures.GetValue();
	public TArray<FString>                                    ExcludedAutocorrectDeviceModels                                => _offExcludedAutocorrectDeviceModels.GetValue();
	public EMouseCaptureMode                                  DefaultViewportMouseCaptureMode                                => _offDefaultViewportMouseCaptureMode.GetValue();
	public EMouseLockMode                                     DefaultViewportMouseLockMode                                   => _offDefaultViewportMouseLockMode.GetValue();
	public float                                              FOVScale                                                       => _offFOVScale.GetValue();
	public float                                              DoubleClickTime                                                => _offDoubleClickTime.GetValue();
	public TArray<FInputActionKeyMapping>                     ActionMappings                                                 => _offActionMappings.GetValue();
	public TArray<FInputAxisKeyMapping>                       AxisMappings                                                   => _offAxisMappings.GetValue();
	public TArray<FInputActionSpeechMapping>                  SpeechMappings                                                 => _offSpeechMappings.GetValue();
	public FSoftObjectPath                                    DefaultTouchInterface                                          => _offDefaultTouchInterface.GetValue();
	public FKey                                               ConsoleKey                                                     => _offConsoleKey.GetValue();
	public TArray<FKey>                                       ConsoleKeys                                                    => _offConsoleKeys.GetValue();
	#endregion


}

// Class Engine.InputTouchDelegateBinding
// 0x0010 (0x0038 - 0x0028)
public class UInputTouchDelegateBinding : UInputDelegateBinding
{
	#region Offsets
	private ExternalOffset<TArray<FBlueprintInputTouchDelegateBinding>> _offInputTouchDelegateBindings                                 = new ExternalOffset<TArray<FBlueprintInputTouchDelegateBinding>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBlueprintInputTouchDelegateBinding>        InputTouchDelegateBindings                                     => _offInputTouchDelegateBindings.GetValue();
	#endregion


}

// Class Engine.InputVectorAxisDelegateBinding
// 0x0000 (0x0038 - 0x0038)
public class UInputVectorAxisDelegateBinding : UInputAxisKeyDelegateBinding
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Interface_AssetUserData
// 0x0000 (0x0028 - 0x0028)
public class UInterface_AssetUserData : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Interface_CollisionDataProvider
// 0x0000 (0x0028 - 0x0028)
public class UInterface_CollisionDataProvider : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Interface_PostProcessVolume
// 0x0000 (0x0028 - 0x0028)
public class UInterface_PostProcessVolume : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Interface_PreviewMeshProvider
// 0x0000 (0x0028 - 0x0028)
public class UInterface_PreviewMeshProvider : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpCurveEdSetup
// 0x0014 (0x003C - 0x0028)
public class UInterpCurveEdSetup : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FCurveEdTab>>               _offTabs                                                       = new ExternalOffset<TArray<FCurveEdTab>>(0x0028, false);      // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offActiveTab                                                  = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FCurveEdTab>                                Tabs                                                           => _offTabs.GetValue();
	public int                                                ActiveTab                                                      => _offActiveTab.GetValue();
	#endregion


}

// Class Engine.InterpData
// 0x0048 (0x0070 - 0x0028)
public class UInterpData : UObject
{
	#region Offsets
	private ExternalOffset<float>                             _offInterpLength                                               = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPathBuildTime                                              = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UInterpGroup>>              _offInterpGroups                                               = new ExternalOffset<TArray<UInterpGroup>>(0x0030, false);     // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpCurveEdSetup>               _offCurveEdSetup                                               = new ExternalOffset<UInterpCurveEdSetup>(0x0040, true);       // 0x0040(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEdSectionStart                                             = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEdSectionEnd                                               = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldBakeAndPrune                                        = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpGroupDirector>              _offCachedDirectorGroup                                        = new ExternalOffset<UInterpGroupDirector>(0x0058, true);      // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offAllEventNames                                              = new ExternalOffset<TArray<FName>>(0x0060, false);            // 0x0060(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              InterpLength                                                   => _offInterpLength.GetValue();
	public float                                              PathBuildTime                                                  => _offPathBuildTime.GetValue();
	public TArray<UInterpGroup>                               InterpGroups                                                   => _offInterpGroups.GetValue();
	public UInterpCurveEdSetup                                CurveEdSetup                                                   => _offCurveEdSetup.GetValue();
	public float                                              EdSectionStart                                                 => _offEdSectionStart.GetValue();
	public float                                              EdSectionEnd                                                   => _offEdSectionEnd.GetValue();
	public UInterpGroupDirector                               CachedDirectorGroup                                            => _offCachedDirectorGroup.GetValue();
	public TArray<FName>                                      AllEventNames                                                  => _offAllEventNames.GetValue();
	#endregion


}

// Class Engine.InterpFilter
// 0x0010 (0x0038 - 0x0028)
public class UInterpFilter : UObject
{
	#region Offsets
	private ExternalOffset<FString>                           _offCaption                                                    = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            Caption                                                        => _offCaption.GetValue();
	#endregion


}

// Class Engine.InterpFilter_Classes
// 0x0000 (0x0038 - 0x0038)
public class UInterpFilter_Classes : UInterpFilter
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpFilter_Custom
// 0x0000 (0x0038 - 0x0038)
public class UInterpFilter_Custom : UInterpFilter
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpGroup
// 0x0025 (0x004D - 0x0028)
public class UInterpGroup : UObject
{
	#region Offsets
	private ExternalOffset<TArray<UInterpTrack>>              _offInterpTracks                                               = new ExternalOffset<TArray<UInterpTrack>>(0x0030, false);     // 0x0030(0x0010) (BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offGroupName                                                  = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offGroupColor                                                 = new ExternalOffset<FColor>(0x0048, false);                   // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCollapsed                                                 = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVisible                                                   = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsFolder                                                  = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsParented                                                = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsSelected                                                = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<UInterpTrack>                               InterpTracks                                                   => _offInterpTracks.GetValue();
	public FName                                              GroupName                                                      => _offGroupName.GetValue();
	public FColor                                             GroupColor                                                     => _offGroupColor.GetValue();
	#endregion


}

// Class Engine.InterpGroupCamera
// 0x000F (0x005C - 0x004D)
public class UInterpGroupCamera : UInterpGroup
{
	#region Offsets
	private ExternalOffset<UCameraAnim>                       _offCameraAnimInst                                             = new ExternalOffset<UCameraAnim>(0x0050, true);               // 0x0050(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCompressTolerance                                          = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCameraAnim                                        CameraAnimInst                                                 => _offCameraAnimInst.GetValue();
	public float                                              CompressTolerance                                              => _offCompressTolerance.GetValue();
	#endregion


}

// Class Engine.InterpGroupDirector
// 0x0003 (0x0050 - 0x004D)
public class UInterpGroupDirector : UInterpGroup
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpGroupInst
// 0x0020 (0x0048 - 0x0028)
public class UInterpGroupInst : UObject
{
	#region Offsets
	private ExternalOffset<UInterpGroup>                      _offGroup                                                      = new ExternalOffset<UInterpGroup>(0x0028, true);              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                            _offGroupActor                                                 = new ExternalOffset<AActor>(0x0030, true);                    // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UInterpTrackInst>>          _offTrackInst                                                  = new ExternalOffset<TArray<UInterpTrackInst>>(0x0038, false); // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UInterpGroup                                       Group                                                          => _offGroup.GetValue();
	public AActor                                             GroupActor                                                     => _offGroupActor.GetValue();
	public TArray<UInterpTrackInst>                           TrackInst                                                      => _offTrackInst.GetValue();
	#endregion


}

// Class Engine.InterpGroupInstCamera
// 0x0000 (0x0048 - 0x0048)
public class UInterpGroupInstCamera : UInterpGroupInst
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0048 - 0x0048)
public class UInterpGroupInstDirector : UInterpGroupInst
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpToMovementComponent
// 0x007C (0x0190 - 0x0114)
public class UInterpToMovementComponent : UMovementComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offDuration                                                   = new ExternalOffset<float>(0x0118);                           // 0x0118(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPauseOnImpact                                             = new ExternalOffset<char>(0x011C, false);                     // 0x011C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbSweep                                                     = new ExternalOffset<byte/*(bool)*/>(0x0120);                  // 0x0120(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ETeleportType>                     _offTeleportType                                               = new ExternalOffset<ETeleportType>(0x0121, false);            // 0x0121(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EInterpToBehaviourType>            _offBehaviourType                                              = new ExternalOffset<EInterpToBehaviourType>(0x0122, false);   // 0x0122(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbCheckIfStillInWorld                                       = new ExternalOffset<byte/*(bool)*/>(0x0123);                  // 0x0123(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceSubStepping                                          = new ExternalOffset<char>(0x0124, false);                     // 0x0124(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInterpToReverse                                          = new ExternalOffset<FScriptMulticastDelegate>(0x0128, false); // 0x0128(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnInterpToStop                                             = new ExternalOffset<FScriptMulticastDelegate>(0x0138, false); // 0x0138(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnWaitBeginDelegate                                        = new ExternalOffset<FScriptMulticastDelegate>(0x0148, false); // 0x0148(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnWaitEndDelegate                                          = new ExternalOffset<FScriptMulticastDelegate>(0x0158, false); // 0x0158(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnResetDelegate                                            = new ExternalOffset<FScriptMulticastDelegate>(0x0168, false); // 0x0168(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxSimulationTimeStep                                      = new ExternalOffset<float>(0x0178);                           // 0x0178(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxSimulationIterations                                    = new ExternalOffset<int>(0x017C);                             // 0x017C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FInterpControlPoint>>       _offControlPoints                                              = new ExternalOffset<TArray<FInterpControlPoint>>(0x0180, false); // 0x0180(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Duration                                                       => _offDuration.GetValue();
	public byte/*(bool)*/                                     bSweep                                                         => _offbSweep.GetValue();
	public ETeleportType                                      TeleportType                                                   => _offTeleportType.GetValue();
	public EInterpToBehaviourType                             BehaviourType                                                  => _offBehaviourType.GetValue();
	public byte/*(bool)*/                                     bCheckIfStillInWorld                                           => _offbCheckIfStillInWorld.GetValue();
	public FScriptMulticastDelegate                           OnInterpToReverse                                              => _offOnInterpToReverse.GetValue();
	public FScriptMulticastDelegate                           OnInterpToStop                                                 => _offOnInterpToStop.GetValue();
	public FScriptMulticastDelegate                           OnWaitBeginDelegate                                            => _offOnWaitBeginDelegate.GetValue();
	public FScriptMulticastDelegate                           OnWaitEndDelegate                                              => _offOnWaitEndDelegate.GetValue();
	public FScriptMulticastDelegate                           OnResetDelegate                                                => _offOnResetDelegate.GetValue();
	public float                                              MaxSimulationTimeStep                                          => _offMaxSimulationTimeStep.GetValue();
	public int                                                MaxSimulationIterations                                        => _offMaxSimulationIterations.GetValue();
	public TArray<FInterpControlPoint>                        ControlPoints                                                  => _offControlPoints.GetValue();
	#endregion


}

// Class Engine.InterpTrack
// 0x0041 (0x0069 - 0x0028)
public class UInterpTrack : UObject
{
	#region Offsets
	private ExternalOffset<TArray<UInterpTrack>>              _offSubTracks                                                  = new ExternalOffset<TArray<UInterpTrack>>(0x0038, false);     // 0x0038(0x0010) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offTrackInstClass                                             = new ExternalOffset<UClass>(0x0048, true);                    // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETrackActiveCondition>> _offActiveCondition                                            = new ExternalOffset<TEnumAsByte<ETrackActiveCondition>>(0x0050, false); // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offTrackTitle                                                 = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOnePerGroup                                               = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDirGroupOnly                                              = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableTrack                                              = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbIsSelected                                                = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbIsAnimControlTrack                                        = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSubTrackOnly                                              = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVisible                                                   = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsRecording                                               = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UInterpTrack>                               SubTracks                                                      => _offSubTracks.GetValue();
	public UClass                                             TrackInstClass                                                 => _offTrackInstClass.GetValue();
	public TEnumAsByte<ETrackActiveCondition>                 ActiveCondition                                                => _offActiveCondition.GetValue();
	public FString                                            TrackTitle                                                     => _offTrackTitle.GetValue();
	#endregion


}

// Class Engine.InterpTrackFloatBase
// 0x0023 (0x008C - 0x0069)
public class UInterpTrackFloatBase : UInterpTrack
{
	#region Offsets
	private ExternalOffset<FInterpCurveFloat>                 _offFloatTrack                                                 = new ExternalOffset<FInterpCurveFloat>(0x0070, false);        // 0x0070(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCurveTension                                               = new ExternalOffset<float>(0x0088);                           // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInterpCurveFloat                                  FloatTrack                                                     => _offFloatTrack.GetValue();
	public float                                              CurveTension                                                   => _offCurveTension.GetValue();
	#endregion


}

// Class Engine.InterpTrackAnimControl
// 0x001D (0x00A9 - 0x008C)
public class UInterpTrackAnimControl : UInterpTrackFloatBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offSlotName                                                   = new ExternalOffset<FName>(0x0090, false);                    // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FAnimControlTrackKey>>      _offAnimSeqs                                                   = new ExternalOffset<TArray<FAnimControlTrackKey>>(0x0098, false); // 0x0098(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSkipAnimNotifiers                                         = new ExternalOffset<char>(0x00A8, false);                     // 0x00A8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              SlotName                                                       => _offSlotName.GetValue();
	public TArray<FAnimControlTrackKey>                       AnimSeqs                                                       => _offAnimSeqs.GetValue();
	#endregion


}

// Class Engine.InterpTrackVectorBase
// 0x0023 (0x008C - 0x0069)
public class UInterpTrackVectorBase : UInterpTrack
{
	#region Offsets
	private ExternalOffset<FInterpCurveVector>                _offVectorTrack                                                = new ExternalOffset<FInterpCurveVector>(0x0070, false);       // 0x0070(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCurveTension                                               = new ExternalOffset<float>(0x0088);                           // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInterpCurveVector                                 VectorTrack                                                    => _offVectorTrack.GetValue();
	public float                                              CurveTension                                                   => _offCurveTension.GetValue();
	#endregion


}

// Class Engine.InterpTrackAudioMaster
// 0x0004 (0x0090 - 0x008C)
public class UInterpTrackAudioMaster : UInterpTrackVectorBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpTrackBoolProp
// 0x001F (0x0088 - 0x0069)
public class UInterpTrackBoolProp : UInterpTrack
{
	#region Offsets
	private ExternalOffset<TArray<FBoolTrackKey>>             _offBoolTrack                                                  = new ExternalOffset<TArray<FBoolTrackKey>>(0x0070, false);    // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offPropertyName                                               = new ExternalOffset<FName>(0x0080, false);                    // 0x0080(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FBoolTrackKey>                              BoolTrack                                                      => _offBoolTrack.GetValue();
	public FName                                              PropertyName                                                   => _offPropertyName.GetValue();
	#endregion


}

// Class Engine.InterpTrackColorProp
// 0x000C (0x0098 - 0x008C)
public class UInterpTrackColorProp : UInterpTrackVectorBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offPropertyName                                               = new ExternalOffset<FName>(0x0090, false);                    // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              PropertyName                                                   => _offPropertyName.GetValue();
	#endregion


}

// Class Engine.InterpTrackColorScale
// 0x0004 (0x0090 - 0x008C)
public class UInterpTrackColorScale : UInterpTrackVectorBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpTrackDirector
// 0x0018 (0x0081 - 0x0069)
public class UInterpTrackDirector : UInterpTrack
{
	#region Offsets
	private ExternalOffset<TArray<FDirectorTrackCut>>         _offCutTrack                                                   = new ExternalOffset<TArray<FDirectorTrackCut>>(0x0070, false); // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSimulateCameraCutsOnClients                               = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FDirectorTrackCut>                          CutTrack                                                       => _offCutTrack.GetValue();
	#endregion


}

// Class Engine.InterpTrackEvent
// 0x0018 (0x0081 - 0x0069)
public class UInterpTrackEvent : UInterpTrack
{
	#region Offsets
	private ExternalOffset<TArray<FEventTrackKey>>            _offEventTrack                                                 = new ExternalOffset<TArray<FEventTrackKey>>(0x0070, false);   // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFireEventsWhenForwards                                    = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFireEventsWhenBackwards                                   = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFireEventsWhenJumpingForwards                             = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseCustomEventName                                        = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FEventTrackKey>                             EventTrack                                                     => _offEventTrack.GetValue();
	#endregion


}

// Class Engine.InterpTrackFade
// 0x0018 (0x00A4 - 0x008C)
public class UInterpTrackFade : UInterpTrackFloatBase
{
	#region Offsets
//	private ExternalOffset<char>                              _offbPersistFade                                               = new ExternalOffset<char>(0x0090, false);                     // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFadeAudio                                                 = new ExternalOffset<char>(0x0090, false);                     // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offFadeColor                                                  = new ExternalOffset<FLinearColor>(0x0094, false);             // 0x0094(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FLinearColor                                       FadeColor                                                      => _offFadeColor.GetValue();
	#endregion


}

// Class Engine.InterpTrackFloatAnimBPParam
// 0x001C (0x00A8 - 0x008C)
public class UInterpTrackFloatAnimBPParam : UInterpTrackFloatBase
{
	#region Offsets
	private ExternalOffset<UAnimBlueprintGeneratedClass>      _offAnimBlueprintClass                                         = new ExternalOffset<UAnimBlueprintGeneratedClass>(0x0090, true); // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offAnimClass                                                  = new ExternalOffset<UClass>(0x0098, true);                    // 0x0098(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offParamName                                                  = new ExternalOffset<FName>(0x00A0, false);                    // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimBlueprintGeneratedClass                       AnimBlueprintClass                                             => _offAnimBlueprintClass.GetValue();
	public UClass                                             AnimClass                                                      => _offAnimClass.GetValue();
	public FName                                              ParamName                                                      => _offParamName.GetValue();
	#endregion


}

// Class Engine.InterpTrackFloatMaterialParam
// 0x001C (0x00A8 - 0x008C)
public class UInterpTrackFloatMaterialParam : UInterpTrackFloatBase
{
	#region Offsets
	private ExternalOffset<TArray<UMaterialInterface>>        _offTargetMaterials                                            = new ExternalOffset<TArray<UMaterialInterface>>(0x0090, false); // 0x0090(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offParamName                                                  = new ExternalOffset<FName>(0x00A0, false);                    // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UMaterialInterface>                         TargetMaterials                                                => _offTargetMaterials.GetValue();
	public FName                                              ParamName                                                      => _offParamName.GetValue();
	#endregion


}

// Class Engine.InterpTrackFloatParticleParam
// 0x000C (0x0098 - 0x008C)
public class UInterpTrackFloatParticleParam : UInterpTrackFloatBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offParamName                                                  = new ExternalOffset<FName>(0x0090, false);                    // 0x0090(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              ParamName                                                      => _offParamName.GetValue();
	#endregion


}

// Class Engine.InterpTrackFloatProp
// 0x000C (0x0098 - 0x008C)
public class UInterpTrackFloatProp : UInterpTrackFloatBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offPropertyName                                               = new ExternalOffset<FName>(0x0090, false);                    // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              PropertyName                                                   => _offPropertyName.GetValue();
	#endregion


}

// Class Engine.InterpTrackInst
// 0x0000 (0x0028 - 0x0028)
public class UInterpTrackInst : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpTrackInstAnimControl
// 0x0004 (0x002C - 0x0028)
public class UInterpTrackInstAnimControl : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<float>                             _offLastUpdatePosition                                         = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              LastUpdatePosition                                             => _offLastUpdatePosition.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x0028 - 0x0028)
public class UInterpTrackInstAudioMaster : UInterpTrackInst
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpTrackInstProperty
// 0x0010 (0x0038 - 0x0028)
public class UInterpTrackInstProperty : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<UProperty>                         _offInterpProperty                                             = new ExternalOffset<UProperty>(0x0028, true);                 // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UObject>                           _offPropertyOuterObjectInst                                    = new ExternalOffset<UObject>(0x0030, true);                   // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UProperty                                          InterpProperty                                                 => _offInterpProperty.GetValue();
	public UObject                                            PropertyOuterObjectInst                                        => _offPropertyOuterObjectInst.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstBoolProp
// 0x0011 (0x0049 - 0x0038)
public class UInterpTrackInstBoolProp : UInterpTrackInstProperty
{
	#region Offsets
	private ExternalOffset<UBoolProperty>                     _offBoolProperty                                               = new ExternalOffset<UBoolProperty>(0x0040, true);             // 0x0040(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offResetBool                                                  = new ExternalOffset<byte/*(bool)*/>(0x0048);                  // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UBoolProperty                                      BoolProperty                                                   => _offBoolProperty.GetValue();
	public byte/*(bool)*/                                     ResetBool                                                      => _offResetBool.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstColorProp
// 0x000C (0x0044 - 0x0038)
public class UInterpTrackInstColorProp : UInterpTrackInstProperty
{
	#region Offsets
	private ExternalOffset<FColor>                            _offResetColor                                                 = new ExternalOffset<FColor>(0x0040, false);                   // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FColor                                             ResetColor                                                     => _offResetColor.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x0028 - 0x0028)
public class UInterpTrackInstColorScale : UInterpTrackInst
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0030 - 0x0028)
public class UInterpTrackInstDirector : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<AActor>                            _offOldViewTarget                                              = new ExternalOffset<AActor>(0x0028, true);                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public AActor                                             OldViewTarget                                                  => _offOldViewTarget.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstEvent
// 0x0004 (0x002C - 0x0028)
public class UInterpTrackInstEvent : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<float>                             _offLastUpdatePosition                                         = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              LastUpdatePosition                                             => _offLastUpdatePosition.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstFade
// 0x0000 (0x0028 - 0x0028)
public class UInterpTrackInstFade : UInterpTrackInst
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpTrackInstFloatAnimBPParam
// 0x000C (0x0034 - 0x0028)
public class UInterpTrackInstFloatAnimBPParam : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<UAnimInstance>                     _offAnimScriptInstance                                         = new ExternalOffset<UAnimInstance>(0x0028, true);             // 0x0028(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offResetFloat                                                 = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UAnimInstance                                      AnimScriptInstance                                             => _offAnimScriptInstance.GetValue();
	public float                                              ResetFloat                                                     => _offResetFloat.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0038 (0x0060 - 0x0028)
public class UInterpTrackInstFloatMaterialParam : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<TArray<UMaterialInstanceDynamic>>  _offMaterialInstances                                          = new ExternalOffset<TArray<UMaterialInstanceDynamic>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                     _offResetFloats                                                = new ExternalOffset<TArray<float>>(0x0038, false);            // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPrimitiveMaterialRef>>     _offPrimitiveMaterialRefs                                      = new ExternalOffset<TArray<FPrimitiveMaterialRef>>(0x0048, false); // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpTrackFloatMaterialParam>    _offInstancedTrack                                             = new ExternalOffset<UInterpTrackFloatMaterialParam>(0x0058, true); // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UMaterialInstanceDynamic>                   MaterialInstances                                              => _offMaterialInstances.GetValue();
	public TArray<float>                                      ResetFloats                                                    => _offResetFloats.GetValue();
	public TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs                                          => _offPrimitiveMaterialRefs.GetValue();
	public UInterpTrackFloatMaterialParam                     InstancedTrack                                                 => _offInstancedTrack.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstFloatParticleParam
// 0x0004 (0x002C - 0x0028)
public class UInterpTrackInstFloatParticleParam : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<float>                             _offResetFloat                                                 = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              ResetFloat                                                     => _offResetFloat.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstFloatProp
// 0x000C (0x0044 - 0x0038)
public class UInterpTrackInstFloatProp : UInterpTrackInstProperty
{
	#region Offsets
	private ExternalOffset<float>                             _offResetFloat                                                 = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              ResetFloat                                                     => _offResetFloat.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstLinearColorProp
// 0x0018 (0x0050 - 0x0038)
public class UInterpTrackInstLinearColorProp : UInterpTrackInstProperty
{
	#region Offsets
	private ExternalOffset<FLinearColor>                      _offResetColor                                                 = new ExternalOffset<FLinearColor>(0x0040, false);             // 0x0040(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FLinearColor                                       ResetColor                                                     => _offResetColor.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstMove
// 0x0018 (0x0040 - 0x0028)
public class UInterpTrackInstMove : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<FVector>                           _offResetLocation                                              = new ExternalOffset<FVector>(0x0028, false);                  // 0x0028(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offResetRotation                                              = new ExternalOffset<FRotator>(0x0034, false);                 // 0x0034(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            ResetLocation                                                  => _offResetLocation.GetValue();
	public FRotator                                           ResetRotation                                                  => _offResetRotation.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstParticleReplay
// 0x0004 (0x002C - 0x0028)
public class UInterpTrackInstParticleReplay : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<float>                             _offLastUpdatePosition                                         = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              LastUpdatePosition                                             => _offLastUpdatePosition.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstSlomo
// 0x0004 (0x002C - 0x0028)
public class UInterpTrackInstSlomo : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<float>                             _offOldTimeDilation                                            = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              OldTimeDilation                                                => _offOldTimeDilation.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstSound
// 0x0010 (0x0038 - 0x0028)
public class UInterpTrackInstSound : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<float>                             _offLastUpdatePosition                                         = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UAudioComponent>                   _offPlayAudioComp                                              = new ExternalOffset<UAudioComponent>(0x0030, true);           // 0x0030(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              LastUpdatePosition                                             => _offLastUpdatePosition.GetValue();
	public UAudioComponent                                    PlayAudioComp                                                  => _offPlayAudioComp.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstToggle
// 0x0009 (0x0031 - 0x0028)
public class UInterpTrackInstToggle : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ETrackToggleAction>>   _offAction                                                     = new ExternalOffset<TEnumAsByte<ETrackToggleAction>>(0x0028, false); // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLastUpdatePosition                                         = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSavedActiveState                                          = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ETrackToggleAction>                    Action                                                         => _offAction.GetValue();
	public float                                              LastUpdatePosition                                             => _offLastUpdatePosition.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0038 (0x0060 - 0x0028)
public class UInterpTrackInstVectorMaterialParam : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<TArray<UMaterialInstanceDynamic>>  _offMaterialInstances                                          = new ExternalOffset<TArray<UMaterialInstanceDynamic>>(0x0028, false); // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FVector>>                   _offResetVectors                                               = new ExternalOffset<TArray<FVector>>(0x0038, false);          // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPrimitiveMaterialRef>>     _offPrimitiveMaterialRefs                                      = new ExternalOffset<TArray<FPrimitiveMaterialRef>>(0x0048, false); // 0x0048(0x0010) (ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpTrackVectorMaterialParam>   _offInstancedTrack                                             = new ExternalOffset<UInterpTrackVectorMaterialParam>(0x0058, true); // 0x0058(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UMaterialInstanceDynamic>                   MaterialInstances                                              => _offMaterialInstances.GetValue();
	public TArray<FVector>                                    ResetVectors                                                   => _offResetVectors.GetValue();
	public TArray<FPrimitiveMaterialRef>                      PrimitiveMaterialRefs                                          => _offPrimitiveMaterialRefs.GetValue();
	public UInterpTrackVectorMaterialParam                    InstancedTrack                                                 => _offInstancedTrack.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstVectorProp
// 0x0014 (0x004C - 0x0038)
public class UInterpTrackInstVectorProp : UInterpTrackInstProperty
{
	#region Offsets
	private ExternalOffset<FVector>                           _offResetVector                                                = new ExternalOffset<FVector>(0x0040, false);                  // 0x0040(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            ResetVector                                                    => _offResetVector.GetValue();
	#endregion


}

// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0030 - 0x0028)
public class UInterpTrackInstVisibility : UInterpTrackInst
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EVisibilityTrackAction>> _offAction                                                     = new ExternalOffset<TEnumAsByte<EVisibilityTrackAction>>(0x0028, false); // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLastUpdatePosition                                         = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EVisibilityTrackAction>                Action                                                         => _offAction.GetValue();
	public float                                              LastUpdatePosition                                             => _offLastUpdatePosition.GetValue();
	#endregion


}

// Class Engine.InterpTrackLinearColorBase
// 0x0023 (0x008C - 0x0069)
public class UInterpTrackLinearColorBase : UInterpTrack
{
	#region Offsets
	private ExternalOffset<FInterpCurveLinearColor>           _offLinearColorTrack                                           = new ExternalOffset<FInterpCurveLinearColor>(0x0070, false);  // 0x0070(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCurveTension                                               = new ExternalOffset<float>(0x0088);                           // 0x0088(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInterpCurveLinearColor                            LinearColorTrack                                               => _offLinearColorTrack.GetValue();
	public float                                              CurveTension                                                   => _offCurveTension.GetValue();
	#endregion


}

// Class Engine.InterpTrackLinearColorProp
// 0x000C (0x0098 - 0x008C)
public class UInterpTrackLinearColorProp : UInterpTrackLinearColorBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offPropertyName                                               = new ExternalOffset<FName>(0x0090, false);                    // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              PropertyName                                                   => _offPropertyName.GetValue();
	#endregion


}

// Class Engine.InterpTrackMove
// 0x005C (0x00C5 - 0x0069)
public class UInterpTrackMove : UInterpTrack
{
	#region Offsets
	private ExternalOffset<FInterpCurveVector>                _offPosTrack                                                   = new ExternalOffset<FInterpCurveVector>(0x0070, false);       // 0x0070(0x0018) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpCurveVector>                _offEulerTrack                                                 = new ExternalOffset<FInterpCurveVector>(0x0088, false);       // 0x0088(0x0018) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpLookupTrack>                _offLookupTrack                                                = new ExternalOffset<FInterpLookupTrack>(0x00A0, false);       // 0x00A0(0x0010) (NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offLookAtGroupName                                            = new ExternalOffset<FName>(0x00B0, false);                    // 0x00B0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLinCurveTension                                            = new ExternalOffset<float>(0x00B8);                           // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAngCurveTension                                            = new ExternalOffset<float>(0x00BC);                           // 0x00BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseQuatInterpolation                                      = new ExternalOffset<char>(0x00C0, false);                     // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowArrowAtKeys                                           = new ExternalOffset<char>(0x00C0, false);                     // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableMovement                                           = new ExternalOffset<char>(0x00C0, false);                     // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowTranslationOnCurveEd                                  = new ExternalOffset<char>(0x00C0, false);                     // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShowRotationOnCurveEd                                     = new ExternalOffset<char>(0x00C0, false);                     // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHide3DTrack                                               = new ExternalOffset<char>(0x00C0, false);                     // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EInterpTrackMoveRotMode>> _offRotMode                                                    = new ExternalOffset<TEnumAsByte<EInterpTrackMoveRotMode>>(0x00C4, false); // 0x00C4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInterpCurveVector                                 PosTrack                                                       => _offPosTrack.GetValue();
	public FInterpCurveVector                                 EulerTrack                                                     => _offEulerTrack.GetValue();
	public FInterpLookupTrack                                 LookupTrack                                                    => _offLookupTrack.GetValue();
	public FName                                              LookAtGroupName                                                => _offLookAtGroupName.GetValue();
	public float                                              LinCurveTension                                                => _offLinCurveTension.GetValue();
	public float                                              AngCurveTension                                                => _offAngCurveTension.GetValue();
	public TEnumAsByte<EInterpTrackMoveRotMode>               RotMode                                                        => _offRotMode.GetValue();
	#endregion


}

// Class Engine.InterpTrackMoveAxis
// 0x001C (0x00A8 - 0x008C)
public class UInterpTrackMoveAxis : UInterpTrackFloatBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EInterpMoveAxis>>      _offMoveAxis                                                   = new ExternalOffset<TEnumAsByte<EInterpMoveAxis>>(0x0090, false); // 0x0090(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpLookupTrack>                _offLookupTrack                                                = new ExternalOffset<FInterpLookupTrack>(0x0098, false);       // 0x0098(0x0010) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EInterpMoveAxis>                       MoveAxis                                                       => _offMoveAxis.GetValue();
	public FInterpLookupTrack                                 LookupTrack                                                    => _offLookupTrack.GetValue();
	#endregion


}

// Class Engine.InterpTrackParticleReplay
// 0x0017 (0x0080 - 0x0069)
public class UInterpTrackParticleReplay : UInterpTrack
{
	#region Offsets
	private ExternalOffset<TArray<FParticleReplayTrackKey>>   _offTrackKeys                                                  = new ExternalOffset<TArray<FParticleReplayTrackKey>>(0x0070, false); // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FParticleReplayTrackKey>                    TrackKeys                                                      => _offTrackKeys.GetValue();
	#endregion


}

// Class Engine.InterpTrackSlomo
// 0x0004 (0x0090 - 0x008C)
public class UInterpTrackSlomo : UInterpTrackFloatBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.InterpTrackSound
// 0x0015 (0x00A1 - 0x008C)
public class UInterpTrackSound : UInterpTrackVectorBase
{
	#region Offsets
	private ExternalOffset<TArray<FSoundTrackKey>>            _offSounds                                                     = new ExternalOffset<TArray<FSoundTrackKey>>(0x0090, false);   // 0x0090(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPlayOnReverse                                             = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbContinueSoundOnMatineeEnd                                 = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSuppressSubtitles                                         = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTreatAsDialogue                                           = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAttach                                                    = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FSoundTrackKey>                             Sounds                                                         => _offSounds.GetValue();
	#endregion


}

// Class Engine.InterpTrackToggle
// 0x0018 (0x0081 - 0x0069)
public class UInterpTrackToggle : UInterpTrack
{
	#region Offsets
	private ExternalOffset<TArray<FToggleTrackKey>>           _offToggleTrack                                                = new ExternalOffset<TArray<FToggleTrackKey>>(0x0070, false);  // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbActivateSystemEachUpdate                                  = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbActivateWithJustAttachedFlag                              = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFireEventsWhenForwards                                    = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFireEventsWhenBackwards                                   = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFireEventsWhenJumpingForwards                             = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FToggleTrackKey>                            ToggleTrack                                                    => _offToggleTrack.GetValue();
	#endregion


}

// Class Engine.InterpTrackVectorMaterialParam
// 0x001C (0x00A8 - 0x008C)
public class UInterpTrackVectorMaterialParam : UInterpTrackVectorBase
{
	#region Offsets
	private ExternalOffset<TArray<UMaterialInterface>>        _offTargetMaterials                                            = new ExternalOffset<TArray<UMaterialInterface>>(0x0090, false); // 0x0090(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offParamName                                                  = new ExternalOffset<FName>(0x00A0, false);                    // 0x00A0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UMaterialInterface>                         TargetMaterials                                                => _offTargetMaterials.GetValue();
	public FName                                              ParamName                                                      => _offParamName.GetValue();
	#endregion


}

// Class Engine.InterpTrackVectorProp
// 0x000C (0x0098 - 0x008C)
public class UInterpTrackVectorProp : UInterpTrackVectorBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offPropertyName                                               = new ExternalOffset<FName>(0x0090, false);                    // 0x0090(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              PropertyName                                                   => _offPropertyName.GetValue();
	#endregion


}

// Class Engine.InterpTrackVisibility
// 0x0018 (0x0081 - 0x0069)
public class UInterpTrackVisibility : UInterpTrack
{
	#region Offsets
	private ExternalOffset<TArray<FVisibilityTrackKey>>       _offVisibilityTrack                                            = new ExternalOffset<TArray<FVisibilityTrackKey>>(0x0070, false); // 0x0070(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFireEventsWhenForwards                                    = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFireEventsWhenBackwards                                   = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFireEventsWhenJumpingForwards                             = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FVisibilityTrackKey>                        VisibilityTrack                                                => _offVisibilityTrack.GetValue();
	#endregion


}

// Class Engine.IntSerialization
// 0x0028 (0x0050 - 0x0028)
public class UIntSerialization : UObject
{
	#region Offsets
	private ExternalOffset<ushort>                            _offUnsignedInt16Variable                                      = new ExternalOffset<ushort>(0x0028);                          // 0x0028(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offUnsignedInt32Variable                                      = new ExternalOffset<uint>(0x002C);                            // 0x002C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ulong>                             _offUnsignedInt64Variable                                      = new ExternalOffset<ulong>(0x0030);                           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<sbyte>                             _offSignedInt8Variable                                         = new ExternalOffset<sbyte>(0x0038);                           // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<short>                             _offSignedInt16Variable                                        = new ExternalOffset<short>(0x003A);                           // 0x003A(0x0002) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<long>                              _offSignedInt64Variable                                        = new ExternalOffset<long>(0x0040);                            // 0x0040(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offUnsignedInt8Variable                                       = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSignedInt32Variable                                        = new ExternalOffset<int>(0x004C);                             // 0x004C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ushort                                             UnsignedInt16Variable                                          => _offUnsignedInt16Variable.GetValue();
	public uint                                               UnsignedInt32Variable                                          => _offUnsignedInt32Variable.GetValue();
	public ulong                                              UnsignedInt64Variable                                          => _offUnsignedInt64Variable.GetValue();
	public sbyte                                              SignedInt8Variable                                             => _offSignedInt8Variable.GetValue();
	public short                                              SignedInt16Variable                                            => _offSignedInt16Variable.GetValue();
	public long                                               SignedInt64Variable                                            => _offSignedInt64Variable.GetValue();
	public int                                                SignedInt32Variable                                            => _offSignedInt32Variable.GetValue();
	#endregion


}

// Class Engine.KillZVolume
// 0x0003 (0x0290 - 0x028D)
public class AKillZVolume : APhysicsVolume
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetArrayLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetArrayLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetGuidLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetGuidLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetInputLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetInputLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetInternationalizationLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetInternationalizationLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetMaterialLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetMaterialLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetMathLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetMathLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetNodeHelperLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetNodeHelperLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetRenderingLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetRenderingLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetStringLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetStringLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetStringTableLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetStringTableLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetSystemLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetSystemLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.KismetTextLibrary
// 0x0000 (0x0028 - 0x0028)
public class UKismetTextLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Layer
// 0x0020 (0x0048 - 0x0028)
public class ULayer : UObject
{
	#region Offsets
	private ExternalOffset<FName>                             _offLayerName                                                  = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsVisible                                                 = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLayerActorStats>>          _offActorStats                                                 = new ExternalOffset<TArray<FLayerActorStats>>(0x0038, false); // 0x0038(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              LayerName                                                      => _offLayerName.GetValue();
	public TArray<FLayerActorStats>                           ActorStats                                                     => _offActorStats.GetValue();
	#endregion


}

// Class Engine.Level
// 0x0258 (0x0280 - 0x0028)
public class ULevel : UObject
{
	#region Offsets
	private ExternalOffset<UWorld>                            _offOwningWorld                                                = new ExternalOffset<UWorld>(0x00B8, true);                    // 0x00B8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UModel>                            _offModel                                                      = new ExternalOffset<UModel>(0x00C0, true);                    // 0x00C0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UModelComponent>>           _offModelComponents                                            = new ExternalOffset<TArray<UModelComponent>>(0x00C8, false);  // 0x00C8(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<ULevelActorContainer>              _offActorCluster                                               = new ExternalOffset<ULevelActorContainer>(0x00D8, true);      // 0x00D8(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumTextureStreamingUnbuiltComponents                       = new ExternalOffset<int>(0x00E0);                             // 0x00E0(0x0004) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumTextureStreamingDirtyResources                          = new ExternalOffset<int>(0x00E4);                             // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ALevelScriptActor>                 _offLevelScriptActor                                           = new ExternalOffset<ALevelScriptActor>(0x00E8, true);         // 0x00E8(0x0008) (ZeroConstructor, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ANavigationObjectBase>             _offNavListStart                                               = new ExternalOffset<ANavigationObjectBase>(0x00F0, true);     // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ANavigationObjectBase>             _offNavListEnd                                                 = new ExternalOffset<ANavigationObjectBase>(0x00F8, true);     // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UNavigationDataChunk>>      _offNavDataChunks                                              = new ExternalOffset<TArray<UNavigationDataChunk>>(0x0100, false); // 0x0100(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLightmapTotalSize                                          = new ExternalOffset<float>(0x0110);                           // 0x0110(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offShadowmapTotalSize                                         = new ExternalOffset<float>(0x0114);                           // 0x0114(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FVector>>                   _offStaticNavigableGeometry                                    = new ExternalOffset<TArray<FVector>>(0x0118, false);          // 0x0118(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FGuid>>                     _offStreamingTextureGuids                                      = new ExternalOffset<TArray<FGuid>>(0x0128, false);            // 0x0128(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offLevelBuildDataId                                           = new ExternalOffset<FGuid>(0x01D0, false);                    // 0x01D0(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMapBuildDataRegistry>             _offMapBuildData                                               = new ExternalOffset<UMapBuildDataRegistry>(0x01E0, true);     // 0x01E0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, NonPIEDuplicateTransient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FIntVector>                        _offLightBuildLevelOffset                                      = new ExternalOffset<FIntVector>(0x01E8, false);               // 0x01E8(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsLightingScenario                                        = new ExternalOffset<char>(0x01F4, false);                     // 0x01F4(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTextureStreamingRotationChanged                           = new ExternalOffset<char>(0x01F4, false);                     // 0x01F4(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStaticComponentsRegisteredInStreamingManager              = new ExternalOffset<char>(0x01F4, false);                     // 0x01F4(0x0001) BIT_FIELD (Transient, DuplicateTransient, NonTransactional, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsVisible                                                 = new ExternalOffset<char>(0x01F4, false);                     // 0x01F4(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AWorldSettings>                    _offWorldSettings                                              = new ExternalOffset<AWorldSettings>(0x0240, true);            // 0x0240(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UAssetUserData>>            _offAssetUserData                                              = new ExternalOffset<TArray<UAssetUserData>>(0x0250, false);   // 0x0250(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FReplicatedStaticActorDestructionInfo>> _offDestroyedReplicatedStaticActors                            = new ExternalOffset<TArray<FReplicatedStaticActorDestructionInfo>>(0x0270, false); // 0x0270(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UWorld                                             OwningWorld                                                    => _offOwningWorld.GetValue();
	public UModel                                             Model                                                          => _offModel.GetValue();
	public TArray<UModelComponent>                            ModelComponents                                                => _offModelComponents.GetValue();
	public ULevelActorContainer                               ActorCluster                                                   => _offActorCluster.GetValue();
	public int                                                NumTextureStreamingUnbuiltComponents                           => _offNumTextureStreamingUnbuiltComponents.GetValue();
	public int                                                NumTextureStreamingDirtyResources                              => _offNumTextureStreamingDirtyResources.GetValue();
	public ALevelScriptActor                                  LevelScriptActor                                               => _offLevelScriptActor.GetValue();
	public ANavigationObjectBase                              NavListStart                                                   => _offNavListStart.GetValue();
	public ANavigationObjectBase                              NavListEnd                                                     => _offNavListEnd.GetValue();
	public TArray<UNavigationDataChunk>                       NavDataChunks                                                  => _offNavDataChunks.GetValue();
	public float                                              LightmapTotalSize                                              => _offLightmapTotalSize.GetValue();
	public float                                              ShadowmapTotalSize                                             => _offShadowmapTotalSize.GetValue();
	public TArray<FVector>                                    StaticNavigableGeometry                                        => _offStaticNavigableGeometry.GetValue();
	public TArray<FGuid>                                      StreamingTextureGuids                                          => _offStreamingTextureGuids.GetValue();
	public FGuid                                              LevelBuildDataId                                               => _offLevelBuildDataId.GetValue();
	public UMapBuildDataRegistry                              MapBuildData                                                   => _offMapBuildData.GetValue();
	public FIntVector                                         LightBuildLevelOffset                                          => _offLightBuildLevelOffset.GetValue();
	public AWorldSettings                                     WorldSettings                                                  => _offWorldSettings.GetValue();
	public TArray<UAssetUserData>                             AssetUserData                                                  => _offAssetUserData.GetValue();
	public TArray<FReplicatedStaticActorDestructionInfo>      DestroyedReplicatedStaticActors                                => _offDestroyedReplicatedStaticActors.GetValue();
	#endregion


}

// Class Engine.LevelActorContainer
// 0x0010 (0x0038 - 0x0028)
public class ULevelActorContainer : UObject
{
	#region Offsets
	private ExternalOffset<TArray<AActor>>                    _offActors                                                     = new ExternalOffset<TArray<AActor>>(0x0028, false);           // 0x0028(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<AActor>                                     Actors                                                         => _offActors.GetValue();
	#endregion


}

// Class Engine.LevelBounds
// 0x0011 (0x0249 - 0x0238)
public class ALevelBounds : AActor
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                    _offbAutoUpdateBounds                                          = new ExternalOffset<byte/*(bool)*/>(0x0248);                  // 0x0248(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                     bAutoUpdateBounds                                              => _offbAutoUpdateBounds.GetValue();
	#endregion


}

// Class Engine.LevelScriptActor
// 0x0011 (0x0249 - 0x0238)
public class ALevelScriptActor : AActor
{
	#region Offsets
//	private ExternalOffset<char>                              _offbInputEnabled                                              = new ExternalOffset<char>(0x0248, false);                     // 0x0248(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	#endregion


}

// Class Engine.LevelScriptBlueprint
// 0x0007 (0x00D8 - 0x00D1)
public class ULevelScriptBlueprint : UBlueprint
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.World
// 0x0610 (0x0638 - 0x0028)
public class UWorld : UObject
{
	#region Offsets
	private ExternalOffset<ULevel>                            _offPersistentLevel                                            = new ExternalOffset<ULevel>(0x0030, true);                    // 0x0030(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UNetDriver>                        _offNetDriver                                                  = new ExternalOffset<UNetDriver>(0x0038, true);                // 0x0038(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ULineBatchComponent>               _offLineBatcher                                                = new ExternalOffset<ULineBatchComponent>(0x0040, true);       // 0x0040(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ULineBatchComponent>               _offPersistentLineBatcher                                      = new ExternalOffset<ULineBatchComponent>(0x0048, true);       // 0x0048(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ULineBatchComponent>               _offForegroundLineBatcher                                      = new ExternalOffset<ULineBatchComponent>(0x0050, true);       // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AGameNetworkManager>               _offNetworkManager                                             = new ExternalOffset<AGameNetworkManager>(0x0058, true);       // 0x0058(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPhysicsCollisionHandler>          _offPhysicsCollisionHandler                                    = new ExternalOffset<UPhysicsCollisionHandler>(0x0060, true);  // 0x0060(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObject>>                   _offExtraReferencedObjects                                     = new ExternalOffset<TArray<UObject>>(0x0068, false);          // 0x0068(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObject>>                   _offPerModuleDataObjects                                       = new ExternalOffset<TArray<UObject>>(0x0078, false);          // 0x0078(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offLevelSequenceActors                                        = new ExternalOffset<TArray<AActor>>(0x0088, false);           // 0x0088(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<ULevelStreaming>>           _offStreamingLevels                                            = new ExternalOffset<TArray<ULevelStreaming>>(0x0098, false);  // 0x0098(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<FStreamingLevelsToConsider>        _offStreamingLevelsToConsider                                  = new ExternalOffset<FStreamingLevelsToConsider>(0x00A8, false); // 0x00A8(0x0028) (Transient, DuplicateTransient, NativeAccessSpecifierPrivate)
	private ExternalOffset<FString>                           _offStreamingLevelsPrefix                                      = new ExternalOffset<FString>(0x00D0, false);                  // 0x00D0(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ULevel>                            _offCurrentLevelPendingVisibility                              = new ExternalOffset<ULevel>(0x00E0, true);                    // 0x00E0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<ULevel>                            _offCurrentLevelPendingInvisibility                            = new ExternalOffset<ULevel>(0x00E8, true);                    // 0x00E8(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UDemoNetDriver>                    _offDemoNetDriver                                              = new ExternalOffset<UDemoNetDriver>(0x00F0, true);            // 0x00F0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AParticleEventManager>             _offMyParticleEventManager                                     = new ExternalOffset<AParticleEventManager>(0x00F8, true);     // 0x00F8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<APhysicsVolume>                    _offDefaultPhysicsVolume                                       = new ExternalOffset<APhysicsVolume>(0x0100, true);            // 0x0100(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbAreConstraintsDirty                                       = new ExternalOffset<char>(0x011E, false);                     // 0x011E(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UNavigationSystemBase>             _offNavigationSystem                                           = new ExternalOffset<UNavigationSystemBase>(0x0120, true);     // 0x0120(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<AGameModeBase>                     _offAuthorityGameMode                                          = new ExternalOffset<AGameModeBase>(0x0128, true);             // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<AGameStateBase>                    _offGameState                                                  = new ExternalOffset<AGameStateBase>(0x0130, true);            // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UAISystemBase>                     _offAISystem                                                   = new ExternalOffset<UAISystemBase>(0x0138, true);             // 0x0138(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UAvoidanceManager>                 _offAvoidanceManager                                           = new ExternalOffset<UAvoidanceManager>(0x0140, true);         // 0x0140(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<ULevel>>                    _offLevels                                                     = new ExternalOffset<TArray<ULevel>>(0x0148, false);           // 0x0148(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FLevelCollection>>          _offLevelCollections                                           = new ExternalOffset<TArray<FLevelCollection>>(0x0158, false); // 0x0158(0x0010) (ZeroConstructor, Transient, NonTransactional, NativeAccessSpecifierPrivate)
	private ExternalOffset<UGameInstance>                     _offOwningGameInstance                                         = new ExternalOffset<UGameInstance>(0x0170, true);             // 0x0170(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UMaterialParameterCollectionInstance>> _offParameterCollectionInstances                               = new ExternalOffset<TArray<UMaterialParameterCollectionInstance>>(0x0178, false); // 0x0178(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<UCanvas>                           _offCanvasForRenderingToTarget                                 = new ExternalOffset<UCanvas>(0x0188, true);                   // 0x0188(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UCanvas>                           _offCanvasForDrawMaterialToRenderTarget                        = new ExternalOffset<UCanvas>(0x0190, true);                   // 0x0190(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UActorComponent>>           _offComponentsThatNeedEndOfFrameUpdate                         = new ExternalOffset<TArray<UActorComponent>>(0x01E8, false);  // 0x01E8(0x0010) (ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UActorComponent>>           _offComponentsThatNeedEndOfFrameUpdate_OnGameThread            = new ExternalOffset<TArray<UActorComponent>>(0x01F8, false);  // 0x01F8(0x0010) (ExportObject, ZeroConstructor, Transient, NonTransactional, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<UWorldComposition>                 _offWorldComposition                                           = new ExternalOffset<UWorldComposition>(0x0568, true);         // 0x0568(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FWorldPSCPool>                     _offPSCPool                                                    = new ExternalOffset<FWorldPSCPool>(0x05E0, false);            // 0x05E0(0x0058) (ContainsInstancedReference, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public ULevel                                             PersistentLevel                                                => _offPersistentLevel.GetValue();
	public UNetDriver                                         NetDriver                                                      => _offNetDriver.GetValue();
	public ULineBatchComponent                                LineBatcher                                                    => _offLineBatcher.GetValue();
	public ULineBatchComponent                                PersistentLineBatcher                                          => _offPersistentLineBatcher.GetValue();
	public ULineBatchComponent                                ForegroundLineBatcher                                          => _offForegroundLineBatcher.GetValue();
	public AGameNetworkManager                                NetworkManager                                                 => _offNetworkManager.GetValue();
	public UPhysicsCollisionHandler                           PhysicsCollisionHandler                                        => _offPhysicsCollisionHandler.GetValue();
	public TArray<UObject>                                    ExtraReferencedObjects                                         => _offExtraReferencedObjects.GetValue();
	public TArray<UObject>                                    PerModuleDataObjects                                           => _offPerModuleDataObjects.GetValue();
	public TArray<AActor>                                     LevelSequenceActors                                            => _offLevelSequenceActors.GetValue();
	public TArray<ULevelStreaming>                            StreamingLevels                                                => _offStreamingLevels.GetValue();
	public FStreamingLevelsToConsider                         StreamingLevelsToConsider                                      => _offStreamingLevelsToConsider.GetValue();
	public FString                                            StreamingLevelsPrefix                                          => _offStreamingLevelsPrefix.GetValue();
	public ULevel                                             CurrentLevelPendingVisibility                                  => _offCurrentLevelPendingVisibility.GetValue();
	public ULevel                                             CurrentLevelPendingInvisibility                                => _offCurrentLevelPendingInvisibility.GetValue();
	public UDemoNetDriver                                     DemoNetDriver                                                  => _offDemoNetDriver.GetValue();
	public AParticleEventManager                              MyParticleEventManager                                         => _offMyParticleEventManager.GetValue();
	public APhysicsVolume                                     DefaultPhysicsVolume                                           => _offDefaultPhysicsVolume.GetValue();
	public UNavigationSystemBase                              NavigationSystem                                               => _offNavigationSystem.GetValue();
	public AGameModeBase                                      AuthorityGameMode                                              => _offAuthorityGameMode.GetValue();
	public AGameStateBase                                     GameState                                                      => _offGameState.GetValue();
	public UAISystemBase                                      AISystem                                                       => _offAISystem.GetValue();
	public UAvoidanceManager                                  AvoidanceManager                                               => _offAvoidanceManager.GetValue();
	public TArray<ULevel>                                     Levels                                                         => _offLevels.GetValue();
	public TArray<FLevelCollection>                           LevelCollections                                               => _offLevelCollections.GetValue();
	public UGameInstance                                      OwningGameInstance                                             => _offOwningGameInstance.GetValue();
	public TArray<UMaterialParameterCollectionInstance>       ParameterCollectionInstances                                   => _offParameterCollectionInstances.GetValue();
	public UCanvas                                            CanvasForRenderingToTarget                                     => _offCanvasForRenderingToTarget.GetValue();
	public UCanvas                                            CanvasForDrawMaterialToRenderTarget                            => _offCanvasForDrawMaterialToRenderTarget.GetValue();
	public TArray<UActorComponent>                            ComponentsThatNeedEndOfFrameUpdate                             => _offComponentsThatNeedEndOfFrameUpdate.GetValue();
	public TArray<UActorComponent>                            ComponentsThatNeedEndOfFrameUpdate_OnGameThread                => _offComponentsThatNeedEndOfFrameUpdate_OnGameThread.GetValue();
	public UWorldComposition                                  WorldComposition                                               => _offWorldComposition.GetValue();
	public FWorldPSCPool                                      PSCPool                                                        => _offPSCPool.GetValue();
	#endregion


}

// Class Engine.LevelStreaming
// 0x00E8 (0x0110 - 0x0028)
public class ULevelStreaming : UObject
{
	#region Offsets
	private ExternalOffset<FName>                             _offPackageNameToLoad                                          = new ExternalOffset<FName>(0x0050, false);                    // 0x0050(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offLODPackageNames                                            = new ExternalOffset<TArray<FName>>(0x0058, false);            // 0x0058(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FTransform>                        _offLevelTransform                                             = new ExternalOffset<FTransform>(0x0080, false);               // 0x0080(0x0030) (Edit, BlueprintVisible, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offLevelLODIndex                                              = new ExternalOffset<int>(0x00B0);                             // 0x00B0(0x0004) (BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                               _offStreamingPriority                                          = new ExternalOffset<int>(0x00B4);                             // 0x00B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbShouldBeVisible                                           = new ExternalOffset<char>(0x00BA, false);                     // 0x00BA(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbShouldBeLoaded                                            = new ExternalOffset<char>(0x00BA, false);                     // 0x00BA(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbLocked                                                    = new ExternalOffset<char>(0x00BA, false);                     // 0x00BA(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsStatic                                                  = new ExternalOffset<char>(0x00BA, false);                     // 0x00BA(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldBlockOnLoad                                         = new ExternalOffset<char>(0x00BA, false);                     // 0x00BA(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldBlockOnUnload                                       = new ExternalOffset<char>(0x00BB, false);                     // 0x00BB(0x0001) BIT_FIELD (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableDistanceStreaming                                  = new ExternalOffset<char>(0x00BB, false);                     // 0x00BB(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDrawOnLevelStatusMap                                      = new ExternalOffset<char>(0x00BB, false);                     // 0x00BB(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offLevelColor                                                 = new ExternalOffset<FLinearColor>(0x00BC, false);             // 0x00BC(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<ALevelStreamingVolume>>     _offEditorStreamingVolumes                                     = new ExternalOffset<TArray<ALevelStreamingVolume>>(0x00D0, false); // 0x00D0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinTimeBetweenVolumeUnloadRequests                         = new ExternalOffset<float>(0x00E0);                           // 0x00E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnLevelLoaded                                              = new ExternalOffset<FScriptMulticastDelegate>(0x00E8, false); // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnLevelUnloaded                                            = new ExternalOffset<FScriptMulticastDelegate>(0x00F8, false); // 0x00F8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnLevelShown                                               = new ExternalOffset<FScriptMulticastDelegate>(0x0108, false); // 0x0108(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnLevelHidden                                              = new ExternalOffset<FScriptMulticastDelegate>(0x0118, false); // 0x0118(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<ULevel>                            _offLoadedLevel                                                = new ExternalOffset<ULevel>(0x0128, true);                    // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<ULevel>                            _offPendingUnloadLevel                                         = new ExternalOffset<ULevel>(0x0130, true);                    // 0x0130(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FName                                              PackageNameToLoad                                              => _offPackageNameToLoad.GetValue();
	public TArray<FName>                                      LODPackageNames                                                => _offLODPackageNames.GetValue();
	public FTransform                                         LevelTransform                                                 => _offLevelTransform.GetValue();
	public int                                                LevelLODIndex                                                  => _offLevelLODIndex.GetValue();
	public int                                                StreamingPriority                                              => _offStreamingPriority.GetValue();
	public FLinearColor                                       LevelColor                                                     => _offLevelColor.GetValue();
	public TArray<ALevelStreamingVolume>                      EditorStreamingVolumes                                         => _offEditorStreamingVolumes.GetValue();
	public float                                              MinTimeBetweenVolumeUnloadRequests                             => _offMinTimeBetweenVolumeUnloadRequests.GetValue();
	public FScriptMulticastDelegate                           OnLevelLoaded                                                  => _offOnLevelLoaded.GetValue();
	public FScriptMulticastDelegate                           OnLevelUnloaded                                                => _offOnLevelUnloaded.GetValue();
	public FScriptMulticastDelegate                           OnLevelShown                                                   => _offOnLevelShown.GetValue();
	public FScriptMulticastDelegate                           OnLevelHidden                                                  => _offOnLevelHidden.GetValue();
	public ULevel                                             LoadedLevel                                                    => _offLoadedLevel.GetValue();
	public ULevel                                             PendingUnloadLevel                                             => _offPendingUnloadLevel.GetValue();
	#endregion


}

// Class Engine.LevelStreamingAlwaysLoaded
// 0x0040 (0x0150 - 0x0110)
public class ULevelStreamingAlwaysLoaded : ULevelStreaming
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LevelStreamingDynamic
// 0x0040 (0x0150 - 0x0110)
public class ULevelStreamingDynamic : ULevelStreaming
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LevelStreamingPersistent
// 0x0040 (0x0150 - 0x0110)
public class ULevelStreamingPersistent : ULevelStreaming
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LevelStreamingVolume
// 0x0015 (0x0295 - 0x0280)
public class ALevelStreamingVolume : AVolume
{
	#region Offsets
	private ExternalOffset<TArray<FName>>                     _offStreamingLevelNames                                        = new ExternalOffset<TArray<FName>>(0x0280, false);            // 0x0280(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEditorPreVisOnly                                          = new ExternalOffset<char>(0x0290, false);                     // 0x0290(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisabled                                                  = new ExternalOffset<char>(0x0290, false);                     // 0x0290(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EStreamingVolumeUsage>> _offStreamingUsage                                             = new ExternalOffset<TEnumAsByte<EStreamingVolumeUsage>>(0x0294, false); // 0x0294(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FName>                                      StreamingLevelNames                                            => _offStreamingLevelNames.GetValue();
	public TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage                                                 => _offStreamingUsage.GetValue();
	#endregion


}

// Class Engine.LightmappedSurfaceCollection
// 0x0018 (0x0040 - 0x0028)
public class ULightmappedSurfaceCollection : UObject
{
	#region Offsets
	private ExternalOffset<UModel>                            _offSourceModel                                                = new ExternalOffset<UModel>(0x0028, true);                    // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                       _offSurfaces                                                   = new ExternalOffset<TArray<int>>(0x0030, false);              // 0x0030(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UModel                                             SourceModel                                                    => _offSourceModel.GetValue();
	public TArray<int>                                        Surfaces                                                       => _offSurfaces.GetValue();
	#endregion


}

// Class Engine.LightMapTexture2D
// 0x001C (0x0100 - 0x00E4)
public class ULightMapTexture2D : UTexture2D
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x0280 - 0x0280)
public class ALightmassCharacterIndirectDetailVolume : AVolume
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LightmassImportanceVolume
// 0x0000 (0x0280 - 0x0280)
public class ALightmassImportanceVolume : AVolume
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LightmassPortal
// 0x0018 (0x0250 - 0x0238)
public class ALightmassPortal : AActor
{
	#region Offsets
	private ExternalOffset<ULightmassPortalComponent>         _offPortalComponent                                            = new ExternalOffset<ULightmassPortalComponent>(0x0248, true); // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public ULightmassPortalComponent                          PortalComponent                                                => _offPortalComponent.GetValue();
	#endregion


}

// Class Engine.LightmassPortalComponent
// 0x00A0 (0x0220 - 0x0180)
public class ULightmassPortalComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<UBoxComponent>                     _offPreviewBox                                                 = new ExternalOffset<UBoxComponent>(0x0218, true);             // 0x0218(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UBoxComponent                                      PreviewBox                                                     => _offPreviewBox.GetValue();
	#endregion


}

// Class Engine.LightmassPrimitiveSettingsObject
// 0x0018 (0x0040 - 0x0028)
public class ULightmassPrimitiveSettingsObject : UObject
{
	#region Offsets
	private ExternalOffset<FLightmassPrimitiveSettings>       _offLightmassSettings                                          = new ExternalOffset<FLightmassPrimitiveSettings>(0x0028, false); // 0x0028(0x0018) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FLightmassPrimitiveSettings                        LightmassSettings                                              => _offLightmassSettings.GetValue();
	#endregion


}

// Class Engine.LineBatchComponent
// 0x000B (0x0410 - 0x0405)
public class ULineBatchComponent : UPrimitiveComponent
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LocalLightComponent
// 0x00A0 (0x0370 - 0x02D0)
public class ULocalLightComponent : ULightComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offRadius                                                     = new ExternalOffset<float>(0x035C);                           // 0x035C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAttenuationRadius                                          = new ExternalOffset<float>(0x0360);                           // 0x0360(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLightmassPointLightSettings>      _offLightmassSettings                                          = new ExternalOffset<FLightmassPointLightSettings>(0x0364, false); // 0x0364(0x000C) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Radius                                                         => _offRadius.GetValue();
	public float                                              AttenuationRadius                                              => _offAttenuationRadius.GetValue();
	public FLightmassPointLightSettings                       LightmassSettings                                              => _offLightmassSettings.GetValue();
	#endregion


}

// Class Engine.LocalPlayerSubsystem
// 0x0008 (0x0030 - 0x0028)
public class ULocalPlayerSubsystem : USubsystem
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LODActor
// 0x0091 (0x02C9 - 0x0238)
public class ALODActor : AActor
{
	#region Offsets
	private ExternalOffset<UStaticMeshComponent>              _offStaticMeshComponent                                        = new ExternalOffset<UStaticMeshComponent>(0x0248, true);      // 0x0248(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private TMap<class UMaterialInterface*, class UInstancedStaticMeshComponent*> _offImpostersStaticMeshComponents                              = new ExternalOffset<TMap<UInstancedStaticMeshComponent>>(0x0250, false); // 0x0250(0x0050) (Edit, ExportObject, ZeroConstructor, EditConst, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	private ExternalOffset<UHLODProxy>                        _offProxy                                                      = new ExternalOffset<UHLODProxy>(0x02A0, true);                // 0x02A0(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                             _offKey                                                        = new ExternalOffset<FName>(0x02A8, false);                    // 0x02A8(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offLODDrawDistance                                            = new ExternalOffset<float>(0x02B0);                           // 0x02B0(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                               _offLODLevel                                                   = new ExternalOffset<int>(0x02B4);                             // 0x02B4(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offSubActors                                                  = new ExternalOffset<TArray<AActor>>(0x02B8, false);           // 0x02B8(0x0010) (Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offCachedNumHLODLevels                                        = new ExternalOffset<char>(0x02C8, false);                     // 0x02C8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UStaticMeshComponent                               StaticMeshComponent                                            => _offStaticMeshComponent.GetValue();
	public UHLODProxy                                         Proxy                                                          => _offProxy.GetValue();
	public FName                                              Key                                                            => _offKey.GetValue();
	public float                                              LODDrawDistance                                                => _offLODDrawDistance.GetValue();
	public int                                                LODLevel                                                       => _offLODLevel.GetValue();
	public TArray<AActor>                                     SubActors                                                      => _offSubActors.GetValue();
	#endregion


}

// Class Engine.MapBuildDataRegistry
// 0x0001 (0x0029 - 0x0028)
public class UMapBuildDataRegistry : UObject
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ELightingBuildQuality>> _offLevelLightingQuality                                       = new ExternalOffset<TEnumAsByte<ELightingBuildQuality>>(0x0028, false); // 0x0028(0x0001) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality                                           => _offLevelLightingQuality.GetValue();
	#endregion


}

// Class Engine.Material
// 0x0228 (0x02B0 - 0x0088)
public class UMaterial : UMaterialInterface
{
	#region Offsets
	private ExternalOffset<UPhysicalMaterial>                 _offPhysMaterial                                               = new ExternalOffset<UPhysicalMaterial>(0x0088, true);         // 0x0088(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScalarMaterialInput>              _offMetallic                                                   = new ExternalOffset<FScalarMaterialInput>(0x0090, false);     // 0x0090(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScalarMaterialInput>              _offSpecular                                                   = new ExternalOffset<FScalarMaterialInput>(0x00A4, false);     // 0x00A4(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVectorMaterialInput>              _offNormal                                                     = new ExternalOffset<FVectorMaterialInput>(0x00B8, false);     // 0x00B8(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FColorMaterialInput>               _offEmissiveColor                                              = new ExternalOffset<FColorMaterialInput>(0x00CC, false);      // 0x00CC(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialDomain>>      _offMaterialDomain                                             = new ExternalOffset<TEnumAsByte<EMaterialDomain>>(0x00E0, false); // 0x00E0(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBlendMode>>           _offBlendMode                                                  = new ExternalOffset<TEnumAsByte<EBlendMode>>(0x00E1, false);  // 0x00E1(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EDecalBlendMode>>      _offDecalBlendMode                                             = new ExternalOffset<TEnumAsByte<EDecalBlendMode>>(0x00E2, false); // 0x00E2(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialDecalResponse>> _offMaterialDecalResponse                                      = new ExternalOffset<TEnumAsByte<EMaterialDecalResponse>>(0x00E3, false); // 0x00E3(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialShadingModel>> _offShadingModel                                               = new ExternalOffset<TEnumAsByte<EMaterialShadingModel>>(0x00E4, false); // 0x00E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FMaterialShadingModelField>        _offShadingModels                                              = new ExternalOffset<FMaterialShadingModelField>(0x00E6, false); // 0x00E6(0x0002) (NoDestructor, AssetRegistrySearchable, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offOpacityMaskClipValue                                       = new ExternalOffset<float>(0x00E8);                           // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastDynamicShadowAsMasked                                 = new ExternalOffset<char>(0x00EC, false);                     // 0x00EC(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVectorMaterialInput>              _offWorldPositionOffset                                        = new ExternalOffset<FVectorMaterialInput>(0x00F0, false);     // 0x00F0(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScalarMaterialInput>              _offRefraction                                                 = new ExternalOffset<FScalarMaterialInput>(0x0104, false);     // 0x0104(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialAttributesInput>          _offMaterialAttributes                                         = new ExternalOffset<FMaterialAttributesInput>(0x0118, false); // 0x0118(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScalarMaterialInput>              _offPixelDepthOffset                                           = new ExternalOffset<FScalarMaterialInput>(0x0130, false);     // 0x0130(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FShadingModelMaterialInput>        _offShadingModelFromMaterialExpression                         = new ExternalOffset<FShadingModelMaterialInput>(0x0144, false); // 0x0144(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableSeparateTranslucency                                = new ExternalOffset<char>(0x0158, false);                     // 0x0158(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableMobileSeparateTranslucency                          = new ExternalOffset<char>(0x0158, false);                     // 0x0158(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableResponsiveAA                                        = new ExternalOffset<char>(0x0158, false);                     // 0x0158(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbScreenSpaceReflections                                    = new ExternalOffset<char>(0x0158, false);                     // 0x0158(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbContactShadows                                            = new ExternalOffset<char>(0x0158, false);                     // 0x0158(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offTwoSided                                                   = new ExternalOffset<char>(0x0158, false);                     // 0x0158(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offDitheredLODTransition                                      = new ExternalOffset<char>(0x0158, false);                     // 0x0158(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offDitherOpacityMask                                          = new ExternalOffset<char>(0x0158, false);                     // 0x0158(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowNegativeEmissiveColor                                = new ExternalOffset<char>(0x0159, false);                     // 0x0159(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumCustomizedUVs                                           = new ExternalOffset<int>(0x015C);                             // 0x015C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETranslucencyLightingMode>> _offTranslucencyLightingMode                                   = new ExternalOffset<TEnumAsByte<ETranslucencyLightingMode>>(0x0160, false); // 0x0160(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTranslucencyDirectionalLightingIntensity                   = new ExternalOffset<float>(0x0164);                           // 0x0164(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offAllowTranslucentCustomDepthWrites                          = new ExternalOffset<char>(0x0168, false);                     // 0x0168(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTranslucentShadowDensityScale                              = new ExternalOffset<float>(0x016C);                           // 0x016C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTranslucentSelfShadowDensityScale                          = new ExternalOffset<float>(0x0170);                           // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTranslucentSelfShadowSecondDensityScale                    = new ExternalOffset<float>(0x0174);                           // 0x0174(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTranslucentSelfShadowSecondOpacity                         = new ExternalOffset<float>(0x0178);                           // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTranslucentBackscatteringExponent                          = new ExternalOffset<float>(0x017C);                           // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offTranslucentMultipleScatteringExtinction                    = new ExternalOffset<FLinearColor>(0x0180, false);             // 0x0180(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTranslucentShadowStartOffset                               = new ExternalOffset<float>(0x0190);                           // 0x0190(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableDepthTest                                          = new ExternalOffset<char>(0x0194, false);                     // 0x0194(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbWriteOnlyAlpha                                            = new ExternalOffset<char>(0x0194, false);                     // 0x0194(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGenerateSphericalParticleNormals                          = new ExternalOffset<char>(0x0194, false);                     // 0x0194(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTangentSpaceNormal                                        = new ExternalOffset<char>(0x0194, false);                     // 0x0194(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseEmissiveForDynamicAreaLighting                         = new ExternalOffset<char>(0x0194, false);                     // 0x0194(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbBlockGI                                                   = new ExternalOffset<char>(0x0194, false);                     // 0x0194(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedAsSpecialEngineMaterial                               = new ExternalOffset<char>(0x0194, false);                     // 0x0194(0x0001) BIT_FIELD (DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithSkeletalMesh                                      = new ExternalOffset<char>(0x0194, false);                     // 0x0194(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithEditorCompositing                                 = new ExternalOffset<char>(0x0195, false);                     // 0x0195(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithParticleSprites                                   = new ExternalOffset<char>(0x0195, false);                     // 0x0195(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithBeamTrails                                        = new ExternalOffset<char>(0x0195, false);                     // 0x0195(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithMeshParticles                                     = new ExternalOffset<char>(0x0195, false);                     // 0x0195(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithNiagaraSprites                                    = new ExternalOffset<char>(0x0195, false);                     // 0x0195(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithNiagaraRibbons                                    = new ExternalOffset<char>(0x0195, false);                     // 0x0195(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithNiagaraMeshParticles                              = new ExternalOffset<char>(0x0195, false);                     // 0x0195(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithGeometryCache                                     = new ExternalOffset<char>(0x0195, false);                     // 0x0195(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithStaticLighting                                    = new ExternalOffset<char>(0x0196, false);                     // 0x0196(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithMorphTargets                                      = new ExternalOffset<char>(0x0196, false);                     // 0x0196(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithSplineMeshes                                      = new ExternalOffset<char>(0x0196, false);                     // 0x0196(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithInstancedStaticMeshes                             = new ExternalOffset<char>(0x0196, false);                     // 0x0196(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithGeometryCollections                               = new ExternalOffset<char>(0x0196, false);                     // 0x0196(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsesDistortion                                            = new ExternalOffset<char>(0x0196, false);                     // 0x0196(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithClothing                                          = new ExternalOffset<char>(0x0196, false);                     // 0x0196(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsedWithUI                                                = new ExternalOffset<char>(0x0196, false);                     // 0x0196(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutomaticallySetUsageInEditor                             = new ExternalOffset<char>(0x0197, false);                     // 0x0197(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFullyRough                                                = new ExternalOffset<char>(0x0197, false);                     // 0x0197(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseFullPrecision                                          = new ExternalOffset<char>(0x0197, false);                     // 0x0197(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseLightmapDirectionality                                 = new ExternalOffset<char>(0x0197, false);                     // 0x0197(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseHQForwardReflections                                   = new ExternalOffset<char>(0x0197, false);                     // 0x0197(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsePlanarForwardReflections                               = new ExternalOffset<char>(0x0197, false);                     // 0x0197(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNormalCurvatureToRoughness                                = new ExternalOffset<char>(0x0197, false);                     // 0x0197(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialTessellationMode>> _offD3D11TessellationMode                                      = new ExternalOffset<TEnumAsByte<EMaterialTessellationMode>>(0x0198, false); // 0x0198(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableCrackFreeDisplacement                               = new ExternalOffset<char>(0x019C, false);                     // 0x019C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableAdaptiveTessellation                                = new ExternalOffset<char>(0x019C, false);                     // 0x019C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxDisplacement                                            = new ExternalOffset<float>(0x01A0);                           // 0x01A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offWireframe                                                  = new ExternalOffset<char>(0x01A4, false);                     // 0x01A4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOutputVelocityOnBasePass                                  = new ExternalOffset<char>(0x01A4, false);                     // 0x01A4(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UMaterialExpression>>       _offExpressions                                                = new ExternalOffset<TArray<UMaterialExpression>>(0x01A8, false); // 0x01A8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FMaterialFunctionInfo>>     _offMaterialFunctionInfos                                      = new ExternalOffset<TArray<FMaterialFunctionInfo>>(0x01B8, false); // 0x01B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FMaterialParameterCollectionInfo>> _offMaterialParameterCollectionInfos                           = new ExternalOffset<TArray<FMaterialParameterCollectionInfo>>(0x01C8, false); // 0x01C8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCanMaskedBeAssumedOpaque                                  = new ExternalOffset<char>(0x01D8, false);                     // 0x01D8(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsMasked                                                  = new ExternalOffset<char>(0x01D8, false);                     // 0x01D8(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsPreviewMaterial                                         = new ExternalOffset<char>(0x01D8, false);                     // 0x01D8(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsFunctionPreviewMaterial                                 = new ExternalOffset<char>(0x01D8, false);                     // 0x01D8(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseMaterialAttributes                                     = new ExternalOffset<char>(0x01D8, false);                     // 0x01D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCastRayTracedShadows                                      = new ExternalOffset<char>(0x01D8, false);                     // 0x01D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseTranslucencyVertexFog                                  = new ExternalOffset<char>(0x01D8, false);                     // 0x01D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbComputeFogPerPixel                                        = new ExternalOffset<char>(0x01D8, false);                     // 0x01D8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOutputTranslucentVelocity                                 = new ExternalOffset<char>(0x01D9, false);                     // 0x01D9(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowDevelopmentShaderCompile                             = new ExternalOffset<char>(0x01D9, false);                     // 0x01D9(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsMaterialEditorStatsMaterial                             = new ExternalOffset<char>(0x01D9, false);                     // 0x01D9(0x0001) BIT_FIELD (Transient, DuplicateTransient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offUsageFlagWarnings                                          = new ExternalOffset<uint>(0x01DC);                            // 0x01DC(0x0004) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBlendableLocation>>   _offBlendableLocation                                          = new ExternalOffset<TEnumAsByte<EBlendableLocation>>(0x01E0, false); // 0x01E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offBlendablePriority                                          = new ExternalOffset<int>(0x01E4);                             // 0x01E4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offBlendableOutputAlpha                                       = new ExternalOffset<byte/*(bool)*/>(0x01E8);                  // 0x01E8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableStencilTest                                         = new ExternalOffset<char>(0x01E9, false);                     // 0x01E9(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialStencilCompare>> _offStencilCompare                                             = new ExternalOffset<TEnumAsByte<EMaterialStencilCompare>>(0x01EA, false); // 0x01EA(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offStencilRefValue                                            = new ExternalOffset<char>(0x01EB, false);                     // 0x01EB(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ERefractionMode>>      _offRefractionMode                                             = new ExternalOffset<TEnumAsByte<ERefractionMode>>(0x01EC, false); // 0x01EC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRefractionDepthBias                                        = new ExternalOffset<float>(0x01F0);                           // 0x01F0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offStateId                                                    = new ExternalOffset<FGuid>(0x01F4, false);                    // 0x01F4(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<bool>>                      _offCachedQualityLevelsUsed                                    = new ExternalOffset<TArray<bool>>(0x0210, false);             // 0x0210(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<UObject>>                   _offExpressionTextureReferences                                = new ExternalOffset<TArray<UObject>>(0x02A0, false);          // 0x02A0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UPhysicalMaterial                                  PhysMaterial                                                   => _offPhysMaterial.GetValue();
	public FScalarMaterialInput                               Metallic                                                       => _offMetallic.GetValue();
	public FScalarMaterialInput                               Specular                                                       => _offSpecular.GetValue();
	public FVectorMaterialInput                               Normal                                                         => _offNormal.GetValue();
	public FColorMaterialInput                                EmissiveColor                                                  => _offEmissiveColor.GetValue();
	public TEnumAsByte<EMaterialDomain>                       MaterialDomain                                                 => _offMaterialDomain.GetValue();
	public TEnumAsByte<EBlendMode>                            BlendMode                                                      => _offBlendMode.GetValue();
	public TEnumAsByte<EDecalBlendMode>                       DecalBlendMode                                                 => _offDecalBlendMode.GetValue();
	public TEnumAsByte<EMaterialDecalResponse>                MaterialDecalResponse                                          => _offMaterialDecalResponse.GetValue();
	public TEnumAsByte<EMaterialShadingModel>                 ShadingModel                                                   => _offShadingModel.GetValue();
	public FMaterialShadingModelField                         ShadingModels                                                  => _offShadingModels.GetValue();
	public float                                              OpacityMaskClipValue                                           => _offOpacityMaskClipValue.GetValue();
	public FVectorMaterialInput                               WorldPositionOffset                                            => _offWorldPositionOffset.GetValue();
	public FScalarMaterialInput                               Refraction                                                     => _offRefraction.GetValue();
	public FMaterialAttributesInput                           MaterialAttributes                                             => _offMaterialAttributes.GetValue();
	public FScalarMaterialInput                               PixelDepthOffset                                               => _offPixelDepthOffset.GetValue();
	public FShadingModelMaterialInput                         ShadingModelFromMaterialExpression                             => _offShadingModelFromMaterialExpression.GetValue();
	public int                                                NumCustomizedUVs                                               => _offNumCustomizedUVs.GetValue();
	public TEnumAsByte<ETranslucencyLightingMode>             TranslucencyLightingMode                                       => _offTranslucencyLightingMode.GetValue();
	public float                                              TranslucencyDirectionalLightingIntensity                       => _offTranslucencyDirectionalLightingIntensity.GetValue();
	public float                                              TranslucentShadowDensityScale                                  => _offTranslucentShadowDensityScale.GetValue();
	public float                                              TranslucentSelfShadowDensityScale                              => _offTranslucentSelfShadowDensityScale.GetValue();
	public float                                              TranslucentSelfShadowSecondDensityScale                        => _offTranslucentSelfShadowSecondDensityScale.GetValue();
	public float                                              TranslucentSelfShadowSecondOpacity                             => _offTranslucentSelfShadowSecondOpacity.GetValue();
	public float                                              TranslucentBackscatteringExponent                              => _offTranslucentBackscatteringExponent.GetValue();
	public FLinearColor                                       TranslucentMultipleScatteringExtinction                        => _offTranslucentMultipleScatteringExtinction.GetValue();
	public float                                              TranslucentShadowStartOffset                                   => _offTranslucentShadowStartOffset.GetValue();
	public TEnumAsByte<EMaterialTessellationMode>             D3D11TessellationMode                                          => _offD3D11TessellationMode.GetValue();
	public float                                              MaxDisplacement                                                => _offMaxDisplacement.GetValue();
	public TArray<UMaterialExpression>                        Expressions                                                    => _offExpressions.GetValue();
	public TArray<FMaterialFunctionInfo>                      MaterialFunctionInfos                                          => _offMaterialFunctionInfos.GetValue();
	public TArray<FMaterialParameterCollectionInfo>           MaterialParameterCollectionInfos                               => _offMaterialParameterCollectionInfos.GetValue();
	public uint                                               UsageFlagWarnings                                              => _offUsageFlagWarnings.GetValue();
	public TEnumAsByte<EBlendableLocation>                    BlendableLocation                                              => _offBlendableLocation.GetValue();
	public int                                                BlendablePriority                                              => _offBlendablePriority.GetValue();
	public byte/*(bool)*/                                     BlendableOutputAlpha                                           => _offBlendableOutputAlpha.GetValue();
	public TEnumAsByte<EMaterialStencilCompare>               StencilCompare                                                 => _offStencilCompare.GetValue();
	public TEnumAsByte<ERefractionMode>                       RefractionMode                                                 => _offRefractionMode.GetValue();
	public float                                              RefractionDepthBias                                            => _offRefractionDepthBias.GetValue();
	public FGuid                                              StateId                                                        => _offStateId.GetValue();
	public TArray<bool>                                       CachedQualityLevelsUsed                                        => _offCachedQualityLevelsUsed.GetValue();
	public TArray<UObject>                                    ExpressionTextureReferences                                    => _offExpressionTextureReferences.GetValue();
	#endregion


}

// Class Engine.MaterialBillboardComponent
// 0x0013 (0x0418 - 0x0405)
public class UMaterialBillboardComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<TArray<FMaterialSpriteElement>>    _offElements                                                   = new ExternalOffset<TArray<FMaterialSpriteElement>>(0x0408, false); // 0x0408(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FMaterialSpriteElement>                     Elements                                                       => _offElements.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionAbs
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionAbs : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionActorPositionWS
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionActorPositionWS : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionAdd
// 0x0037 (0x0070 - 0x0039)
public class UMaterialExpressionAdd : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstA                                                     = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstB                                                     = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public float                                              ConstA                                                         => _offConstA.GetValue();
	public float                                              ConstB                                                         => _offConstB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTextureBase
// 0x0014 (0x004D - 0x0039)
public class UMaterialExpressionTextureBase : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<UTexture>                          _offTexture                                                    = new ExternalOffset<UTexture>(0x0040, true);                  // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialSamplerType>> _offSamplerType                                                = new ExternalOffset<TEnumAsByte<EMaterialSamplerType>>(0x0048, false); // 0x0048(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offIsDefaultMeshpaintTexture                                  = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTexture                                           Texture                                                        => _offTexture.GetValue();
	public TEnumAsByte<EMaterialSamplerType>                  SamplerType                                                    => _offSamplerType.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTextureSample
// 0x0088 (0x00D5 - 0x004D)
public class UMaterialExpressionTextureSample : UMaterialExpressionTextureBase
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCoordinates                                                = new ExternalOffset<FExpressionInput>(0x0050, false);         // 0x0050(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offTextureObject                                              = new ExternalOffset<FExpressionInput>(0x0064, false);         // 0x0064(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offMipValue                                                   = new ExternalOffset<FExpressionInput>(0x0078, false);         // 0x0078(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offCoordinatesDX                                              = new ExternalOffset<FExpressionInput>(0x008C, false);         // 0x008C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offCoordinatesDY                                              = new ExternalOffset<FExpressionInput>(0x00A0, false);         // 0x00A0(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offAutomaticViewMipBiasValue                                  = new ExternalOffset<FExpressionInput>(0x00B4, false);         // 0x00B4(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureMipValueMode>> _offMipValueMode                                               = new ExternalOffset<TEnumAsByte<ETextureMipValueMode>>(0x00C8, false); // 0x00C8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESamplerSourceMode>>   _offSamplerSource                                              = new ExternalOffset<TEnumAsByte<ESamplerSourceMode>>(0x00C9, false); // 0x00C9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offConstCoordinate                                            = new ExternalOffset<uint>(0x00CC);                            // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offConstMipValue                                              = new ExternalOffset<int>(0x00D0);                             // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offAutomaticViewMipBias                                       = new ExternalOffset<char>(0x00D4, false);                     // 0x00D4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Coordinates                                                    => _offCoordinates.GetValue();
	public FExpressionInput                                   TextureObject                                                  => _offTextureObject.GetValue();
	public FExpressionInput                                   MipValue                                                       => _offMipValue.GetValue();
	public FExpressionInput                                   CoordinatesDX                                                  => _offCoordinatesDX.GetValue();
	public FExpressionInput                                   CoordinatesDY                                                  => _offCoordinatesDY.GetValue();
	public FExpressionInput                                   AutomaticViewMipBiasValue                                      => _offAutomaticViewMipBiasValue.GetValue();
	public TEnumAsByte<ETextureMipValueMode>                  MipValueMode                                                   => _offMipValueMode.GetValue();
	public TEnumAsByte<ESamplerSourceMode>                    SamplerSource                                                  => _offSamplerSource.GetValue();
	public uint                                               ConstCoordinate                                                => _offConstCoordinate.GetValue();
	public int                                                ConstMipValue                                                  => _offConstMipValue.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTextureSampleParameter
// 0x002B (0x0100 - 0x00D5)
public class UMaterialExpressionTextureSampleParameter : UMaterialExpressionTextureSample
{
	#region Offsets
	private ExternalOffset<FName>                             _offParameterName                                              = new ExternalOffset<FName>(0x00E0, false);                    // 0x00E0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x00E8, false);                    // 0x00E8(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offGroup                                                      = new ExternalOffset<FName>(0x00F8, false);                    // 0x00F8(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              ParameterName                                                  => _offParameterName.GetValue();
	public FGuid                                              ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	public FName                                              Group                                                          => _offGroup.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x0100 - 0x0100)
public class UMaterialExpressionTextureSampleParameter2D : UMaterialExpressionTextureSampleParameter
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0005 (0x0105 - 0x0100)
public class UMaterialExpressionAntialiasedTextureMask : UMaterialExpressionTextureSampleParameter2D
{
	#region Offsets
	private ExternalOffset<float>                             _offThreshold                                                  = new ExternalOffset<float>(0x0100);                           // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETextureColorChannel>> _offChannel                                                    = new ExternalOffset<TEnumAsByte<ETextureColorChannel>>(0x0104, false); // 0x0104(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Threshold                                                      => _offThreshold.GetValue();
	public TEnumAsByte<ETextureColorChannel>                  Channel                                                        => _offChannel.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionAppendVector
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionAppendVector : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionArccosine
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionArccosine : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionArccosineFast
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionArccosineFast : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionArcsine
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionArcsine : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionArcsineFast
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionArcsineFast : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionArctangent
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionArctangent : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionArctangent2
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionArctangent2 : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offY                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offX                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Y                                                              => _offY.GetValue();
	public FExpressionInput                                   X                                                              => _offX.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionArctangent2Fast
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionArctangent2Fast : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offY                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offX                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Y                                                              => _offY.GetValue();
	public FExpressionInput                                   X                                                              => _offX.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionArctangentFast
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionArctangentFast : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionAtmosphericFogColor
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionAtmosphericFogColor : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offWorldPosition                                              = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   WorldPosition                                                  => _offWorldPosition.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionAtmosphericLightColor
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionAtmosphericLightColor : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionAtmosphericLightVector
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionAtmosphericLightVector : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionBentNormalCustomOutput
// 0x000C (0x004C - 0x0040)
public class UMaterialExpressionBentNormalCustomOutput : UMaterialExpressionCustomOutput
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionBlackBody
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionBlackBody : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offTemp                                                       = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Temp                                                           => _offTemp.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionBlendMaterialAttributes
// 0x004D (0x0086 - 0x0039)
public class UMaterialExpressionBlendMaterialAttributes : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FMaterialAttributesInput>          _offA                                                          = new ExternalOffset<FMaterialAttributesInput>(0x0040, false); // 0x0040(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialAttributesInput>          _offB                                                          = new ExternalOffset<FMaterialAttributesInput>(0x0058, false); // 0x0058(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offAlpha                                                      = new ExternalOffset<FExpressionInput>(0x0070, false);         // 0x0070(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialAttributeBlend>> _offPixelAttributeBlendType                                    = new ExternalOffset<TEnumAsByte<EMaterialAttributeBlend>>(0x0084, false); // 0x0084(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialAttributeBlend>> _offVertexAttributeBlendType                                   = new ExternalOffset<TEnumAsByte<EMaterialAttributeBlend>>(0x0085, false); // 0x0085(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialAttributesInput                           A                                                              => _offA.GetValue();
	public FMaterialAttributesInput                           B                                                              => _offB.GetValue();
	public FExpressionInput                                   Alpha                                                          => _offAlpha.GetValue();
	public TEnumAsByte<EMaterialAttributeBlend>               PixelAttributeBlendType                                        => _offPixelAttributeBlendType.GetValue();
	public TEnumAsByte<EMaterialAttributeBlend>               VertexAttributeBlendType                                       => _offVertexAttributeBlendType.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionBreakMaterialAttributes
// 0x0017 (0x0050 - 0x0039)
public class UMaterialExpressionBreakMaterialAttributes : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FMaterialAttributesInput>          _offMaterialAttributes                                         = new ExternalOffset<FMaterialAttributesInput>(0x0040, false); // 0x0040(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialAttributesInput                           MaterialAttributes                                             => _offMaterialAttributes.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionBumpOffset
// 0x004F (0x0088 - 0x0039)
public class UMaterialExpressionBumpOffset : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCoordinate                                                 = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offHeight                                                     = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offHeightRatioInput                                           = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offHeightRatio                                                = new ExternalOffset<float>(0x007C);                           // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offReferencePlane                                             = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offConstCoordinate                                            = new ExternalOffset<uint>(0x0084);                            // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Coordinate                                                     => _offCoordinate.GetValue();
	public FExpressionInput                                   Height                                                         => _offHeight.GetValue();
	public FExpressionInput                                   HeightRatioInput                                               => _offHeightRatioInput.GetValue();
	public float                                              HeightRatio                                                    => _offHeightRatio.GetValue();
	public float                                              ReferencePlane                                                 => _offReferencePlane.GetValue();
	public uint                                               ConstCoordinate                                                => _offConstCoordinate.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionCameraPositionWS
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionCameraPositionWS : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionCameraVectorWS
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionCameraVectorWS : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionCeil
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionCeil : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionParameter
// 0x001F (0x0058 - 0x0039)
public class UMaterialExpressionParameter : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FName>                             _offParameterName                                              = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0048, false);                    // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              ParameterName                                                  => _offParameterName.GetValue();
	public FGuid                                              ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionVectorParameter
// 0x0012 (0x006A - 0x0058)
public class UMaterialExpressionVectorParameter : UMaterialExpressionParameter
{
	#region Offsets
	private ExternalOffset<FLinearColor>                      _offDefaultValue                                               = new ExternalOffset<FLinearColor>(0x0058, false);             // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseCustomPrimitiveData                                    = new ExternalOffset<byte/*(bool)*/>(0x0068);                  // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offPrimitiveDataIndex                                         = new ExternalOffset<char>(0x0069, false);                     // 0x0069(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FLinearColor                                       DefaultValue                                                   => _offDefaultValue.GetValue();
	public byte/*(bool)*/                                     bUseCustomPrimitiveData                                        => _offbUseCustomPrimitiveData.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionChannelMaskParameter
// 0x0016 (0x0080 - 0x006A)
public class UMaterialExpressionChannelMaskParameter : UMaterialExpressionVectorParameter
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EChannelMaskParameterColor>> _offMaskChannel                                                = new ExternalOffset<TEnumAsByte<EChannelMaskParameterColor>>(0x0070, false); // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0074, false);         // 0x0074(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EChannelMaskParameterColor>            MaskChannel                                                    => _offMaskChannel.GetValue();
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionClamp
// 0x004F (0x0088 - 0x0039)
public class UMaterialExpressionClamp : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offMin                                                        = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offMax                                                        = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EClampMode>>           _offClampMode                                                  = new ExternalOffset<TEnumAsByte<EClampMode>>(0x007C, false);  // 0x007C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinDefault                                                 = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxDefault                                                 = new ExternalOffset<float>(0x0084);                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public FExpressionInput                                   Min                                                            => _offMin.GetValue();
	public FExpressionInput                                   Max                                                            => _offMax.GetValue();
	public TEnumAsByte<EClampMode>                            ClampMode                                                      => _offClampMode.GetValue();
	public float                                              MinDefault                                                     => _offMinDefault.GetValue();
	public float                                              MaxDefault                                                     => _offMaxDefault.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionClearCoatNormalCustomOutput
// 0x000C (0x004C - 0x0040)
public class UMaterialExpressionClearCoatNormalCustomOutput : UMaterialExpressionCustomOutput
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionCollectionParameter
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionCollectionParameter : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<UMaterialParameterCollection>      _offCollection                                                 = new ExternalOffset<UMaterialParameterCollection>(0x0040, true); // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offParameterName                                              = new ExternalOffset<FName>(0x0048, false);                    // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offParameterId                                                = new ExternalOffset<FGuid>(0x0050, false);                    // 0x0050(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialParameterCollection                       Collection                                                     => _offCollection.GetValue();
	public FName                                              ParameterName                                                  => _offParameterName.GetValue();
	public FGuid                                              ParameterId                                                    => _offParameterId.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionComment
// 0x0033 (0x006C - 0x0039)
public class UMaterialExpressionComment : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<int>                               _offSizeX                                                      = new ExternalOffset<int>(0x0040);                             // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSizeY                                                      = new ExternalOffset<int>(0x0044);                             // 0x0044(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offText                                                       = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offCommentColor                                               = new ExternalOffset<FLinearColor>(0x0058, false);             // 0x0058(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offFontSize                                                   = new ExternalOffset<int>(0x0068);                             // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                SizeX                                                          => _offSizeX.GetValue();
	public int                                                SizeY                                                          => _offSizeY.GetValue();
	public FString                                            Text                                                           => _offText.GetValue();
	public FLinearColor                                       CommentColor                                                   => _offCommentColor.GetValue();
	public int                                                FontSize                                                       => _offFontSize.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionComponentMask
// 0x001C (0x0055 - 0x0039)
public class UMaterialExpressionComponentMask : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offR                                                          = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offG                                                          = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offB                                                          = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offA                                                          = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionConstant
// 0x000B (0x0044 - 0x0039)
public class UMaterialExpressionConstant : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<float>                             _offR                                                          = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              R                                                              => _offR.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionConstant2Vector
// 0x000F (0x0048 - 0x0039)
public class UMaterialExpressionConstant2Vector : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<float>                             _offR                                                          = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offG                                                          = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              R                                                              => _offR.GetValue();
	public float                                              G                                                              => _offG.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionConstant3Vector
// 0x0017 (0x0050 - 0x0039)
public class UMaterialExpressionConstant3Vector : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FLinearColor>                      _offConstant                                                   = new ExternalOffset<FLinearColor>(0x0040, false);             // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FLinearColor                                       Constant                                                       => _offConstant.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionConstant4Vector
// 0x0017 (0x0050 - 0x0039)
public class UMaterialExpressionConstant4Vector : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FLinearColor>                      _offConstant                                                   = new ExternalOffset<FLinearColor>(0x0040, false);             // 0x0040(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FLinearColor                                       Constant                                                       => _offConstant.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionConstantBiasScale
// 0x0023 (0x005C - 0x0039)
public class UMaterialExpressionConstantBiasScale : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBias                                                       = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offScale                                                      = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public float                                              Bias                                                           => _offBias.GetValue();
	public float                                              Scale                                                          => _offScale.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionCosine
// 0x001F (0x0058 - 0x0039)
public class UMaterialExpressionCosine : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPeriod                                                     = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public float                                              Period                                                         => _offPeriod.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionCrossProduct
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionCrossProduct : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionScalarParameter
// 0x0006 (0x005E - 0x0058)
public class UMaterialExpressionScalarParameter : UMaterialExpressionParameter
{
	#region Offsets
	private ExternalOffset<float>                             _offDefaultValue                                               = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseCustomPrimitiveData                                    = new ExternalOffset<byte/*(bool)*/>(0x005C);                  // 0x005C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offPrimitiveDataIndex                                         = new ExternalOffset<char>(0x005D, false);                     // 0x005D(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              DefaultValue                                                   => _offDefaultValue.GetValue();
	public byte/*(bool)*/                                     bUseCustomPrimitiveData                                        => _offbUseCustomPrimitiveData.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionCurveAtlasRowParameter
// 0x001E (0x007C - 0x005E)
public class UMaterialExpressionCurveAtlasRowParameter : UMaterialExpressionScalarParameter
{
	#region Offsets
	private ExternalOffset<UCurveLinearColor>                 _offCurve                                                      = new ExternalOffset<UCurveLinearColor>(0x0060, true);         // 0x0060(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UCurveLinearColorAtlas>            _offAtlas                                                      = new ExternalOffset<UCurveLinearColorAtlas>(0x0068, true);    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offInputTime                                                  = new ExternalOffset<FExpressionInput>(0x0070, false);         // 0x0070(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCurveLinearColor                                  Curve                                                          => _offCurve.GetValue();
	public UCurveLinearColorAtlas                             Atlas                                                          => _offAtlas.GetValue();
	public FExpressionInput                                   InputTime                                                      => _offInputTime.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionCustom
// 0x003F (0x0078 - 0x0039)
public class UMaterialExpressionCustom : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FString>                           _offcode                                                       = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECustomMaterialOutputType>> _offOutputType                                                 = new ExternalOffset<TEnumAsByte<ECustomMaterialOutputType>>(0x0050, false); // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offDescription                                                = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FCustomInput>>              _offInputs                                                     = new ExternalOffset<TArray<FCustomInput>>(0x0068, false);     // 0x0068(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            code                                                           => _offcode.GetValue();
	public TEnumAsByte<ECustomMaterialOutputType>             OutputType                                                     => _offOutputType.GetValue();
	public FString                                            Description                                                    => _offDescription.GetValue();
	public TArray<FCustomInput>                               Inputs                                                         => _offInputs.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDDX
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionDDX : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offValue                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Value                                                          => _offValue.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDDY
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionDDY : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offValue                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Value                                                          => _offValue.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDecalDerivative
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionDecalDerivative : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionDecalLifetimeOpacity
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionDecalLifetimeOpacity : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionDecalMipmapLevel
// 0x0023 (0x005C - 0x0039)
public class UMaterialExpressionDecalMipmapLevel : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offTextureSize                                                = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstWidth                                                 = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstHeight                                                = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   TextureSize                                                    => _offTextureSize.GetValue();
	public float                                              ConstWidth                                                     => _offConstWidth.GetValue();
	public float                                              ConstHeight                                                    => _offConstHeight.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDeltaTime
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionDeltaTime : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionDepthFade
// 0x0037 (0x0070 - 0x0039)
public class UMaterialExpressionDepthFade : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInOpacity                                                  = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offFadeDistance                                               = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOpacityDefault                                             = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFadeDistanceDefault                                        = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   InOpacity                                                      => _offInOpacity.GetValue();
	public FExpressionInput                                   FadeDistance                                                   => _offFadeDistance.GetValue();
	public float                                              OpacityDefault                                                 => _offOpacityDefault.GetValue();
	public float                                              FadeDistanceDefault                                            => _offFadeDistanceDefault.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0017 (0x0050 - 0x0039)
public class UMaterialExpressionDepthOfFieldFunction : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EDepthOfFieldFunctionValue>> _offFunctionValue                                              = new ExternalOffset<TEnumAsByte<EDepthOfFieldFunctionValue>>(0x0040, false); // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offDepth                                                      = new ExternalOffset<FExpressionInput>(0x0044, false);         // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue                                                  => _offFunctionValue.GetValue();
	public FExpressionInput                                   Depth                                                          => _offDepth.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDeriveNormalZ
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionDeriveNormalZ : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInXY                                                       = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   InXY                                                           => _offInXY.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDesaturation
// 0x003F (0x0078 - 0x0039)
public class UMaterialExpressionDesaturation : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offFraction                                                   = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offLuminanceFactors                                           = new ExternalOffset<FLinearColor>(0x0068, false);             // 0x0068(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public FExpressionInput                                   Fraction                                                       => _offFraction.GetValue();
	public FLinearColor                                       LuminanceFactors                                               => _offLuminanceFactors.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDistance
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionDistance : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDistanceCullFade
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionDistanceCullFade : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionDistanceFieldGradient
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionDistanceFieldGradient : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offPosition                                                   = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Position                                                       => _offPosition.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDistanceToNearestSurface
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionDistanceToNearestSurface : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offPosition                                                   = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Position                                                       => _offPosition.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDivide
// 0x0037 (0x0070 - 0x0039)
public class UMaterialExpressionDivide : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstA                                                     = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstB                                                     = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public float                                              ConstA                                                         => _offConstA.GetValue();
	public float                                              ConstB                                                         => _offConstB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDotProduct
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionDotProduct : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionDynamicParameter
// 0x002B (0x0064 - 0x0039)
public class UMaterialExpressionDynamicParameter : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<TArray<FString>>                   _offParamNames                                                 = new ExternalOffset<TArray<FString>>(0x0040, false);          // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offDefaultValue                                               = new ExternalOffset<FLinearColor>(0x0050, false);             // 0x0050(0x0010) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offParameterIndex                                             = new ExternalOffset<uint>(0x0060);                            // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FString>                                    ParamNames                                                     => _offParamNames.GetValue();
	public FLinearColor                                       DefaultValue                                                   => _offDefaultValue.GetValue();
	public uint                                               ParameterIndex                                                 => _offParameterIndex.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionEyeAdaptation
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionEyeAdaptation : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionFeatureLevelSwitch
// 0x004B (0x0084 - 0x0039)
public class UMaterialExpressionFeatureLevelSwitch : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offDefault                                                    = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<FExpressionInput>                  _offInputs[0x4]                                                = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Default                                                        => _offDefault.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionFloor
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionFloor : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionFmod
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionFmod : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionFontSample
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionFontSample : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<UFont>                             _offFont                                                       = new ExternalOffset<UFont>(0x0040, true);                     // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offFontTexturePage                                            = new ExternalOffset<int>(0x0048);                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UFont                                              Font                                                           => _offFont.GetValue();
	public int                                                FontTexturePage                                                => _offFontTexturePage.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionFontSampleParameter
// 0x0024 (0x0070 - 0x004C)
public class UMaterialExpressionFontSampleParameter : UMaterialExpressionFontSample
{
	#region Offsets
	private ExternalOffset<FName>                             _offParameterName                                              = new ExternalOffset<FName>(0x0050, false);                    // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0058, false);                    // 0x0058(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offGroup                                                      = new ExternalOffset<FName>(0x0068, false);                    // 0x0068(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              ParameterName                                                  => _offParameterName.GetValue();
	public FGuid                                              ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	public FName                                              Group                                                          => _offGroup.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionFrac
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionFrac : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionFresnel
// 0x0043 (0x007C - 0x0039)
public class UMaterialExpressionFresnel : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offExponentIn                                                 = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offExponent                                                   = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offBaseReflectFractionIn                                      = new ExternalOffset<FExpressionInput>(0x0058, false);         // 0x0058(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBaseReflectFraction                                        = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offNormal                                                     = new ExternalOffset<FExpressionInput>(0x0070, false);         // 0x0070(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   ExponentIn                                                     => _offExponentIn.GetValue();
	public float                                              Exponent                                                       => _offExponent.GetValue();
	public FExpressionInput                                   BaseReflectFractionIn                                          => _offBaseReflectFractionIn.GetValue();
	public float                                              BaseReflectFraction                                            => _offBaseReflectFraction.GetValue();
	public FExpressionInput                                   Normal                                                         => _offNormal.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionFunctionInput
// 0x0070 (0x00A9 - 0x0039)
public class UMaterialExpressionFunctionInput : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offPreview                                                    = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offInputName                                                  = new ExternalOffset<FName>(0x0054, false);                    // 0x0054(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offDescription                                                = new ExternalOffset<FString>(0x0060, false);                  // 0x0060(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offID                                                         = new ExternalOffset<FGuid>(0x0070, false);                    // 0x0070(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EFunctionInputType>>   _offInputType                                                  = new ExternalOffset<TEnumAsByte<EFunctionInputType>>(0x0080, false); // 0x0080(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector4>                          _offPreviewValue                                               = new ExternalOffset<FVector4>(0x0090, false);                 // 0x0090(0x0010) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsePreviewValueAsDefault                                  = new ExternalOffset<char>(0x00A0, false);                     // 0x00A0(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSortPriority                                               = new ExternalOffset<int>(0x00A4);                             // 0x00A4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCompilingFunctionPreview                                  = new ExternalOffset<char>(0x00A8, false);                     // 0x00A8(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Preview                                                        => _offPreview.GetValue();
	public FName                                              InputName                                                      => _offInputName.GetValue();
	public FString                                            Description                                                    => _offDescription.GetValue();
	public FGuid                                              ID                                                             => _offID.GetValue();
	public TEnumAsByte<EFunctionInputType>                    InputType                                                      => _offInputType.GetValue();
	public FVector4                                           PreviewValue                                                   => _offPreviewValue.GetValue();
	public int                                                SortPriority                                                   => _offSortPriority.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionFunctionOutput
// 0x004B (0x0084 - 0x0039)
public class UMaterialExpressionFunctionOutput : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FName>                             _offOutputName                                                 = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offDescription                                                = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSortPriority                                               = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x005C, false);         // 0x005C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLastPreviewed                                             = new ExternalOffset<char>(0x0070, false);                     // 0x0070(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offID                                                         = new ExternalOffset<FGuid>(0x0074, false);                    // 0x0074(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              OutputName                                                     => _offOutputName.GetValue();
	public FString                                            Description                                                    => _offDescription.GetValue();
	public int                                                SortPriority                                                   => _offSortPriority.GetValue();
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FGuid                                              ID                                                             => _offID.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionGetMaterialAttributes
// 0x002F (0x0068 - 0x0039)
public class UMaterialExpressionGetMaterialAttributes : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FMaterialAttributesInput>          _offMaterialAttributes                                         = new ExternalOffset<FMaterialAttributesInput>(0x0040, false); // 0x0040(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FGuid>>                     _offAttributeGetTypes                                          = new ExternalOffset<TArray<FGuid>>(0x0058, false);            // 0x0058(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FMaterialAttributesInput                           MaterialAttributes                                             => _offMaterialAttributes.GetValue();
	public TArray<FGuid>                                      AttributeGetTypes                                              => _offAttributeGetTypes.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionGIReplace
// 0x003B (0x0074 - 0x0039)
public class UMaterialExpressionGIReplace : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offDefault                                                    = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offStaticIndirect                                             = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offDynamicIndirect                                            = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Default                                                        => _offDefault.GetValue();
	public FExpressionInput                                   StaticIndirect                                                 => _offStaticIndirect.GetValue();
	public FExpressionInput                                   DynamicIndirect                                                => _offDynamicIndirect.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionIf
// 0x0077 (0x00B0 - 0x0039)
public class UMaterialExpressionIf : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offAGreaterThanB                                              = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offAEqualsB                                                   = new ExternalOffset<FExpressionInput>(0x007C, false);         // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offALessThanB                                                 = new ExternalOffset<FExpressionInput>(0x0090, false);         // 0x0090(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEqualsThreshold                                            = new ExternalOffset<float>(0x00A4);                           // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstB                                                     = new ExternalOffset<float>(0x00A8);                           // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstAEqualsB                                              = new ExternalOffset<float>(0x00AC);                           // 0x00AC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public FExpressionInput                                   AGreaterThanB                                                  => _offAGreaterThanB.GetValue();
	public FExpressionInput                                   AEqualsB                                                       => _offAEqualsB.GetValue();
	public FExpressionInput                                   ALessThanB                                                     => _offALessThanB.GetValue();
	public float                                              EqualsThreshold                                                => _offEqualsThreshold.GetValue();
	public float                                              ConstB                                                         => _offConstB.GetValue();
	public float                                              ConstAEqualsB                                                  => _offConstAEqualsB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionLightmapUVs
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionLightmapUVs : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionLightmassReplace
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionLightmassReplace : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offRealtime                                                   = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offLightmass                                                  = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Realtime                                                       => _offRealtime.GetValue();
	public FExpressionInput                                   Lightmass                                                      => _offLightmass.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionLightVector
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionLightVector : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionLinearInterpolate
// 0x004F (0x0088 - 0x0039)
public class UMaterialExpressionLinearInterpolate : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offAlpha                                                      = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstA                                                     = new ExternalOffset<float>(0x007C);                           // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstB                                                     = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstAlpha                                                 = new ExternalOffset<float>(0x0084);                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public FExpressionInput                                   Alpha                                                          => _offAlpha.GetValue();
	public float                                              ConstA                                                         => _offConstA.GetValue();
	public float                                              ConstB                                                         => _offConstB.GetValue();
	public float                                              ConstAlpha                                                     => _offConstAlpha.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionLogarithm10
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionLogarithm10 : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offX                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   X                                                              => _offX.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionLogarithm2
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionLogarithm2 : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offX                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   X                                                              => _offX.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionMakeMaterialAttributes
// 0x0207 (0x0240 - 0x0039)
public class UMaterialExpressionMakeMaterialAttributes : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offBaseColor                                                  = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offMetallic                                                   = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offSpecular                                                   = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offRoughness                                                  = new ExternalOffset<FExpressionInput>(0x007C, false);         // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offEmissiveColor                                              = new ExternalOffset<FExpressionInput>(0x0090, false);         // 0x0090(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offOpacity                                                    = new ExternalOffset<FExpressionInput>(0x00A4, false);         // 0x00A4(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offOpacityMask                                                = new ExternalOffset<FExpressionInput>(0x00B8, false);         // 0x00B8(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offNormal                                                     = new ExternalOffset<FExpressionInput>(0x00CC, false);         // 0x00CC(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offWorldPositionOffset                                        = new ExternalOffset<FExpressionInput>(0x00E0, false);         // 0x00E0(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offWorldDisplacement                                          = new ExternalOffset<FExpressionInput>(0x00F4, false);         // 0x00F4(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offTessellationMultiplier                                     = new ExternalOffset<FExpressionInput>(0x0108, false);         // 0x0108(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offSubsurfaceColor                                            = new ExternalOffset<FExpressionInput>(0x011C, false);         // 0x011C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offClearCoat                                                  = new ExternalOffset<FExpressionInput>(0x0130, false);         // 0x0130(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offClearCoatRoughness                                         = new ExternalOffset<FExpressionInput>(0x0144, false);         // 0x0144(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offAmbientOcclusion                                           = new ExternalOffset<FExpressionInput>(0x0158, false);         // 0x0158(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offRefraction                                                 = new ExternalOffset<FExpressionInput>(0x016C, false);         // 0x016C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<FExpressionInput>                  _offCustomizedUVs[0x8]                                         = new ExternalOffset<FExpressionInput>(0x0180, false);         // 0x0180(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offPixelDepthOffset                                           = new ExternalOffset<FExpressionInput>(0x0220, false);         // 0x0220(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offShadingModel                                               = new ExternalOffset<FExpressionInput>(0x0234, false);         // 0x0234(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   BaseColor                                                      => _offBaseColor.GetValue();
	public FExpressionInput                                   Metallic                                                       => _offMetallic.GetValue();
	public FExpressionInput                                   Specular                                                       => _offSpecular.GetValue();
	public FExpressionInput                                   Roughness                                                      => _offRoughness.GetValue();
	public FExpressionInput                                   EmissiveColor                                                  => _offEmissiveColor.GetValue();
	public FExpressionInput                                   Opacity                                                        => _offOpacity.GetValue();
	public FExpressionInput                                   OpacityMask                                                    => _offOpacityMask.GetValue();
	public FExpressionInput                                   Normal                                                         => _offNormal.GetValue();
	public FExpressionInput                                   WorldPositionOffset                                            => _offWorldPositionOffset.GetValue();
	public FExpressionInput                                   WorldDisplacement                                              => _offWorldDisplacement.GetValue();
	public FExpressionInput                                   TessellationMultiplier                                         => _offTessellationMultiplier.GetValue();
	public FExpressionInput                                   SubsurfaceColor                                                => _offSubsurfaceColor.GetValue();
	public FExpressionInput                                   ClearCoat                                                      => _offClearCoat.GetValue();
	public FExpressionInput                                   ClearCoatRoughness                                             => _offClearCoatRoughness.GetValue();
	public FExpressionInput                                   AmbientOcclusion                                               => _offAmbientOcclusion.GetValue();
	public FExpressionInput                                   Refraction                                                     => _offRefraction.GetValue();
	public FExpressionInput                                   PixelDepthOffset                                               => _offPixelDepthOffset.GetValue();
	public FExpressionInput                                   ShadingModel                                                   => _offShadingModel.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionMapARPassthroughCameraUV
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionMapARPassthroughCameraUV : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCoordinates                                                = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Coordinates                                                    => _offCoordinates.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionMaterialAttributeLayers
// 0x00A4 (0x00DD - 0x0039)
public class UMaterialExpressionMaterialAttributeLayers : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FName>                             _offParameterName                                              = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offExpressionGUID                                             = new ExternalOffset<FGuid>(0x0048, false);                    // 0x0048(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialAttributesInput>          _offInput                                                      = new ExternalOffset<FMaterialAttributesInput>(0x0058, false); // 0x0058(0x0010) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialLayersFunctions>          _offDefaultLayers                                              = new ExternalOffset<FMaterialLayersFunctions>(0x0070, false); // 0x0070(0x0040) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UMaterialExpressionMaterialFunctionCall>> _offLayerCallers                                               = new ExternalOffset<TArray<UMaterialExpressionMaterialFunctionCall>>(0x00B0, false); // 0x00B0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumActiveLayerCallers                                      = new ExternalOffset<int>(0x00C0);                             // 0x00C0(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UMaterialExpressionMaterialFunctionCall>> _offBlendCallers                                               = new ExternalOffset<TArray<UMaterialExpressionMaterialFunctionCall>>(0x00C8, false); // 0x00C8(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumActiveBlendCallers                                      = new ExternalOffset<int>(0x00D8);                             // 0x00D8(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsLayerGraphBuilt                                         = new ExternalOffset<byte/*(bool)*/>(0x00DC);                  // 0x00DC(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              ParameterName                                                  => _offParameterName.GetValue();
	public FGuid                                              ExpressionGUID                                                 => _offExpressionGUID.GetValue();
	public FMaterialAttributesInput                           Input                                                          => _offInput.GetValue();
	public FMaterialLayersFunctions                           DefaultLayers                                                  => _offDefaultLayers.GetValue();
	public TArray<UMaterialExpressionMaterialFunctionCall>    LayerCallers                                                   => _offLayerCallers.GetValue();
	public int                                                NumActiveLayerCallers                                          => _offNumActiveLayerCallers.GetValue();
	public TArray<UMaterialExpressionMaterialFunctionCall>    BlendCallers                                                   => _offBlendCallers.GetValue();
	public int                                                NumActiveBlendCallers                                          => _offNumActiveBlendCallers.GetValue();
	public byte/*(bool)*/                                     bIsLayerGraphBuilt                                             => _offbIsLayerGraphBuilt.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x001F (0x0058 - 0x0039)
public class UMaterialExpressionMaterialFunctionCall : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<UMaterialFunctionInterface>        _offMaterialFunction                                           = new ExternalOffset<UMaterialFunctionInterface>(0x0040, true); // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMaterialParameterInfo>            _offFunctionParameterInfo                                      = new ExternalOffset<FMaterialParameterInfo>(0x0048, false);   // 0x0048(0x0010) (Transient, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialFunctionInterface                         MaterialFunction                                               => _offMaterialFunction.GetValue();
	public FMaterialParameterInfo                             FunctionParameterInfo                                          => _offFunctionParameterInfo.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionMaterialLayerOutput
// 0x0004 (0x0088 - 0x0084)
public class UMaterialExpressionMaterialLayerOutput : UMaterialExpressionFunctionOutput
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionMaterialProxyReplace
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionMaterialProxyReplace : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offRealtime                                                   = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offMaterialProxy                                              = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Realtime                                                       => _offRealtime.GetValue();
	public FExpressionInput                                   MaterialProxy                                                  => _offMaterialProxy.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionMax
// 0x0037 (0x0070 - 0x0039)
public class UMaterialExpressionMax : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstA                                                     = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstB                                                     = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public float                                              ConstA                                                         => _offConstA.GetValue();
	public float                                              ConstB                                                         => _offConstB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionMin
// 0x0037 (0x0070 - 0x0039)
public class UMaterialExpressionMin : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstA                                                     = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstB                                                     = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public float                                              ConstA                                                         => _offConstA.GetValue();
	public float                                              ConstB                                                         => _offConstB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionMultiply
// 0x0037 (0x0070 - 0x0039)
public class UMaterialExpressionMultiply : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstA                                                     = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstB                                                     = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public float                                              ConstA                                                         => _offConstA.GetValue();
	public float                                              ConstB                                                         => _offConstB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionNoise
// 0x0057 (0x0090 - 0x0039)
public class UMaterialExpressionNoise : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offPosition                                                   = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offFilterWidth                                                = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offScale                                                      = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offQuality                                                    = new ExternalOffset<int>(0x006C);                             // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ENoiseFunction>>       _offNoiseFunction                                              = new ExternalOffset<TEnumAsByte<ENoiseFunction>>(0x0070, false); // 0x0070(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTurbulence                                                = new ExternalOffset<char>(0x0074, false);                     // 0x0074(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offLevels                                                     = new ExternalOffset<int>(0x0078);                             // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOutputMin                                                  = new ExternalOffset<float>(0x007C);                           // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOutputMax                                                  = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLevelScale                                                 = new ExternalOffset<float>(0x0084);                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTiling                                                    = new ExternalOffset<char>(0x0088, false);                     // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offRepeatSize                                                 = new ExternalOffset<uint>(0x008C);                            // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Position                                                       => _offPosition.GetValue();
	public FExpressionInput                                   FilterWidth                                                    => _offFilterWidth.GetValue();
	public float                                              Scale                                                          => _offScale.GetValue();
	public int                                                Quality                                                        => _offQuality.GetValue();
	public TEnumAsByte<ENoiseFunction>                        NoiseFunction                                                  => _offNoiseFunction.GetValue();
	public int                                                Levels                                                         => _offLevels.GetValue();
	public float                                              OutputMin                                                      => _offOutputMin.GetValue();
	public float                                              OutputMax                                                      => _offOutputMax.GetValue();
	public float                                              LevelScale                                                     => _offLevelScale.GetValue();
	public uint                                               RepeatSize                                                     => _offRepeatSize.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionNormalize
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionNormalize : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offVectorInput                                                = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   VectorInput                                                    => _offVectorInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionObjectBounds
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionObjectBounds : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionObjectOrientation
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionObjectOrientation : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionObjectPositionWS
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionObjectPositionWS : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionObjectRadius
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionObjectRadius : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionOneMinus
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionOneMinus : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionPanner
// 0x0050 (0x0089 - 0x0039)
public class UMaterialExpressionPanner : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCoordinate                                                 = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offTime                                                       = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offSpeed                                                      = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpeedX                                                     = new ExternalOffset<float>(0x007C);                           // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpeedY                                                     = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offConstCoordinate                                            = new ExternalOffset<uint>(0x0084);                            // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbFractionalPart                                            = new ExternalOffset<byte/*(bool)*/>(0x0088);                  // 0x0088(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Coordinate                                                     => _offCoordinate.GetValue();
	public FExpressionInput                                   Time                                                           => _offTime.GetValue();
	public FExpressionInput                                   Speed                                                          => _offSpeed.GetValue();
	public float                                              SpeedX                                                         => _offSpeedX.GetValue();
	public float                                              SpeedY                                                         => _offSpeedY.GetValue();
	public uint                                               ConstCoordinate                                                => _offConstCoordinate.GetValue();
	public byte/*(bool)*/                                     bFractionalPart                                                => _offbFractionalPart.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionParticleColor
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticleColor : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticleDirection
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticleDirection : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticleMacroUV
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticleMacroUV : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticleMotionBlurFade
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticleMotionBlurFade : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticlePositionWS
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticlePositionWS : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticleRadius
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticleRadius : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticleRandom
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticleRandom : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticleRelativeTime
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticleRelativeTime : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticleSize
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticleSize : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticleSpeed
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionParticleSpeed : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionParticleSubUV
// 0x000C (0x00E1 - 0x00D5)
public class UMaterialExpressionParticleSubUV : UMaterialExpressionTextureSample
{
	#region Offsets
//	private ExternalOffset<char>                              _offbBlend                                                     = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionPerInstanceFadeAmount
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionPerInstanceFadeAmount : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionPerInstanceRandom : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionPixelDepth
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionPixelDepth : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionPixelNormalWS
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionPixelNormalWS : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionPower
// 0x0033 (0x006C - 0x0039)
public class UMaterialExpressionPower : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offBase                                                       = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offExponent                                                   = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstExponent                                              = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Base                                                           => _offBase.GetValue();
	public FExpressionInput                                   Exponent                                                       => _offExponent.GetValue();
	public float                                              ConstExponent                                                  => _offConstExponent.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionPrecomputedAOMask
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionPrecomputedAOMask : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionPreSkinnedLocalBounds
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionPreSkinnedLocalBounds : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionPreSkinnedNormal
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionPreSkinnedNormal : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionPreSkinnedPosition
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionPreSkinnedPosition : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionPreviousFrameSwitch
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionPreviousFrameSwitch : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCurrentFrame                                               = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offPreviousFrame                                              = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   CurrentFrame                                                   => _offCurrentFrame.GetValue();
	public FExpressionInput                                   PreviousFrame                                                  => _offPreviousFrame.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionQualitySwitch
// 0x003F (0x0078 - 0x0039)
public class UMaterialExpressionQualitySwitch : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offDefault                                                    = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<FExpressionInput>                  _offInputs[0x3]                                                = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Default                                                        => _offDefault.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionRayTracingQualitySwitch
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionRayTracingQualitySwitch : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offNormal                                                     = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offRayTraced                                                  = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Normal                                                         => _offNormal.GetValue();
	public FExpressionInput                                   RayTraced                                                      => _offRayTraced.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionReflectionVectorWS
// 0x001C (0x0055 - 0x0039)
public class UMaterialExpressionReflectionVectorWS : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCustomWorldNormal                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNormalizeCustomWorldNormal                                = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   CustomWorldNormal                                              => _offCustomWorldNormal.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionReroute
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionReroute : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionRotateAboutAxis
// 0x005B (0x0094 - 0x0039)
public class UMaterialExpressionRotateAboutAxis : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offNormalizedRotationAxis                                     = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offRotationAngle                                              = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offPivotPoint                                                 = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offPosition                                                   = new ExternalOffset<FExpressionInput>(0x007C, false);         // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPeriod                                                     = new ExternalOffset<float>(0x0090);                           // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   NormalizedRotationAxis                                         => _offNormalizedRotationAxis.GetValue();
	public FExpressionInput                                   RotationAngle                                                  => _offRotationAngle.GetValue();
	public FExpressionInput                                   PivotPoint                                                     => _offPivotPoint.GetValue();
	public FExpressionInput                                   Position                                                       => _offPosition.GetValue();
	public float                                              Period                                                         => _offPeriod.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionRotator
// 0x003F (0x0078 - 0x0039)
public class UMaterialExpressionRotator : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCoordinate                                                 = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offTime                                                       = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCenterX                                                    = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCenterY                                                    = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpeed                                                      = new ExternalOffset<float>(0x0070);                           // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offConstCoordinate                                            = new ExternalOffset<uint>(0x0074);                            // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Coordinate                                                     => _offCoordinate.GetValue();
	public FExpressionInput                                   Time                                                           => _offTime.GetValue();
	public float                                              CenterX                                                        => _offCenterX.GetValue();
	public float                                              CenterY                                                        => _offCenterY.GetValue();
	public float                                              Speed                                                          => _offSpeed.GetValue();
	public uint                                               ConstCoordinate                                                => _offConstCoordinate.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionRound
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionRound : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionRuntimeVirtualTextureOutput
// 0x005C (0x009C - 0x0040)
public class UMaterialExpressionRuntimeVirtualTextureOutput : UMaterialExpressionCustomOutput
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offBaseColor                                                  = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offSpecular                                                   = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offRoughness                                                  = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offNormal                                                     = new ExternalOffset<FExpressionInput>(0x007C, false);         // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offOpacity                                                    = new ExternalOffset<FExpressionInput>(0x0090, false);         // 0x0090(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   BaseColor                                                      => _offBaseColor.GetValue();
	public FExpressionInput                                   Specular                                                       => _offSpecular.GetValue();
	public FExpressionInput                                   Roughness                                                      => _offRoughness.GetValue();
	public FExpressionInput                                   Normal                                                         => _offNormal.GetValue();
	public FExpressionInput                                   Opacity                                                        => _offOpacity.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionRuntimeVirtualTextureReplace
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionRuntimeVirtualTextureReplace : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offDefault                                                    = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offVirtualTextureOutput                                       = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Default                                                        => _offDefault.GetValue();
	public FExpressionInput                                   VirtualTextureOutput                                           => _offVirtualTextureOutput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionRuntimeVirtualTextureSample
// 0x0028 (0x0061 - 0x0039)
public class UMaterialExpressionRuntimeVirtualTextureSample : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCoordinates                                                = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<URuntimeVirtualTexture>            _offVirtualTexture                                             = new ExternalOffset<URuntimeVirtualTexture>(0x0058, true);    // 0x0058(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ERuntimeVirtualTextureMaterialType> _offMaterialType                                               = new ExternalOffset<ERuntimeVirtualTextureMaterialType>(0x0060, false); // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Coordinates                                                    => _offCoordinates.GetValue();
	public URuntimeVirtualTexture                             VirtualTexture                                                 => _offVirtualTexture.GetValue();
	public ERuntimeVirtualTextureMaterialType                 MaterialType                                                   => _offMaterialType.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSaturate
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionSaturate : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSceneColor
// 0x003B (0x0074 - 0x0039)
public class UMaterialExpressionSceneColor : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EMaterialSceneAttributeInputMode>> _offInputMode                                                  = new ExternalOffset<TEnumAsByte<EMaterialSceneAttributeInputMode>>(0x0040, false); // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0044, false);         // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offOffsetFraction                                             = new ExternalOffset<FExpressionInput>(0x0058, false);         // 0x0058(0x000C) (Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                         _offConstInput                                                 = new ExternalOffset<FVector2D>(0x006C, false);                // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode                                                      => _offInputMode.GetValue();
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public FExpressionInput                                   OffsetFraction                                                 => _offOffsetFraction.GetValue();
	public FVector2D                                          ConstInput                                                     => _offConstInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSceneDepth
// 0x003B (0x0074 - 0x0039)
public class UMaterialExpressionSceneDepth : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EMaterialSceneAttributeInputMode>> _offInputMode                                                  = new ExternalOffset<TEnumAsByte<EMaterialSceneAttributeInputMode>>(0x0040, false); // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0044, false);         // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offCoordinates                                                = new ExternalOffset<FExpressionInput>(0x0058, false);         // 0x0058(0x000C) (Deprecated, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                         _offConstInput                                                 = new ExternalOffset<FVector2D>(0x006C, false);                // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EMaterialSceneAttributeInputMode>      InputMode                                                      => _offInputMode.GetValue();
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public FExpressionInput                                   Coordinates                                                    => _offCoordinates.GetValue();
	public FVector2D                                          ConstInput                                                     => _offConstInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSceneTexelSize
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionSceneTexelSize : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionSceneTexture
// 0x001D (0x0056 - 0x0039)
public class UMaterialExpressionSceneTexture : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCoordinates                                                = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESceneTextureId>>      _offSceneTextureId                                             = new ExternalOffset<TEnumAsByte<ESceneTextureId>>(0x0054, false); // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbFiltered                                                  = new ExternalOffset<byte/*(bool)*/>(0x0055);                  // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Coordinates                                                    => _offCoordinates.GetValue();
	public TEnumAsByte<ESceneTextureId>                       SceneTextureId                                                 => _offSceneTextureId.GetValue();
	public byte/*(bool)*/                                     bFiltered                                                      => _offbFiltered.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionScreenPosition
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionScreenPosition : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionSetMaterialAttributes
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionSetMaterialAttributes : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<TArray<FExpressionInput>>          _offInputs                                                     = new ExternalOffset<TArray<FExpressionInput>>(0x0040, false); // 0x0040(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FGuid>>                     _offAttributeSetTypes                                          = new ExternalOffset<TArray<FGuid>>(0x0050, false);            // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FExpressionInput>                           Inputs                                                         => _offInputs.GetValue();
	public TArray<FGuid>                                      AttributeSetTypes                                              => _offAttributeSetTypes.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionShadingModel
// 0x0008 (0x0041 - 0x0039)
public class UMaterialExpressionShadingModel : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EMaterialShadingModel>> _offShadingModel                                               = new ExternalOffset<TEnumAsByte<EMaterialShadingModel>>(0x0040, false); // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EMaterialShadingModel>                 ShadingModel                                                   => _offShadingModel.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionShadingPathSwitch
// 0x003F (0x0078 - 0x0039)
public class UMaterialExpressionShadingPathSwitch : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offDefault                                                    = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<FExpressionInput>                  _offInputs[0x3]                                                = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Default                                                        => _offDefault.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionShadowReplace
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionShadowReplace : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offDefault                                                    = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offShadow                                                     = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Default                                                        => _offDefault.GetValue();
	public FExpressionInput                                   Shadow                                                         => _offShadow.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSign
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionSign : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSine
// 0x001F (0x0058 - 0x0039)
public class UMaterialExpressionSine : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPeriod                                                     = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public float                                              Period                                                         => _offPeriod.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSobol
// 0x004F (0x0088 - 0x0039)
public class UMaterialExpressionSobol : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offCell                                                       = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offIndex                                                      = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offSeed                                                       = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offConstIndex                                                 = new ExternalOffset<uint>(0x007C);                            // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                         _offConstSeed                                                  = new ExternalOffset<FVector2D>(0x0080, false);                // 0x0080(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Cell                                                           => _offCell.GetValue();
	public FExpressionInput                                   Index                                                          => _offIndex.GetValue();
	public FExpressionInput                                   Seed                                                           => _offSeed.GetValue();
	public uint                                               ConstIndex                                                     => _offConstIndex.GetValue();
	public FVector2D                                          ConstSeed                                                      => _offConstSeed.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSpeedTree
// 0x0060 (0x0099 - 0x0039)
public class UMaterialExpressionSpeedTree : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offGeometryInput                                              = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offWindInput                                                  = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offLODInput                                                   = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offExtraBendWS                                                = new ExternalOffset<FExpressionInput>(0x007C, false);         // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESpeedTreeGeometryType>> _offGeometryType                                               = new ExternalOffset<TEnumAsByte<ESpeedTreeGeometryType>>(0x0090, false); // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESpeedTreeWindType>>   _offWindType                                                   = new ExternalOffset<TEnumAsByte<ESpeedTreeWindType>>(0x0091, false); // 0x0091(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESpeedTreeLODType>>    _offLODType                                                    = new ExternalOffset<TEnumAsByte<ESpeedTreeLODType>>(0x0092, false); // 0x0092(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBillboardThreshold                                         = new ExternalOffset<float>(0x0094);                           // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbAccurateWindVelocities                                    = new ExternalOffset<byte/*(bool)*/>(0x0098);                  // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   GeometryInput                                                  => _offGeometryInput.GetValue();
	public FExpressionInput                                   WindInput                                                      => _offWindInput.GetValue();
	public FExpressionInput                                   LODInput                                                       => _offLODInput.GetValue();
	public FExpressionInput                                   ExtraBendWS                                                    => _offExtraBendWS.GetValue();
	public TEnumAsByte<ESpeedTreeGeometryType>                GeometryType                                                   => _offGeometryType.GetValue();
	public TEnumAsByte<ESpeedTreeWindType>                    WindType                                                       => _offWindType.GetValue();
	public TEnumAsByte<ESpeedTreeLODType>                     LODType                                                        => _offLODType.GetValue();
	public float                                              BillboardThreshold                                             => _offBillboardThreshold.GetValue();
	public byte/*(bool)*/                                     bAccurateWindVelocities                                        => _offbAccurateWindVelocities.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSphereMask
// 0x005F (0x0098 - 0x0039)
public class UMaterialExpressionSphereMask : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offRadius                                                     = new ExternalOffset<FExpressionInput>(0x0068, false);         // 0x0068(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offHardness                                                   = new ExternalOffset<FExpressionInput>(0x007C, false);         // 0x007C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAttenuationRadius                                          = new ExternalOffset<float>(0x0090);                           // 0x0090(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offHardnessPercent                                            = new ExternalOffset<float>(0x0094);                           // 0x0094(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public FExpressionInput                                   Radius                                                         => _offRadius.GetValue();
	public FExpressionInput                                   Hardness                                                       => _offHardness.GetValue();
	public float                                              AttenuationRadius                                              => _offAttenuationRadius.GetValue();
	public float                                              HardnessPercent                                                => _offHardnessPercent.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSphericalParticleOpacity
// 0x001F (0x0058 - 0x0039)
public class UMaterialExpressionSphericalParticleOpacity : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offDensity                                                    = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstantDensity                                            = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Density                                                        => _offDensity.GetValue();
	public float                                              ConstantDensity                                                => _offConstantDensity.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSquareRoot
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionSquareRoot : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionStaticBool
// 0x0008 (0x0041 - 0x0039)
public class UMaterialExpressionStaticBool : UMaterialExpression
{
	#region Offsets
//	private ExternalOffset<char>                              _offValue                                                      = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0001 (0x0059 - 0x0058)
public class UMaterialExpressionStaticBoolParameter : UMaterialExpressionParameter
{
	#region Offsets
//	private ExternalOffset<char>                              _offDefaultValue                                               = new ExternalOffset<char>(0x0058, false);                     // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0015 (0x006D - 0x0058)
public class UMaterialExpressionStaticComponentMaskParameter : UMaterialExpressionParameter
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0058, false);         // 0x0058(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offDefaultR                                                   = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offDefaultG                                                   = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offDefaultB                                                   = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offDefaultA                                                   = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionStaticSwitch
// 0x003F (0x0078 - 0x0039)
public class UMaterialExpressionStaticSwitch : UMaterialExpression
{
	#region Offsets
//	private ExternalOffset<char>                              _offDefaultValue                                               = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0044, false);         // 0x0044(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0058, false);         // 0x0058(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offValue                                                      = new ExternalOffset<FExpressionInput>(0x006C, false);         // 0x006C(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public FExpressionInput                                   Value                                                          => _offValue.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0027 (0x0080 - 0x0059)
public class UMaterialExpressionStaticSwitchParameter : UMaterialExpressionStaticBoolParameter
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0060, false);         // 0x0060(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0074, false);         // 0x0074(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionSubtract
// 0x0037 (0x0070 - 0x0039)
public class UMaterialExpressionSubtract : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offA                                                          = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offB                                                          = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstA                                                     = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offConstB                                                     = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   A                                                              => _offA.GetValue();
	public FExpressionInput                                   B                                                              => _offB.GetValue();
	public float                                              ConstA                                                         => _offConstA.GetValue();
	public float                                              ConstB                                                         => _offConstB.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTangent
// 0x001F (0x0058 - 0x0039)
public class UMaterialExpressionTangent : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPeriod                                                     = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public float                                              Period                                                         => _offPeriod.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTangentOutput
// 0x000C (0x004C - 0x0040)
public class UMaterialExpressionTangentOutput : UMaterialExpressionCustomOutput
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTemporalSobol
// 0x003B (0x0074 - 0x0039)
public class UMaterialExpressionTemporalSobol : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offIndex                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offSeed                                                       = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offConstIndex                                                 = new ExternalOffset<uint>(0x0068);                            // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                         _offConstSeed                                                  = new ExternalOffset<FVector2D>(0x006C, false);                // 0x006C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Index                                                          => _offIndex.GetValue();
	public FExpressionInput                                   Seed                                                           => _offSeed.GetValue();
	public uint                                               ConstIndex                                                     => _offConstIndex.GetValue();
	public FVector2D                                          ConstSeed                                                      => _offConstSeed.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTextureCoordinate
// 0x0014 (0x004D - 0x0039)
public class UMaterialExpressionTextureCoordinate : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<int>                               _offCoordinateIndex                                            = new ExternalOffset<int>(0x0040);                             // 0x0040(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offUTiling                                                    = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVTiling                                                    = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offUnMirrorU                                                  = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offUnMirrorV                                                  = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                CoordinateIndex                                                => _offCoordinateIndex.GetValue();
	public float                                              UTiling                                                        => _offUTiling.GetValue();
	public float                                              VTiling                                                        => _offVTiling.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTextureObject
// 0x0003 (0x0050 - 0x004D)
public class UMaterialExpressionTextureObject : UMaterialExpressionTextureBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x0100 - 0x0100)
public class UMaterialExpressionTextureObjectParameter : UMaterialExpressionTextureSampleParameter
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionTextureProperty
// 0x001C (0x0055 - 0x0039)
public class UMaterialExpressionTextureProperty : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offTextureObject                                              = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialExposedTextureProperty>> _offProperty                                                   = new ExternalOffset<TEnumAsByte<EMaterialExposedTextureProperty>>(0x0054, false); // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   TextureObject                                                  => _offTextureObject.GetValue();
	public TEnumAsByte<EMaterialExposedTextureProperty>       Property                                                       => _offProperty.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x0100 - 0x0100)
public class UMaterialExpressionTextureSampleParameterCube : UMaterialExpressionTextureSampleParameter
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0001 (0x0101 - 0x0100)
public class UMaterialExpressionTextureSampleParameterSubUV : UMaterialExpressionTextureSampleParameter2D
{
	#region Offsets
//	private ExternalOffset<char>                              _offbBlend                                                     = new ExternalOffset<char>(0x0100, false);                     // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionTextureSampleParameterVolume
// 0x0000 (0x0100 - 0x0100)
public class UMaterialExpressionTextureSampleParameterVolume : UMaterialExpressionTextureSampleParameter
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionTime
// 0x000F (0x0048 - 0x0039)
public class UMaterialExpressionTime : UMaterialExpression
{
	#region Offsets
//	private ExternalOffset<char>                              _offbIgnorePause                                               = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverride_Period                                           = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPeriod                                                     = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Period                                                         => _offPeriod.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTransform
// 0x001D (0x0056 - 0x0039)
public class UMaterialExpressionTransform : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialVectorCoordTransformSource>> _offTransformSourceType                                        = new ExternalOffset<TEnumAsByte<EMaterialVectorCoordTransformSource>>(0x0054, false); // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialVectorCoordTransform>> _offTransformType                                              = new ExternalOffset<TEnumAsByte<EMaterialVectorCoordTransform>>(0x0055, false); // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType                                            => _offTransformSourceType.GetValue();
	public TEnumAsByte<EMaterialVectorCoordTransform>         TransformType                                                  => _offTransformType.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTransformPosition
// 0x001D (0x0056 - 0x0039)
public class UMaterialExpressionTransformPosition : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialPositionTransformSource>> _offTransformSourceType                                        = new ExternalOffset<TEnumAsByte<EMaterialPositionTransformSource>>(0x0054, false); // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMaterialPositionTransformSource>> _offTransformType                                              = new ExternalOffset<TEnumAsByte<EMaterialPositionTransformSource>>(0x0055, false); // 0x0055(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	public TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType                                            => _offTransformSourceType.GetValue();
	public TEnumAsByte<EMaterialPositionTransformSource>      TransformType                                                  => _offTransformType.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTruncate
// 0x0013 (0x004C - 0x0039)
public class UMaterialExpressionTruncate : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionTwoSidedSign
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionTwoSidedSign : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionVectorNoise
// 0x002B (0x0064 - 0x0039)
public class UMaterialExpressionVectorNoise : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offPosition                                                   = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EVectorNoiseFunction>> _offNoiseFunction                                              = new ExternalOffset<TEnumAsByte<EVectorNoiseFunction>>(0x0054, false); // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offQuality                                                    = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTiling                                                    = new ExternalOffset<char>(0x005C, false);                     // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offTileSize                                                   = new ExternalOffset<uint>(0x0060);                            // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Position                                                       => _offPosition.GetValue();
	public TEnumAsByte<EVectorNoiseFunction>                  NoiseFunction                                                  => _offNoiseFunction.GetValue();
	public int                                                Quality                                                        => _offQuality.GetValue();
	public uint                                               TileSize                                                       => _offTileSize.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionVertexColor
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionVertexColor : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionVertexInterpolator
// 0x000C (0x004C - 0x0040)
public class UMaterialExpressionVertexInterpolator : UMaterialExpressionCustomOutput
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offInput                                                      = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   Input                                                          => _offInput.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionVertexNormalWS
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionVertexNormalWS : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionViewProperty
// 0x0008 (0x0041 - 0x0039)
public class UMaterialExpressionViewProperty : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EMaterialExposedViewProperty>> _offProperty                                                   = new ExternalOffset<TEnumAsByte<EMaterialExposedViewProperty>>(0x0040, false); // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EMaterialExposedViewProperty>          Property                                                       => _offProperty.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionViewSize
// 0x0007 (0x0040 - 0x0039)
public class UMaterialExpressionViewSize : UMaterialExpression
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialExpressionVirtualTextureFeatureSwitch
// 0x0027 (0x0060 - 0x0039)
public class UMaterialExpressionVirtualTextureFeatureSwitch : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<FExpressionInput>                  _offNo                                                         = new ExternalOffset<FExpressionInput>(0x0040, false);         // 0x0040(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FExpressionInput>                  _offYes                                                        = new ExternalOffset<FExpressionInput>(0x0054, false);         // 0x0054(0x000C) (NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FExpressionInput                                   No                                                             => _offNo.GetValue();
	public FExpressionInput                                   Yes                                                            => _offYes.GetValue();
	#endregion


}

// Class Engine.MaterialExpressionWorldPosition
// 0x0008 (0x0041 - 0x0039)
public class UMaterialExpressionWorldPosition : UMaterialExpression
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EWorldPositionIncludedOffsets>> _offWorldPositionShaderOffset                                  = new ExternalOffset<TEnumAsByte<EWorldPositionIncludedOffsets>>(0x0040, false); // 0x0040(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EWorldPositionIncludedOffsets>         WorldPositionShaderOffset                                      => _offWorldPositionShaderOffset.GetValue();
	#endregion


}

// Class Engine.MaterialFunctionInterface
// 0x0011 (0x0039 - 0x0028)
public class UMaterialFunctionInterface : UObject
{
	#region Offsets
	private ExternalOffset<FGuid>                             _offStateId                                                    = new ExternalOffset<FGuid>(0x0028, false);                    // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EMaterialFunctionUsage>            _offMaterialFunctionUsage                                      = new ExternalOffset<EMaterialFunctionUsage>(0x0038, false);   // 0x0038(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FGuid                                              StateId                                                        => _offStateId.GetValue();
	public EMaterialFunctionUsage                             MaterialFunctionUsage                                          => _offMaterialFunctionUsage.GetValue();
	#endregion


}

// Class Engine.MaterialFunction
// 0x0030 (0x0069 - 0x0039)
public class UMaterialFunction : UMaterialFunctionInterface
{
	#region Offsets
	private ExternalOffset<FString>                           _offDescription                                                = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (Edit, ZeroConstructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbExposeToLibrary                                           = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPrefixParameterNames                                      = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UMaterialExpression>>       _offFunctionExpressions                                        = new ExternalOffset<TArray<UMaterialExpression>>(0x0058, false); // 0x0058(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReentrantFlag                                             = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FString                                            Description                                                    => _offDescription.GetValue();
	public TArray<UMaterialExpression>                        FunctionExpressions                                            => _offFunctionExpressions.GetValue();
	#endregion


}

// Class Engine.MaterialFunctionInstance
// 0x0077 (0x00B0 - 0x0039)
public class UMaterialFunctionInstance : UMaterialFunctionInterface
{
	#region Offsets
	private ExternalOffset<UMaterialFunctionInterface>        _offParent                                                     = new ExternalOffset<UMaterialFunctionInterface>(0x0040, true); // 0x0040(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialFunctionInterface>        _offBase                                                       = new ExternalOffset<UMaterialFunctionInterface>(0x0048, true); // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FScalarParameterValue>>     _offScalarParameterValues                                      = new ExternalOffset<TArray<FScalarParameterValue>>(0x0050, false); // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FVectorParameterValue>>     _offVectorParameterValues                                      = new ExternalOffset<TArray<FVectorParameterValue>>(0x0060, false); // 0x0060(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FTextureParameterValue>>    _offTextureParameterValues                                     = new ExternalOffset<TArray<FTextureParameterValue>>(0x0070, false); // 0x0070(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FFontParameterValue>>       _offFontParameterValues                                        = new ExternalOffset<TArray<FFontParameterValue>>(0x0080, false); // 0x0080(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStaticSwitchParameter>>    _offStaticSwitchParameterValues                                = new ExternalOffset<TArray<FStaticSwitchParameter>>(0x0090, false); // 0x0090(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStaticComponentMaskParameter>> _offStaticComponentMaskParameterValues                         = new ExternalOffset<TArray<FStaticComponentMaskParameter>>(0x00A0, false); // 0x00A0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialFunctionInterface                         Parent                                                         => _offParent.GetValue();
	public UMaterialFunctionInterface                         Base                                                           => _offBase.GetValue();
	public TArray<FScalarParameterValue>                      ScalarParameterValues                                          => _offScalarParameterValues.GetValue();
	public TArray<FVectorParameterValue>                      VectorParameterValues                                          => _offVectorParameterValues.GetValue();
	public TArray<FTextureParameterValue>                     TextureParameterValues                                         => _offTextureParameterValues.GetValue();
	public TArray<FFontParameterValue>                        FontParameterValues                                            => _offFontParameterValues.GetValue();
	public TArray<FStaticSwitchParameter>                     StaticSwitchParameterValues                                    => _offStaticSwitchParameterValues.GetValue();
	public TArray<FStaticComponentMaskParameter>              StaticComponentMaskParameterValues                             => _offStaticComponentMaskParameterValues.GetValue();
	#endregion


}

// Class Engine.MaterialFunctionMaterialLayer
// 0x0007 (0x0070 - 0x0069)
public class UMaterialFunctionMaterialLayer : UMaterialFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialFunctionMaterialLayerInstance
// 0x0000 (0x00B0 - 0x00B0)
public class UMaterialFunctionMaterialLayerInstance : UMaterialFunctionInstance
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialFunctionMaterialLayerBlend
// 0x0007 (0x0070 - 0x0069)
public class UMaterialFunctionMaterialLayerBlend : UMaterialFunction
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialFunctionMaterialLayerBlendInstance
// 0x0000 (0x00B0 - 0x00B0)
public class UMaterialFunctionMaterialLayerBlendInstance : UMaterialFunctionInstance
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialInstanceActor
// 0x0020 (0x0258 - 0x0238)
public class AMaterialInstanceActor : AActor
{
	#region Offsets
	private ExternalOffset<TArray<AActor>>                    _offTargetActors                                               = new ExternalOffset<TArray<AActor>>(0x0248, false);           // 0x0248(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<AActor>                                     TargetActors                                                   => _offTargetActors.GetValue();
	#endregion


}

// Class Engine.MaterialInstanceDynamic
// 0x0080 (0x01C8 - 0x0148)
public class UMaterialInstanceDynamic : UMaterialInstance
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MaterialParameterCollection
// 0x0030 (0x0058 - 0x0028)
public class UMaterialParameterCollection : UObject
{
	#region Offsets
	private ExternalOffset<FGuid>                             _offStateId                                                    = new ExternalOffset<FGuid>(0x0028, false);                    // 0x0028(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FCollectionScalarParameter>> _offScalarParameters                                           = new ExternalOffset<TArray<FCollectionScalarParameter>>(0x0038, false); // 0x0038(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FCollectionVectorParameter>> _offVectorParameters                                           = new ExternalOffset<TArray<FCollectionVectorParameter>>(0x0048, false); // 0x0048(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FGuid                                              StateId                                                        => _offStateId.GetValue();
	public TArray<FCollectionScalarParameter>                 ScalarParameters                                               => _offScalarParameters.GetValue();
	public TArray<FCollectionVectorParameter>                 VectorParameters                                               => _offVectorParameters.GetValue();
	#endregion


}

// Class Engine.MaterialParameterCollectionInstance
// 0x0010 (0x0038 - 0x0028)
public class UMaterialParameterCollectionInstance : UObject
{
	#region Offsets
	private ExternalOffset<UMaterialParameterCollection>      _offCollection                                                 = new ExternalOffset<UMaterialParameterCollection>(0x0030, true); // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UMaterialParameterCollection                       Collection                                                     => _offCollection.GetValue();
	#endregion


}

// Class Engine.MatineeActor
// 0x00B0 (0x02E8 - 0x0238)
public class AMatineeActor : AActor
{
	#region Offsets
	private ExternalOffset<UInterpData>                       _offMatineeData                                                = new ExternalOffset<UInterpData>(0x0248, true);               // 0x0248(0x0008) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offMatineeControllerName                                      = new ExternalOffset<FName>(0x0250, false);                    // 0x0250(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPlayRate                                                   = new ExternalOffset<float>(0x0258);                           // 0x0258(0x0004) (Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPlayOnLevelLoad                                           = new ExternalOffset<char>(0x025C, false);                     // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceStartPos                                             = new ExternalOffset<char>(0x025C, false);                     // 0x025C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offForceStartPosition                                         = new ExternalOffset<float>(0x0260);                           // 0x0260(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLooping                                                   = new ExternalOffset<char>(0x0264, false);                     // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRewindOnPlay                                              = new ExternalOffset<char>(0x0264, false);                     // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNoResetOnRewind                                           = new ExternalOffset<char>(0x0264, false);                     // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRewindIfAlreadyPlaying                                    = new ExternalOffset<char>(0x0264, false);                     // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableRadioFilter                                        = new ExternalOffset<char>(0x0264, false);                     // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClientSideOnly                                            = new ExternalOffset<char>(0x0264, false);                     // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSkipUpdateIfNotVisible                                    = new ExternalOffset<char>(0x0264, false);                     // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsSkippable                                               = new ExternalOffset<char>(0x0264, false);                     // 0x0264(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPreferredSplitScreenNum                                    = new ExternalOffset<int>(0x0268);                             // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableMovementInput                                      = new ExternalOffset<char>(0x026C, false);                     // 0x026C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableLookAtInput                                        = new ExternalOffset<char>(0x026C, false);                     // 0x026C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHidePlayer                                                = new ExternalOffset<char>(0x026C, false);                     // 0x026C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHideHud                                                   = new ExternalOffset<char>(0x026C, false);                     // 0x026C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FInterpGroupActorInfo>>     _offGroupActorInfos                                            = new ExternalOffset<TArray<FInterpGroupActorInfo>>(0x0270, false); // 0x0270(0x0010) (Net, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldShowGore                                            = new ExternalOffset<char>(0x0280, false);                     // 0x0280(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UInterpGroupInst>>          _offGroupInst                                                  = new ExternalOffset<TArray<UInterpGroupInst>>(0x0288, false); // 0x0288(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FCameraCutInfo>>            _offCameraCuts                                                 = new ExternalOffset<TArray<FCameraCutInfo>>(0x0298, false);   // 0x0298(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsPlaying                                                 = new ExternalOffset<char>(0x02A8, false);                     // 0x02A8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, Net, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReversePlayback                                           = new ExternalOffset<char>(0x02A8, false);                     // 0x02A8(0x0001) BIT_FIELD (Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPaused                                                    = new ExternalOffset<char>(0x02A8, false);                     // 0x02A8(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPendingStop                                               = new ExternalOffset<char>(0x02A8, false);                     // 0x02A8(0x0001) BIT_FIELD (Net, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInterpPosition                                             = new ExternalOffset<float>(0x02AC);                           // 0x02AC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offReplicationForceIsPlaying                                  = new ExternalOffset<char>(0x02B4, false);                     // 0x02B4(0x0001) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnPlay                                                     = new ExternalOffset<FScriptMulticastDelegate>(0x02B8, false); // 0x02B8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnStop                                                     = new ExternalOffset<FScriptMulticastDelegate>(0x02C8, false); // 0x02C8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnPause                                                    = new ExternalOffset<FScriptMulticastDelegate>(0x02D8, false); // 0x02D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UInterpData                                        MatineeData                                                    => _offMatineeData.GetValue();
	public FName                                              MatineeControllerName                                          => _offMatineeControllerName.GetValue();
	public float                                              PlayRate                                                       => _offPlayRate.GetValue();
	public float                                              ForceStartPosition                                             => _offForceStartPosition.GetValue();
	public int                                                PreferredSplitScreenNum                                        => _offPreferredSplitScreenNum.GetValue();
	public TArray<FInterpGroupActorInfo>                      GroupActorInfos                                                => _offGroupActorInfos.GetValue();
	public TArray<UInterpGroupInst>                           GroupInst                                                      => _offGroupInst.GetValue();
	public TArray<FCameraCutInfo>                             CameraCuts                                                     => _offCameraCuts.GetValue();
	public float                                              InterpPosition                                                 => _offInterpPosition.GetValue();
	public FScriptMulticastDelegate                           OnPlay                                                         => _offOnPlay.GetValue();
	public FScriptMulticastDelegate                           OnStop                                                         => _offOnStop.GetValue();
	public FScriptMulticastDelegate                           OnPause                                                        => _offOnPause.GetValue();
	#endregion


}

// Class Engine.MatineeActorCameraAnim
// 0x0010 (0x02F8 - 0x02E8)
public class AMatineeActorCameraAnim : AMatineeActor
{
	#region Offsets
	private ExternalOffset<UCameraAnim>                       _offCameraAnim                                                 = new ExternalOffset<UCameraAnim>(0x02F0, true);               // 0x02F0(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UCameraAnim                                        CameraAnim                                                     => _offCameraAnim.GetValue();
	#endregion


}

// Class Engine.MatineeAnimInterface
// 0x0000 (0x0028 - 0x0028)
public class UMatineeAnimInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MatineeInterface
// 0x0000 (0x0028 - 0x0028)
public class UMatineeInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MeshMergeCullingVolume
// 0x0000 (0x0280 - 0x0280)
public class AMeshMergeCullingVolume : AVolume
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MeshSimplificationSettings
// 0x0018 (0x0040 - 0x0028)
public class UMeshSimplificationSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<FName>                             _offMeshReductionModuleName                                    = new ExternalOffset<FName>(0x0038, false);                    // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              MeshReductionModuleName                                        => _offMeshReductionModuleName.GetValue();
	#endregion


}

// Class Engine.MeshVertexPainterKismetLibrary
// 0x0000 (0x0028 - 0x0028)
public class UMeshVertexPainterKismetLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.MicroTransactionBase
// 0x0030 (0x0068 - 0x0038)
public class UMicroTransactionBase : UPlatformInterfaceBase
{
	#region Offsets
	private ExternalOffset<TArray<FPurchaseInfo>>             _offAvailableProducts                                          = new ExternalOffset<TArray<FPurchaseInfo>>(0x0038, false);    // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offLastError                                                  = new ExternalOffset<FString>(0x0048, false);                  // 0x0048(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offLastErrorSolution                                          = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FPurchaseInfo>                              AvailableProducts                                              => _offAvailableProducts.GetValue();
	public FString                                            LastError                                                      => _offLastError.GetValue();
	public FString                                            LastErrorSolution                                              => _offLastErrorSolution.GetValue();
	#endregion


}

// Class Engine.ModelComponent
// 0x0023 (0x0428 - 0x0405)
public class UModelComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<UBodySetup>                        _offModelBodySetup                                             = new ExternalOffset<UBodySetup>(0x0420, true);                // 0x0420(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UBodySetup                                         ModelBodySetup                                                 => _offModelBodySetup.GetValue();
	#endregion


}

// Class Engine.MorphTarget
// 0x0008 (0x0030 - 0x0028)
public class UMorphTarget : UObject
{
	#region Offsets
	private ExternalOffset<USkeletalMesh>                     _offBaseSkelMesh                                               = new ExternalOffset<USkeletalMesh>(0x0028, true);             // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USkeletalMesh                                      BaseSkelMesh                                                   => _offBaseSkelMesh.GetValue();
	#endregion


}

// Class Engine.NavAgentInterface
// 0x0000 (0x0028 - 0x0028)
public class UNavAgentInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NavAreaBase
// 0x0000 (0x0028 - 0x0028)
public class UNavAreaBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NavCollisionBase
// 0x0001 (0x0029 - 0x0028)
public class UNavCollisionBase : UObject
{
	#region Offsets
//	private ExternalOffset<char>                              _offbIsDynamicObstacle                                         = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, Config, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	#endregion


}

// Class Engine.NavEdgeProviderInterface
// 0x0000 (0x0028 - 0x0028)
public class UNavEdgeProviderInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NavigationDataChunk
// 0x0008 (0x0030 - 0x0028)
public class UNavigationDataChunk : UObject
{
	#region Offsets
	private ExternalOffset<FName>                             _offNavigationDataName                                         = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              NavigationDataName                                             => _offNavigationDataName.GetValue();
	#endregion


}

// Class Engine.NavigationDataInterface
// 0x0000 (0x0028 - 0x0028)
public class UNavigationDataInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NavigationSystemBase
// 0x0000 (0x0028 - 0x0028)
public class UNavigationSystemBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NavigationSystem
// 0x0000 (0x0028 - 0x0028)
public class UNavigationSystem : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NavigationSystemConfig
// 0x0019 (0x0041 - 0x0028)
public class UNavigationSystemConfig : UObject
{
	#region Offsets
	private ExternalOffset<FSoftClassPath>                    _offNavigationSystemClass                                      = new ExternalOffset<FSoftClassPath>(0x0028, false);           // 0x0028(0x0018) (Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsOverriden                                               = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FSoftClassPath                                     NavigationSystemClass                                          => _offNavigationSystemClass.GetValue();
	#endregion


}

// Class Engine.NullNavSysConfig
// 0x0007 (0x0048 - 0x0041)
public class UNullNavSysConfig : UNavigationSystemConfig
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NavLinkDefinition
// 0x0020 (0x0048 - 0x0028)
public class UNavLinkDefinition : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FNavigationLink>>           _offLinks                                                      = new ExternalOffset<TArray<FNavigationLink>>(0x0028, false);  // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FNavigationSegmentLink>>    _offSegmentLinks                                               = new ExternalOffset<TArray<FNavigationSegmentLink>>(0x0038, false); // 0x0038(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FNavigationLink>                            Links                                                          => _offLinks.GetValue();
	public TArray<FNavigationSegmentLink>                     SegmentLinks                                                   => _offSegmentLinks.GetValue();
	#endregion


}

// Class Engine.NavPathObserverInterface
// 0x0000 (0x0028 - 0x0028)
public class UNavPathObserverInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NavRelevantInterface
// 0x0000 (0x0028 - 0x0028)
public class UNavRelevantInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SimulatedClientNetConnection
// 0x04D8 (0x19A0 - 0x14C8)
public class USimulatedClientNetConnection : UNetConnection
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NetworkPredictionInterface
// 0x0000 (0x0028 - 0x0028)
public class UNetworkPredictionInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.NetworkSettings
// 0x001C (0x0044 - 0x0028)
public class UNetworkSettings : UDeveloperSettings
{
	#region Offsets
//	private ExternalOffset<char>                              _offbVerifyPeer                                                = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableMultiplayerWorldOriginRebasing                      = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxRepArraySize                                            = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxRepArrayMemory                                          = new ExternalOffset<int>(0x0040);                             // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                MaxRepArraySize                                                => _offMaxRepArraySize.GetValue();
	public int                                                MaxRepArrayMemory                                              => _offMaxRepArrayMemory.GetValue();
	#endregion


}

// Class Engine.NodeMappingContainer
// 0x00F0 (0x0118 - 0x0028)
public class UNodeMappingContainer : UObject
{
	#region Offsets
//	private TMap<struct FName, struct FNodeItem>              _offSourceItems                                                = new ExternalOffset<TMap<FNodeItem>>(0x0028, false);          // 0x0028(0x0050) (Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
//	private TMap<struct FName, struct FNodeItem>              _offTargetItems                                                = new ExternalOffset<TMap<FNodeItem>>(0x0078, false);          // 0x0078(0x0050) (Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
//	private TMap<struct FName, struct FName>                  _offSourceToTarget                                             = new ExternalOffset<TMap<FName>>(0x00C8, false);              // 0x00C8(0x0050) (Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	#endregion


}

// Class Engine.NodeMappingProviderInterface
// 0x0000 (0x0028 - 0x0028)
public class UNodeMappingProviderInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Note
// 0x0010 (0x0248 - 0x0238)
public class ANote : AActor
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ObjectLibrary
// 0x0032 (0x005A - 0x0028)
public class UObjectLibrary : UObject
{
	#region Offsets
	private ExternalOffset<UClass>                            _offObjectBaseClass                                            = new ExternalOffset<UClass>(0x0028, true);                    // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbHasBlueprintClasses                                       = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObject>>                   _offObjects                                                    = new ExternalOffset<TArray<UObject>>(0x0038, false);          // 0x0038(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<TWeakObjectPtr<UObject>>>   _offWeakObjects                                                = new ExternalOffset<TArray<TWeakObjectPtr<UObject>>>(0x0048, false); // 0x0048(0x0010) (ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseWeakReferences                                         = new ExternalOffset<byte/*(bool)*/>(0x0058);                  // 0x0058(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsFullyLoaded                                             = new ExternalOffset<byte/*(bool)*/>(0x0059);                  // 0x0059(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UClass                                             ObjectBaseClass                                                => _offObjectBaseClass.GetValue();
	public byte/*(bool)*/                                     bHasBlueprintClasses                                           => _offbHasBlueprintClasses.GetValue();
	public TArray<UObject>                                    Objects                                                        => _offObjects.GetValue();
	public TArray<TWeakObjectPtr<UObject>>                    WeakObjects                                                    => _offWeakObjects.GetValue();
	public byte/*(bool)*/                                     bUseWeakReferences                                             => _offbUseWeakReferences.GetValue();
	public byte/*(bool)*/                                     bIsFullyLoaded                                                 => _offbIsFullyLoaded.GetValue();
	#endregion


}

// Class Engine.ObjectReferencer
// 0x0010 (0x0038 - 0x0028)
public class UObjectReferencer : UObject
{
	#region Offsets
	private ExternalOffset<TArray<UObject>>                   _offReferencedObjects                                          = new ExternalOffset<TArray<UObject>>(0x0028, false);          // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UObject>                                    ReferencedObjects                                              => _offReferencedObjects.GetValue();
	#endregion


}

// Class Engine.PackageMapClient
// 0x00B8 (0x00E0 - 0x0028)
public class UPackageMapClient : UPackageMap
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PainCausingVolume
// 0x0023 (0x02B0 - 0x028D)
public class APainCausingVolume : APhysicsVolume
{
	#region Offsets
//	private ExternalOffset<char>                              _offbPainCausing                                               = new ExternalOffset<char>(0x0290, false);                     // 0x0290(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDamagePerSec                                               = new ExternalOffset<float>(0x0294);                           // 0x0294(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offDamageType                                                 = new ExternalOffset<UClass>(0x0298, true);                    // 0x0298(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPainInterval                                               = new ExternalOffset<float>(0x02A0);                           // 0x02A0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEntryPain                                                 = new ExternalOffset<char>(0x02A4, false);                     // 0x02A4(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offBACKUP_bPainCausing                                        = new ExternalOffset<char>(0x02A4, false);                     // 0x02A4(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AController>                       _offDamageInstigator                                           = new ExternalOffset<AController>(0x02A8, true);               // 0x02A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              DamagePerSec                                                   => _offDamagePerSec.GetValue();
	public UClass                                             DamageType                                                     => _offDamageType.GetValue();
	public float                                              PainInterval                                                   => _offPainInterval.GetValue();
	public AController                                        DamageInstigator                                               => _offDamageInstigator.GetValue();
	#endregion


}

// Class Engine.ParticleEmitter
// 0x0039 (0x0061 - 0x0028)
public class UParticleEmitter : UObject
{
	#region Offsets
	private ExternalOffset<FName>                             _offEmitterName                                                = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSubUVDataOffset                                            = new ExternalOffset<int>(0x0030);                             // 0x0030(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EEmitterRenderMode>>   _offEmitterRenderMode                                          = new ExternalOffset<TEnumAsByte<EEmitterRenderMode>>(0x0034, false); // 0x0034(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EParticleSignificanceLevel>        _offSignificanceLevel                                          = new ExternalOffset<EParticleSignificanceLevel>(0x0035, false); // 0x0035(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseLegacySpawningBehavior                                 = new ExternalOffset<char>(0x0037, false);                     // 0x0037(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offConvertedModules                                           = new ExternalOffset<char>(0x0037, false);                     // 0x0037(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsSoloing                                                 = new ExternalOffset<char>(0x0037, false);                     // 0x0037(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCookedOut                                                 = new ExternalOffset<char>(0x0037, false);                     // 0x0037(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisabledLODsKeepEmitterAlive                              = new ExternalOffset<char>(0x0037, false);                     // 0x0037(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableWhenInsignficant                                   = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleLODLevel>>         _offLODLevels                                                  = new ExternalOffset<TArray<UParticleLODLevel>>(0x0040, false); // 0x0040(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPeakActiveParticles                                        = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offInitialAllocationCount                                     = new ExternalOffset<int>(0x0054);                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offQualityLevelSpawnRateScale                                 = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offDetailModeBitmask                                          = new ExternalOffset<uint>(0x005C);                            // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOWI_ResetOnDetailModeChanged                              = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              EmitterName                                                    => _offEmitterName.GetValue();
	public int                                                SubUVDataOffset                                                => _offSubUVDataOffset.GetValue();
	public TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode                                              => _offEmitterRenderMode.GetValue();
	public EParticleSignificanceLevel                         SignificanceLevel                                              => _offSignificanceLevel.GetValue();
	public TArray<UParticleLODLevel>                          LODLevels                                                      => _offLODLevels.GetValue();
	public int                                                PeakActiveParticles                                            => _offPeakActiveParticles.GetValue();
	public int                                                InitialAllocationCount                                         => _offInitialAllocationCount.GetValue();
	public float                                              QualityLevelSpawnRateScale                                     => _offQualityLevelSpawnRateScale.GetValue();
	public uint                                               DetailModeBitmask                                              => _offDetailModeBitmask.GetValue();
	#endregion


}

// Class Engine.ParticleEventManager
// 0x0010 (0x0248 - 0x0238)
public class AParticleEventManager : AActor
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleLODLevel
// 0x0090 (0x00B8 - 0x0028)
public class UParticleLODLevel : UObject
{
	#region Offsets
	private ExternalOffset<int>                               _offLevel                                                      = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x002C, false);                     // 0x002C(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UParticleModuleRequired>           _offRequiredModule                                             = new ExternalOffset<UParticleModuleRequired>(0x0030, true);   // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleModule>>           _offModules                                                    = new ExternalOffset<TArray<UParticleModule>>(0x0038, false);  // 0x0038(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<UParticleModuleTypeDataBase>       _offTypeDataModule                                             = new ExternalOffset<UParticleModuleTypeDataBase>(0x0048, true); // 0x0048(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UParticleModuleSpawn>              _offSpawnModule                                                = new ExternalOffset<UParticleModuleSpawn>(0x0050, true);      // 0x0050(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UParticleModuleEventGenerator>     _offEventGenerator                                             = new ExternalOffset<UParticleModuleEventGenerator>(0x0058, true); // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleModuleSpawnBase>>  _offSpawningModules                                            = new ExternalOffset<TArray<UParticleModuleSpawnBase>>(0x0060, false); // 0x0060(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleModule>>           _offSpawnModules                                               = new ExternalOffset<TArray<UParticleModule>>(0x0070, false);  // 0x0070(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleModule>>           _offUpdateModules                                              = new ExternalOffset<TArray<UParticleModule>>(0x0080, false);  // 0x0080(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleModuleOrbit>>      _offOrbitModules                                               = new ExternalOffset<TArray<UParticleModuleOrbit>>(0x0090, false); // 0x0090(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleModuleEventReceiverBase>> _offEventReceiverModules                                       = new ExternalOffset<TArray<UParticleModuleEventReceiverBase>>(0x00A0, false); // 0x00A0(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offConvertedModules                                           = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPeakActiveParticles                                        = new ExternalOffset<int>(0x00B4);                             // 0x00B4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                Level                                                          => _offLevel.GetValue();
	public UParticleModuleRequired                            RequiredModule                                                 => _offRequiredModule.GetValue();
	public TArray<UParticleModule>                            Modules                                                        => _offModules.GetValue();
	public UParticleModuleTypeDataBase                        TypeDataModule                                                 => _offTypeDataModule.GetValue();
	public UParticleModuleSpawn                               SpawnModule                                                    => _offSpawnModule.GetValue();
	public UParticleModuleEventGenerator                      EventGenerator                                                 => _offEventGenerator.GetValue();
	public TArray<UParticleModuleSpawnBase>                   SpawningModules                                                => _offSpawningModules.GetValue();
	public TArray<UParticleModule>                            SpawnModules                                                   => _offSpawnModules.GetValue();
	public TArray<UParticleModule>                            UpdateModules                                                  => _offUpdateModules.GetValue();
	public TArray<UParticleModuleOrbit>                       OrbitModules                                                   => _offOrbitModules.GetValue();
	public TArray<UParticleModuleEventReceiverBase>           EventReceiverModules                                           => _offEventReceiverModules.GetValue();
	public int                                                PeakActiveParticles                                            => _offPeakActiveParticles.GetValue();
	#endregion


}

// Class Engine.ParticleModule
// 0x0005 (0x002D - 0x0028)
public class UParticleModule : UObject
{
	#region Offsets
//	private ExternalOffset<char>                              _offbSpawnModule                                               = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUpdateModule                                              = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFinalUpdateModule                                         = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUpdateForGPUEmitter                                       = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCurvesAsColor                                             = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offb3DDrawMode                                                = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupported3DDrawMode                                       = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEditable                                                  = new ExternalOffset<char>(0x0029, false);                     // 0x0029(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offLODDuplicate                                               = new ExternalOffset<char>(0x0029, false);                     // 0x0029(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportsRandomSeed                                        = new ExternalOffset<char>(0x0029, false);                     // 0x0029(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRequiresLoopingNotification                               = new ExternalOffset<char>(0x0029, false);                     // 0x0029(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offLODValidity                                                = new ExternalOffset<char>(0x002C, false);                     // 0x002C(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleAccelerationBase
// 0x0004 (0x0031 - 0x002D)
public class UParticleModuleAccelerationBase : UParticleModule
{
	#region Offsets
//	private ExternalOffset<char>                              _offbAlwaysInWorldSpace                                        = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleAcceleration
// 0x0058 (0x0089 - 0x0031)
public class UParticleModuleAcceleration : UParticleModuleAccelerationBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offAcceleration                                               = new ExternalOffset<FRawDistributionVector>(0x0038, false);   // 0x0038(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbApplyOwnerScale                                           = new ExternalOffset<char>(0x0088, false);                     // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             Acceleration                                                   => _offAcceleration.GetValue();
	#endregion


}

// Class Engine.ParticleModuleAccelerationConstant
// 0x0013 (0x0044 - 0x0031)
public class UParticleModuleAccelerationConstant : UParticleModuleAccelerationBase
{
	#region Offsets
	private ExternalOffset<FVector>                           _offAcceleration                                               = new ExternalOffset<FVector>(0x0038, false);                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            Acceleration                                                   => _offAcceleration.GetValue();
	#endregion


}

// Class Engine.ParticleModuleAccelerationDrag
// 0x0047 (0x0078 - 0x0031)
public class UParticleModuleAccelerationDrag : UParticleModuleAccelerationBase
{
	#region Offsets
	private ExternalOffset<UDistributionFloat>                _offDragCoefficient                                            = new ExternalOffset<UDistributionFloat>(0x0038, true);        // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offDragCoefficientRaw                                         = new ExternalOffset<FRawDistributionFloat>(0x0040, false);    // 0x0040(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UDistributionFloat                                 DragCoefficient                                                => _offDragCoefficient.GetValue();
	public FRawDistributionFloat                              DragCoefficientRaw                                             => _offDragCoefficientRaw.GetValue();
	#endregion


}

// Class Engine.ParticleModuleAccelerationDragScaleOverLife
// 0x0047 (0x0078 - 0x0031)
public class UParticleModuleAccelerationDragScaleOverLife : UParticleModuleAccelerationBase
{
	#region Offsets
	private ExternalOffset<UDistributionFloat>                _offDragScale                                                  = new ExternalOffset<UDistributionFloat>(0x0038, true);        // 0x0038(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offDragScaleRaw                                               = new ExternalOffset<FRawDistributionFloat>(0x0040, false);    // 0x0040(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UDistributionFloat                                 DragScale                                                      => _offDragScale.GetValue();
	public FRawDistributionFloat                              DragScaleRaw                                                   => _offDragScaleRaw.GetValue();
	#endregion


}

// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x0057 (0x0088 - 0x0031)
public class UParticleModuleAccelerationOverLifetime : UParticleModuleAccelerationBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offAccelOverLife                                              = new ExternalOffset<FRawDistributionVector>(0x0038, false);   // 0x0038(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             AccelOverLife                                                  => _offAccelOverLife.GetValue();
	#endregion


}

// Class Engine.ParticleModuleAttractorBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleAttractorBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleAttractorLine
// 0x0088 (0x00B8 - 0x0030)
public class UParticleModuleAttractorLine : UParticleModuleAttractorBase
{
	#region Offsets
	private ExternalOffset<FVector>                           _offEndPoint0                                                  = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offEndPoint1                                                  = new ExternalOffset<FVector>(0x003C, false);                  // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offRange                                                      = new ExternalOffset<FRawDistributionFloat>(0x0048, false);    // 0x0048(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offStrength                                                   = new ExternalOffset<FRawDistributionFloat>(0x0080, false);    // 0x0080(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            EndPoint0                                                      => _offEndPoint0.GetValue();
	public FVector                                            EndPoint1                                                      => _offEndPoint1.GetValue();
	public FRawDistributionFloat                              Range                                                          => _offRange.GetValue();
	public FRawDistributionFloat                              Strength                                                       => _offStrength.GetValue();
	#endregion


}

// Class Engine.ParticleModuleAttractorParticle
// 0x0090 (0x00C0 - 0x0030)
public class UParticleModuleAttractorParticle : UParticleModuleAttractorBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offEmitterName                                                = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offRange                                                      = new ExternalOffset<FRawDistributionFloat>(0x0038, false);    // 0x0038(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStrengthByDistance                                        = new ExternalOffset<char>(0x0070, false);                     // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offStrength                                                   = new ExternalOffset<FRawDistributionFloat>(0x0078, false);    // 0x0078(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAffectBaseVelocity                                        = new ExternalOffset<char>(0x00B0, false);                     // 0x00B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAttractorParticleSelectionMethod>> _offSelectionMethod                                            = new ExternalOffset<TEnumAsByte<EAttractorParticleSelectionMethod>>(0x00B4, false); // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenewSource                                               = new ExternalOffset<char>(0x00B8, false);                     // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritSourceVel                                          = new ExternalOffset<char>(0x00B8, false);                     // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offLastSelIndex                                               = new ExternalOffset<int>(0x00BC);                             // 0x00BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              EmitterName                                                    => _offEmitterName.GetValue();
	public FRawDistributionFloat                              Range                                                          => _offRange.GetValue();
	public FRawDistributionFloat                              Strength                                                       => _offStrength.GetValue();
	public TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod                                                => _offSelectionMethod.GetValue();
	public int                                                LastSelIndex                                                   => _offLastSelIndex.GetValue();
	#endregion


}

// Class Engine.ParticleModuleAttractorPoint
// 0x00C2 (0x00F2 - 0x0030)
public class UParticleModuleAttractorPoint : UParticleModuleAttractorBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offPosition                                                   = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offRange                                                      = new ExternalOffset<FRawDistributionFloat>(0x0080, false);    // 0x0080(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offStrength                                                   = new ExternalOffset<FRawDistributionFloat>(0x00B8, false);    // 0x00B8(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offStrengthByDistance                                         = new ExternalOffset<char>(0x00F0, false);                     // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAffectBaseVelocity                                        = new ExternalOffset<char>(0x00F0, false);                     // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideVelocity                                          = new ExternalOffset<char>(0x00F0, false);                     // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseWorldSpacePosition                                     = new ExternalOffset<char>(0x00F0, false);                     // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offPositive_X                                                 = new ExternalOffset<char>(0x00F0, false);                     // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offPositive_Y                                                 = new ExternalOffset<char>(0x00F0, false);                     // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offPositive_Z                                                 = new ExternalOffset<char>(0x00F0, false);                     // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offNegative_X                                                 = new ExternalOffset<char>(0x00F0, false);                     // 0x00F0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offNegative_Y                                                 = new ExternalOffset<char>(0x00F1, false);                     // 0x00F1(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offNegative_Z                                                 = new ExternalOffset<char>(0x00F1, false);                     // 0x00F1(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             Position                                                       => _offPosition.GetValue();
	public FRawDistributionFloat                              Range                                                          => _offRange.GetValue();
	public FRawDistributionFloat                              Strength                                                       => _offStrength.GetValue();
	#endregion


}

// Class Engine.ParticleModuleAttractorPointGravity
// 0x0050 (0x0080 - 0x0030)
public class UParticleModuleAttractorPointGravity : UParticleModuleAttractorBase
{
	#region Offsets
	private ExternalOffset<FVector>                           _offPosition                                                   = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRadius                                                     = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UDistributionFloat>                _offStrength                                                   = new ExternalOffset<UDistributionFloat>(0x0040, true);        // 0x0040(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offStrengthRaw                                                = new ExternalOffset<FRawDistributionFloat>(0x0048, false);    // 0x0048(0x0038) (Edit, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            Position                                                       => _offPosition.GetValue();
	public float                                              Radius                                                         => _offRadius.GetValue();
	public UDistributionFloat                                 Strength                                                       => _offStrength.GetValue();
	public FRawDistributionFloat                              StrengthRaw                                                    => _offStrengthRaw.GetValue();
	#endregion


}

// Class Engine.ParticleModuleBeamBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleBeamBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleBeamModifier
// 0x00F0 (0x0120 - 0x0030)
public class UParticleModuleBeamModifier : UParticleModuleBeamBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EBeamModifierType>>    _offModifierType                                               = new ExternalOffset<TEnumAsByte<EBeamModifierType>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBeamModifierOptions>              _offPositionOptions                                            = new ExternalOffset<FBeamModifierOptions>(0x0034, false);     // 0x0034(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offPosition                                                   = new ExternalOffset<FRawDistributionVector>(0x0038, false);   // 0x0038(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FBeamModifierOptions>              _offTangentOptions                                             = new ExternalOffset<FBeamModifierOptions>(0x0088, false);     // 0x0088(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offTangent                                                    = new ExternalOffset<FRawDistributionVector>(0x0090, false);   // 0x0090(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAbsoluteTangent                                           = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBeamModifierOptions>              _offStrengthOptions                                            = new ExternalOffset<FBeamModifierOptions>(0x00E4, false);     // 0x00E4(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offStrength                                                   = new ExternalOffset<FRawDistributionFloat>(0x00E8, false);    // 0x00E8(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EBeamModifierType>                     ModifierType                                                   => _offModifierType.GetValue();
	public FBeamModifierOptions                               PositionOptions                                                => _offPositionOptions.GetValue();
	public FRawDistributionVector                             Position                                                       => _offPosition.GetValue();
	public FBeamModifierOptions                               TangentOptions                                                 => _offTangentOptions.GetValue();
	public FRawDistributionVector                             Tangent                                                        => _offTangent.GetValue();
	public FBeamModifierOptions                               StrengthOptions                                                => _offStrengthOptions.GetValue();
	public FRawDistributionFloat                              Strength                                                       => _offStrength.GetValue();
	#endregion


}

// Class Engine.ParticleModuleBeamNoise
// 0x0188 (0x01B8 - 0x0030)
public class UParticleModuleBeamNoise : UParticleModuleBeamBase
{
	#region Offsets
//	private ExternalOffset<char>                              _offbLowFreq_Enabled                                           = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offFrequency                                                  = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offFrequency_LowRange                                         = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offNoiseRange                                                 = new ExternalOffset<FRawDistributionVector>(0x0040, false);   // 0x0040(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offNoiseRangeScale                                            = new ExternalOffset<FRawDistributionFloat>(0x0090, false);    // 0x0090(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNRScaleEmitterTime                                        = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offNoiseSpeed                                                 = new ExternalOffset<FRawDistributionVector>(0x00D0, false);   // 0x00D0(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSmooth                                                    = new ExternalOffset<char>(0x0120, false);                     // 0x0120(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNoiseLockRadius                                            = new ExternalOffset<float>(0x0124);                           // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNoiseLock                                                 = new ExternalOffset<char>(0x0128, false);                     // 0x0128(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOscillate                                                 = new ExternalOffset<char>(0x0128, false);                     // 0x0128(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNoiseLockTime                                              = new ExternalOffset<float>(0x012C);                           // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNoiseTension                                               = new ExternalOffset<float>(0x0130);                           // 0x0130(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseNoiseTangents                                          = new ExternalOffset<char>(0x0134, false);                     // 0x0134(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offNoiseTangentStrength                                       = new ExternalOffset<FRawDistributionFloat>(0x0138, false);    // 0x0138(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNoiseTessellation                                          = new ExternalOffset<int>(0x0170);                             // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTargetNoise                                               = new ExternalOffset<char>(0x0174, false);                     // 0x0174(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFrequencyDistance                                          = new ExternalOffset<float>(0x0178);                           // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbApplyNoiseScale                                           = new ExternalOffset<char>(0x017C, false);                     // 0x017C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offNoiseScale                                                 = new ExternalOffset<FRawDistributionFloat>(0x0180, false);    // 0x0180(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                Frequency                                                      => _offFrequency.GetValue();
	public int                                                Frequency_LowRange                                             => _offFrequency_LowRange.GetValue();
	public FRawDistributionVector                             NoiseRange                                                     => _offNoiseRange.GetValue();
	public FRawDistributionFloat                              NoiseRangeScale                                                => _offNoiseRangeScale.GetValue();
	public FRawDistributionVector                             NoiseSpeed                                                     => _offNoiseSpeed.GetValue();
	public float                                              NoiseLockRadius                                                => _offNoiseLockRadius.GetValue();
	public float                                              NoiseLockTime                                                  => _offNoiseLockTime.GetValue();
	public float                                              NoiseTension                                                   => _offNoiseTension.GetValue();
	public FRawDistributionFloat                              NoiseTangentStrength                                           => _offNoiseTangentStrength.GetValue();
	public int                                                NoiseTessellation                                              => _offNoiseTessellation.GetValue();
	public float                                              FrequencyDistance                                              => _offFrequencyDistance.GetValue();
	public FRawDistributionFloat                              NoiseScale                                                     => _offNoiseScale.GetValue();
	#endregion


}

// Class Engine.ParticleModuleBeamSource
// 0x00F9 (0x0129 - 0x0030)
public class UParticleModuleBeamSource : UParticleModuleBeamBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EBeam2SourceTargetMethod>> _offSourceMethod                                               = new ExternalOffset<TEnumAsByte<EBeam2SourceTargetMethod>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offSourceName                                                 = new ExternalOffset<FName>(0x0034, false);                    // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSourceAbsolute                                            = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offSource                                                     = new ExternalOffset<FRawDistributionVector>(0x0040, false);   // 0x0040(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockSource                                                = new ExternalOffset<char>(0x0090, false);                     // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBeam2SourceTargetTangentMethod>> _offSourceTangentMethod                                        = new ExternalOffset<TEnumAsByte<EBeam2SourceTargetTangentMethod>>(0x0094, false); // 0x0094(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offSourceTangent                                              = new ExternalOffset<FRawDistributionVector>(0x0098, false);   // 0x0098(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockSourceTangent                                         = new ExternalOffset<char>(0x00E8, false);                     // 0x00E8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offSourceStrength                                             = new ExternalOffset<FRawDistributionFloat>(0x00F0, false);    // 0x00F0(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockSourceStength                                         = new ExternalOffset<char>(0x0128, false);                     // 0x0128(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod                                                   => _offSourceMethod.GetValue();
	public FName                                              SourceName                                                     => _offSourceName.GetValue();
	public FRawDistributionVector                             Source                                                         => _offSource.GetValue();
	public TEnumAsByte<EBeam2SourceTargetTangentMethod>       SourceTangentMethod                                            => _offSourceTangentMethod.GetValue();
	public FRawDistributionVector                             SourceTangent                                                  => _offSourceTangent.GetValue();
	public FRawDistributionFloat                              SourceStrength                                                 => _offSourceStrength.GetValue();
	#endregion


}

// Class Engine.ParticleModuleBeamTarget
// 0x0100 (0x0130 - 0x0030)
public class UParticleModuleBeamTarget : UParticleModuleBeamBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EBeam2SourceTargetMethod>> _offTargetMethod                                               = new ExternalOffset<TEnumAsByte<EBeam2SourceTargetMethod>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offTargetName                                                 = new ExternalOffset<FName>(0x0034, false);                    // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offTarget                                                     = new ExternalOffset<FRawDistributionVector>(0x0040, false);   // 0x0040(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTargetAbsolute                                            = new ExternalOffset<char>(0x0090, false);                     // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockTarget                                                = new ExternalOffset<char>(0x0090, false);                     // 0x0090(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBeam2SourceTargetTangentMethod>> _offTargetTangentMethod                                        = new ExternalOffset<TEnumAsByte<EBeam2SourceTargetTangentMethod>>(0x0094, false); // 0x0094(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offTargetTangent                                              = new ExternalOffset<FRawDistributionVector>(0x0098, false);   // 0x0098(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockTargetTangent                                         = new ExternalOffset<char>(0x00E8, false);                     // 0x00E8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offTargetStrength                                             = new ExternalOffset<FRawDistributionFloat>(0x00F0, false);    // 0x00F0(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockTargetStength                                         = new ExternalOffset<char>(0x0128, false);                     // 0x0128(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLockRadius                                                 = new ExternalOffset<float>(0x012C);                           // 0x012C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod                                                   => _offTargetMethod.GetValue();
	public FName                                              TargetName                                                     => _offTargetName.GetValue();
	public FRawDistributionVector                             Target                                                         => _offTarget.GetValue();
	public TEnumAsByte<EBeam2SourceTargetTangentMethod>       TargetTangentMethod                                            => _offTargetTangentMethod.GetValue();
	public FRawDistributionVector                             TargetTangent                                                  => _offTargetTangent.GetValue();
	public FRawDistributionFloat                              TargetStrength                                                 => _offTargetStrength.GetValue();
	public float                                              LockRadius                                                     => _offLockRadius.GetValue();
	#endregion


}

// Class Engine.ParticleModuleCameraBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleCameraBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleCameraOffset
// 0x003D (0x006D - 0x0030)
public class UParticleModuleCameraOffset : UParticleModuleCameraBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offCameraOffset                                               = new ExternalOffset<FRawDistributionFloat>(0x0030, false);    // 0x0030(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSpawnTimeOnly                                             = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleCameraOffsetUpdateMethod>> _offUpdateMethod                                               = new ExternalOffset<TEnumAsByte<EParticleCameraOffsetUpdateMethod>>(0x006C, false); // 0x006C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              CameraOffset                                                   => _offCameraOffset.GetValue();
	public TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod                                                   => _offUpdateMethod.GetValue();
	#endregion


}

// Class Engine.ParticleModuleCollisionBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleCollisionBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleCollision
// 0x0198 (0x01C8 - 0x0030)
public class UParticleModuleCollision : UParticleModuleCollisionBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offDampingFactor                                              = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offDampingFactorRotation                                      = new ExternalOffset<FRawDistributionVector>(0x0080, false);   // 0x0080(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offMaxCollisions                                              = new ExternalOffset<FRawDistributionFloat>(0x00D0, false);    // 0x00D0(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleCollisionComplete>> _offCollisionCompletionOption                                  = new ExternalOffset<TEnumAsByte<EParticleCollisionComplete>>(0x0108, false); // 0x0108(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<TEnumAsByte<EObjectTypeQuery>>> _offCollisionTypes                                             = new ExternalOffset<TArray<TEnumAsByte<EObjectTypeQuery>>>(0x0110, false); // 0x0110(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbApplyPhysics                                              = new ExternalOffset<char>(0x0128, false);                     // 0x0128(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreTriggerVolumes                                      = new ExternalOffset<char>(0x0128, false);                     // 0x0128(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offParticleMass                                               = new ExternalOffset<FRawDistributionFloat>(0x0130, false);    // 0x0130(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDirScalar                                                  = new ExternalOffset<float>(0x0168);                           // 0x0168(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPawnsDoNotDecrementCount                                  = new ExternalOffset<char>(0x016C, false);                     // 0x016C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOnlyVerticalNormalsDecrementCount                         = new ExternalOffset<char>(0x016C, false);                     // 0x016C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVerticalFudgeFactor                                        = new ExternalOffset<float>(0x0170);                           // 0x0170(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offDelayAmount                                                = new ExternalOffset<FRawDistributionFloat>(0x0178, false);    // 0x0178(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDropDetail                                                = new ExternalOffset<char>(0x01B0, false);                     // 0x01B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCollideOnlyIfVisible                                      = new ExternalOffset<char>(0x01B0, false);                     // 0x01B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreSourceActor                                         = new ExternalOffset<char>(0x01B0, false);                     // 0x01B0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxCollisionDistance                                       = new ExternalOffset<float>(0x01B4);                           // 0x01B4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxCollisionSoundsToPlay                                   = new ExternalOffset<int>(0x01B8);                             // 0x01B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundBase>                        _offCollisionSound                                             = new ExternalOffset<USoundBase>(0x01C0, true);                // 0x01C0(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             DampingFactor                                                  => _offDampingFactor.GetValue();
	public FRawDistributionVector                             DampingFactorRotation                                          => _offDampingFactorRotation.GetValue();
	public FRawDistributionFloat                              MaxCollisions                                                  => _offMaxCollisions.GetValue();
	public TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption                                      => _offCollisionCompletionOption.GetValue();
	public TArray<TEnumAsByte<EObjectTypeQuery>>              CollisionTypes                                                 => _offCollisionTypes.GetValue();
	public FRawDistributionFloat                              ParticleMass                                                   => _offParticleMass.GetValue();
	public float                                              DirScalar                                                      => _offDirScalar.GetValue();
	public float                                              VerticalFudgeFactor                                            => _offVerticalFudgeFactor.GetValue();
	public FRawDistributionFloat                              DelayAmount                                                    => _offDelayAmount.GetValue();
	public float                                              MaxCollisionDistance                                           => _offMaxCollisionDistance.GetValue();
	public int                                                MaxCollisionSoundsToPlay                                       => _offMaxCollisionSoundsToPlay.GetValue();
	public USoundBase                                         CollisionSound                                                 => _offCollisionSound.GetValue();
	#endregion


}

// Class Engine.ParticleModuleCollisionGPU
// 0x0086 (0x00B6 - 0x0030)
public class UParticleModuleCollisionGPU : UParticleModuleCollisionBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offResilience                                                 = new ExternalOffset<FRawDistributionFloat>(0x0030, false);    // 0x0030(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offResilienceScaleOverLife                                    = new ExternalOffset<FRawDistributionFloat>(0x0068, false);    // 0x0068(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFriction                                                   = new ExternalOffset<float>(0x00A0);                           // 0x00A0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRandomSpread                                               = new ExternalOffset<float>(0x00A4);                           // 0x00A4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRandomDistribution                                         = new ExternalOffset<float>(0x00A8);                           // 0x00A8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRadiusScale                                                = new ExternalOffset<float>(0x00AC);                           // 0x00AC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRadiusBias                                                 = new ExternalOffset<float>(0x00B0);                           // 0x00B0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleCollisionResponse>> _offresponse                                                   = new ExternalOffset<TEnumAsByte<EParticleCollisionResponse>>(0x00B4, false); // 0x00B4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleCollisionMode>> _offCollisionMode                                              = new ExternalOffset<TEnumAsByte<EParticleCollisionMode>>(0x00B5, false); // 0x00B5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              Resilience                                                     => _offResilience.GetValue();
	public FRawDistributionFloat                              ResilienceScaleOverLife                                        => _offResilienceScaleOverLife.GetValue();
	public float                                              Friction                                                       => _offFriction.GetValue();
	public float                                              RandomSpread                                                   => _offRandomSpread.GetValue();
	public float                                              RandomDistribution                                             => _offRandomDistribution.GetValue();
	public float                                              RadiusScale                                                    => _offRadiusScale.GetValue();
	public float                                              RadiusBias                                                     => _offRadiusBias.GetValue();
	public TEnumAsByte<EParticleCollisionResponse>            response                                                       => _offresponse.GetValue();
	public TEnumAsByte<EParticleCollisionMode>                CollisionMode                                                  => _offCollisionMode.GetValue();
	#endregion


}

// Class Engine.ParticleModuleColorBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleColorBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleColor
// 0x0089 (0x00B9 - 0x0030)
public class UParticleModuleColor : UParticleModuleColorBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offStartColor                                                 = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offStartAlpha                                                 = new ExternalOffset<FRawDistributionFloat>(0x0080, false);    // 0x0080(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClampAlpha                                                = new ExternalOffset<char>(0x00B8, false);                     // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             StartColor                                                     => _offStartColor.GetValue();
	public FRawDistributionFloat                              StartAlpha                                                     => _offStartAlpha.GetValue();
	#endregion


}

// Class Engine.ParticleModuleColor_Seeded
// 0x0027 (0x00E0 - 0x00B9)
public class UParticleModuleColor_Seeded : UParticleModuleColor
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x00C0, false);  // 0x00C0(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleColorOverLife
// 0x0089 (0x00B9 - 0x0030)
public class UParticleModuleColorOverLife : UParticleModuleColorBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offColorOverLife                                              = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offAlphaOverLife                                              = new ExternalOffset<FRawDistributionFloat>(0x0080, false);    // 0x0080(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClampAlpha                                                = new ExternalOffset<char>(0x00B8, false);                     // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             ColorOverLife                                                  => _offColorOverLife.GetValue();
	public FRawDistributionFloat                              AlphaOverLife                                                  => _offAlphaOverLife.GetValue();
	#endregion


}

// Class Engine.ParticleModuleColorScaleOverLife
// 0x0089 (0x00B9 - 0x0030)
public class UParticleModuleColorScaleOverLife : UParticleModuleColorBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offColorScaleOverLife                                         = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offAlphaScaleOverLife                                         = new ExternalOffset<FRawDistributionFloat>(0x0080, false);    // 0x0080(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEmitterTime                                               = new ExternalOffset<char>(0x00B8, false);                     // 0x00B8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             ColorScaleOverLife                                             => _offColorScaleOverLife.GetValue();
	public FRawDistributionFloat                              AlphaScaleOverLife                                             => _offAlphaScaleOverLife.GetValue();
	#endregion


}

// Class Engine.ParticleModuleEventBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleEventBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleEventGenerator
// 0x0010 (0x0040 - 0x0030)
public class UParticleModuleEventGenerator : UParticleModuleEventBase
{
	#region Offsets
	private ExternalOffset<TArray<FParticleEvent_GenerateInfo>> _offEvents                                                     = new ExternalOffset<TArray<FParticleEvent_GenerateInfo>>(0x0030, false); // 0x0030(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FParticleEvent_GenerateInfo>                Events                                                         => _offEvents.GetValue();
	#endregion


}

// Class Engine.ParticleModuleEventReceiverBase
// 0x000C (0x003C - 0x0030)
public class UParticleModuleEventReceiverBase : UParticleModuleEventBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EParticleEventType>>   _offEventGeneratorType                                         = new ExternalOffset<TEnumAsByte<EParticleEventType>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offEventName                                                  = new ExternalOffset<FName>(0x0034, false);                    // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EParticleEventType>                    EventGeneratorType                                             => _offEventGeneratorType.GetValue();
	public FName                                              EventName                                                      => _offEventName.GetValue();
	#endregion


}

// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0005 (0x0041 - 0x003C)
public class UParticleModuleEventReceiverKillParticles : UParticleModuleEventReceiverBase
{
	#region Offsets
//	private ExternalOffset<char>                              _offbStopSpawning                                              = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleEventReceiverSpawn
// 0x00A5 (0x00E1 - 0x003C)
public class UParticleModuleEventReceiverSpawn : UParticleModuleEventReceiverBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offSpawnCount                                                 = new ExternalOffset<FRawDistributionFloat>(0x0040, false);    // 0x0040(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseParticleTime                                           = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsePSysLocation                                           = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritVelocity                                           = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offInheritVelocityScale                                       = new ExternalOffset<FRawDistributionVector>(0x0080, false);   // 0x0080(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPhysicalMaterial>>         _offPhysicalMaterials                                          = new ExternalOffset<TArray<UPhysicalMaterial>>(0x00D0, false); // 0x00D0(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbBanPhysicalMaterials                                      = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              SpawnCount                                                     => _offSpawnCount.GetValue();
	public FRawDistributionVector                             InheritVelocityScale                                           => _offInheritVelocityScale.GetValue();
	public TArray<UPhysicalMaterial>                          PhysicalMaterials                                              => _offPhysicalMaterials.GetValue();
	#endregion


}

// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x0028 - 0x0028)
public class UParticleModuleEventSendToGame : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleKillBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleKillBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleKillBox
// 0x00A1 (0x00D1 - 0x0030)
public class UParticleModuleKillBox : UParticleModuleKillBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offLowerLeftCorner                                            = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offUpperRightCorner                                           = new ExternalOffset<FRawDistributionVector>(0x0080, false);   // 0x0080(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAbsolute                                                  = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbKillInside                                                = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAxisAlignedAndFixedSize                                   = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             LowerLeftCorner                                                => _offLowerLeftCorner.GetValue();
	public FRawDistributionVector                             UpperRightCorner                                               => _offUpperRightCorner.GetValue();
	#endregion


}

// Class Engine.ParticleModuleKillHeight
// 0x0039 (0x0069 - 0x0030)
public class UParticleModuleKillHeight : UParticleModuleKillBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offHeight                                                     = new ExternalOffset<FRawDistributionFloat>(0x0030, false);    // 0x0030(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAbsolute                                                  = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFloor                                                     = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbApplyPSysScale                                            = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              Height                                                         => _offHeight.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLifetimeBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleLifetimeBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleLifetime
// 0x0038 (0x0068 - 0x0030)
public class UParticleModuleLifetime : UParticleModuleLifetimeBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offLifetime                                                   = new ExternalOffset<FRawDistributionFloat>(0x0030, false);    // 0x0030(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              Lifetime                                                       => _offLifetime.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLifetime_Seeded
// 0x0020 (0x0088 - 0x0068)
public class UParticleModuleLifetime_Seeded : UParticleModuleLifetime
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0068, false);  // 0x0068(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLightBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleLightBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleLight
// 0x010A (0x013A - 0x0030)
public class UParticleModuleLight : UParticleModuleLightBase
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                    _offbUseInverseSquaredFalloff                                  = new ExternalOffset<byte/*(bool)*/>(0x0030);                  // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbAffectsTranslucency                                       = new ExternalOffset<byte/*(bool)*/>(0x0031);                  // 0x0031(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbPreviewLightRadius                                        = new ExternalOffset<byte/*(bool)*/>(0x0032);                  // 0x0032(0x0001) (Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpawnFraction                                              = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offColorScaleOverLife                                         = new ExternalOffset<FRawDistributionVector>(0x0038, false);   // 0x0038(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offBrightnessOverLife                                         = new ExternalOffset<FRawDistributionFloat>(0x0088, false);    // 0x0088(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offRadiusScale                                                = new ExternalOffset<FRawDistributionFloat>(0x00C0, false);    // 0x00C0(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offLightExponent                                              = new ExternalOffset<FRawDistributionFloat>(0x00F8, false);    // 0x00F8(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FLightingChannels>                 _offLightingChannels                                           = new ExternalOffset<FLightingChannels>(0x0130, false);        // 0x0130(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumetricScatteringIntensity                              = new ExternalOffset<float>(0x0134);                           // 0x0134(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbHighQualityLights                                         = new ExternalOffset<byte/*(bool)*/>(0x0138);                  // 0x0138(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbShadowCastingLights                                       = new ExternalOffset<byte/*(bool)*/>(0x0139);                  // 0x0139(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                     bUseInverseSquaredFalloff                                      => _offbUseInverseSquaredFalloff.GetValue();
	public byte/*(bool)*/                                     bAffectsTranslucency                                           => _offbAffectsTranslucency.GetValue();
	public byte/*(bool)*/                                     bPreviewLightRadius                                            => _offbPreviewLightRadius.GetValue();
	public float                                              SpawnFraction                                                  => _offSpawnFraction.GetValue();
	public FRawDistributionVector                             ColorScaleOverLife                                             => _offColorScaleOverLife.GetValue();
	public FRawDistributionFloat                              BrightnessOverLife                                             => _offBrightnessOverLife.GetValue();
	public FRawDistributionFloat                              RadiusScale                                                    => _offRadiusScale.GetValue();
	public FRawDistributionFloat                              LightExponent                                                  => _offLightExponent.GetValue();
	public FLightingChannels                                  LightingChannels                                               => _offLightingChannels.GetValue();
	public float                                              VolumetricScatteringIntensity                                  => _offVolumetricScatteringIntensity.GetValue();
	public byte/*(bool)*/                                     bHighQualityLights                                             => _offbHighQualityLights.GetValue();
	public byte/*(bool)*/                                     bShadowCastingLights                                           => _offbShadowCastingLights.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLight_Seeded
// 0x0026 (0x0160 - 0x013A)
public class UParticleModuleLight_Seeded : UParticleModuleLight
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0140, false);  // 0x0140(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleLocationBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleLocation
// 0x0058 (0x0088 - 0x0030)
public class UParticleModuleLocation : UParticleModuleLocationBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offStartLocation                                              = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistributeOverNPoints                                      = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistributeThreshold                                        = new ExternalOffset<float>(0x0084);                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             StartLocation                                                  => _offStartLocation.GetValue();
	public float                                              DistributeOverNPoints                                          => _offDistributeOverNPoints.GetValue();
	public float                                              DistributeThreshold                                            => _offDistributeThreshold.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocation_Seeded
// 0x0020 (0x00A8 - 0x0088)
public class UParticleModuleLocation_Seeded : UParticleModuleLocation
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0088, false);  // 0x0088(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationBoneSocket
// 0x0038 (0x0068 - 0x0030)
public class UParticleModuleLocationBoneSocket : UParticleModuleLocationBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ELocationBoneSocketSource>> _offSourceType                                                 = new ExternalOffset<TEnumAsByte<ELocationBoneSocketSource>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offUniversalOffset                                            = new ExternalOffset<FVector>(0x0034, false);                  // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLocationBoneSocketInfo>>   _offSourceLocations                                            = new ExternalOffset<TArray<FLocationBoneSocketInfo>>(0x0040, false); // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ELocationBoneSocketSelectionMethod>> _offSelectionMethod                                            = new ExternalOffset<TEnumAsByte<ELocationBoneSocketSelectionMethod>>(0x0050, false); // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUpdatePositionEachFrame                                   = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOrientMeshEmitters                                        = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritBoneVelocity                                       = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInheritVelocityScale                                       = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offSkelMeshActorParamName                                     = new ExternalOffset<FName>(0x005C, false);                    // 0x005C(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumPreSelectedIndices                                      = new ExternalOffset<int>(0x0064);                             // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ELocationBoneSocketSource>             SourceType                                                     => _offSourceType.GetValue();
	public FVector                                            UniversalOffset                                                => _offUniversalOffset.GetValue();
	public TArray<FLocationBoneSocketInfo>                    SourceLocations                                                => _offSourceLocations.GetValue();
	public TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod                                                => _offSelectionMethod.GetValue();
	public float                                              InheritVelocityScale                                           => _offInheritVelocityScale.GetValue();
	public FName                                              SkelMeshActorParamName                                         => _offSkelMeshActorParamName.GetValue();
	public int                                                NumPreSelectedIndices                                          => _offNumPreSelectedIndices.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationDirect
// 0x0140 (0x0170 - 0x0030)
public class UParticleModuleLocationDirect : UParticleModuleLocationBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offLocation                                                   = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offLocationOffset                                             = new ExternalOffset<FRawDistributionVector>(0x0080, false);   // 0x0080(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offScaleFactor                                                = new ExternalOffset<FRawDistributionVector>(0x00D0, false);   // 0x00D0(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offDirection                                                  = new ExternalOffset<FRawDistributionVector>(0x0120, false);   // 0x0120(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             Location                                                       => _offLocation.GetValue();
	public FRawDistributionVector                             LocationOffset                                                 => _offLocationOffset.GetValue();
	public FRawDistributionVector                             ScaleFactor                                                    => _offScaleFactor.GetValue();
	public FRawDistributionVector                             Direction                                                      => _offDirection.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationEmitter
// 0x001C (0x004C - 0x0030)
public class UParticleModuleLocationEmitter : UParticleModuleLocationBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offEmitterName                                                = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ELocationEmitterSelectionMethod>> _offSelectionMethod                                            = new ExternalOffset<TEnumAsByte<ELocationEmitterSelectionMethod>>(0x0038, false); // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offInheritSourceVelocity                                      = new ExternalOffset<char>(0x003C, false);                     // 0x003C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInheritSourceVelocityScale                                 = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritSourceRotation                                     = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInheritSourceRotationScale                                 = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              EmitterName                                                    => _offEmitterName.GetValue();
	public TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod                                                => _offSelectionMethod.GetValue();
	public float                                              InheritSourceVelocityScale                                     => _offInheritSourceVelocityScale.GetValue();
	public float                                              InheritSourceRotationScale                                     => _offInheritSourceRotationScale.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0038 - 0x0030)
public class UParticleModuleLocationEmitterDirect : UParticleModuleLocationBase
{
	#region Offsets
	private ExternalOffset<FName>                             _offEmitterName                                                = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (Edit, ExportObject, ZeroConstructor, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              EmitterName                                                    => _offEmitterName.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x0090 (0x00C0 - 0x0030)
public class UParticleModuleLocationPrimitiveBase : UParticleModuleLocationBase
{
	#region Offsets
//	private ExternalOffset<char>                              _offPositive_X                                                 = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offPositive_Y                                                 = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offPositive_Z                                                 = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offNegative_X                                                 = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offNegative_Y                                                 = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offNegative_Z                                                 = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offSurfaceOnly                                                = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offVelocity                                                   = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offVelocityScale                                              = new ExternalOffset<FRawDistributionFloat>(0x0038, false);    // 0x0038(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offStartLocation                                              = new ExternalOffset<FRawDistributionVector>(0x0070, false);   // 0x0070(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              VelocityScale                                                  => _offVelocityScale.GetValue();
	public FRawDistributionVector                             StartLocation                                                  => _offStartLocation.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x0079 (0x0139 - 0x00C0)
public class UParticleModuleLocationPrimitiveCylinder : UParticleModuleLocationPrimitiveBase
{
	#region Offsets
//	private ExternalOffset<char>                              _offRadialVelocity                                             = new ExternalOffset<char>(0x00C0, false);                     // 0x00C0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offStartRadius                                                = new ExternalOffset<FRawDistributionFloat>(0x00C8, false);    // 0x00C8(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offStartHeight                                                = new ExternalOffset<FRawDistributionFloat>(0x0100, false);    // 0x0100(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECylinderHeightAxis>>  _offHeightAxis                                                 = new ExternalOffset<TEnumAsByte<ECylinderHeightAxis>>(0x0138, false); // 0x0138(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              StartRadius                                                    => _offStartRadius.GetValue();
	public FRawDistributionFloat                              StartHeight                                                    => _offStartHeight.GetValue();
	public TEnumAsByte<ECylinderHeightAxis>                   HeightAxis                                                     => _offHeightAxis.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x0027 (0x0160 - 0x0139)
public class UParticleModuleLocationPrimitiveCylinder_Seeded : UParticleModuleLocationPrimitiveCylinder
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0140, false);  // 0x0140(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x0038 (0x00F8 - 0x00C0)
public class UParticleModuleLocationPrimitiveSphere : UParticleModuleLocationPrimitiveBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offStartRadius                                                = new ExternalOffset<FRawDistributionFloat>(0x00C0, false);    // 0x00C0(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              StartRadius                                                    => _offStartRadius.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0020 (0x0118 - 0x00F8)
public class UParticleModuleLocationPrimitiveSphere_Seeded : UParticleModuleLocationPrimitiveSphere
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x00F8, false);  // 0x00F8(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationPrimitiveTriangle
// 0x00F8 (0x0128 - 0x0030)
public class UParticleModuleLocationPrimitiveTriangle : UParticleModuleLocationBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offStartOffset                                                = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offHeight                                                     = new ExternalOffset<FRawDistributionFloat>(0x0080, false);    // 0x0080(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offAngle                                                      = new ExternalOffset<FRawDistributionFloat>(0x00B8, false);    // 0x00B8(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offThickness                                                  = new ExternalOffset<FRawDistributionFloat>(0x00F0, false);    // 0x00F0(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             StartOffset                                                    => _offStartOffset.GetValue();
	public FRawDistributionFloat                              Height                                                         => _offHeight.GetValue();
	public FRawDistributionFloat                              Angle                                                          => _offAngle.GetValue();
	public FRawDistributionFloat                              Thickness                                                      => _offThickness.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x0060 (0x0090 - 0x0030)
public class UParticleModuleLocationSkelVertSurface : UParticleModuleLocationBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ELocationSkelVertSurfaceSource>> _offSourceType                                                 = new ExternalOffset<TEnumAsByte<ELocationSkelVertSurfaceSource>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offUniversalOffset                                            = new ExternalOffset<FVector>(0x0034, false);                  // 0x0034(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUpdatePositionEachFrame                                   = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOrientMeshEmitters                                        = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritBoneVelocity                                       = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInheritVelocityScale                                       = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offSkelMeshActorParamName                                     = new ExternalOffset<FName>(0x0048, false);                    // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offValidAssociatedBones                                       = new ExternalOffset<TArray<FName>>(0x0050, false);            // 0x0050(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnforceNormalCheck                                        = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offNormalToCompare                                            = new ExternalOffset<FVector>(0x0064, false);                  // 0x0064(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNormalCheckToleranceDegrees                                = new ExternalOffset<float>(0x0070);                           // 0x0070(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNormalCheckTolerance                                       = new ExternalOffset<float>(0x0074);                           // 0x0074(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<int>>                       _offValidMaterialIndices                                       = new ExternalOffset<TArray<int>>(0x0078, false);              // 0x0078(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritVertexColor                                        = new ExternalOffset<char>(0x0088, false);                     // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritUV                                                 = new ExternalOffset<char>(0x0088, false);                     // 0x0088(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInheritUVChannel                                           = new ExternalOffset<uint>(0x008C);                            // 0x008C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType                                                     => _offSourceType.GetValue();
	public FVector                                            UniversalOffset                                                => _offUniversalOffset.GetValue();
	public float                                              InheritVelocityScale                                           => _offInheritVelocityScale.GetValue();
	public FName                                              SkelMeshActorParamName                                         => _offSkelMeshActorParamName.GetValue();
	public TArray<FName>                                      ValidAssociatedBones                                           => _offValidAssociatedBones.GetValue();
	public FVector                                            NormalToCompare                                                => _offNormalToCompare.GetValue();
	public float                                              NormalCheckToleranceDegrees                                    => _offNormalCheckToleranceDegrees.GetValue();
	public float                                              NormalCheckTolerance                                           => _offNormalCheckTolerance.GetValue();
	public TArray<int>                                        ValidMaterialIndices                                           => _offValidMaterialIndices.GetValue();
	public uint                                               InheritUVChannel                                               => _offInheritUVChannel.GetValue();
	#endregion


}

// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x0088 - 0x0088)
public class UParticleModuleLocationWorldOffset : UParticleModuleLocation
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0020 (0x00A8 - 0x0088)
public class UParticleModuleLocationWorldOffset_Seeded : UParticleModuleLocationWorldOffset
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0088, false);  // 0x0088(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleMaterialBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleMaterialBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleMeshMaterial
// 0x0010 (0x0040 - 0x0030)
public class UParticleModuleMeshMaterial : UParticleModuleMaterialBase
{
	#region Offsets
	private ExternalOffset<TArray<UMaterialInterface>>        _offMeshMaterials                                              = new ExternalOffset<TArray<UMaterialInterface>>(0x0030, false); // 0x0030(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<UMaterialInterface>                         MeshMaterials                                                  => _offMeshMaterials.GetValue();
	#endregion


}

// Class Engine.ParticleModuleRotationBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleRotationBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleMeshRotation
// 0x0051 (0x0081 - 0x0030)
public class UParticleModuleMeshRotation : UParticleModuleRotationBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offStartRotation                                              = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritParent                                             = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             StartRotation                                                  => _offStartRotation.GetValue();
	#endregion


}

// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0027 (0x00A8 - 0x0081)
public class UParticleModuleMeshRotation_Seeded : UParticleModuleMeshRotation
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0088, false);  // 0x0088(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleRotationRateBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleRotationRateBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleMeshRotationRate
// 0x0050 (0x0080 - 0x0030)
public class UParticleModuleMeshRotationRate : UParticleModuleRotationRateBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offStartRotationRate                                          = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             StartRotationRate                                              => _offStartRotationRate.GetValue();
	#endregion


}

// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0020 (0x00A0 - 0x0080)
public class UParticleModuleMeshRotationRate_Seeded : UParticleModuleMeshRotationRate
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0080, false);  // 0x0080(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x0050 (0x0080 - 0x0030)
public class UParticleModuleMeshRotationRateMultiplyLife : UParticleModuleRotationRateBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offLifeMultiplier                                             = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             LifeMultiplier                                                 => _offLifeMultiplier.GetValue();
	#endregion


}

// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0051 (0x0081 - 0x0030)
public class UParticleModuleMeshRotationRateOverLife : UParticleModuleRotationRateBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offRotRate                                                    = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbScaleRotRate                                              = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             RotRate                                                        => _offRotRate.GetValue();
	#endregion


}

// Class Engine.ParticleModuleOrbitBase
// 0x0004 (0x0031 - 0x002D)
public class UParticleModuleOrbitBase : UParticleModule
{
	#region Offsets
//	private ExternalOffset<char>                              _offbUseEmitterTime                                            = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleOrbit
// 0x0113 (0x0144 - 0x0031)
public class UParticleModuleOrbit : UParticleModuleOrbitBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EOrbitChainMode>>      _offChainMode                                                  = new ExternalOffset<TEnumAsByte<EOrbitChainMode>>(0x0038, false); // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offOffsetAmount                                               = new ExternalOffset<FRawDistributionVector>(0x0040, false);   // 0x0040(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FOrbitOptions>                     _offOffsetOptions                                              = new ExternalOffset<FOrbitOptions>(0x0090, false);            // 0x0090(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offRotationAmount                                             = new ExternalOffset<FRawDistributionVector>(0x0098, false);   // 0x0098(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FOrbitOptions>                     _offRotationOptions                                            = new ExternalOffset<FOrbitOptions>(0x00E8, false);            // 0x00E8(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offRotationRateAmount                                         = new ExternalOffset<FRawDistributionVector>(0x00F0, false);   // 0x00F0(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FOrbitOptions>                     _offRotationRateOptions                                        = new ExternalOffset<FOrbitOptions>(0x0140, false);            // 0x0140(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EOrbitChainMode>                       ChainMode                                                      => _offChainMode.GetValue();
	public FRawDistributionVector                             OffsetAmount                                                   => _offOffsetAmount.GetValue();
	public FOrbitOptions                                      OffsetOptions                                                  => _offOffsetOptions.GetValue();
	public FRawDistributionVector                             RotationAmount                                                 => _offRotationAmount.GetValue();
	public FOrbitOptions                                      RotationOptions                                                => _offRotationOptions.GetValue();
	public FRawDistributionVector                             RotationRateAmount                                             => _offRotationRateAmount.GetValue();
	public FOrbitOptions                                      RotationRateOptions                                            => _offRotationRateOptions.GetValue();
	#endregion


}

// Class Engine.ParticleModuleOrientationBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleOrientationBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleOrientationAxisLock
// 0x0001 (0x0031 - 0x0030)
public class UParticleModuleOrientationAxisLock : UParticleModuleOrientationBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EParticleAxisLock>>    _offLockAxisFlags                                              = new ExternalOffset<TEnumAsByte<EParticleAxisLock>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EParticleAxisLock>                     LockAxisFlags                                                  => _offLockAxisFlags.GetValue();
	#endregion


}

// Class Engine.ParticleModuleParameterBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleParameterBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleParameterDynamic
// 0x0015 (0x0045 - 0x0030)
public class UParticleModuleParameterDynamic : UParticleModuleParameterBase
{
	#region Offsets
	private ExternalOffset<TArray<FEmitterDynamicParameter>>  _offDynamicParams                                              = new ExternalOffset<TArray<FEmitterDynamicParameter>>(0x0030, false); // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offUpdateFlags                                                = new ExternalOffset<int>(0x0040);                             // 0x0040(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsesVelocity                                              = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FEmitterDynamicParameter>                   DynamicParams                                                  => _offDynamicParams.GetValue();
	public int                                                UpdateFlags                                                    => _offUpdateFlags.GetValue();
	#endregion


}

// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0023 (0x0068 - 0x0045)
public class UParticleModuleParameterDynamic_Seeded : UParticleModuleParameterDynamic
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0048, false);  // 0x0048(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModulePivotOffset
// 0x0008 (0x0038 - 0x0030)
public class UParticleModulePivotOffset : UParticleModuleLocationBase
{
	#region Offsets
	private ExternalOffset<FVector2D>                         _offPivotOffset                                                = new ExternalOffset<FVector2D>(0x0030, false);                // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector2D                                          PivotOffset                                                    => _offPivotOffset.GetValue();
	#endregion


}

// Class Engine.ParticleModuleRequired
// 0x0123 (0x0150 - 0x002D)
public class UParticleModuleRequired : UParticleModule
{
	#region Offsets
	private ExternalOffset<UMaterialInterface>                _offMaterial                                                   = new ExternalOffset<UMaterialInterface>(0x0030, true);        // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offEmitterOrigin                                              = new ExternalOffset<FVector>(0x0038, false);                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offEmitterRotation                                            = new ExternalOffset<FRotator>(0x0044, false);                 // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleScreenAlignment>> _offScreenAlignment                                            = new ExternalOffset<TEnumAsByte<EParticleScreenAlignment>>(0x0050, false); // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinFacingCameraBlendDistance                               = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxFacingCameraBlendDistance                               = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseLocalSpace                                             = new ExternalOffset<char>(0x005C, false);                     // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbKillOnDeactivate                                          = new ExternalOffset<char>(0x005C, false);                     // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbKillOnCompleted                                           = new ExternalOffset<char>(0x005C, false);                     // 0x005C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleSortMode>>    _offSortMode                                                   = new ExternalOffset<TEnumAsByte<EParticleSortMode>>(0x0060, false); // 0x0060(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseLegacyEmitterTime                                      = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRemoveHMDRoll                                             = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEmitterDuration                                            = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEmitterDurationLow                                         = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEmitterDurationUseRange                                   = new ExternalOffset<char>(0x0070, false);                     // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDurationRecalcEachLoop                                    = new ExternalOffset<char>(0x0070, false);                     // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offEmitterLoops                                               = new ExternalOffset<int>(0x0074);                             // 0x0074(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offSpawnRate                                                  = new ExternalOffset<FRawDistributionFloat>(0x0078, false);    // 0x0078(0x0038) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleBurstMethod>> _offParticleBurstMethod                                        = new ExternalOffset<TEnumAsByte<EParticleBurstMethod>>(0x00B0, false); // 0x00B0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FParticleBurst>>            _offBurstList                                                  = new ExternalOffset<TArray<FParticleBurst>>(0x00B8, false);   // 0x00B8(0x0010) (ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEmitterDelay                                               = new ExternalOffset<float>(0x00C8);                           // 0x00C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEmitterDelayLow                                            = new ExternalOffset<float>(0x00CC);                           // 0x00CC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEmitterDelayUseRange                                      = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDelayFirstLoopOnly                                        = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleSubUVInterpMethod>> _offInterpolationMethod                                        = new ExternalOffset<TEnumAsByte<EParticleSubUVInterpMethod>>(0x00D4, false); // 0x00D4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSubImages_Horizontal                                       = new ExternalOffset<int>(0x00D8);                             // 0x00D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSubImages_Vertical                                         = new ExternalOffset<int>(0x00DC);                             // 0x00DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbScaleUV                                                   = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRandomImageTime                                            = new ExternalOffset<float>(0x00E4);                           // 0x00E4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offRandomImageChanges                                         = new ExternalOffset<int>(0x00E8);                             // 0x00E8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideSystemMacroUV                                     = new ExternalOffset<char>(0x00EC, false);                     // 0x00EC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offMacroUVPosition                                            = new ExternalOffset<FVector>(0x00F0, false);                  // 0x00F0(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMacroUVRadius                                              = new ExternalOffset<float>(0x00FC);                           // 0x00FC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseMaxDrawCount                                           = new ExternalOffset<char>(0x0100, false);                     // 0x0100(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxDrawCount                                               = new ExternalOffset<int>(0x0104);                             // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EParticleUVFlipMode>               _offUVFlippingMode                                             = new ExternalOffset<EParticleUVFlipMode>(0x0108, false);      // 0x0108(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture2D>                        _offCutoutTexture                                              = new ExternalOffset<UTexture2D>(0x0110, true);                // 0x0110(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESubUVBoundingVertexCount>> _offBoundingMode                                               = new ExternalOffset<TEnumAsByte<ESubUVBoundingVertexCount>>(0x0118, false); // 0x0118(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EOpacitySourceMode>>   _offOpacitySourceMode                                          = new ExternalOffset<TEnumAsByte<EOpacitySourceMode>>(0x0119, false); // 0x0119(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAlphaThreshold                                             = new ExternalOffset<float>(0x011C);                           // 0x011C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EEmitterNormalsMode>>  _offEmitterNormalsMode                                         = new ExternalOffset<TEnumAsByte<EEmitterNormalsMode>>(0x0120, false); // 0x0120(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offNormalsSphereCenter                                        = new ExternalOffset<FVector>(0x0124, false);                  // 0x0124(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offNormalsCylinderDirection                                   = new ExternalOffset<FVector>(0x0130, false);                  // 0x0130(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOrbitModuleAffectsVelocityAlignment                       = new ExternalOffset<char>(0x013C, false);                     // 0x013C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offNamedMaterialOverrides                                     = new ExternalOffset<TArray<FName>>(0x0140, false);            // 0x0140(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UMaterialInterface                                 Material                                                       => _offMaterial.GetValue();
	public FVector                                            EmitterOrigin                                                  => _offEmitterOrigin.GetValue();
	public FRotator                                           EmitterRotation                                                => _offEmitterRotation.GetValue();
	public TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment                                                => _offScreenAlignment.GetValue();
	public float                                              MinFacingCameraBlendDistance                                   => _offMinFacingCameraBlendDistance.GetValue();
	public float                                              MaxFacingCameraBlendDistance                                   => _offMaxFacingCameraBlendDistance.GetValue();
	public TEnumAsByte<EParticleSortMode>                     SortMode                                                       => _offSortMode.GetValue();
	public float                                              EmitterDuration                                                => _offEmitterDuration.GetValue();
	public float                                              EmitterDurationLow                                             => _offEmitterDurationLow.GetValue();
	public int                                                EmitterLoops                                                   => _offEmitterLoops.GetValue();
	public FRawDistributionFloat                              SpawnRate                                                      => _offSpawnRate.GetValue();
	public TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod                                            => _offParticleBurstMethod.GetValue();
	public TArray<FParticleBurst>                             BurstList                                                      => _offBurstList.GetValue();
	public float                                              EmitterDelay                                                   => _offEmitterDelay.GetValue();
	public float                                              EmitterDelayLow                                                => _offEmitterDelayLow.GetValue();
	public TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod                                            => _offInterpolationMethod.GetValue();
	public int                                                SubImages_Horizontal                                           => _offSubImages_Horizontal.GetValue();
	public int                                                SubImages_Vertical                                             => _offSubImages_Vertical.GetValue();
	public float                                              RandomImageTime                                                => _offRandomImageTime.GetValue();
	public int                                                RandomImageChanges                                             => _offRandomImageChanges.GetValue();
	public FVector                                            MacroUVPosition                                                => _offMacroUVPosition.GetValue();
	public float                                              MacroUVRadius                                                  => _offMacroUVRadius.GetValue();
	public int                                                MaxDrawCount                                                   => _offMaxDrawCount.GetValue();
	public EParticleUVFlipMode                                UVFlippingMode                                                 => _offUVFlippingMode.GetValue();
	public UTexture2D                                         CutoutTexture                                                  => _offCutoutTexture.GetValue();
	public TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode                                                   => _offBoundingMode.GetValue();
	public TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode                                              => _offOpacitySourceMode.GetValue();
	public float                                              AlphaThreshold                                                 => _offAlphaThreshold.GetValue();
	public TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode                                             => _offEmitterNormalsMode.GetValue();
	public FVector                                            NormalsSphereCenter                                            => _offNormalsSphereCenter.GetValue();
	public FVector                                            NormalsCylinderDirection                                       => _offNormalsCylinderDirection.GetValue();
	public TArray<FName>                                      NamedMaterialOverrides                                         => _offNamedMaterialOverrides.GetValue();
	#endregion


}

// Class Engine.ParticleModuleRotation
// 0x0038 (0x0068 - 0x0030)
public class UParticleModuleRotation : UParticleModuleRotationBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offStartRotation                                              = new ExternalOffset<FRawDistributionFloat>(0x0030, false);    // 0x0030(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              StartRotation                                                  => _offStartRotation.GetValue();
	#endregion


}

// Class Engine.ParticleModuleRotation_Seeded
// 0x0020 (0x0088 - 0x0068)
public class UParticleModuleRotation_Seeded : UParticleModuleRotation
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0068, false);  // 0x0068(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleRotationOverLifetime
// 0x0039 (0x0069 - 0x0030)
public class UParticleModuleRotationOverLifetime : UParticleModuleRotationBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offRotationOverLife                                           = new ExternalOffset<FRawDistributionFloat>(0x0030, false);    // 0x0030(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offScale                                                      = new ExternalOffset<char>(0x0068, false);                     // 0x0068(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              RotationOverLife                                               => _offRotationOverLife.GetValue();
	#endregion


}

// Class Engine.ParticleModuleRotationRate
// 0x0038 (0x0068 - 0x0030)
public class UParticleModuleRotationRate : UParticleModuleRotationRateBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offStartRotationRate                                          = new ExternalOffset<FRawDistributionFloat>(0x0030, false);    // 0x0030(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              StartRotationRate                                              => _offStartRotationRate.GetValue();
	#endregion


}

// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0020 (0x0088 - 0x0068)
public class UParticleModuleRotationRate_Seeded : UParticleModuleRotationRate
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0068, false);  // 0x0068(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x0038 (0x0068 - 0x0030)
public class UParticleModuleRotationRateMultiplyLife : UParticleModuleRotationRateBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offLifeMultiplier                                             = new ExternalOffset<FRawDistributionFloat>(0x0030, false);    // 0x0030(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              LifeMultiplier                                                 => _offLifeMultiplier.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSizeBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleSizeBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleSize
// 0x0050 (0x0080 - 0x0030)
public class UParticleModuleSize : UParticleModuleSizeBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offStartSize                                                  = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             StartSize                                                      => _offStartSize.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSize_Seeded
// 0x0020 (0x00A0 - 0x0080)
public class UParticleModuleSize_Seeded : UParticleModuleSize
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x0080, false);  // 0x0080(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0051 (0x0081 - 0x0030)
public class UParticleModuleSizeMultiplyLife : UParticleModuleSizeBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offLifeMultiplier                                             = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offMultiplyX                                                  = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offMultiplyY                                                  = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offMultiplyZ                                                  = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             LifeMultiplier                                                 => _offLifeMultiplier.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSizeScale
// 0x0051 (0x0081 - 0x0030)
public class UParticleModuleSizeScale : UParticleModuleSizeBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offSizeScale                                                  = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offEnableX                                                    = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offEnableY                                                    = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offEnableZ                                                    = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             SizeScale                                                      => _offSizeScale.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSizeScaleBySpeed
// 0x0010 (0x0040 - 0x0030)
public class UParticleModuleSizeScaleBySpeed : UParticleModuleSizeBase
{
	#region Offsets
	private ExternalOffset<FVector2D>                         _offSpeedScale                                                 = new ExternalOffset<FVector2D>(0x0030, false);                // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                         _offMaxScale                                                   = new ExternalOffset<FVector2D>(0x0038, false);                // 0x0038(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector2D                                          SpeedScale                                                     => _offSpeedScale.GetValue();
	public FVector2D                                          MaxScale                                                       => _offMaxScale.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSourceMovement
// 0x0050 (0x0080 - 0x0030)
public class UParticleModuleSourceMovement : UParticleModuleLocationBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offSourceMovementScale                                        = new ExternalOffset<FRawDistributionVector>(0x0030, false);   // 0x0030(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             SourceMovementScale                                            => _offSourceMovementScale.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSpawnBase
// 0x0004 (0x0031 - 0x002D)
public class UParticleModuleSpawnBase : UParticleModule
{
	#region Offsets
//	private ExternalOffset<char>                              _offbProcessSpawnRate                                          = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbProcessBurstList                                          = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleSpawn
// 0x00C8 (0x00F9 - 0x0031)
public class UParticleModuleSpawn : UParticleModuleSpawnBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offRate                                                       = new ExternalOffset<FRawDistributionFloat>(0x0038, false);    // 0x0038(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offRateScale                                                  = new ExternalOffset<FRawDistributionFloat>(0x0070, false);    // 0x0070(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleBurstMethod>> _offParticleBurstMethod                                        = new ExternalOffset<TEnumAsByte<EParticleBurstMethod>>(0x00A8, false); // 0x00A8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FParticleBurst>>            _offBurstList                                                  = new ExternalOffset<TArray<FParticleBurst>>(0x00B0, false);   // 0x00B0(0x0010) (Edit, ExportObject, ZeroConstructor, NoClear, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offBurstScale                                                 = new ExternalOffset<FRawDistributionFloat>(0x00C0, false);    // 0x00C0(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbApplyGlobalSpawnRateScale                                 = new ExternalOffset<char>(0x00F8, false);                     // 0x00F8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              Rate                                                           => _offRate.GetValue();
	public FRawDistributionFloat                              RateScale                                                      => _offRateScale.GetValue();
	public TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod                                            => _offParticleBurstMethod.GetValue();
	public TArray<FParticleBurst>                             BurstList                                                      => _offBurstList.GetValue();
	public FRawDistributionFloat                              BurstScale                                                     => _offBurstScale.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSpawnPerUnit
// 0x0054 (0x0085 - 0x0031)
public class UParticleModuleSpawnPerUnit : UParticleModuleSpawnBase
{
	#region Offsets
	private ExternalOffset<float>                             _offUnitScalar                                                 = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offSpawnPerUnit                                               = new ExternalOffset<FRawDistributionFloat>(0x0040, false);    // 0x0040(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreSpawnRateWhenMoving                                 = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMovementTolerance                                          = new ExternalOffset<float>(0x007C);                           // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxFrameDistance                                           = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreMovementAlongX                                      = new ExternalOffset<char>(0x0084, false);                     // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreMovementAlongY                                      = new ExternalOffset<char>(0x0084, false);                     // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreMovementAlongZ                                      = new ExternalOffset<char>(0x0084, false);                     // 0x0084(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              UnitScalar                                                     => _offUnitScalar.GetValue();
	public FRawDistributionFloat                              SpawnPerUnit                                                   => _offSpawnPerUnit.GetValue();
	public float                                              MovementTolerance                                              => _offMovementTolerance.GetValue();
	public float                                              MaxFrameDistance                                               => _offMaxFrameDistance.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSubUVBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleSubUVBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleSubUV
// 0x0041 (0x0071 - 0x0030)
public class UParticleModuleSubUV : UParticleModuleSubUVBase
{
	#region Offsets
	private ExternalOffset<USubUVAnimation>                   _offAnimation                                                  = new ExternalOffset<USubUVAnimation>(0x0030, true);           // 0x0030(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offSubImageIndex                                              = new ExternalOffset<FRawDistributionFloat>(0x0038, false);    // 0x0038(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseRealTime                                               = new ExternalOffset<char>(0x0070, false);                     // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USubUVAnimation                                    Animation                                                      => _offAnimation.GetValue();
	public FRawDistributionFloat                              SubImageIndex                                                  => _offSubImageIndex.GetValue();
	#endregion


}

// Class Engine.ParticleModuleSubUVMovie
// 0x004B (0x00BC - 0x0071)
public class UParticleModuleSubUVMovie : UParticleModuleSubUV
{
	#region Offsets
//	private ExternalOffset<char>                              _offbUseEmitterTime                                            = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offFrameRate                                                  = new ExternalOffset<FRawDistributionFloat>(0x0080, false);    // 0x0080(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offStartingFrame                                              = new ExternalOffset<int>(0x00B8);                             // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              FrameRate                                                      => _offFrameRate.GetValue();
	public int                                                StartingFrame                                                  => _offStartingFrame.GetValue();
	#endregion


}

// Class Engine.ParticleModuleTrailBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleTrailBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleTrailSource
// 0x0065 (0x0095 - 0x0030)
public class UParticleModuleTrailSource : UParticleModuleTrailBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ETrail2SourceMethod>>  _offSourceMethod                                               = new ExternalOffset<TEnumAsByte<ETrail2SourceMethod>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offSourceName                                                 = new ExternalOffset<FName>(0x0034, false);                    // 0x0034(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offSourceStrength                                             = new ExternalOffset<FRawDistributionFloat>(0x0040, false);    // 0x0040(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLockSourceStength                                         = new ExternalOffset<char>(0x0078, false);                     // 0x0078(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSourceOffsetCount                                          = new ExternalOffset<int>(0x007C);                             // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FVector>>                   _offSourceOffsetDefaults                                       = new ExternalOffset<TArray<FVector>>(0x0080, false);          // 0x0080(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleSourceSelectionMethod>> _offSelectionMethod                                            = new ExternalOffset<TEnumAsByte<EParticleSourceSelectionMethod>>(0x0090, false); // 0x0090(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritRotation                                           = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ETrail2SourceMethod>                   SourceMethod                                                   => _offSourceMethod.GetValue();
	public FName                                              SourceName                                                     => _offSourceName.GetValue();
	public FRawDistributionFloat                              SourceStrength                                                 => _offSourceStrength.GetValue();
	public int                                                SourceOffsetCount                                              => _offSourceOffsetCount.GetValue();
	public TArray<FVector>                                    SourceOffsetDefaults                                           => _offSourceOffsetDefaults.GetValue();
	public TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod                                                => _offSelectionMethod.GetValue();
	#endregion


}

// Class Engine.ParticleModuleTypeDataBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleTypeDataBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x0014 (0x0044 - 0x0030)
public class UParticleModuleTypeDataAnimTrail : UParticleModuleTypeDataBase
{
	#region Offsets
//	private ExternalOffset<char>                              _offbDeadTrailsOnDeactivate                                    = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnablePreviousTangentRecalculation                        = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTangentRecalculationEveryFrame                            = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTilingDistance                                             = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceTessellationStepSize                               = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTangentTessellationStepSize                                = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWidthTessellationStepSize                                  = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              TilingDistance                                                 => _offTilingDistance.GetValue();
	public float                                              DistanceTessellationStepSize                                   => _offDistanceTessellationStepSize.GetValue();
	public float                                              TangentTessellationStepSize                                    => _offTangentTessellationStepSize.GetValue();
	public float                                              WidthTessellationStepSize                                      => _offWidthTessellationStepSize.GetValue();
	#endregion


}

// Class Engine.ParticleModuleTypeDataBeam2
// 0x00E1 (0x0111 - 0x0030)
public class UParticleModuleTypeDataBeam2 : UParticleModuleTypeDataBase
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EBeam2Method>>         _offBeamMethod                                                 = new ExternalOffset<TEnumAsByte<EBeam2Method>>(0x0030, false); // 0x0030(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offTextureTile                                                = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTextureTileDistance                                        = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSheets                                                     = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxBeamCount                                               = new ExternalOffset<int>(0x0040);                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpeed                                                      = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offInterpolationPoints                                        = new ExternalOffset<int>(0x0048);                             // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAlwaysOn                                                  = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offUpVectorStepSize                                           = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offBranchParentName                                           = new ExternalOffset<FName>(0x0054, false);                    // 0x0054(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offdistance                                                   = new ExternalOffset<FRawDistributionFloat>(0x0060, false);    // 0x0060(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EBeamTaperMethod>>     _offTaperMethod                                                = new ExternalOffset<TEnumAsByte<EBeamTaperMethod>>(0x0098, false); // 0x0098(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offTaperFactor                                                = new ExternalOffset<FRawDistributionFloat>(0x00A0, false);    // 0x00A0(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offTaperScale                                                 = new ExternalOffset<FRawDistributionFloat>(0x00D8, false);    // 0x00D8(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offRenderGeometry                                             = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offRenderDirectLine                                           = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offRenderLines                                                = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offRenderTessellation                                         = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EBeam2Method>                          BeamMethod                                                     => _offBeamMethod.GetValue();
	public int                                                TextureTile                                                    => _offTextureTile.GetValue();
	public float                                              TextureTileDistance                                            => _offTextureTileDistance.GetValue();
	public int                                                Sheets                                                         => _offSheets.GetValue();
	public int                                                MaxBeamCount                                                   => _offMaxBeamCount.GetValue();
	public float                                              Speed                                                          => _offSpeed.GetValue();
	public int                                                InterpolationPoints                                            => _offInterpolationPoints.GetValue();
	public int                                                UpVectorStepSize                                               => _offUpVectorStepSize.GetValue();
	public FName                                              BranchParentName                                               => _offBranchParentName.GetValue();
	public FRawDistributionFloat                              distance                                                       => _offdistance.GetValue();
	public TEnumAsByte<EBeamTaperMethod>                      TaperMethod                                                    => _offTaperMethod.GetValue();
	public FRawDistributionFloat                              TaperFactor                                                    => _offTaperFactor.GetValue();
	public FRawDistributionFloat                              TaperScale                                                     => _offTaperScale.GetValue();
	#endregion


}

// Class Engine.ParticleModuleTypeDataGpu
// 0x0425 (0x0455 - 0x0030)
public class UParticleModuleTypeDataGpu : UParticleModuleTypeDataBase
{
	#region Offsets
	private ExternalOffset<FGPUSpriteEmitterInfo>             _offEmitterInfo                                                = new ExternalOffset<FGPUSpriteEmitterInfo>(0x0030, false);    // 0x0030(0x02C0) (ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FGPUSpriteResourceData>            _offResourceData                                               = new ExternalOffset<FGPUSpriteResourceData>(0x02F0, false);   // 0x02F0(0x0160) (NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCameraMotionBlurAmount                                     = new ExternalOffset<float>(0x0450);                           // 0x0450(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClearExistingParticlesOnInit                              = new ExternalOffset<char>(0x0454, false);                     // 0x0454(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FGPUSpriteEmitterInfo                              EmitterInfo                                                    => _offEmitterInfo.GetValue();
	public FGPUSpriteResourceData                             ResourceData                                                   => _offResourceData.GetValue();
	public float                                              CameraMotionBlurAmount                                         => _offCameraMotionBlurAmount.GetValue();
	#endregion


}

// Class Engine.ParticleModuleTypeDataMesh
// 0x008D (0x00BD - 0x0030)
public class UParticleModuleTypeDataMesh : UParticleModuleTypeDataBase
{
	#region Offsets
	private ExternalOffset<UStaticMesh>                       _offMesh                                                       = new ExternalOffset<UStaticMesh>(0x0030, true);               // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseStaticMeshLODs                                         = new ExternalOffset<byte/*(bool)*/>(0x0038);                  // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLODSizeScale                                               = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offCastShadows                                                = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offDoCollisions                                               = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMeshScreenAlignment>> _offMeshAlignment                                              = new ExternalOffset<TEnumAsByte<EMeshScreenAlignment>>(0x0044, false); // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideMaterial                                          = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideDefaultMotionBlurSettings                         = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableMotionBlur                                          = new ExternalOffset<char>(0x0048, false);                     // 0x0048(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitch                                                      = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRoll                                                       = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offYaw                                                        = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionVector>            _offRollPitchYawRange                                          = new ExternalOffset<FRawDistributionVector>(0x0058, false);   // 0x0058(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleAxisLock>>    _offAxisLockOption                                             = new ExternalOffset<TEnumAsByte<EParticleAxisLock>>(0x00B0, false); // 0x00B0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCameraFacing                                              = new ExternalOffset<char>(0x00B4, false);                     // 0x00B4(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMeshCameraFacingUpAxis>> _offCameraFacingUpAxisOption                                   = new ExternalOffset<TEnumAsByte<EMeshCameraFacingUpAxis>>(0x00B8, false); // 0x00B8(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMeshCameraFacingOptions>> _offCameraFacingOption                                         = new ExternalOffset<TEnumAsByte<EMeshCameraFacingOptions>>(0x00B9, false); // 0x00B9(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbApplyParticleRotationAsSpin                               = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbFaceCameraDirectionRatherThanPosition                     = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCollisionsConsiderPartilceSize                            = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UStaticMesh                                        Mesh                                                           => _offMesh.GetValue();
	public byte/*(bool)*/                                     bUseStaticMeshLODs                                             => _offbUseStaticMeshLODs.GetValue();
	public float                                              LODSizeScale                                                   => _offLODSizeScale.GetValue();
	public TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment                                                  => _offMeshAlignment.GetValue();
	public float                                              Pitch                                                          => _offPitch.GetValue();
	public float                                              Roll                                                           => _offRoll.GetValue();
	public float                                              Yaw                                                            => _offYaw.GetValue();
	public FRawDistributionVector                             RollPitchYawRange                                              => _offRollPitchYawRange.GetValue();
	public TEnumAsByte<EParticleAxisLock>                     AxisLockOption                                                 => _offAxisLockOption.GetValue();
	public TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption                                       => _offCameraFacingUpAxisOption.GetValue();
	public TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption                                             => _offCameraFacingOption.GetValue();
	#endregion


}

// Class Engine.ParticleModuleTypeDataRibbon
// 0x0030 (0x0060 - 0x0030)
public class UParticleModuleTypeDataRibbon : UParticleModuleTypeDataBase
{
	#region Offsets
	private ExternalOffset<int>                               _offMaxTessellationBetweenParticles                            = new ExternalOffset<int>(0x0030);                             // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSheetsPerTrail                                             = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxTrailCount                                              = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxParticleInTrailCount                                    = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDeadTrailsOnDeactivate                                    = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDeadTrailsOnSourceLoss                                    = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClipSourceSegement                                        = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnablePreviousTangentRecalculation                        = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTangentRecalculationEveryFrame                            = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSpawnInitialParticle                                      = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETrailsRenderAxisOption>> _offRenderAxis                                                 = new ExternalOffset<TEnumAsByte<ETrailsRenderAxisOption>>(0x0044, false); // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTangentSpawningScalar                                      = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenderGeometry                                            = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenderSpawnPoints                                         = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenderTangents                                            = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenderTessellation                                        = new ExternalOffset<char>(0x004C, false);                     // 0x004C(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTilingDistance                                             = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceTessellationStepSize                               = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableTangentDiffInterpScale                              = new ExternalOffset<char>(0x0058, false);                     // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTangentTessellationScalar                                  = new ExternalOffset<float>(0x005C);                           // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                MaxTessellationBetweenParticles                                => _offMaxTessellationBetweenParticles.GetValue();
	public int                                                SheetsPerTrail                                                 => _offSheetsPerTrail.GetValue();
	public int                                                MaxTrailCount                                                  => _offMaxTrailCount.GetValue();
	public int                                                MaxParticleInTrailCount                                        => _offMaxParticleInTrailCount.GetValue();
	public TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis                                                     => _offRenderAxis.GetValue();
	public float                                              TangentSpawningScalar                                          => _offTangentSpawningScalar.GetValue();
	public float                                              TilingDistance                                                 => _offTilingDistance.GetValue();
	public float                                              DistanceTessellationStepSize                                   => _offDistanceTessellationStepSize.GetValue();
	public float                                              TangentTessellationScalar                                      => _offTangentTessellationScalar.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVectorFieldBase
// 0x0003 (0x0030 - 0x002D)
public class UParticleModuleVectorFieldBase : UParticleModule
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleVectorFieldGlobal
// 0x000C (0x003C - 0x0030)
public class UParticleModuleVectorFieldGlobal : UParticleModuleVectorFieldBase
{
	#region Offsets
//	private ExternalOffset<char>                              _offbOverrideGlobalVectorFieldTightness                        = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGlobalVectorFieldScale                                     = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGlobalVectorFieldTightness                                 = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              GlobalVectorFieldScale                                         => _offGlobalVectorFieldScale.GetValue();
	public float                                              GlobalVectorFieldTightness                                     => _offGlobalVectorFieldTightness.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVectorFieldLocal
// 0x0035 (0x0065 - 0x0030)
public class UParticleModuleVectorFieldLocal : UParticleModuleVectorFieldBase
{
	#region Offsets
	private ExternalOffset<UVectorField>                      _offVectorField                                                = new ExternalOffset<UVectorField>(0x0030, true);              // 0x0030(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offRelativeTranslation                                        = new ExternalOffset<FVector>(0x0038, false);                  // 0x0038(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offRelativeRotation                                           = new ExternalOffset<FRotator>(0x0044, false);                 // 0x0044(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offRelativeScale3D                                            = new ExternalOffset<FVector>(0x0050, false);                  // 0x0050(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offIntensity                                                  = new ExternalOffset<float>(0x005C);                           // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTightness                                                  = new ExternalOffset<float>(0x0060);                           // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreComponentTransform                                  = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTileX                                                     = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTileY                                                     = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTileZ                                                     = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseFixDT                                                  = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UVectorField                                       VectorField                                                    => _offVectorField.GetValue();
	public FVector                                            RelativeTranslation                                            => _offRelativeTranslation.GetValue();
	public FRotator                                           RelativeRotation                                               => _offRelativeRotation.GetValue();
	public FVector                                            RelativeScale3D                                                => _offRelativeScale3D.GetValue();
	public float                                              Intensity                                                      => _offIntensity.GetValue();
	public float                                              Tightness                                                      => _offTightness.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVectorFieldRotation
// 0x0018 (0x0048 - 0x0030)
public class UParticleModuleVectorFieldRotation : UParticleModuleVectorFieldBase
{
	#region Offsets
	private ExternalOffset<FVector>                           _offMinInitialRotation                                         = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offMaxInitialRotation                                         = new ExternalOffset<FVector>(0x003C, false);                  // 0x003C(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            MinInitialRotation                                             => _offMinInitialRotation.GetValue();
	public FVector                                            MaxInitialRotation                                             => _offMaxInitialRotation.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVectorFieldRotationRate
// 0x000C (0x003C - 0x0030)
public class UParticleModuleVectorFieldRotationRate : UParticleModuleVectorFieldBase
{
	#region Offsets
	private ExternalOffset<FVector>                           _offRotationRate                                               = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            RotationRate                                                   => _offRotationRate.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVectorFieldScale
// 0x0040 (0x0070 - 0x0030)
public class UParticleModuleVectorFieldScale : UParticleModuleVectorFieldBase
{
	#region Offsets
	private ExternalOffset<UDistributionFloat>                _offVectorFieldScale                                           = new ExternalOffset<UDistributionFloat>(0x0030, true);        // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offVectorFieldScaleRaw                                        = new ExternalOffset<FRawDistributionFloat>(0x0038, false);    // 0x0038(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UDistributionFloat                                 VectorFieldScale                                               => _offVectorFieldScale.GetValue();
	public FRawDistributionFloat                              VectorFieldScaleRaw                                            => _offVectorFieldScaleRaw.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVectorFieldScaleOverLife
// 0x0040 (0x0070 - 0x0030)
public class UParticleModuleVectorFieldScaleOverLife : UParticleModuleVectorFieldBase
{
	#region Offsets
	private ExternalOffset<UDistributionFloat>                _offVectorFieldScaleOverLife                                   = new ExternalOffset<UDistributionFloat>(0x0030, true);        // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offVectorFieldScaleOverLifeRaw                                = new ExternalOffset<FRawDistributionFloat>(0x0038, false);    // 0x0038(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UDistributionFloat                                 VectorFieldScaleOverLife                                       => _offVectorFieldScaleOverLife.GetValue();
	public FRawDistributionFloat                              VectorFieldScaleOverLifeRaw                                    => _offVectorFieldScaleOverLifeRaw.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVelocityBase
// 0x0004 (0x0031 - 0x002D)
public class UParticleModuleVelocityBase : UParticleModule
{
	#region Offsets
//	private ExternalOffset<char>                              _offbInWorldSpace                                              = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbApplyOwnerScale                                           = new ExternalOffset<char>(0x0030, false);                     // 0x0030(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleModuleVelocity
// 0x008F (0x00C0 - 0x0031)
public class UParticleModuleVelocity : UParticleModuleVelocityBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offStartVelocity                                              = new ExternalOffset<FRawDistributionVector>(0x0038, false);   // 0x0038(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offStartVelocityRadial                                        = new ExternalOffset<FRawDistributionFloat>(0x0088, false);    // 0x0088(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             StartVelocity                                                  => _offStartVelocity.GetValue();
	public FRawDistributionFloat                              StartVelocityRadial                                            => _offStartVelocityRadial.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVelocity_Seeded
// 0x0020 (0x00E0 - 0x00C0)
public class UParticleModuleVelocity_Seeded : UParticleModuleVelocity
{
	#region Offsets
	private ExternalOffset<FParticleRandomSeedInfo>           _offRandomSeedInfo                                             = new ExternalOffset<FParticleRandomSeedInfo>(0x00C0, false);  // 0x00C0(0x0020) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FParticleRandomSeedInfo                            RandomSeedInfo                                                 => _offRandomSeedInfo.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVelocityCone
// 0x0083 (0x00B4 - 0x0031)
public class UParticleModuleVelocityCone : UParticleModuleVelocityBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionFloat>             _offAngle                                                      = new ExternalOffset<FRawDistributionFloat>(0x0038, false);    // 0x0038(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FRawDistributionFloat>             _offVelocity                                                   = new ExternalOffset<FRawDistributionFloat>(0x0070, false);    // 0x0070(0x0038) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offDirection                                                  = new ExternalOffset<FVector>(0x00A8, false);                  // 0x00A8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionFloat                              Angle                                                          => _offAngle.GetValue();
	public FRawDistributionFloat                              Velocity                                                       => _offVelocity.GetValue();
	public FVector                                            Direction                                                      => _offDirection.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVelocityInheritParent
// 0x0057 (0x0088 - 0x0031)
public class UParticleModuleVelocityInheritParent : UParticleModuleVelocityBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offScale                                                      = new ExternalOffset<FRawDistributionVector>(0x0038, false);   // 0x0038(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             Scale                                                          => _offScale.GetValue();
	#endregion


}

// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0058 (0x0089 - 0x0031)
public class UParticleModuleVelocityOverLifetime : UParticleModuleVelocityBase
{
	#region Offsets
	private ExternalOffset<FRawDistributionVector>            _offVelOverLife                                                = new ExternalOffset<FRawDistributionVector>(0x0038, false);   // 0x0038(0x0050) (Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offAbsolute                                                   = new ExternalOffset<char>(0x0088, false);                     // 0x0088(0x0001) BIT_FIELD (Edit, ExportObject, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRawDistributionVector                             VelOverLife                                                    => _offVelOverLife.GetValue();
	#endregion


}

// Class Engine.ParticleSpriteEmitter
// 0x015F (0x01C0 - 0x0061)
public class UParticleSpriteEmitter : UParticleEmitter
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.FXSystemAsset
// 0x0000 (0x0028 - 0x0028)
public class UFXSystemAsset : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleSystem
// 0x0120 (0x0148 - 0x0028)
public class UParticleSystem : UFXSystemAsset
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EParticleSystemUpdateMode>> _offSystemUpdateMode                                           = new ExternalOffset<TEnumAsByte<EParticleSystemUpdateMode>>(0x0028, false); // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offUpdateTime_FPS                                             = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offUpdateTime_Delta                                           = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWarmupTime                                                 = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWarmupTickRate                                             = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleEmitter>>          _offEmitters                                                   = new ExternalOffset<TArray<UParticleEmitter>>(0x0040, false); // 0x0040(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<UParticleSystemComponent>          _offPreviewComponent                                           = new ExternalOffset<UParticleSystemComponent>(0x0050, true);  // 0x0050(0x0008) (ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UInterpCurveEdSetup>               _offCurveEdSetup                                               = new ExternalOffset<UInterpCurveEdSetup>(0x0058, true);       // 0x0058(0x0008) (ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOrientZAxisTowardCamera                                   = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLODDistanceCheckTime                                       = new ExternalOffset<float>(0x0064);                           // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleSystemLODMethod>> _offLODMethod                                                  = new ExternalOffset<TEnumAsByte<EParticleSystemLODMethod>>(0x0068, false); // 0x0068(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<float>>                     _offLODDistances                                               = new ExternalOffset<TArray<float>>(0x0070, false);            // 0x0070(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRegenerateLODDuplicate                                    = new ExternalOffset<char>(0x0080, false);                     // 0x0080(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FParticleSystemLOD>>        _offLODSettings                                                = new ExternalOffset<TArray<FParticleSystemLOD>>(0x0088, false); // 0x0088(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseFixedRelativeBoundingBox                               = new ExternalOffset<char>(0x0098, false);                     // 0x0098(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBox>                              _offFixedRelativeBoundingBox                                   = new ExternalOffset<FBox>(0x009C, false);                     // 0x009C(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSecondsBeforeInactive                                      = new ExternalOffset<float>(0x00B8);                           // 0x00B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldResetPeakCounts                                     = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasPhysics                                                = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseRealtimeThumbnail                                      = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offThumbnailImageOutOfDate                                    = new ExternalOffset<char>(0x00BC, false);                     // 0x00BC(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDelay                                                      = new ExternalOffset<float>(0x00C0);                           // 0x00C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDelayLow                                                   = new ExternalOffset<float>(0x00C4);                           // 0x00C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseDelayRange                                             = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowManagedTicking                                       = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbAutoDeactivate                                            = new ExternalOffset<byte/*(bool)*/>(0x00CC);                  // 0x00CC(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offMinTimeBetweenTicks                                        = new ExternalOffset<uint>(0x00D0);                            // 0x00D0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<uint32_t>>                  _offLODBasedMinTimeBetweenTicks                                = new ExternalOffset<TArray<uint32_t>>(0x00D8, false);         // 0x00D8(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<EParticleSystemInsignificanceReaction> _offInsignificantReaction                                      = new ExternalOffset<EParticleSystemInsignificanceReaction>(0x00E8, false); // 0x00E8(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInsignificanceDelay                                        = new ExternalOffset<float>(0x00EC);                           // 0x00EC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EParticleSignificanceLevel>        _offMaxSignificanceLevel                                       = new ExternalOffset<EParticleSignificanceLevel>(0x00F0, false); // 0x00F0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offMaxPoolSize                                                = new ExternalOffset<uint>(0x00F4);                            // 0x00F4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offMacroUVPosition                                            = new ExternalOffset<FVector>(0x00F8, false);                  // 0x00F8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMacroUVRadius                                              = new ExternalOffset<float>(0x0104);                           // 0x0104(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleSystemOcclusionBoundsMethod>> _offOcclusionBoundsMethod                                      = new ExternalOffset<TEnumAsByte<EParticleSystemOcclusionBoundsMethod>>(0x0108, false); // 0x0108(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBox>                              _offCustomOcclusionBounds                                      = new ExternalOffset<FBox>(0x010C, false);                     // 0x010C(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FLODSoloTrack>>             _offSoloTracking                                               = new ExternalOffset<TArray<FLODSoloTrack>>(0x0128, false);    // 0x0128(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FNamedEmitterMaterial>>     _offNamedMaterialSlots                                         = new ExternalOffset<TArray<FNamedEmitterMaterial>>(0x0138, false); // 0x0138(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode                                               => _offSystemUpdateMode.GetValue();
	public float                                              UpdateTime_FPS                                                 => _offUpdateTime_FPS.GetValue();
	public float                                              UpdateTime_Delta                                               => _offUpdateTime_Delta.GetValue();
	public float                                              WarmupTime                                                     => _offWarmupTime.GetValue();
	public float                                              WarmupTickRate                                                 => _offWarmupTickRate.GetValue();
	public TArray<UParticleEmitter>                           Emitters                                                       => _offEmitters.GetValue();
	public UParticleSystemComponent                           PreviewComponent                                               => _offPreviewComponent.GetValue();
	public UInterpCurveEdSetup                                CurveEdSetup                                                   => _offCurveEdSetup.GetValue();
	public float                                              LODDistanceCheckTime                                           => _offLODDistanceCheckTime.GetValue();
	public TEnumAsByte<EParticleSystemLODMethod>              LODMethod                                                      => _offLODMethod.GetValue();
	public TArray<float>                                      LODDistances                                                   => _offLODDistances.GetValue();
	public TArray<FParticleSystemLOD>                         LODSettings                                                    => _offLODSettings.GetValue();
	public FBox                                               FixedRelativeBoundingBox                                       => _offFixedRelativeBoundingBox.GetValue();
	public float                                              SecondsBeforeInactive                                          => _offSecondsBeforeInactive.GetValue();
	public float                                              Delay                                                          => _offDelay.GetValue();
	public float                                              DelayLow                                                       => _offDelayLow.GetValue();
	public byte/*(bool)*/                                     bAutoDeactivate                                                => _offbAutoDeactivate.GetValue();
	public uint                                               MinTimeBetweenTicks                                            => _offMinTimeBetweenTicks.GetValue();
	public TArray<uint32_t>                                   LODBasedMinTimeBetweenTicks                                    => _offLODBasedMinTimeBetweenTicks.GetValue();
	public EParticleSystemInsignificanceReaction              InsignificantReaction                                          => _offInsignificantReaction.GetValue();
	public float                                              InsignificanceDelay                                            => _offInsignificanceDelay.GetValue();
	public EParticleSignificanceLevel                         MaxSignificanceLevel                                           => _offMaxSignificanceLevel.GetValue();
	public uint                                               MaxPoolSize                                                    => _offMaxPoolSize.GetValue();
	public FVector                                            MacroUVPosition                                                => _offMacroUVPosition.GetValue();
	public float                                              MacroUVRadius                                                  => _offMacroUVRadius.GetValue();
	public TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod                                          => _offOcclusionBoundsMethod.GetValue();
	public FBox                                               CustomOcclusionBounds                                          => _offCustomOcclusionBounds.GetValue();
	public TArray<FLODSoloTrack>                              SoloTracking                                                   => _offSoloTracking.GetValue();
	public TArray<FNamedEmitterMaterial>                      NamedMaterialSlots                                             => _offNamedMaterialSlots.GetValue();
	#endregion


}

// Class Engine.FXSystemComponent
// 0x000B (0x0410 - 0x0405)
public class UFXSystemComponent : UPrimitiveComponent
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ParticleSystemComponent
// 0x0190 (0x05A0 - 0x0410)
public class UParticleSystemComponent : UFXSystemComponent
{
	#region Offsets
	private ExternalOffset<UParticleSystem>                   _offTemplate                                                   = new ExternalOffset<UParticleSystem>(0x0408, true);           // 0x0408(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UMaterialInterface>>        _offEmitterMaterials                                           = new ExternalOffset<TArray<UMaterialInterface>>(0x0410, false); // 0x0410(0x0010) (ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<USkeletalMeshComponent>>    _offSkelMeshComponents                                         = new ExternalOffset<TArray<USkeletalMeshComponent>>(0x0420, false); // 0x0420(0x0010) (ExportObject, ZeroConstructor, Transient, DuplicateTransient, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbResetOnDetach                                             = new ExternalOffset<char>(0x0431, false);                     // 0x0431(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUpdateOnDedicatedServer                                   = new ExternalOffset<char>(0x0431, false);                     // 0x0431(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowRecycling                                            = new ExternalOffset<char>(0x0431, false);                     // 0x0431(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoManageAttachment                                      = new ExternalOffset<char>(0x0431, false);                     // 0x0431(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbWarmingUp                                                 = new ExternalOffset<char>(0x0432, false);                     // 0x0432(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideLODMethod                                         = new ExternalOffset<char>(0x0432, false);                     // 0x0432(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSkipUpdateDynamicDataDuringTick                           = new ExternalOffset<char>(0x0432, false);                     // 0x0432(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EParticleSystemLODMethod>> _offLODMethod                                                  = new ExternalOffset<TEnumAsByte<EParticleSystemLODMethod>>(0x043D, false); // 0x043D(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EParticleSignificanceLevel>        _offRequiredSignificance                                       = new ExternalOffset<EParticleSignificanceLevel>(0x043E, false); // 0x043E(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FParticleSysParam>>         _offInstanceParameters                                         = new ExternalOffset<TArray<FParticleSysParam>>(0x0440, false); // 0x0440(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnParticleSpawn                                            = new ExternalOffset<FScriptMulticastDelegate>(0x0450, false); // 0x0450(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnParticleBurst                                            = new ExternalOffset<FScriptMulticastDelegate>(0x0460, false); // 0x0460(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnParticleDeath                                            = new ExternalOffset<FScriptMulticastDelegate>(0x0470, false); // 0x0470(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnParticleCollide                                          = new ExternalOffset<FScriptMulticastDelegate>(0x0480, false); // 0x0480(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offOldPosition                                                = new ExternalOffset<FVector>(0x0490, false);                  // 0x0490(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offPartSysVelocity                                            = new ExternalOffset<FVector>(0x049C, false);                  // 0x049C(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWarmupTime                                                 = new ExternalOffset<float>(0x04A8);                           // 0x04A8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWarmupTickRate                                             = new ExternalOffset<float>(0x04AC);                           // 0x04AC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSecondsBeforeInactive                                      = new ExternalOffset<float>(0x04B4);                           // 0x04B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxTimeBeforeForceUpdateTransform                          = new ExternalOffset<float>(0x04BC);                           // 0x04BC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UParticleSystemReplay>>     _offReplayClips                                                = new ExternalOffset<TArray<UParticleSystemReplay>>(0x04E0, false); // 0x04E0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCustomTimeDilation                                         = new ExternalOffset<float>(0x04F8);                           // 0x04F8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TWeakObjectPtr<USceneComponent>>   _offAutoAttachParent                                           = new ExternalOffset<TWeakObjectPtr<USceneComponent>>(0x0550, false); // 0x0550(0x0008) (Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnTemplate, EditConst, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offAutoAttachSocketName                                       = new ExternalOffset<FName>(0x0558, false);                    // 0x0558(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAttachmentRule>                   _offAutoAttachLocationRule                                     = new ExternalOffset<EAttachmentRule>(0x0560, false);          // 0x0560(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAttachmentRule>                   _offAutoAttachRotationRule                                     = new ExternalOffset<EAttachmentRule>(0x0561, false);          // 0x0561(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EAttachmentRule>                   _offAutoAttachScaleRule                                        = new ExternalOffset<EAttachmentRule>(0x0562, false);          // 0x0562(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnSystemFinished                                           = new ExternalOffset<FScriptMulticastDelegate>(0x0590, false); // 0x0590(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UParticleSystem                                    Template                                                       => _offTemplate.GetValue();
	public TArray<UMaterialInterface>                         EmitterMaterials                                               => _offEmitterMaterials.GetValue();
	public TArray<USkeletalMeshComponent>                     SkelMeshComponents                                             => _offSkelMeshComponents.GetValue();
	public TEnumAsByte<EParticleSystemLODMethod>              LODMethod                                                      => _offLODMethod.GetValue();
	public EParticleSignificanceLevel                         RequiredSignificance                                           => _offRequiredSignificance.GetValue();
	public TArray<FParticleSysParam>                          InstanceParameters                                             => _offInstanceParameters.GetValue();
	public FScriptMulticastDelegate                           OnParticleSpawn                                                => _offOnParticleSpawn.GetValue();
	public FScriptMulticastDelegate                           OnParticleBurst                                                => _offOnParticleBurst.GetValue();
	public FScriptMulticastDelegate                           OnParticleDeath                                                => _offOnParticleDeath.GetValue();
	public FScriptMulticastDelegate                           OnParticleCollide                                              => _offOnParticleCollide.GetValue();
	public FVector                                            OldPosition                                                    => _offOldPosition.GetValue();
	public FVector                                            PartSysVelocity                                                => _offPartSysVelocity.GetValue();
	public float                                              WarmupTime                                                     => _offWarmupTime.GetValue();
	public float                                              WarmupTickRate                                                 => _offWarmupTickRate.GetValue();
	public float                                              SecondsBeforeInactive                                          => _offSecondsBeforeInactive.GetValue();
	public float                                              MaxTimeBeforeForceUpdateTransform                              => _offMaxTimeBeforeForceUpdateTransform.GetValue();
	public TArray<UParticleSystemReplay>                      ReplayClips                                                    => _offReplayClips.GetValue();
	public float                                              CustomTimeDilation                                             => _offCustomTimeDilation.GetValue();
	public TWeakObjectPtr<USceneComponent>                    AutoAttachParent                                               => _offAutoAttachParent.GetValue();
	public FName                                              AutoAttachSocketName                                           => _offAutoAttachSocketName.GetValue();
	public EAttachmentRule                                    AutoAttachLocationRule                                         => _offAutoAttachLocationRule.GetValue();
	public EAttachmentRule                                    AutoAttachRotationRule                                         => _offAutoAttachRotationRule.GetValue();
	public EAttachmentRule                                    AutoAttachScaleRule                                            => _offAutoAttachScaleRule.GetValue();
	public FScriptMulticastDelegate                           OnSystemFinished                                               => _offOnSystemFinished.GetValue();
	#endregion


}

// Class Engine.ParticleSystemReplay
// 0x0004 (0x002C - 0x0028)
public class UParticleSystemReplay : UObject
{
	#region Offsets
	private ExternalOffset<int>                               _offClipIDNumber                                               = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (Edit, ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                ClipIDNumber                                                   => _offClipIDNumber.GetValue();
	#endregion


}

// Class Engine.PathFollowingAgentInterface
// 0x0000 (0x0028 - 0x0028)
public class UPathFollowingAgentInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PawnNoiseEmitterComponent
// 0x0034 (0x00FC - 0x00C8)
public class UPawnNoiseEmitterComponent : UActorComponent
{
	#region Offsets
//	private ExternalOffset<char>                              _offbAIPerceptionSystemCompatibilityMode                       = new ExternalOffset<char>(0x00D8, false);                     // 0x00D8(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FVector>                           _offLastRemoteNoisePosition                                    = new ExternalOffset<FVector>(0x00DC, false);                  // 0x00DC(0x000C) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNoiseLifetime                                              = new ExternalOffset<float>(0x00E8);                           // 0x00E8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLastRemoteNoiseVolume                                      = new ExternalOffset<float>(0x00EC);                           // 0x00EC(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offLastRemoteNoiseTime                                        = new ExternalOffset<float>(0x00F0);                           // 0x00F0(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offLastLocalNoiseVolume                                       = new ExternalOffset<float>(0x00F4);                           // 0x00F4(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offLastLocalNoiseTime                                         = new ExternalOffset<float>(0x00F8);                           // 0x00F8(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FVector                                            LastRemoteNoisePosition                                        => _offLastRemoteNoisePosition.GetValue();
	public float                                              NoiseLifetime                                                  => _offNoiseLifetime.GetValue();
	public float                                              LastRemoteNoiseVolume                                          => _offLastRemoteNoiseVolume.GetValue();
	public float                                              LastRemoteNoiseTime                                            => _offLastRemoteNoiseTime.GetValue();
	public float                                              LastLocalNoiseVolume                                           => _offLastLocalNoiseVolume.GetValue();
	public float                                              LastLocalNoiseTime                                             => _offLastLocalNoiseTime.GetValue();
	#endregion


}

// Class Engine.PhysicalAnimationComponent
// 0x0020 (0x00E8 - 0x00C8)
public class UPhysicalAnimationComponent : UActorComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offStrengthMultiplyer                                         = new ExternalOffset<float>(0x00D8);                           // 0x00D8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USkeletalMeshComponent>            _offSkeletalMeshComponent                                      = new ExternalOffset<USkeletalMeshComponent>(0x00E0, true);    // 0x00E0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public float                                              StrengthMultiplyer                                             => _offStrengthMultiplyer.GetValue();
	public USkeletalMeshComponent                             SkeletalMeshComponent                                          => _offSkeletalMeshComponent.GetValue();
	#endregion


}

// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x0028 - 0x0028)
public class UPhysicalMaterialPropertyBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PhysicsAsset
// 0x00F8 (0x0120 - 0x0028)
public class UPhysicsAsset : UObject
{
	#region Offsets
	private ExternalOffset<TArray<int>>                       _offBoundsBodies                                               = new ExternalOffset<TArray<int>>(0x0030, false);              // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<USkeletalBodySetup>>        _offSkeletalBodySetups                                         = new ExternalOffset<TArray<USkeletalBodySetup>>(0x0040, false); // 0x0040(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UPhysicsConstraintTemplate>> _offConstraintSetup                                            = new ExternalOffset<TArray<UPhysicsConstraintTemplate>>(0x0050, false); // 0x0050(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNotForDedicatedServer                                     = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UThumbnailInfo>                    _offThumbnailInfo                                              = new ExternalOffset<UThumbnailInfo>(0x0108, true);            // 0x0108(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UBodySetup>>                _offBodySetup                                                  = new ExternalOffset<TArray<UBodySetup>>(0x0110, false);       // 0x0110(0x0010) (ExportObject, ZeroConstructor, Deprecated, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<int>                                        BoundsBodies                                                   => _offBoundsBodies.GetValue();
	public TArray<USkeletalBodySetup>                         SkeletalBodySetups                                             => _offSkeletalBodySetups.GetValue();
	public TArray<UPhysicsConstraintTemplate>                 ConstraintSetup                                                => _offConstraintSetup.GetValue();
	public UThumbnailInfo                                     ThumbnailInfo                                                  => _offThumbnailInfo.GetValue();
	public TArray<UBodySetup>                                 BodySetup                                                      => _offBodySetup.GetValue();
	#endregion


}

// Class Engine.SkeletalBodySetup
// 0x0024 (0x0258 - 0x0234)
public class USkeletalBodySetup : UBodySetup
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                    _offbSkipScaleFromAnimation                                    = new ExternalOffset<byte/*(bool)*/>(0x0240);                  // 0x0240(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPhysicalAnimationProfile>> _offPhysicalAnimationData                                      = new ExternalOffset<TArray<FPhysicalAnimationProfile>>(0x0248, false); // 0x0248(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public byte/*(bool)*/                                     bSkipScaleFromAnimation                                        => _offbSkipScaleFromAnimation.GetValue();
	public TArray<FPhysicalAnimationProfile>                  PhysicalAnimationData                                          => _offPhysicalAnimationData.GetValue();
	#endregion


}

// Class Engine.PhysicsCollisionHandler
// 0x0014 (0x003C - 0x0028)
public class UPhysicsCollisionHandler : UObject
{
	#region Offsets
	private ExternalOffset<float>                             _offImpactThreshold                                            = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offImpactReFireDelay                                          = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundBase>                        _offDefaultImpactSound                                         = new ExternalOffset<USoundBase>(0x0030, true);                // 0x0030(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLastImpactSoundTime                                        = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              ImpactThreshold                                                => _offImpactThreshold.GetValue();
	public float                                              ImpactReFireDelay                                              => _offImpactReFireDelay.GetValue();
	public USoundBase                                         DefaultImpactSound                                             => _offDefaultImpactSound.GetValue();
	public float                                              LastImpactSoundTime                                            => _offLastImpactSoundTime.GetValue();
	#endregion


}

// Class Engine.RigidBodyBase
// 0x0010 (0x0248 - 0x0238)
public class ARigidBodyBase : AActor
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PhysicsConstraintActor
// 0x0019 (0x0261 - 0x0248)
public class APhysicsConstraintActor : ARigidBodyBase
{
	#region Offsets
	private ExternalOffset<UPhysicsConstraintComponent>       _offConstraintComp                                             = new ExternalOffset<UPhysicsConstraintComponent>(0x0248, true); // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<AActor>                            _offConstraintActor1                                           = new ExternalOffset<AActor>(0x0250, true);                    // 0x0250(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                            _offConstraintActor2                                           = new ExternalOffset<AActor>(0x0258, true);                    // 0x0258(0x0008) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDisableCollision                                          = new ExternalOffset<char>(0x0260, false);                     // 0x0260(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPhysicsConstraintComponent                        ConstraintComp                                                 => _offConstraintComp.GetValue();
	public AActor                                             ConstraintActor1                                               => _offConstraintActor1.GetValue();
	public AActor                                             ConstraintActor2                                               => _offConstraintActor2.GetValue();
	#endregion


}

// Class Engine.PhysicsConstraintComponent
// 0x0298 (0x0418 - 0x0180)
public class UPhysicsConstraintComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<AActor>                            _offConstraintActor1                                           = new ExternalOffset<AActor>(0x0218, true);                    // 0x0218(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstrainComponentPropName>       _offComponentName1                                             = new ExternalOffset<FConstrainComponentPropName>(0x0220, false); // 0x0220(0x0008) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<AActor>                            _offConstraintActor2                                           = new ExternalOffset<AActor>(0x0228, true);                    // 0x0228(0x0008) (Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstrainComponentPropName>       _offComponentName2                                             = new ExternalOffset<FConstrainComponentPropName>(0x0230, false); // 0x0230(0x0008) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UPhysicsConstraintTemplate>        _offConstraintSetup                                            = new ExternalOffset<UPhysicsConstraintTemplate>(0x0248, true); // 0x0248(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnConstraintBroken                                         = new ExternalOffset<FScriptMulticastDelegate>(0x0250, false); // 0x0250(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstraintInstance>               _offConstraintInstance                                         = new ExternalOffset<FConstraintInstance>(0x0260, false);      // 0x0260(0x01B8) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public AActor                                             ConstraintActor1                                               => _offConstraintActor1.GetValue();
	public FConstrainComponentPropName                        ComponentName1                                                 => _offComponentName1.GetValue();
	public AActor                                             ConstraintActor2                                               => _offConstraintActor2.GetValue();
	public FConstrainComponentPropName                        ComponentName2                                                 => _offComponentName2.GetValue();
	public UPhysicsConstraintTemplate                         ConstraintSetup                                                => _offConstraintSetup.GetValue();
	public FScriptMulticastDelegate                           OnConstraintBroken                                             => _offOnConstraintBroken.GetValue();
	public FConstraintInstance                                ConstraintInstance                                             => _offConstraintInstance.GetValue();
	#endregion


}

// Class Engine.PhysicsConstraintTemplate
// 0x02CC (0x02F4 - 0x0028)
public class UPhysicsConstraintTemplate : UObject
{
	#region Offsets
	private ExternalOffset<FConstraintInstance>               _offDefaultInstance                                            = new ExternalOffset<FConstraintInstance>(0x0028, false);      // 0x0028(0x01B8) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPhysicsConstraintProfileHandle>> _offProfileHandles                                             = new ExternalOffset<TArray<FPhysicsConstraintProfileHandle>>(0x01E0, false); // 0x01E0(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FConstraintProfileProperties>      _offDefaultProfile                                             = new ExternalOffset<FConstraintProfileProperties>(0x01F0, false); // 0x01F0(0x0104) (Transient, NoDestructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FConstraintInstance                                DefaultInstance                                                => _offDefaultInstance.GetValue();
	public TArray<FPhysicsConstraintProfileHandle>            ProfileHandles                                                 => _offProfileHandles.GetValue();
	public FConstraintProfileProperties                       DefaultProfile                                                 => _offDefaultProfile.GetValue();
	#endregion


}

// Class Engine.PhysicsHandleComponent
// 0x009C (0x0164 - 0x00C8)
public class UPhysicsHandleComponent : UActorComponent
{
	#region Offsets
	private ExternalOffset<UPrimitiveComponent>               _offGrabbedComponent                                           = new ExternalOffset<UPrimitiveComponent>(0x00D8, true);       // 0x00D8(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSoftAngularConstraint                                     = new ExternalOffset<char>(0x00E8, false);                     // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSoftLinearConstraint                                      = new ExternalOffset<char>(0x00E8, false);                     // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInterpolateTarget                                         = new ExternalOffset<char>(0x00E8, false);                     // 0x00E8(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLinearDamping                                              = new ExternalOffset<float>(0x00EC);                           // 0x00EC(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLinearStiffness                                            = new ExternalOffset<float>(0x00F0);                           // 0x00F0(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAngularDamping                                             = new ExternalOffset<float>(0x00F4);                           // 0x00F4(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAngularStiffness                                           = new ExternalOffset<float>(0x00F8);                           // 0x00F8(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInterpolationSpeed                                         = new ExternalOffset<float>(0x0160);                           // 0x0160(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPrimitiveComponent                                GrabbedComponent                                               => _offGrabbedComponent.GetValue();
	public float                                              LinearDamping                                                  => _offLinearDamping.GetValue();
	public float                                              LinearStiffness                                                => _offLinearStiffness.GetValue();
	public float                                              AngularDamping                                                 => _offAngularDamping.GetValue();
	public float                                              AngularStiffness                                               => _offAngularStiffness.GetValue();
	public float                                              InterpolationSpeed                                             => _offInterpolationSpeed.GetValue();
	#endregion


}

// Class Engine.PhysicsSettings
// 0x010B (0x0133 - 0x0028)
public class UPhysicsSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<float>                             _offDefaultGravityZ                                            = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDefaultTerminalVelocity                                    = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDefaultFluidFriction                                       = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSimulateScratchMemorySize                                  = new ExternalOffset<int>(0x0044);                             // 0x0044(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offRagdollAggregateThreshold                                  = new ExternalOffset<int>(0x0048);                             // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTriangleMeshTriangleMinAreaThreshold                       = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableShapeSharing                                        = new ExternalOffset<byte/*(bool)*/>(0x0050);                  // 0x0050(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnablePCM                                                 = new ExternalOffset<byte/*(bool)*/>(0x0051);                  // 0x0051(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableStabilization                                       = new ExternalOffset<byte/*(bool)*/>(0x0052);                  // 0x0052(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbWarnMissingLocks                                          = new ExternalOffset<byte/*(bool)*/>(0x0053);                  // 0x0053(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnable2DPhysics                                           = new ExternalOffset<byte/*(bool)*/>(0x0054);                  // 0x0054(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRigidBodyErrorCorrection>         _offPhysicErrorCorrection                                      = new ExternalOffset<FRigidBodyErrorCorrection>(0x0058, false); // 0x0058(0x0034) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESettingsLockedAxis>>  _offLockedAxis                                                 = new ExternalOffset<TEnumAsByte<ESettingsLockedAxis>>(0x008C, false); // 0x008C(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESettingsDOF>>         _offDefaultDegreesOfFreedom                                    = new ExternalOffset<TEnumAsByte<ESettingsDOF>>(0x008D, false); // 0x008D(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBounceThresholdVelocity                                    = new ExternalOffset<float>(0x0090);                           // 0x0090(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EFrictionCombineMode>> _offFrictionCombineMode                                        = new ExternalOffset<TEnumAsByte<EFrictionCombineMode>>(0x0094, false); // 0x0094(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EFrictionCombineMode>> _offRestitutionCombineMode                                     = new ExternalOffset<TEnumAsByte<EFrictionCombineMode>>(0x0095, false); // 0x0095(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxAngularVelocity                                         = new ExternalOffset<float>(0x0098);                           // 0x0098(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxDepenetrationVelocity                                   = new ExternalOffset<float>(0x009C);                           // 0x009C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offContactOffsetMultiplier                                    = new ExternalOffset<float>(0x00A0);                           // 0x00A0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinContactOffset                                           = new ExternalOffset<float>(0x00A4);                           // 0x00A4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxContactOffset                                           = new ExternalOffset<float>(0x00A8);                           // 0x00A8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbSimulateSkeletalMeshOnDedicatedServer                     = new ExternalOffset<byte/*(bool)*/>(0x00AC);                  // 0x00AC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionTraceFlag>>  _offDefaultShapeComplexity                                     = new ExternalOffset<TEnumAsByte<ECollisionTraceFlag>>(0x00AD, false); // 0x00AD(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbDefaultHasComplexCollision                                = new ExternalOffset<byte/*(bool)*/>(0x00AE);                  // 0x00AE(0x0001) (ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbSuppressFaceRemapTable                                    = new ExternalOffset<byte/*(bool)*/>(0x00AF);                  // 0x00AF(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbSupportUVFromHitResults                                   = new ExternalOffset<byte/*(bool)*/>(0x00B0);                  // 0x00B0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbDisableActiveActors                                       = new ExternalOffset<byte/*(bool)*/>(0x00B1);                  // 0x00B1(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbDisableKinematicStaticPairs                               = new ExternalOffset<byte/*(bool)*/>(0x00B2);                  // 0x00B2(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbDisableKinematicKinematicPairs                            = new ExternalOffset<byte/*(bool)*/>(0x00B3);                  // 0x00B3(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbDisableCCD                                                = new ExternalOffset<byte/*(bool)*/>(0x00B4);                  // 0x00B4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableEnhancedDeterminism                                 = new ExternalOffset<byte/*(bool)*/>(0x00B5);                  // 0x00B5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAnimPhysicsMinDeltaTime                                    = new ExternalOffset<float>(0x00B8);                           // 0x00B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbSimulateAnimPhysicsAfterReset                             = new ExternalOffset<byte/*(bool)*/>(0x00BC);                  // 0x00BC(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxPhysicsDeltaTime                                        = new ExternalOffset<float>(0x00C0);                           // 0x00C0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbSubstepping                                               = new ExternalOffset<byte/*(bool)*/>(0x00C4);                  // 0x00C4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbSubsteppingAsync                                          = new ExternalOffset<byte/*(bool)*/>(0x00C5);                  // 0x00C5(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxSubstepDeltaTime                                        = new ExternalOffset<float>(0x00C8);                           // 0x00C8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxSubsteps                                                = new ExternalOffset<int>(0x00CC);                             // 0x00CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSyncSceneSmoothingFactor                                   = new ExternalOffset<float>(0x00D0);                           // 0x00D0(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInitialAverageFrameRate                                    = new ExternalOffset<float>(0x00D4);                           // 0x00D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPhysXTreeRebuildRate                                       = new ExternalOffset<int>(0x00D8);                             // 0x00D8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPhysicalSurfaceName>>      _offPhysicalSurfaces                                           = new ExternalOffset<TArray<FPhysicalSurfaceName>>(0x00E0, false); // 0x00E0(0x0010) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FBroadphaseSettings>               _offDefaultBroadphaseSettings                                  = new ExternalOffset<FBroadphaseSettings>(0x00F0, false);      // 0x00F0(0x0040) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FChaosPhysicsSettings>             _offChaosSettings                                              = new ExternalOffset<FChaosPhysicsSettings>(0x0130, false);    // 0x0130(0x0003) (Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              DefaultGravityZ                                                => _offDefaultGravityZ.GetValue();
	public float                                              DefaultTerminalVelocity                                        => _offDefaultTerminalVelocity.GetValue();
	public float                                              DefaultFluidFriction                                           => _offDefaultFluidFriction.GetValue();
	public int                                                SimulateScratchMemorySize                                      => _offSimulateScratchMemorySize.GetValue();
	public int                                                RagdollAggregateThreshold                                      => _offRagdollAggregateThreshold.GetValue();
	public float                                              TriangleMeshTriangleMinAreaThreshold                           => _offTriangleMeshTriangleMinAreaThreshold.GetValue();
	public byte/*(bool)*/                                     bEnableShapeSharing                                            => _offbEnableShapeSharing.GetValue();
	public byte/*(bool)*/                                     bEnablePCM                                                     => _offbEnablePCM.GetValue();
	public byte/*(bool)*/                                     bEnableStabilization                                           => _offbEnableStabilization.GetValue();
	public byte/*(bool)*/                                     bWarnMissingLocks                                              => _offbWarnMissingLocks.GetValue();
	public byte/*(bool)*/                                     bEnable2DPhysics                                               => _offbEnable2DPhysics.GetValue();
	public FRigidBodyErrorCorrection                          PhysicErrorCorrection                                          => _offPhysicErrorCorrection.GetValue();
	public TEnumAsByte<ESettingsLockedAxis>                   LockedAxis                                                     => _offLockedAxis.GetValue();
	public TEnumAsByte<ESettingsDOF>                          DefaultDegreesOfFreedom                                        => _offDefaultDegreesOfFreedom.GetValue();
	public float                                              BounceThresholdVelocity                                        => _offBounceThresholdVelocity.GetValue();
	public TEnumAsByte<EFrictionCombineMode>                  FrictionCombineMode                                            => _offFrictionCombineMode.GetValue();
	public TEnumAsByte<EFrictionCombineMode>                  RestitutionCombineMode                                         => _offRestitutionCombineMode.GetValue();
	public float                                              MaxAngularVelocity                                             => _offMaxAngularVelocity.GetValue();
	public float                                              MaxDepenetrationVelocity                                       => _offMaxDepenetrationVelocity.GetValue();
	public float                                              ContactOffsetMultiplier                                        => _offContactOffsetMultiplier.GetValue();
	public float                                              MinContactOffset                                               => _offMinContactOffset.GetValue();
	public float                                              MaxContactOffset                                               => _offMaxContactOffset.GetValue();
	public byte/*(bool)*/                                     bSimulateSkeletalMeshOnDedicatedServer                         => _offbSimulateSkeletalMeshOnDedicatedServer.GetValue();
	public TEnumAsByte<ECollisionTraceFlag>                   DefaultShapeComplexity                                         => _offDefaultShapeComplexity.GetValue();
	public byte/*(bool)*/                                     bDefaultHasComplexCollision                                    => _offbDefaultHasComplexCollision.GetValue();
	public byte/*(bool)*/                                     bSuppressFaceRemapTable                                        => _offbSuppressFaceRemapTable.GetValue();
	public byte/*(bool)*/                                     bSupportUVFromHitResults                                       => _offbSupportUVFromHitResults.GetValue();
	public byte/*(bool)*/                                     bDisableActiveActors                                           => _offbDisableActiveActors.GetValue();
	public byte/*(bool)*/                                     bDisableKinematicStaticPairs                                   => _offbDisableKinematicStaticPairs.GetValue();
	public byte/*(bool)*/                                     bDisableKinematicKinematicPairs                                => _offbDisableKinematicKinematicPairs.GetValue();
	public byte/*(bool)*/                                     bDisableCCD                                                    => _offbDisableCCD.GetValue();
	public byte/*(bool)*/                                     bEnableEnhancedDeterminism                                     => _offbEnableEnhancedDeterminism.GetValue();
	public float                                              AnimPhysicsMinDeltaTime                                        => _offAnimPhysicsMinDeltaTime.GetValue();
	public byte/*(bool)*/                                     bSimulateAnimPhysicsAfterReset                                 => _offbSimulateAnimPhysicsAfterReset.GetValue();
	public float                                              MaxPhysicsDeltaTime                                            => _offMaxPhysicsDeltaTime.GetValue();
	public byte/*(bool)*/                                     bSubstepping                                                   => _offbSubstepping.GetValue();
	public byte/*(bool)*/                                     bSubsteppingAsync                                              => _offbSubsteppingAsync.GetValue();
	public float                                              MaxSubstepDeltaTime                                            => _offMaxSubstepDeltaTime.GetValue();
	public int                                                MaxSubsteps                                                    => _offMaxSubsteps.GetValue();
	public float                                              SyncSceneSmoothingFactor                                       => _offSyncSceneSmoothingFactor.GetValue();
	public float                                              InitialAverageFrameRate                                        => _offInitialAverageFrameRate.GetValue();
	public int                                                PhysXTreeRebuildRate                                           => _offPhysXTreeRebuildRate.GetValue();
	public TArray<FPhysicalSurfaceName>                       PhysicalSurfaces                                               => _offPhysicalSurfaces.GetValue();
	public FBroadphaseSettings                                DefaultBroadphaseSettings                                      => _offDefaultBroadphaseSettings.GetValue();
	public FChaosPhysicsSettings                              ChaosSettings                                                  => _offChaosSettings.GetValue();
	#endregion


}

// Class Engine.PhysicsSpringComponent
// 0x00B0 (0x0230 - 0x0180)
public class UPhysicsSpringComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offSpringDamping                                              = new ExternalOffset<float>(0x021C);                           // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpringLengthAtRest                                         = new ExternalOffset<float>(0x0220);                           // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpringRadius                                               = new ExternalOffset<float>(0x0224);                           // 0x0224(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionChannel>>    _offSpringChannel                                              = new ExternalOffset<TEnumAsByte<ECollisionChannel>>(0x0228, false); // 0x0228(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbIgnoreSelf                                                = new ExternalOffset<byte/*(bool)*/>(0x0229);                  // 0x0229(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSpringCompression                                          = new ExternalOffset<float>(0x022C);                           // 0x022C(0x0004) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              SpringDamping                                                  => _offSpringDamping.GetValue();
	public float                                              SpringLengthAtRest                                             => _offSpringLengthAtRest.GetValue();
	public float                                              SpringRadius                                                   => _offSpringRadius.GetValue();
	public TEnumAsByte<ECollisionChannel>                     SpringChannel                                                  => _offSpringChannel.GetValue();
	public byte/*(bool)*/                                     bIgnoreSelf                                                    => _offbIgnoreSelf.GetValue();
	public float                                              SpringCompression                                              => _offSpringCompression.GetValue();
	#endregion


}

// Class Engine.PhysicsThruster
// 0x0008 (0x0250 - 0x0248)
public class APhysicsThruster : ARigidBodyBase
{
	#region Offsets
	private ExternalOffset<UPhysicsThrusterComponent>         _offThrusterComponent                                          = new ExternalOffset<UPhysicsThrusterComponent>(0x0248, true); // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UPhysicsThrusterComponent                          ThrusterComponent                                              => _offThrusterComponent.GetValue();
	#endregion


}

// Class Engine.PhysicsThrusterComponent
// 0x00A0 (0x0220 - 0x0180)
public class UPhysicsThrusterComponent : USceneComponent
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SceneCapture
// 0x0020 (0x0258 - 0x0238)
public class ASceneCapture : AActor
{
	#region Offsets
	private ExternalOffset<UStaticMeshComponent>              _offMeshComp                                                   = new ExternalOffset<UStaticMeshComponent>(0x0248, true);      // 0x0248(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<USceneComponent>                   _offSceneComponent                                             = new ExternalOffset<USceneComponent>(0x0250, true);           // 0x0250(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UStaticMeshComponent                               MeshComp                                                       => _offMeshComp.GetValue();
	public USceneComponent                                    SceneComponent                                                 => _offSceneComponent.GetValue();
	#endregion


}

// Class Engine.PlanarReflection
// 0x0009 (0x0261 - 0x0258)
public class APlanarReflection : ASceneCapture
{
	#region Offsets
	private ExternalOffset<UPlanarReflectionComponent>        _offPlanarReflectionComponent                                  = new ExternalOffset<UPlanarReflectionComponent>(0x0258, true); // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                    _offbShowPreviewPlane                                          = new ExternalOffset<byte/*(bool)*/>(0x0260);                  // 0x0260(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPlanarReflectionComponent                         PlanarReflectionComponent                                      => _offPlanarReflectionComponent.GetValue();
	public byte/*(bool)*/                                     bShowPreviewPlane                                              => _offbShowPreviewPlane.GetValue();
	#endregion


}

// Class Engine.SceneCaptureComponent
// 0x0120 (0x02A0 - 0x0180)
public class USceneCaptureComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<TArray<TWeakObjectPtr<UPrimitiveComponent>>> _offHiddenComponents                                           = new ExternalOffset<TArray<TWeakObjectPtr<UPrimitiveComponent>>>(0x0220, false); // 0x0220(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offHiddenActors                                               = new ExternalOffset<TArray<AActor>>(0x0230, false);           // 0x0230(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<TWeakObjectPtr<UPrimitiveComponent>>> _offShowOnlyComponents                                         = new ExternalOffset<TArray<TWeakObjectPtr<UPrimitiveComponent>>>(0x0240, false); // 0x0240(0x0010) (ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offShowOnlyActors                                             = new ExternalOffset<TArray<AActor>>(0x0250, false);           // 0x0250(0x0010) (Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbCaptureEveryFrame                                         = new ExternalOffset<byte/*(bool)*/>(0x0260);                  // 0x0260(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbCaptureOnMovement                                         = new ExternalOffset<byte/*(bool)*/>(0x0261);                  // 0x0261(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbAlwaysPersistRenderingState                               = new ExternalOffset<byte/*(bool)*/>(0x0262);                  // 0x0262(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLODDistanceFactor                                          = new ExternalOffset<float>(0x0264);                           // 0x0264(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxViewDistanceOverride                                    = new ExternalOffset<float>(0x0268);                           // 0x0268(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offCaptureSortPriority                                        = new ExternalOffset<int>(0x026C);                             // 0x026C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FEngineShowFlagsSetting>>   _offShowFlagSettings                                           = new ExternalOffset<TArray<FEngineShowFlagsSetting>>(0x0270, false); // 0x0270(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Interp, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offProfilingEventName                                         = new ExternalOffset<FString>(0x0290, false);                  // 0x0290(0x0010) (Edit, BlueprintVisible, ZeroConstructor, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<TWeakObjectPtr<UPrimitiveComponent>>        HiddenComponents                                               => _offHiddenComponents.GetValue();
	public TArray<AActor>                                     HiddenActors                                                   => _offHiddenActors.GetValue();
	public TArray<TWeakObjectPtr<UPrimitiveComponent>>        ShowOnlyComponents                                             => _offShowOnlyComponents.GetValue();
	public TArray<AActor>                                     ShowOnlyActors                                                 => _offShowOnlyActors.GetValue();
	public byte/*(bool)*/                                     bCaptureEveryFrame                                             => _offbCaptureEveryFrame.GetValue();
	public byte/*(bool)*/                                     bCaptureOnMovement                                             => _offbCaptureOnMovement.GetValue();
	public byte/*(bool)*/                                     bAlwaysPersistRenderingState                                   => _offbAlwaysPersistRenderingState.GetValue();
	public float                                              LODDistanceFactor                                              => _offLODDistanceFactor.GetValue();
	public float                                              MaxViewDistanceOverride                                        => _offMaxViewDistanceOverride.GetValue();
	public int                                                CaptureSortPriority                                            => _offCaptureSortPriority.GetValue();
	public TArray<FEngineShowFlagsSetting>                    ShowFlagSettings                                               => _offShowFlagSettings.GetValue();
	public FString                                            ProfilingEventName                                             => _offProfilingEventName.GetValue();
	#endregion


}

// Class Engine.PlanarReflectionComponent
// 0x0046 (0x02E6 - 0x02A0)
public class UPlanarReflectionComponent : USceneCaptureComponent
{
	#region Offsets
	private ExternalOffset<UBoxComponent>                     _offPreviewBox                                                 = new ExternalOffset<UBoxComponent>(0x02B0, true);             // 0x02B0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNormalDistortionStrength                                   = new ExternalOffset<float>(0x02B8);                           // 0x02B8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPrefilterRoughness                                         = new ExternalOffset<float>(0x02BC);                           // 0x02BC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPrefilterRoughnessDistance                                 = new ExternalOffset<float>(0x02C0);                           // 0x02C0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offScreenPercentage                                           = new ExternalOffset<int>(0x02C4);                             // 0x02C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offExtraFOV                                                   = new ExternalOffset<float>(0x02C8);                           // 0x02C8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceFromPlaneFadeStart                                 = new ExternalOffset<float>(0x02CC);                           // 0x02CC(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceFromPlaneFadeEnd                                   = new ExternalOffset<float>(0x02D0);                           // 0x02D0(0x0004) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceFromPlaneFadeoutStart                              = new ExternalOffset<float>(0x02D4);                           // 0x02D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceFromPlaneFadeoutEnd                                = new ExternalOffset<float>(0x02D8);                           // 0x02D8(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAngleFromPlaneFadeStart                                    = new ExternalOffset<float>(0x02DC);                           // 0x02DC(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAngleFromPlaneFadeEnd                                      = new ExternalOffset<float>(0x02E0);                           // 0x02E0(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbShowPreviewPlane                                          = new ExternalOffset<byte/*(bool)*/>(0x02E4);                  // 0x02E4(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbRenderSceneTwoSided                                       = new ExternalOffset<byte/*(bool)*/>(0x02E5);                  // 0x02E5(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UBoxComponent                                      PreviewBox                                                     => _offPreviewBox.GetValue();
	public float                                              NormalDistortionStrength                                       => _offNormalDistortionStrength.GetValue();
	public float                                              PrefilterRoughness                                             => _offPrefilterRoughness.GetValue();
	public float                                              PrefilterRoughnessDistance                                     => _offPrefilterRoughnessDistance.GetValue();
	public int                                                ScreenPercentage                                               => _offScreenPercentage.GetValue();
	public float                                              ExtraFOV                                                       => _offExtraFOV.GetValue();
	public float                                              DistanceFromPlaneFadeStart                                     => _offDistanceFromPlaneFadeStart.GetValue();
	public float                                              DistanceFromPlaneFadeEnd                                       => _offDistanceFromPlaneFadeEnd.GetValue();
	public float                                              DistanceFromPlaneFadeoutStart                                  => _offDistanceFromPlaneFadeoutStart.GetValue();
	public float                                              DistanceFromPlaneFadeoutEnd                                    => _offDistanceFromPlaneFadeoutEnd.GetValue();
	public float                                              AngleFromPlaneFadeStart                                        => _offAngleFromPlaneFadeStart.GetValue();
	public float                                              AngleFromPlaneFadeEnd                                          => _offAngleFromPlaneFadeEnd.GetValue();
	public byte/*(bool)*/                                     bShowPreviewPlane                                              => _offbShowPreviewPlane.GetValue();
	public byte/*(bool)*/                                     bRenderSceneTwoSided                                           => _offbRenderSceneTwoSided.GetValue();
	#endregion


}

// Class Engine.PlaneReflectionCapture
// 0x0000 (0x0250 - 0x0250)
public class APlaneReflectionCapture : AReflectionCapture
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PlaneReflectionCaptureComponent
// 0x0054 (0x02A8 - 0x0254)
public class UPlaneReflectionCaptureComponent : UReflectionCaptureComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offInfluenceRadiusScale                                       = new ExternalOffset<float>(0x0290);                           // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UDrawSphereComponent>              _offPreviewInfluenceRadius                                     = new ExternalOffset<UDrawSphereComponent>(0x0298, true);      // 0x0298(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UBoxComponent>                     _offPreviewCaptureBox                                          = new ExternalOffset<UBoxComponent>(0x02A0, true);             // 0x02A0(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              InfluenceRadiusScale                                           => _offInfluenceRadiusScale.GetValue();
	public UDrawSphereComponent                               PreviewInfluenceRadius                                         => _offPreviewInfluenceRadius.GetValue();
	public UBoxComponent                                      PreviewCaptureBox                                              => _offPreviewCaptureBox.GetValue();
	#endregion


}

// Class Engine.PlatformEventsComponent
// 0x0030 (0x00F8 - 0x00C8)
public class UPlatformEventsComponent : UActorComponent
{
	#region Offsets
	private ExternalOffset<FScriptMulticastDelegate>          _offPlatformChangedToLaptopModeDelegate                        = new ExternalOffset<FScriptMulticastDelegate>(0x00D8, false); // 0x00D8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offPlatformChangedToTabletModeDelegate                        = new ExternalOffset<FScriptMulticastDelegate>(0x00E8, false); // 0x00E8(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FScriptMulticastDelegate                           PlatformChangedToLaptopModeDelegate                            => _offPlatformChangedToLaptopModeDelegate.GetValue();
	public FScriptMulticastDelegate                           PlatformChangedToTabletModeDelegate                            => _offPlatformChangedToTabletModeDelegate.GetValue();
	#endregion


}

// Class Engine.PlatformInterfaceWebResponse
// 0x0038 (0x0060 - 0x0028)
public class UPlatformInterfaceWebResponse : UObject
{
	#region Offsets
	private ExternalOffset<FString>                           _offOriginalURL                                                = new ExternalOffset<FString>(0x0028, false);                  // 0x0028(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offResponseCode                                               = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offTag                                                        = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offStringResponse                                             = new ExternalOffset<FString>(0x0040, false);                  // 0x0040(0x0010) (ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<char>>                      _offBinaryResponse                                             = new ExternalOffset<TArray<char>>(0x0050, false);             // 0x0050(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FString                                            OriginalURL                                                    => _offOriginalURL.GetValue();
	public int                                                ResponseCode                                                   => _offResponseCode.GetValue();
	public int                                                Tag                                                            => _offTag.GetValue();
	public FString                                            StringResponse                                                 => _offStringResponse.GetValue();
	public TArray<char>                                       BinaryResponse                                                 => _offBinaryResponse.GetValue();
	#endregion


}

// Class Engine.PlayerInput
// 0x0148 (0x0170 - 0x0028)
public class UPlayerInput : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FKeyBind>>                  _offDebugExecBindings                                          = new ExternalOffset<TArray<FKeyBind>>(0x0120, false);         // 0x0120(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offInvertedAxis                                               = new ExternalOffset<TArray<FName>>(0x0160, false);            // 0x0160(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FKeyBind>                                   DebugExecBindings                                              => _offDebugExecBindings.GetValue();
	public TArray<FName>                                      InvertedAxis                                                   => _offInvertedAxis.GetValue();
	#endregion


}

// Class Engine.PlayerStartPIE
// 0x0000 (0x0278 - 0x0278)
public class APlayerStartPIE : APlayerStart
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PluginCommandlet
// 0x0007 (0x0080 - 0x0079)
public class UPluginCommandlet : UCommandlet
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PointLight
// 0x000F (0x0260 - 0x0251)
public class APointLight : ALight
{
	#region Offsets
	private ExternalOffset<UPointLightComponent>              _offPointLightComponent                                        = new ExternalOffset<UPointLightComponent>(0x0258, true);      // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UPointLightComponent                               PointLightComponent                                            => _offPointLightComponent.GetValue();
	#endregion


}

// Class Engine.PointLightComponent
// 0x0014 (0x0384 - 0x0370)
public class UPointLightComponent : ULocalLightComponent
{
	#region Offsets
//	private ExternalOffset<char>                              _offbUseInverseSquaredFalloff                                  = new ExternalOffset<char>(0x0370, false);                     // 0x0370(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLightFalloffExponent                                       = new ExternalOffset<float>(0x0374);                           // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSourceRadius                                               = new ExternalOffset<float>(0x0378);                           // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSoftSourceRadius                                           = new ExternalOffset<float>(0x037C);                           // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSourceLength                                               = new ExternalOffset<float>(0x0380);                           // 0x0380(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              LightFalloffExponent                                           => _offLightFalloffExponent.GetValue();
	public float                                              SourceRadius                                                   => _offSourceRadius.GetValue();
	public float                                              SoftSourceRadius                                               => _offSoftSourceRadius.GetValue();
	public float                                              SourceLength                                                   => _offSourceLength.GetValue();
	#endregion


}

// Class Engine.Polys
// 0x0000 (0x0028 - 0x0028)
public class UPolys : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PoseableMeshComponent
// 0x0024 (0x05F0 - 0x05CC)
public class UPoseableMeshComponent : USkinnedMeshComponent
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PoseAsset
// 0x00A0 (0x0120 - 0x0080)
public class UPoseAsset : UAnimationAsset
{
	#region Offsets
	private ExternalOffset<FPoseDataContainer>                _offPoseContainer                                              = new ExternalOffset<FPoseDataContainer>(0x0080, false);       // 0x0080(0x0090) (NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                    _offbAdditivePose                                              = new ExternalOffset<byte/*(bool)*/>(0x0110);                  // 0x0110(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<int>                               _offBasePoseIndex                                              = new ExternalOffset<int>(0x0114);                             // 0x0114(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                             _offRetargetSource                                             = new ExternalOffset<FName>(0x0118, false);                    // 0x0118(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPoseDataContainer                                 PoseContainer                                                  => _offPoseContainer.GetValue();
	public byte/*(bool)*/                                     bAdditivePose                                                  => _offbAdditivePose.GetValue();
	public int                                                BasePoseIndex                                                  => _offBasePoseIndex.GetValue();
	public FName                                              RetargetSource                                                 => _offRetargetSource.GetValue();
	#endregion


}

// Class Engine.PoseWatch
// 0x000C (0x0034 - 0x0028)
public class UPoseWatch : UObject
{
	#region Offsets
	private ExternalOffset<UEdGraphNode>                      _offNode                                                       = new ExternalOffset<UEdGraphNode>(0x0028, true);              // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offPoseWatchColour                                            = new ExternalOffset<FColor>(0x0030, false);                   // 0x0030(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UEdGraphNode                                       Node                                                           => _offNode.GetValue();
	public FColor                                             PoseWatchColour                                                => _offPoseWatchColour.GetValue();
	#endregion


}

// Class Engine.PostProcessComponent
// 0x05DD (0x075D - 0x0180)
public class UPostProcessComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<FPostProcessSettings>              _offSettings                                                   = new ExternalOffset<FPostProcessSettings>(0x0220, false);     // 0x0220(0x0530) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPriority                                                   = new ExternalOffset<float>(0x0750);                           // 0x0750(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBlendRadius                                                = new ExternalOffset<float>(0x0754);                           // 0x0754(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBlendWeight                                                = new ExternalOffset<float>(0x0758);                           // 0x0758(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x075C, false);                     // 0x075C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUnbound                                                   = new ExternalOffset<char>(0x075C, false);                     // 0x075C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPostProcessSettings                               Settings                                                       => _offSettings.GetValue();
	public float                                              Priority                                                       => _offPriority.GetValue();
	public float                                              BlendRadius                                                    => _offBlendRadius.GetValue();
	public float                                              BlendWeight                                                    => _offBlendWeight.GetValue();
	#endregion


}

// Class Engine.PostProcessVolume
// 0x054D (0x07CD - 0x0280)
public class APostProcessVolume : AVolume
{
	#region Offsets
	private ExternalOffset<FPostProcessSettings>              _offSettings                                                   = new ExternalOffset<FPostProcessSettings>(0x0290, false);     // 0x0290(0x0530) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPriority                                                   = new ExternalOffset<float>(0x07C0);                           // 0x07C0(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBlendRadius                                                = new ExternalOffset<float>(0x07C4);                           // 0x07C4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBlendWeight                                                = new ExternalOffset<float>(0x07C8);                           // 0x07C8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnabled                                                   = new ExternalOffset<char>(0x07CC, false);                     // 0x07CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUnbound                                                   = new ExternalOffset<char>(0x07CC, false);                     // 0x07CC(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPostProcessSettings                               Settings                                                       => _offSettings.GetValue();
	public float                                              Priority                                                       => _offPriority.GetValue();
	public float                                              BlendRadius                                                    => _offBlendRadius.GetValue();
	public float                                              BlendWeight                                                    => _offBlendWeight.GetValue();
	#endregion


}

// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0030 (0x02B0 - 0x0280)
public class APrecomputedVisibilityOverrideVolume : AVolume
{
	#region Offsets
	private ExternalOffset<TArray<AActor>>                    _offOverrideVisibleActors                                      = new ExternalOffset<TArray<AActor>>(0x0280, false);           // 0x0280(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<AActor>>                    _offOverrideInvisibleActors                                    = new ExternalOffset<TArray<AActor>>(0x0290, false);           // 0x0290(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FName>>                     _offOverrideInvisibleLevels                                    = new ExternalOffset<TArray<FName>>(0x02A0, false);            // 0x02A0(0x0010) (Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<AActor>                                     OverrideVisibleActors                                          => _offOverrideVisibleActors.GetValue();
	public TArray<AActor>                                     OverrideInvisibleActors                                        => _offOverrideInvisibleActors.GetValue();
	public TArray<FName>                                      OverrideInvisibleLevels                                        => _offOverrideInvisibleLevels.GetValue();
	#endregion


}

// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x0280 - 0x0280)
public class APrecomputedVisibilityVolume : AVolume
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PreviewCollectionInterface
// 0x0000 (0x0028 - 0x0028)
public class UPreviewCollectionInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.PreviewMeshCollection
// 0x0020 (0x0050 - 0x0030)
public class UPreviewMeshCollection : UDataAsset
{
	#region Offsets
	private ExternalOffset<USkeleton>                         _offSkeleton                                                   = new ExternalOffset<USkeleton>(0x0038, true);                 // 0x0038(0x0008) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPreviewMeshCollectionEntry>> _offSkeletalMeshes                                             = new ExternalOffset<TArray<FPreviewMeshCollectionEntry>>(0x0040, false); // 0x0040(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USkeleton                                          Skeleton                                                       => _offSkeleton.GetValue();
	public TArray<FPreviewMeshCollectionEntry>                SkeletalMeshes                                                 => _offSkeletalMeshes.GetValue();
	#endregion


}

// Class Engine.PrimaryAssetLabel
// 0x0020 (0x0050 - 0x0030)
public class UPrimaryAssetLabel : UPrimaryDataAsset
{
	#region Offsets
	private ExternalOffset<FPrimaryAssetRules>                _offRules                                                      = new ExternalOffset<FPrimaryAssetRules>(0x0030, false);       // 0x0030(0x0010) (Edit, NoDestructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLabelAssetsInMyDirectory                                  = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIsRuntimeLabel                                            = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FCollectionReference>              _offAssetCollection                                            = new ExternalOffset<FCollectionReference>(0x0068, false);     // 0x0068(0x0008) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPrimaryAssetRules                                 Rules                                                          => _offRules.GetValue();
	public FCollectionReference                               AssetCollection                                                => _offAssetCollection.GetValue();
	#endregion


}

// Class Engine.ProxyLODMeshSimplificationSettings
// 0x0018 (0x0040 - 0x0028)
public class UProxyLODMeshSimplificationSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<FName>                             _offProxyLODMeshReductionModuleName                            = new ExternalOffset<FName>(0x0038, false);                    // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              ProxyLODMeshReductionModuleName                                => _offProxyLODMeshReductionModuleName.GetValue();
	#endregion


}

// Class Engine.RadialForceActor
// 0x0008 (0x0250 - 0x0248)
public class ARadialForceActor : ARigidBodyBase
{
	#region Offsets
	private ExternalOffset<URadialForceComponent>             _offForceComponent                                             = new ExternalOffset<URadialForceComponent>(0x0248, true);     // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public URadialForceComponent                              ForceComponent                                                 => _offForceComponent.GetValue();
	#endregion


}

// Class Engine.RadialForceComponent
// 0x00C0 (0x0240 - 0x0180)
public class URadialForceComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offImpulseStrength                                            = new ExternalOffset<float>(0x0220);                           // 0x0220(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbImpulseVelChange                                          = new ExternalOffset<char>(0x0224, false);                     // 0x0224(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreOwningActor                                         = new ExternalOffset<char>(0x0224, false);                     // 0x0224(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offForceStrength                                              = new ExternalOffset<float>(0x0228);                           // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDestructibleDamage                                         = new ExternalOffset<float>(0x022C);                           // 0x022C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<TEnumAsByte<EObjectTypeQuery>>> _offObjectTypesToAffect                                        = new ExternalOffset<TArray<TEnumAsByte<EObjectTypeQuery>>>(0x0230, false); // 0x0230(0x0010) (Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public float                                              ImpulseStrength                                                => _offImpulseStrength.GetValue();
	public float                                              ForceStrength                                                  => _offForceStrength.GetValue();
	public float                                              DestructibleDamage                                             => _offDestructibleDamage.GetValue();
	public TArray<TEnumAsByte<EObjectTypeQuery>>              ObjectTypesToAffect                                            => _offObjectTypesToAffect.GetValue();
	#endregion


}

// Class Engine.RectLight
// 0x000F (0x0260 - 0x0251)
public class ARectLight : ALight
{
	#region Offsets
	private ExternalOffset<URectLightComponent>               _offRectLightComponent                                         = new ExternalOffset<URectLightComponent>(0x0258, true);       // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public URectLightComponent                                RectLightComponent                                             => _offRectLightComponent.GetValue();
	#endregion


}

// Class Engine.RectLightComponent
// 0x0018 (0x0388 - 0x0370)
public class URectLightComponent : ULocalLightComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offSourceWidth                                                = new ExternalOffset<float>(0x0370);                           // 0x0370(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSourceHeight                                               = new ExternalOffset<float>(0x0374);                           // 0x0374(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBarnDoorAngle                                              = new ExternalOffset<float>(0x0378);                           // 0x0378(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offBarnDoorLength                                             = new ExternalOffset<float>(0x037C);                           // 0x037C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTexture>                          _offSourceTexture                                              = new ExternalOffset<UTexture>(0x0380, true);                  // 0x0380(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              SourceWidth                                                    => _offSourceWidth.GetValue();
	public float                                              SourceHeight                                                   => _offSourceHeight.GetValue();
	public float                                              BarnDoorAngle                                                  => _offBarnDoorAngle.GetValue();
	public float                                              BarnDoorLength                                                 => _offBarnDoorLength.GetValue();
	public UTexture                                           SourceTexture                                                  => _offSourceTexture.GetValue();
	#endregion


}

// Class Engine.RendererSettings
// 0x00B9 (0x00E1 - 0x0028)
public class URendererSettings : UDeveloperSettings
{
	#region Offsets
//	private ExternalOffset<char>                              _offbMobileHDR                                                 = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileDisableVertexFog                                    = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offMaxMobileCascades                                          = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EMobileMSAASampleCount>> _offMobileMSAASampleCount                                      = new ExternalOffset<TEnumAsByte<EMobileMSAASampleCount>>(0x0040, false); // 0x0040(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileUseLegacyShadingModel                               = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileUseHWsRGBEncoding                                   = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileAllowDitheredLODTransition                          = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileAllowSoftwareOcclusionCulling                       = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDiscardUnusedQualityLevels                                = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOcclusionCulling                                          = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinScreenRadiusForLights                                   = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinScreenRadiusForEarlyZPass                               = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinScreenRadiusForCSMdepth                                 = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPrecomputedVisibilityWarning                              = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTextureStreaming                                          = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseDXT5NormalMaps                                         = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVirtualTextures                                           = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVirtualTexturedLightmaps                                  = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offVirtualTextureTileSize                                     = new ExternalOffset<uint>(0x0058);                            // 0x0058(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offVirtualTextureTileBorderSize                               = new ExternalOffset<uint>(0x005C);                            // 0x005C(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offVirtualTextureFeedbackFactor                               = new ExternalOffset<uint>(0x0060);                            // 0x0060(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVirtualTextureEnableCompressZlib                          = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVirtualTextureEnableCompressCrunch                        = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbClearCoatEnableSecondNormal                               = new ExternalOffset<char>(0x0064, false);                     // 0x0064(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offReflectionCaptureResolution                                = new ExternalOffset<int>(0x0068);                             // 0x0068(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offReflectionEnvironmentLightmapMixBasedOnRoughness           = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForwardShading                                            = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbVertexFoggingForOpaque                                    = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowStaticLighting                                       = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseNormalMapsForStaticLighting                            = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGenerateMeshDistanceFields                                = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEightBitMeshDistanceFields                                = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGenerateLandscapeGIData                                   = new ExternalOffset<char>(0x006C, false);                     // 0x006C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCompressMeshDistanceFields                                = new ExternalOffset<char>(0x006D, false);                     // 0x006D(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTessellationAdaptivePixelsPerTriangle                      = new ExternalOffset<float>(0x0070);                           // 0x0070(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSeparateTranslucency                                      = new ExternalOffset<char>(0x0074, false);                     // 0x0074(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETranslucentSortPolicy>> _offTranslucentSortPolicy                                      = new ExternalOffset<TEnumAsByte<ETranslucentSortPolicy>>(0x0078, false); // 0x0078(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offTranslucentSortAxis                                        = new ExternalOffset<FVector>(0x007C, false);                  // 0x007C(0x000C) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECustomDepthStencil>>  _offCustomDepthStencil                                         = new ExternalOffset<TEnumAsByte<ECustomDepthStencil>>(0x0088, false); // 0x0088(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCustomDepthTaaJitter                                      = new ExternalOffset<char>(0x008C, false);                     // 0x008C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAlphaChannelMode>>    _offbEnableAlphaChannelInPostProcessing                        = new ExternalOffset<TEnumAsByte<EAlphaChannelMode>>(0x0090, false); // 0x0090(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDefaultFeatureBloom                                       = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDefaultFeatureAmbientOcclusion                            = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDefaultFeatureAmbientOcclusionStaticFraction              = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDefaultFeatureAutoExposure                                = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAutoExposureMethodUI>> _offDefaultFeatureAutoExposure                                 = new ExternalOffset<TEnumAsByte<EAutoExposureMethodUI>>(0x0098, false); // 0x0098(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbExtendDefaultLuminanceRangeInAutoExposureSettings         = new ExternalOffset<char>(0x009C, false);                     // 0x009C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsePreExposure                                            = new ExternalOffset<char>(0x009C, false);                     // 0x009C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnablePreExposureOnlyInTheEditor                          = new ExternalOffset<char>(0x009C, false);                     // 0x009C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDefaultFeatureMotionBlur                                  = new ExternalOffset<char>(0x009C, false);                     // 0x009C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDefaultFeatureLensFlare                                   = new ExternalOffset<char>(0x009C, false);                     // 0x009C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbTemporalUpsampling                                        = new ExternalOffset<char>(0x009C, false);                     // 0x009C(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAntiAliasingMethod>>  _offDefaultFeatureAntiAliasing                                 = new ExternalOffset<TEnumAsByte<EAntiAliasingMethod>>(0x00A0, false); // 0x00A0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ELightUnits>                       _offDefaultLightUnits                                          = new ExternalOffset<ELightUnits>(0x00A1, false);              // 0x00A1(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EDefaultBackBufferPixelFormat>> _offDefaultBackBufferPixelFormat                               = new ExternalOffset<TEnumAsByte<EDefaultBackBufferPixelFormat>>(0x00A2, false); // 0x00A2(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRenderUnbuiltPreviewShadowsInGame                         = new ExternalOffset<char>(0x00A4, false);                     // 0x00A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStencilForLODDither                                       = new ExternalOffset<char>(0x00A4, false);                     // 0x00A4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EEarlyZPass>>          _offEarlyZPass                                                 = new ExternalOffset<TEnumAsByte<EEarlyZPass>>(0x00A8, false); // 0x00A8(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEarlyZPassOnlyMaterialMasking                             = new ExternalOffset<char>(0x00AC, false);                     // 0x00AC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDBuffer                                                   = new ExternalOffset<char>(0x00AC, false);                     // 0x00AC(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EClearSceneOptions>>   _offClearSceneMethod                                           = new ExternalOffset<TEnumAsByte<EClearSceneOptions>>(0x00B0, false); // 0x00B0(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbBasePassOutputsVelocity                                   = new ExternalOffset<char>(0x00B4, false);                     // 0x00B4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSelectiveBasePassOutputs                                  = new ExternalOffset<char>(0x00B4, false);                     // 0x00B4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDefaultParticleCutouts                                    = new ExternalOffset<char>(0x00B4, false);                     // 0x00B4(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offGPUSimulationTextureSizeX                                  = new ExternalOffset<int>(0x00B8);                             // 0x00B8(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offGPUSimulationTextureSizeY                                  = new ExternalOffset<int>(0x00BC);                             // 0x00BC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGlobalClipPlane                                           = new ExternalOffset<char>(0x00C0, false);                     // 0x00C0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EGBufferFormat>>       _offGBufferFormat                                              = new ExternalOffset<TEnumAsByte<EGBufferFormat>>(0x00C4, false); // 0x00C4(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseGPUMorphTargets                                        = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbNvidiaAftermathEnabled                                    = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInstancedStereo                                           = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMultiView                                                 = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileMultiView                                           = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileMultiViewDirect                                     = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRoundRobinOcclusion                                       = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbODSCapture                                                = new ExternalOffset<char>(0x00C8, false);                     // 0x00C8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWireframeCullThreshold                                     = new ExternalOffset<float>(0x00CC);                           // 0x00CC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableRayTracing                                          = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportStationarySkylight                                 = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportLowQualityLightmaps                                = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportPointLightWholeSceneShadows                        = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportAtmosphericFog                                     = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportSkinCacheShaders                                   = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileEnableStaticAndCSMShadowReceivers                   = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileEnableMovableLightCSMShaderCulling                  = new ExternalOffset<char>(0x00D0, false);                     // 0x00D0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileAllowDistanceFieldShadows                           = new ExternalOffset<char>(0x00D1, false);                     // 0x00D1(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileAllowMovableDirectionalLights                       = new ExternalOffset<char>(0x00D1, false);                     // 0x00D1(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offMobileNumDynamicPointLights                                = new ExternalOffset<uint>(0x00D4);                            // 0x00D4(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileDynamicPointLightsUseStaticBranch                   = new ExternalOffset<char>(0x00D8, false);                     // 0x00D8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMobileAllowMovableSpotlights                              = new ExternalOffset<char>(0x00D8, false);                     // 0x00D8(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSkinCacheSceneMemoryLimitInMB                              = new ExternalOffset<float>(0x00DC);                           // 0x00DC(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGPUSkinLimit2BoneInfluences                               = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportDepthOnlyIndexBuffers                              = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportReversedIndexBuffers                               = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportMaterialLayers                                     = new ExternalOffset<char>(0x00E0, false);                     // 0x00E0(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                MaxMobileCascades                                              => _offMaxMobileCascades.GetValue();
	public TEnumAsByte<EMobileMSAASampleCount>                MobileMSAASampleCount                                          => _offMobileMSAASampleCount.GetValue();
	public float                                              MinScreenRadiusForLights                                       => _offMinScreenRadiusForLights.GetValue();
	public float                                              MinScreenRadiusForEarlyZPass                                   => _offMinScreenRadiusForEarlyZPass.GetValue();
	public float                                              MinScreenRadiusForCSMdepth                                     => _offMinScreenRadiusForCSMdepth.GetValue();
	public uint                                               VirtualTextureTileSize                                         => _offVirtualTextureTileSize.GetValue();
	public uint                                               VirtualTextureTileBorderSize                                   => _offVirtualTextureTileBorderSize.GetValue();
	public uint                                               VirtualTextureFeedbackFactor                                   => _offVirtualTextureFeedbackFactor.GetValue();
	public int                                                ReflectionCaptureResolution                                    => _offReflectionCaptureResolution.GetValue();
	public float                                              TessellationAdaptivePixelsPerTriangle                          => _offTessellationAdaptivePixelsPerTriangle.GetValue();
	public TEnumAsByte<ETranslucentSortPolicy>                TranslucentSortPolicy                                          => _offTranslucentSortPolicy.GetValue();
	public FVector                                            TranslucentSortAxis                                            => _offTranslucentSortAxis.GetValue();
	public TEnumAsByte<ECustomDepthStencil>                   CustomDepthStencil                                             => _offCustomDepthStencil.GetValue();
	public TEnumAsByte<EAlphaChannelMode>                     bEnableAlphaChannelInPostProcessing                            => _offbEnableAlphaChannelInPostProcessing.GetValue();
	public TEnumAsByte<EAutoExposureMethodUI>                 DefaultFeatureAutoExposure                                     => _offDefaultFeatureAutoExposure.GetValue();
	public TEnumAsByte<EAntiAliasingMethod>                   DefaultFeatureAntiAliasing                                     => _offDefaultFeatureAntiAliasing.GetValue();
	public ELightUnits                                        DefaultLightUnits                                              => _offDefaultLightUnits.GetValue();
	public TEnumAsByte<EDefaultBackBufferPixelFormat>         DefaultBackBufferPixelFormat                                   => _offDefaultBackBufferPixelFormat.GetValue();
	public TEnumAsByte<EEarlyZPass>                           EarlyZPass                                                     => _offEarlyZPass.GetValue();
	public TEnumAsByte<EClearSceneOptions>                    ClearSceneMethod                                               => _offClearSceneMethod.GetValue();
	public int                                                GPUSimulationTextureSizeX                                      => _offGPUSimulationTextureSizeX.GetValue();
	public int                                                GPUSimulationTextureSizeY                                      => _offGPUSimulationTextureSizeY.GetValue();
	public TEnumAsByte<EGBufferFormat>                        GBufferFormat                                                  => _offGBufferFormat.GetValue();
	public float                                              WireframeCullThreshold                                         => _offWireframeCullThreshold.GetValue();
	public uint                                               MobileNumDynamicPointLights                                    => _offMobileNumDynamicPointLights.GetValue();
	public float                                              SkinCacheSceneMemoryLimitInMB                                  => _offSkinCacheSceneMemoryLimitInMB.GetValue();
	#endregion


}

// Class Engine.RendererOverrideSettings
// 0x0011 (0x0039 - 0x0028)
public class URendererOverrideSettings : UDeveloperSettings
{
	#region Offsets
//	private ExternalOffset<char>                              _offbSupportAllShaderPermutations                              = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceRecomputeTangents                                    = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.ReporterBase
// 0x0000 (0x0028 - 0x0028)
public class UReporterBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ReporterGraph
// 0x0008 (0x0030 - 0x0028)
public class UReporterGraph : UReporterBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ReverbEffect
// 0x0030 (0x0058 - 0x0028)
public class UReverbEffect : UObject
{
	#region Offsets
	private ExternalOffset<float>                             _offDensity                                                    = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDiffusion                                                  = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGain                                                       = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offGainHF                                                     = new ExternalOffset<float>(0x0034);                           // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDecayTime                                                  = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDecayHFRatio                                               = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offReflectionsGain                                            = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offReflectionsDelay                                           = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLateGain                                                   = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLateDelay                                                  = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAirAbsorptionGainHF                                        = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRoomRolloffFactor                                          = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Density                                                        => _offDensity.GetValue();
	public float                                              Diffusion                                                      => _offDiffusion.GetValue();
	public float                                              Gain                                                           => _offGain.GetValue();
	public float                                              GainHF                                                         => _offGainHF.GetValue();
	public float                                              DecayTime                                                      => _offDecayTime.GetValue();
	public float                                              DecayHFRatio                                                   => _offDecayHFRatio.GetValue();
	public float                                              ReflectionsGain                                                => _offReflectionsGain.GetValue();
	public float                                              ReflectionsDelay                                               => _offReflectionsDelay.GetValue();
	public float                                              LateGain                                                       => _offLateGain.GetValue();
	public float                                              LateDelay                                                      => _offLateDelay.GetValue();
	public float                                              AirAbsorptionGainHF                                            => _offAirAbsorptionGainHF.GetValue();
	public float                                              RoomRolloffFactor                                              => _offRoomRolloffFactor.GetValue();
	#endregion


}

// Class Engine.Rig
// 0x0028 (0x0050 - 0x0028)
public class URig : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FTransformBase>>            _offTransformBases                                             = new ExternalOffset<TArray<FTransformBase>>(0x0030, false);   // 0x0030(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FNode>>                     _offNodes                                                      = new ExternalOffset<TArray<FNode>>(0x0040, false);            // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FTransformBase>                             TransformBases                                                 => _offTransformBases.GetValue();
	public TArray<FNode>                                      Nodes                                                          => _offNodes.GetValue();
	#endregion


}

// Class Engine.RotatingMovementComponent
// 0x001D (0x0131 - 0x0114)
public class URotatingMovementComponent : UMovementComponent
{
	#region Offsets
	private ExternalOffset<FRotator>                          _offRotationRate                                               = new ExternalOffset<FRotator>(0x0118, false);                 // 0x0118(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offPivotTranslation                                           = new ExternalOffset<FVector>(0x0124, false);                  // 0x0124(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRotationInLocalSpace                                      = new ExternalOffset<char>(0x0130, false);                     // 0x0130(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FRotator                                           RotationRate                                                   => _offRotationRate.GetValue();
	public FVector                                            PivotTranslation                                               => _offPivotTranslation.GetValue();
	#endregion


}

// Class Engine.RuntimeOptionsBase
// 0x0000 (0x0028 - 0x0028)
public class URuntimeOptionsBase : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.RuntimeVirtualTexture
// 0x0016 (0x003E - 0x0028)
public class URuntimeVirtualTexture : UObject
{
	#region Offsets
	private ExternalOffset<ERuntimeVirtualTextureMaterialType> _offMaterialType                                               = new ExternalOffset<ERuntimeVirtualTextureMaterialType>(0x0028, false); // 0x0028(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbCompressTextures                                          = new ExternalOffset<byte/*(bool)*/>(0x002C);                  // 0x002C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offSize                                                       = new ExternalOffset<int>(0x0030);                             // 0x0030(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offTileSize                                                   = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offTileBorderSize                                             = new ExternalOffset<int>(0x0038);                             // 0x0038(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offRemoveLowMips                                              = new ExternalOffset<int>(0x003C);                             // 0x003C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnable                                                    = new ExternalOffset<byte/*(bool)*/>(0x0040);                  // 0x0040(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public ERuntimeVirtualTextureMaterialType                 MaterialType                                                   => _offMaterialType.GetValue();
	public byte/*(bool)*/                                     bCompressTextures                                              => _offbCompressTextures.GetValue();
	public int                                                Size                                                           => _offSize.GetValue();
	public int                                                TileSize                                                       => _offTileSize.GetValue();
	public int                                                TileBorderSize                                                 => _offTileBorderSize.GetValue();
	public int                                                RemoveLowMips                                                  => _offRemoveLowMips.GetValue();
	public byte/*(bool)*/                                     bEnable                                                        => _offbEnable.GetValue();
	#endregion


}

// Class Engine.RuntimeVirtualTextureComponent
// 0x00A8 (0x0228 - 0x0180)
public class URuntimeVirtualTextureComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<URuntimeVirtualTexture>            _offVirtualTexture                                             = new ExternalOffset<URuntimeVirtualTexture>(0x0218, true);    // 0x0218(0x0008) (Edit, ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<AActor>                            _offBoundsSourceActor                                          = new ExternalOffset<AActor>(0x0220, true);                    // 0x0220(0x0008) (Edit, ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public URuntimeVirtualTexture                             VirtualTexture                                                 => _offVirtualTexture.GetValue();
	public AActor                                             BoundsSourceActor                                              => _offBoundsSourceActor.GetValue();
	#endregion


}

// Class Engine.RuntimeVirtualTextureVolume
// 0x0018 (0x0250 - 0x0238)
public class ARuntimeVirtualTextureVolume : AActor
{
	#region Offsets
	private ExternalOffset<URuntimeVirtualTextureComponent>   _offVirtualTextureComponent                                    = new ExternalOffset<URuntimeVirtualTextureComponent>(0x0248, true); // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public URuntimeVirtualTextureComponent                    VirtualTextureComponent                                        => _offVirtualTextureComponent.GetValue();
	#endregion


}

// Class Engine.RVOAvoidanceInterface
// 0x0000 (0x0028 - 0x0028)
public class URVOAvoidanceInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SaveGame
// 0x0000 (0x0028 - 0x0028)
public class USaveGame : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.Scene
// 0x0000 (0x0028 - 0x0028)
public class UScene : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SceneCapture2D
// 0x0008 (0x0260 - 0x0258)
public class ASceneCapture2D : ASceneCapture
{
	#region Offsets
	private ExternalOffset<USceneCaptureComponent2D>          _offCaptureComponent2D                                         = new ExternalOffset<USceneCaptureComponent2D>(0x0258, true);  // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public USceneCaptureComponent2D                           CaptureComponent2D                                             => _offCaptureComponent2D.GetValue();
	#endregion


}

// Class Engine.SceneCaptureComponent2D
// 0x05CD (0x086D - 0x02A0)
public class USceneCaptureComponent2D : USceneCaptureComponent
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<ECameraProjectionMode>> _offProjectionType                                             = new ExternalOffset<TEnumAsByte<ECameraProjectionMode>>(0x02B0, false); // 0x02B0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFOVAngle                                                   = new ExternalOffset<float>(0x02B4);                           // 0x02B4(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOrthoWidth                                                 = new ExternalOffset<float>(0x02B8);                           // 0x02B8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTextureRenderTarget2D>            _offTextureTarget                                              = new ExternalOffset<UTextureRenderTarget2D>(0x02C0, true);    // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESceneCaptureCompositeMode>> _offCompositeMode                                              = new ExternalOffset<TEnumAsByte<ESceneCaptureCompositeMode>>(0x02C8, false); // 0x02C8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FPostProcessSettings>              _offPostProcessSettings                                        = new ExternalOffset<FPostProcessSettings>(0x02D0, false);     // 0x02D0(0x0530) (Edit, BlueprintVisible, Interp, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPostProcessBlendWeight                                     = new ExternalOffset<float>(0x0800);                           // 0x0800(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverride_CustomNearClippingPlane                          = new ExternalOffset<char>(0x0804, false);                     // 0x0804(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCustomNearClippingPlane                                    = new ExternalOffset<float>(0x0808);                           // 0x0808(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseCustomProjectionMatrix                                 = new ExternalOffset<byte/*(bool)*/>(0x080C);                  // 0x080C(0x0001) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FMatrix>                           _offCustomProjectionMatrix                                     = new ExternalOffset<FMatrix>(0x0810, false);                  // 0x0810(0x0040) (BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbEnableClipPlane                                           = new ExternalOffset<byte/*(bool)*/>(0x0850);                  // 0x0850(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offClipPlaneBase                                              = new ExternalOffset<FVector>(0x0854, false);                  // 0x0854(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offClipPlaneNormal                                            = new ExternalOffset<FVector>(0x0860, false);                  // 0x0860(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbCameraCutThisFrame                                        = new ExternalOffset<char>(0x086C, false);                     // 0x086C(0x0001) BIT_FIELD (BlueprintVisible, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbConsiderUnrenderedOpaquePixelAsFullyTranslucent           = new ExternalOffset<char>(0x086C, false);                     // 0x086C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<ECameraProjectionMode>                 ProjectionType                                                 => _offProjectionType.GetValue();
	public float                                              FOVAngle                                                       => _offFOVAngle.GetValue();
	public float                                              OrthoWidth                                                     => _offOrthoWidth.GetValue();
	public UTextureRenderTarget2D                             TextureTarget                                                  => _offTextureTarget.GetValue();
	public TEnumAsByte<ESceneCaptureCompositeMode>            CompositeMode                                                  => _offCompositeMode.GetValue();
	public FPostProcessSettings                               PostProcessSettings                                            => _offPostProcessSettings.GetValue();
	public float                                              PostProcessBlendWeight                                         => _offPostProcessBlendWeight.GetValue();
	public float                                              CustomNearClippingPlane                                        => _offCustomNearClippingPlane.GetValue();
	public byte/*(bool)*/                                     bUseCustomProjectionMatrix                                     => _offbUseCustomProjectionMatrix.GetValue();
	public FMatrix                                            CustomProjectionMatrix                                         => _offCustomProjectionMatrix.GetValue();
	public byte/*(bool)*/                                     bEnableClipPlane                                               => _offbEnableClipPlane.GetValue();
	public FVector                                            ClipPlaneBase                                                  => _offClipPlaneBase.GetValue();
	public FVector                                            ClipPlaneNormal                                                => _offClipPlaneNormal.GetValue();
	#endregion


}

// Class Engine.SceneCaptureComponentCube
// 0x003C (0x02DC - 0x02A0)
public class USceneCaptureComponentCube : USceneCaptureComponent
{
	#region Offsets
	private ExternalOffset<UTextureRenderTargetCube>          _offTextureTarget                                              = new ExternalOffset<UTextureRenderTargetCube>(0x02B0, true);  // 0x02B0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbCaptureRotation                                           = new ExternalOffset<byte/*(bool)*/>(0x02B8);                  // 0x02B8(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTextureRenderTargetCube>          _offTextureTargetLeft                                          = new ExternalOffset<UTextureRenderTargetCube>(0x02C0, true);  // 0x02C0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTextureRenderTargetCube>          _offTextureTargetRight                                         = new ExternalOffset<UTextureRenderTargetCube>(0x02C8, true);  // 0x02C8(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTextureRenderTarget2D>            _offTextureTargetODS                                           = new ExternalOffset<UTextureRenderTarget2D>(0x02D0, true);    // 0x02D0(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offIPD                                                        = new ExternalOffset<float>(0x02D8);                           // 0x02D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTextureRenderTargetCube                           TextureTarget                                                  => _offTextureTarget.GetValue();
	public byte/*(bool)*/                                     bCaptureRotation                                               => _offbCaptureRotation.GetValue();
	public UTextureRenderTargetCube                           TextureTargetLeft                                              => _offTextureTargetLeft.GetValue();
	public UTextureRenderTargetCube                           TextureTargetRight                                             => _offTextureTargetRight.GetValue();
	public UTextureRenderTarget2D                             TextureTargetODS                                               => _offTextureTargetODS.GetValue();
	public float                                              IPD                                                            => _offIPD.GetValue();
	#endregion


}

// Class Engine.SceneCaptureCube
// 0x0008 (0x0260 - 0x0258)
public class ASceneCaptureCube : ASceneCapture
{
	#region Offsets
	private ExternalOffset<USceneCaptureComponentCube>        _offCaptureComponentCube                                       = new ExternalOffset<USceneCaptureComponentCube>(0x0258, true); // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public USceneCaptureComponentCube                         CaptureComponentCube                                           => _offCaptureComponentCube.GetValue();
	#endregion


}

// Class Engine.SCS_Node
// 0x00B8 (0x00E0 - 0x0028)
public class USCS_Node : UObject
{
	#region Offsets
	private ExternalOffset<UClass>                            _offComponentClass                                             = new ExternalOffset<UClass>(0x0028, true);                    // 0x0028(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UActorComponent>                   _offComponentTemplate                                          = new ExternalOffset<UActorComponent>(0x0030, true);           // 0x0030(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBlueprintCookedComponentInstancingData> _offCookedComponentInstancingData                              = new ExternalOffset<FBlueprintCookedComponentInstancingData>(0x0038, false); // 0x0038(0x0050) (NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offAttachToName                                               = new ExternalOffset<FName>(0x0088, false);                    // 0x0088(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offParentComponentOrVariableName                              = new ExternalOffset<FName>(0x0090, false);                    // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offParentComponentOwnerClassName                              = new ExternalOffset<FName>(0x0098, false);                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbIsParentComponentNative                                   = new ExternalOffset<byte/*(bool)*/>(0x00A0);                  // 0x00A0(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<USCS_Node>>                 _offChildNodes                                                 = new ExternalOffset<TArray<USCS_Node>>(0x00A8, false);        // 0x00A8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBPVariableMetaDataEntry>>  _offMetaDataArray                                              = new ExternalOffset<TArray<FBPVariableMetaDataEntry>>(0x00B8, false); // 0x00B8(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offVariableGuid                                               = new ExternalOffset<FGuid>(0x00C8, false);                    // 0x00C8(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offInternalVariableName                                       = new ExternalOffset<FName>(0x00D8, false);                    // 0x00D8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UClass                                             ComponentClass                                                 => _offComponentClass.GetValue();
	public UActorComponent                                    ComponentTemplate                                              => _offComponentTemplate.GetValue();
	public FBlueprintCookedComponentInstancingData            CookedComponentInstancingData                                  => _offCookedComponentInstancingData.GetValue();
	public FName                                              AttachToName                                                   => _offAttachToName.GetValue();
	public FName                                              ParentComponentOrVariableName                                  => _offParentComponentOrVariableName.GetValue();
	public FName                                              ParentComponentOwnerClassName                                  => _offParentComponentOwnerClassName.GetValue();
	public byte/*(bool)*/                                     bIsParentComponentNative                                       => _offbIsParentComponentNative.GetValue();
	public TArray<USCS_Node>                                  ChildNodes                                                     => _offChildNodes.GetValue();
	public TArray<FBPVariableMetaDataEntry>                   MetaDataArray                                                  => _offMetaDataArray.GetValue();
	public FGuid                                              VariableGuid                                                   => _offVariableGuid.GetValue();
	public FName                                              InternalVariableName                                           => _offInternalVariableName.GetValue();
	#endregion


}

// Class Engine.Selection
// 0x0000 (0x0028 - 0x0028)
public class USelection : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.ServerStatReplicator
// 0x00C4 (0x030C - 0x0248)
public class AServerStatReplicator : AInfo
{
	#region Offsets
	private ExternalOffset<byte/*(bool)*/>                    _offbUpdateStatNet                                             = new ExternalOffset<byte/*(bool)*/>(0x0248);                  // 0x0248(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbOverwriteClientStats                                      = new ExternalOffset<byte/*(bool)*/>(0x0249);                  // 0x0249(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offChannels                                                   = new ExternalOffset<uint>(0x024C);                            // 0x024C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInRate                                                     = new ExternalOffset<uint>(0x0250);                            // 0x0250(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutRate                                                    = new ExternalOffset<uint>(0x0254);                            // 0x0254(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutSaturation                                              = new ExternalOffset<uint>(0x0258);                            // 0x0258(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offMaxPacketOverhead                                          = new ExternalOffset<uint>(0x025C);                            // 0x025C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInRateClientMax                                            = new ExternalOffset<uint>(0x0260);                            // 0x0260(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInRateClientMin                                            = new ExternalOffset<uint>(0x0264);                            // 0x0264(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInRateClientAvg                                            = new ExternalOffset<uint>(0x0268);                            // 0x0268(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInPacketsClientMax                                         = new ExternalOffset<uint>(0x026C);                            // 0x026C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInPacketsClientMin                                         = new ExternalOffset<uint>(0x0270);                            // 0x0270(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInPacketsClientAvg                                         = new ExternalOffset<uint>(0x0274);                            // 0x0274(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutRateClientMax                                           = new ExternalOffset<uint>(0x0278);                            // 0x0278(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutRateClientMin                                           = new ExternalOffset<uint>(0x027C);                            // 0x027C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutRateClientAvg                                           = new ExternalOffset<uint>(0x0280);                            // 0x0280(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutPacketsClientMax                                        = new ExternalOffset<uint>(0x0284);                            // 0x0284(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutPacketsClientMin                                        = new ExternalOffset<uint>(0x0288);                            // 0x0288(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutPacketsClientAvg                                        = new ExternalOffset<uint>(0x028C);                            // 0x028C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNetNumClients                                              = new ExternalOffset<uint>(0x0290);                            // 0x0290(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInPackets                                                  = new ExternalOffset<uint>(0x0294);                            // 0x0294(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutPackets                                                 = new ExternalOffset<uint>(0x0298);                            // 0x0298(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInBunches                                                  = new ExternalOffset<uint>(0x029C);                            // 0x029C(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutBunches                                                 = new ExternalOffset<uint>(0x02A0);                            // 0x02A0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offOutLoss                                                    = new ExternalOffset<uint>(0x02A4);                            // 0x02A4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offInLoss                                                     = new ExternalOffset<uint>(0x02A8);                            // 0x02A8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offVoiceBytesSent                                             = new ExternalOffset<uint>(0x02AC);                            // 0x02AC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offVoiceBytesRecv                                             = new ExternalOffset<uint>(0x02B0);                            // 0x02B0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offVoicePacketsSent                                           = new ExternalOffset<uint>(0x02B4);                            // 0x02B4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offVoicePacketsRecv                                           = new ExternalOffset<uint>(0x02B8);                            // 0x02B8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offPercentInVoice                                             = new ExternalOffset<uint>(0x02BC);                            // 0x02BC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offPercentOutVoice                                            = new ExternalOffset<uint>(0x02C0);                            // 0x02C0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumActorChannels                                           = new ExternalOffset<uint>(0x02C4);                            // 0x02C4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumConsideredActors                                        = new ExternalOffset<uint>(0x02C8);                            // 0x02C8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offPrioritizedActors                                          = new ExternalOffset<uint>(0x02CC);                            // 0x02CC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumRelevantActors                                          = new ExternalOffset<uint>(0x02D0);                            // 0x02D0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumRelevantDeletedActors                                   = new ExternalOffset<uint>(0x02D4);                            // 0x02D4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumReplicatedActorAttempts                                 = new ExternalOffset<uint>(0x02D8);                            // 0x02D8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumReplicatedActors                                        = new ExternalOffset<uint>(0x02DC);                            // 0x02DC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumActors                                                  = new ExternalOffset<uint>(0x02E0);                            // 0x02E0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumNetActors                                               = new ExternalOffset<uint>(0x02E4);                            // 0x02E4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumDormantActors                                           = new ExternalOffset<uint>(0x02E8);                            // 0x02E8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumInitiallyDormantActors                                  = new ExternalOffset<uint>(0x02EC);                            // 0x02EC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumNetGUIDsAckd                                            = new ExternalOffset<uint>(0x02F0);                            // 0x02F0(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumNetGUIDsPending                                         = new ExternalOffset<uint>(0x02F4);                            // 0x02F4(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNumNetGUIDsUnAckd                                          = new ExternalOffset<uint>(0x02F8);                            // 0x02F8(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offObjPathBytes                                               = new ExternalOffset<uint>(0x02FC);                            // 0x02FC(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNetGUIDOutRate                                             = new ExternalOffset<uint>(0x0300);                            // 0x0300(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNetGUIDInRate                                              = new ExternalOffset<uint>(0x0304);                            // 0x0304(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<uint>                              _offNetSaturated                                               = new ExternalOffset<uint>(0x0308);                            // 0x0308(0x0004) (Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public byte/*(bool)*/                                     bUpdateStatNet                                                 => _offbUpdateStatNet.GetValue();
	public byte/*(bool)*/                                     bOverwriteClientStats                                          => _offbOverwriteClientStats.GetValue();
	public uint                                               Channels                                                       => _offChannels.GetValue();
	public uint                                               InRate                                                         => _offInRate.GetValue();
	public uint                                               OutRate                                                        => _offOutRate.GetValue();
	public uint                                               OutSaturation                                                  => _offOutSaturation.GetValue();
	public uint                                               MaxPacketOverhead                                              => _offMaxPacketOverhead.GetValue();
	public uint                                               InRateClientMax                                                => _offInRateClientMax.GetValue();
	public uint                                               InRateClientMin                                                => _offInRateClientMin.GetValue();
	public uint                                               InRateClientAvg                                                => _offInRateClientAvg.GetValue();
	public uint                                               InPacketsClientMax                                             => _offInPacketsClientMax.GetValue();
	public uint                                               InPacketsClientMin                                             => _offInPacketsClientMin.GetValue();
	public uint                                               InPacketsClientAvg                                             => _offInPacketsClientAvg.GetValue();
	public uint                                               OutRateClientMax                                               => _offOutRateClientMax.GetValue();
	public uint                                               OutRateClientMin                                               => _offOutRateClientMin.GetValue();
	public uint                                               OutRateClientAvg                                               => _offOutRateClientAvg.GetValue();
	public uint                                               OutPacketsClientMax                                            => _offOutPacketsClientMax.GetValue();
	public uint                                               OutPacketsClientMin                                            => _offOutPacketsClientMin.GetValue();
	public uint                                               OutPacketsClientAvg                                            => _offOutPacketsClientAvg.GetValue();
	public uint                                               NetNumClients                                                  => _offNetNumClients.GetValue();
	public uint                                               InPackets                                                      => _offInPackets.GetValue();
	public uint                                               OutPackets                                                     => _offOutPackets.GetValue();
	public uint                                               InBunches                                                      => _offInBunches.GetValue();
	public uint                                               OutBunches                                                     => _offOutBunches.GetValue();
	public uint                                               OutLoss                                                        => _offOutLoss.GetValue();
	public uint                                               InLoss                                                         => _offInLoss.GetValue();
	public uint                                               VoiceBytesSent                                                 => _offVoiceBytesSent.GetValue();
	public uint                                               VoiceBytesRecv                                                 => _offVoiceBytesRecv.GetValue();
	public uint                                               VoicePacketsSent                                               => _offVoicePacketsSent.GetValue();
	public uint                                               VoicePacketsRecv                                               => _offVoicePacketsRecv.GetValue();
	public uint                                               PercentInVoice                                                 => _offPercentInVoice.GetValue();
	public uint                                               PercentOutVoice                                                => _offPercentOutVoice.GetValue();
	public uint                                               NumActorChannels                                               => _offNumActorChannels.GetValue();
	public uint                                               NumConsideredActors                                            => _offNumConsideredActors.GetValue();
	public uint                                               PrioritizedActors                                              => _offPrioritizedActors.GetValue();
	public uint                                               NumRelevantActors                                              => _offNumRelevantActors.GetValue();
	public uint                                               NumRelevantDeletedActors                                       => _offNumRelevantDeletedActors.GetValue();
	public uint                                               NumReplicatedActorAttempts                                     => _offNumReplicatedActorAttempts.GetValue();
	public uint                                               NumReplicatedActors                                            => _offNumReplicatedActors.GetValue();
	public uint                                               NumActors                                                      => _offNumActors.GetValue();
	public uint                                               NumNetActors                                                   => _offNumNetActors.GetValue();
	public uint                                               NumDormantActors                                               => _offNumDormantActors.GetValue();
	public uint                                               NumInitiallyDormantActors                                      => _offNumInitiallyDormantActors.GetValue();
	public uint                                               NumNetGUIDsAckd                                                => _offNumNetGUIDsAckd.GetValue();
	public uint                                               NumNetGUIDsPending                                             => _offNumNetGUIDsPending.GetValue();
	public uint                                               NumNetGUIDsUnAckd                                              => _offNumNetGUIDsUnAckd.GetValue();
	public uint                                               ObjPathBytes                                                   => _offObjPathBytes.GetValue();
	public uint                                               NetGUIDOutRate                                                 => _offNetGUIDOutRate.GetValue();
	public uint                                               NetGUIDInRate                                                  => _offNetGUIDInRate.GetValue();
	public uint                                               NetSaturated                                                   => _offNetSaturated.GetValue();
	#endregion


}

// Class Engine.ShadowMapTexture2D
// 0x001D (0x0101 - 0x00E4)
public class UShadowMapTexture2D : UTexture2D
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EShadowMapFlags>>      _offShadowmapFlags                                             = new ExternalOffset<TEnumAsByte<EShadowMapFlags>>(0x0100, false); // 0x0100(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EShadowMapFlags>                       ShadowmapFlags                                                 => _offShadowmapFlags.GetValue();
	#endregion


}

// Class Engine.SimpleConstructionScript
// 0x0028 (0x0050 - 0x0028)
public class USimpleConstructionScript : UObject
{
	#region Offsets
	private ExternalOffset<TArray<USCS_Node>>                 _offRootNodes                                                  = new ExternalOffset<TArray<USCS_Node>>(0x0028, false);        // 0x0028(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<USCS_Node>>                 _offAllNodes                                                   = new ExternalOffset<TArray<USCS_Node>>(0x0038, false);        // 0x0038(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<USCS_Node>                         _offDefaultSceneRootNode                                       = new ExternalOffset<USCS_Node>(0x0048, true);                 // 0x0048(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<USCS_Node>                                  RootNodes                                                      => _offRootNodes.GetValue();
	public TArray<USCS_Node>                                  AllNodes                                                       => _offAllNodes.GetValue();
	public USCS_Node                                          DefaultSceneRootNode                                           => _offDefaultSceneRootNode.GetValue();
	#endregion


}

// Class Engine.SkeletalMesh
// 0x0338 (0x0360 - 0x0028)
public class USkeletalMesh : UObject
{
	#region Offsets
	private ExternalOffset<USkeleton>                         _offSkeleton                                                   = new ExternalOffset<USkeleton>(0x0048, true);                 // 0x0048(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBoxSphereBounds>                  _offImportedBounds                                             = new ExternalOffset<FBoxSphereBounds>(0x0050, false);         // 0x0050(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<FBoxSphereBounds>                  _offExtendedBounds                                             = new ExternalOffset<FBoxSphereBounds>(0x006C, false);         // 0x006C(0x001C) (ZeroConstructor, Transient, DuplicateTransient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<FVector>                           _offPositiveBoundsExtension                                    = new ExternalOffset<FVector>(0x0088, false);                  // 0x0088(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FVector>                           _offNegativeBoundsExtension                                    = new ExternalOffset<FVector>(0x0094, false);                  // 0x0094(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FSkeletalMaterial>>         _offMaterials                                                  = new ExternalOffset<TArray<FSkeletalMaterial>>(0x00A0, false); // 0x00A0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, DuplicateTransient, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBoneMirrorInfo>>           _offSkelMirrorTable                                            = new ExternalOffset<TArray<FBoneMirrorInfo>>(0x00B0, false);  // 0x00B0(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSkeletalMeshLODInfo>>      _offLODInfo                                                    = new ExternalOffset<TArray<FSkeletalMeshLODInfo>>(0x00C0, false); // 0x00C0(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<FPerPlatformInt>                   _offMinLOD                                                     = new ExternalOffset<FPerPlatformInt>(0x0120, false);          // 0x0120(0x0004) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FPerPlatformBool>                  _offDisableBelowMinLodStripping                                = new ExternalOffset<FPerPlatformBool>(0x0124, false);         // 0x0124(0x0001) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAxis>>                _offSkelMirrorAxis                                             = new ExternalOffset<TEnumAsByte<EAxis>>(0x0125, false);       // 0x0125(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EAxis>>                _offSkelMirrorFlipAxis                                         = new ExternalOffset<TEnumAsByte<EAxis>>(0x0126, false);       // 0x0126(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseFullPrecisionUVs                                       = new ExternalOffset<char>(0x0127, false);                     // 0x0127(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseHighPrecisionTangentBasis                              = new ExternalOffset<char>(0x0127, false);                     // 0x0127(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasBeenSimplified                                         = new ExternalOffset<char>(0x0127, false);                     // 0x0127(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasVertexColors                                           = new ExternalOffset<char>(0x0127, false);                     // 0x0127(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnablePerPolyCollision                                    = new ExternalOffset<char>(0x0127, false);                     // 0x0127(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UBodySetup>                        _offBodySetup                                                  = new ExternalOffset<UBodySetup>(0x0128, true);                // 0x0128(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPhysicsAsset>                     _offPhysicsAsset                                               = new ExternalOffset<UPhysicsAsset>(0x0130, true);             // 0x0130(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPhysicsAsset>                     _offShadowPhysicsAsset                                         = new ExternalOffset<UPhysicsAsset>(0x0138, true);             // 0x0138(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UNodeMappingContainer>>     _offNodeMappingData                                            = new ExternalOffset<TArray<UNodeMappingContainer>>(0x0140, false); // 0x0140(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UMorphTarget>>              _offMorphTargets                                               = new ExternalOffset<TArray<UMorphTarget>>(0x0150, false);     // 0x0150(0x0010) (BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UClass>                            _offPostProcessAnimBlueprint                                   = new ExternalOffset<UClass>(0x02D8, true);                    // 0x02D8(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UClothingAssetBase>>        _offMeshClothingAssets                                         = new ExternalOffset<TArray<UClothingAssetBase>>(0x02E0, false); // 0x02E0(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FSkeletalMeshSamplingInfo>         _offSamplingInfo                                               = new ExternalOffset<FSkeletalMeshSamplingInfo>(0x02F0, false); // 0x02F0(0x0030) (Edit, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UAssetUserData>>            _offAssetUserData                                              = new ExternalOffset<TArray<UAssetUserData>>(0x0320, false);   // 0x0320(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<USkeletalMeshSocket>>       _offSockets                                                    = new ExternalOffset<TArray<USkeletalMeshSocket>>(0x0330, false); // 0x0330(0x0010) (ZeroConstructor, NativeAccessSpecifierPrivate)
	private ExternalOffset<TArray<FSkinWeightProfileInfo>>    _offSkinWeightProfiles                                         = new ExternalOffset<TArray<FSkinWeightProfileInfo>>(0x0350, false); // 0x0350(0x0010) (Edit, EditFixedSize, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public USkeleton                                          Skeleton                                                       => _offSkeleton.GetValue();
	public FBoxSphereBounds                                   ImportedBounds                                                 => _offImportedBounds.GetValue();
	public FBoxSphereBounds                                   ExtendedBounds                                                 => _offExtendedBounds.GetValue();
	public FVector                                            PositiveBoundsExtension                                        => _offPositiveBoundsExtension.GetValue();
	public FVector                                            NegativeBoundsExtension                                        => _offNegativeBoundsExtension.GetValue();
	public TArray<FSkeletalMaterial>                          Materials                                                      => _offMaterials.GetValue();
	public TArray<FBoneMirrorInfo>                            SkelMirrorTable                                                => _offSkelMirrorTable.GetValue();
	public TArray<FSkeletalMeshLODInfo>                       LODInfo                                                        => _offLODInfo.GetValue();
	public FPerPlatformInt                                    MinLOD                                                         => _offMinLOD.GetValue();
	public FPerPlatformBool                                   DisableBelowMinLodStripping                                    => _offDisableBelowMinLodStripping.GetValue();
	public TEnumAsByte<EAxis>                                 SkelMirrorAxis                                                 => _offSkelMirrorAxis.GetValue();
	public TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis                                             => _offSkelMirrorFlipAxis.GetValue();
	public UBodySetup                                         BodySetup                                                      => _offBodySetup.GetValue();
	public UPhysicsAsset                                      PhysicsAsset                                                   => _offPhysicsAsset.GetValue();
	public UPhysicsAsset                                      ShadowPhysicsAsset                                             => _offShadowPhysicsAsset.GetValue();
	public TArray<UNodeMappingContainer>                      NodeMappingData                                                => _offNodeMappingData.GetValue();
	public TArray<UMorphTarget>                               MorphTargets                                                   => _offMorphTargets.GetValue();
	public UClass                                             PostProcessAnimBlueprint                                       => _offPostProcessAnimBlueprint.GetValue();
	public TArray<UClothingAssetBase>                         MeshClothingAssets                                             => _offMeshClothingAssets.GetValue();
	public FSkeletalMeshSamplingInfo                          SamplingInfo                                                   => _offSamplingInfo.GetValue();
	public TArray<UAssetUserData>                             AssetUserData                                                  => _offAssetUserData.GetValue();
	public TArray<USkeletalMeshSocket>                        Sockets                                                        => _offSockets.GetValue();
	public TArray<FSkinWeightProfileInfo>                     SkinWeightProfiles                                             => _offSkinWeightProfiles.GetValue();
	#endregion


}

// Class Engine.SkeletalMeshActor
// 0x0048 (0x0280 - 0x0238)
public class ASkeletalMeshActor : AActor
{
	#region Offsets
//	private ExternalOffset<char>                              _offbShouldDoAnimNotifies                                      = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbWakeOnLevelStart                                          = new ExternalOffset<char>(0x0250, false);                     // 0x0250(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USkeletalMeshComponent>            _offSkeletalMeshComponent                                      = new ExternalOffset<USkeletalMeshComponent>(0x0258, true);    // 0x0258(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<USkeletalMesh>                     _offReplicatedMesh                                             = new ExternalOffset<USkeletalMesh>(0x0260, true);             // 0x0260(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UPhysicsAsset>                     _offReplicatedPhysAsset                                        = new ExternalOffset<UPhysicsAsset>(0x0268, true);             // 0x0268(0x0008) (Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInterface>                _offReplicatedMaterial0                                        = new ExternalOffset<UMaterialInterface>(0x0270, true);        // 0x0270(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInterface>                _offReplicatedMaterial1                                        = new ExternalOffset<UMaterialInterface>(0x0278, true);        // 0x0278(0x0008) (Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USkeletalMeshComponent                             SkeletalMeshComponent                                          => _offSkeletalMeshComponent.GetValue();
	public USkeletalMesh                                      ReplicatedMesh                                                 => _offReplicatedMesh.GetValue();
	public UPhysicsAsset                                      ReplicatedPhysAsset                                            => _offReplicatedPhysAsset.GetValue();
	public UMaterialInterface                                 ReplicatedMaterial0                                            => _offReplicatedMaterial0.GetValue();
	public UMaterialInterface                                 ReplicatedMaterial1                                            => _offReplicatedMaterial1.GetValue();
	#endregion


}

// Class Engine.SkeletalMeshLODSettings
// 0x0018 (0x0048 - 0x0030)
public class USkeletalMeshLODSettings : UDataAsset
{
	#region Offsets
	private ExternalOffset<FPerPlatformInt>                   _offMinLOD                                                     = new ExternalOffset<FPerPlatformInt>(0x0030, false);          // 0x0030(0x0004) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<FPerPlatformBool>                  _offDisableBelowMinLodStripping                                = new ExternalOffset<FPerPlatformBool>(0x0034, false);         // 0x0034(0x0001) (Edit, Config, GlobalConfig, NoDestructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<FSkeletalMeshLODGroupSettings>> _offLODGroups                                                  = new ExternalOffset<TArray<FSkeletalMeshLODGroupSettings>>(0x0038, false); // 0x0038(0x0010) (Edit, ZeroConstructor, Config, GlobalConfig, Protected, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public FPerPlatformInt                                    MinLOD                                                         => _offMinLOD.GetValue();
	public FPerPlatformBool                                   DisableBelowMinLodStripping                                    => _offDisableBelowMinLodStripping.GetValue();
	public TArray<FSkeletalMeshLODGroupSettings>              LODGroups                                                      => _offLODGroups.GetValue();
	#endregion


}

// Class Engine.SkeletalMeshSimplificationSettings
// 0x0018 (0x0040 - 0x0028)
public class USkeletalMeshSimplificationSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<FName>                             _offSkeletalMeshReductionModuleName                            = new ExternalOffset<FName>(0x0038, false);                    // 0x0038(0x0008) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              SkeletalMeshReductionModuleName                                => _offSkeletalMeshReductionModuleName.GetValue();
	#endregion


}

// Class Engine.SkeletalMeshSocket
// 0x0035 (0x005D - 0x0028)
public class USkeletalMeshSocket : UObject
{
	#region Offsets
	private ExternalOffset<FName>                             _offSocketName                                                 = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offBoneName                                                   = new ExternalOffset<FName>(0x0030, false);                    // 0x0030(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offRelativeLocation                                           = new ExternalOffset<FVector>(0x0038, false);                  // 0x0038(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offRelativeRotation                                           = new ExternalOffset<FRotator>(0x0044, false);                 // 0x0044(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offRelativeScale                                              = new ExternalOffset<FVector>(0x0050, false);                  // 0x0050(0x000C) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbForceAlwaysAnimated                                       = new ExternalOffset<byte/*(bool)*/>(0x005C);                  // 0x005C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              SocketName                                                     => _offSocketName.GetValue();
	public FName                                              BoneName                                                       => _offBoneName.GetValue();
	public FVector                                            RelativeLocation                                               => _offRelativeLocation.GetValue();
	public FRotator                                           RelativeRotation                                               => _offRelativeRotation.GetValue();
	public FVector                                            RelativeScale                                                  => _offRelativeScale.GetValue();
	public byte/*(bool)*/                                     bForceAlwaysAnimated                                           => _offbForceAlwaysAnimated.GetValue();
	#endregion


}

// Class Engine.SkyLightComponent
// 0x00FC (0x0340 - 0x0244)
public class USkyLightComponent : ULightComponentBase
{
	#region Offsets
	private ExternalOffset<UTextureCube>                      _offCubemap                                                    = new ExternalOffset<UTextureCube>(0x0250, true);              // 0x0250(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSourceCubemapAngle                                         = new ExternalOffset<float>(0x0258);                           // 0x0258(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offCubemapResolution                                          = new ExternalOffset<int>(0x025C);                             // 0x025C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSkyDistanceThreshold                                       = new ExternalOffset<float>(0x0260);                           // 0x0260(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbCaptureEmissiveOnly                                       = new ExternalOffset<byte/*(bool)*/>(0x0264);                  // 0x0264(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbLowerHemisphereIsBlack                                    = new ExternalOffset<byte/*(bool)*/>(0x0265);                  // 0x0265(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offLowerHemisphereColor                                       = new ExternalOffset<FLinearColor>(0x0268, false);             // 0x0268(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOcclusionMaxDistance                                       = new ExternalOffset<float>(0x0278);                           // 0x0278(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offContrast                                                   = new ExternalOffset<float>(0x027C);                           // 0x027C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOcclusionExponent                                          = new ExternalOffset<float>(0x0280);                           // 0x0280(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinOcclusion                                               = new ExternalOffset<float>(0x0284);                           // 0x0284(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offOcclusionTint                                              = new ExternalOffset<FColor>(0x0288, false);                   // 0x0288(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EOcclusionCombineMode>> _offOcclusionCombineMode                                       = new ExternalOffset<TEnumAsByte<EOcclusionCombineMode>>(0x028C, false); // 0x028C(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UTextureCube>                      _offBlendDestinationCubemap                                    = new ExternalOffset<UTextureCube>(0x0338, true);              // 0x0338(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UTextureCube                                       Cubemap                                                        => _offCubemap.GetValue();
	public float                                              SourceCubemapAngle                                             => _offSourceCubemapAngle.GetValue();
	public int                                                CubemapResolution                                              => _offCubemapResolution.GetValue();
	public float                                              SkyDistanceThreshold                                           => _offSkyDistanceThreshold.GetValue();
	public byte/*(bool)*/                                     bCaptureEmissiveOnly                                           => _offbCaptureEmissiveOnly.GetValue();
	public byte/*(bool)*/                                     bLowerHemisphereIsBlack                                        => _offbLowerHemisphereIsBlack.GetValue();
	public FLinearColor                                       LowerHemisphereColor                                           => _offLowerHemisphereColor.GetValue();
	public float                                              OcclusionMaxDistance                                           => _offOcclusionMaxDistance.GetValue();
	public float                                              Contrast                                                       => _offContrast.GetValue();
	public float                                              OcclusionExponent                                              => _offOcclusionExponent.GetValue();
	public float                                              MinOcclusion                                                   => _offMinOcclusion.GetValue();
	public FColor                                             OcclusionTint                                                  => _offOcclusionTint.GetValue();
	public TEnumAsByte<EOcclusionCombineMode>                 OcclusionCombineMode                                           => _offOcclusionCombineMode.GetValue();
	public UTextureCube                                       BlendDestinationCubemap                                        => _offBlendDestinationCubemap.GetValue();
	#endregion


}

// Class Engine.SlateBrushAsset
// 0x0088 (0x00B0 - 0x0028)
public class USlateBrushAsset : UObject
{
	#region Offsets
	private ExternalOffset<FSlateBrush>                       _offBrush                                                      = new ExternalOffset<FSlateBrush>(0x0028, false);              // 0x0028(0x0088) (Edit, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FSlateBrush                                        Brush                                                          => _offBrush.GetValue();
	#endregion


}

// Class Engine.SlateTextureAtlasInterface
// 0x0000 (0x0028 - 0x0028)
public class USlateTextureAtlasInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SmokeTestCommandlet
// 0x0007 (0x0080 - 0x0079)
public class USmokeTestCommandlet : UCommandlet
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SoundAttenuation
// 0x02E8 (0x0310 - 0x0028)
public class USoundAttenuation : UObject
{
	#region Offsets
	private ExternalOffset<FSoundAttenuationSettings>         _offAttenuation                                                = new ExternalOffset<FSoundAttenuationSettings>(0x0028, false); // 0x0028(0x02E8) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FSoundAttenuationSettings                          Attenuation                                                    => _offAttenuation.GetValue();
	#endregion


}

// Class Engine.SoundClass
// 0x0058 (0x0080 - 0x0028)
public class USoundClass : UObject
{
	#region Offsets
	private ExternalOffset<FSoundClassProperties>             _offProperties                                                 = new ExternalOffset<FSoundClassProperties>(0x0028, false);    // 0x0028(0x002C) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<USoundClass>>               _offChildClasses                                               = new ExternalOffset<TArray<USoundClass>>(0x0058, false);      // 0x0058(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FPassiveSoundMixModifier>>  _offPassiveSoundMixModifiers                                   = new ExternalOffset<TArray<FPassiveSoundMixModifier>>(0x0068, false); // 0x0068(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundClass>                       _offParentClass                                                = new ExternalOffset<USoundClass>(0x0078, true);               // 0x0078(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FSoundClassProperties                              Properties                                                     => _offProperties.GetValue();
	public TArray<USoundClass>                                ChildClasses                                                   => _offChildClasses.GetValue();
	public TArray<FPassiveSoundMixModifier>                   PassiveSoundMixModifiers                                       => _offPassiveSoundMixModifiers.GetValue();
	public USoundClass                                        ParentClass                                                    => _offParentClass.GetValue();
	#endregion


}

// Class Engine.SoundConcurrency
// 0x0020 (0x0048 - 0x0028)
public class USoundConcurrency : UObject
{
	#region Offsets
	private ExternalOffset<FSoundConcurrencySettings>         _offConcurrency                                                = new ExternalOffset<FSoundConcurrencySettings>(0x0028, false); // 0x0028(0x0020) (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FSoundConcurrencySettings                          Concurrency                                                    => _offConcurrency.GetValue();
	#endregion


}

// Class Engine.SoundCue
// 0x0359 (0x0419 - 0x00C0)
public class USoundCue : USoundBase
{
	#region Offsets
//	private ExternalOffset<char>                              _offbOverrideAttenuation                                       = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbExcludeFromRandomNodeBranchCulling                        = new ExternalOffset<char>(0x0110, false);                     // 0x0110(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundNode>                        _offFirstNode                                                  = new ExternalOffset<USoundNode>(0x0118, true);                // 0x0118(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeMultiplier                                           = new ExternalOffset<float>(0x0120);                           // 0x0120(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitchMultiplier                                            = new ExternalOffset<float>(0x0124);                           // 0x0124(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoundAttenuationSettings>         _offAttenuationOverrides                                       = new ExternalOffset<FSoundAttenuationSettings>(0x0128, false); // 0x0128(0x02E8) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSubtitlePriority                                           = new ExternalOffset<float>(0x0410);                           // 0x0410(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbHasPlayWhenSilent                                         = new ExternalOffset<char>(0x0418, false);                     // 0x0418(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public USoundNode                                         FirstNode                                                      => _offFirstNode.GetValue();
	public float                                              VolumeMultiplier                                               => _offVolumeMultiplier.GetValue();
	public float                                              PitchMultiplier                                                => _offPitchMultiplier.GetValue();
	public FSoundAttenuationSettings                          AttenuationOverrides                                           => _offAttenuationOverrides.GetValue();
	public float                                              SubtitlePriority                                               => _offSubtitlePriority.GetValue();
	#endregion


}

// Class Engine.SoundEffectSourcePreset
// 0x0018 (0x0040 - 0x0028)
public class USoundEffectSourcePreset : USoundEffectPreset
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SoundEffectSourcePresetChain
// 0x0011 (0x0039 - 0x0028)
public class USoundEffectSourcePresetChain : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FSourceEffectChainEntry>>   _offChain                                                      = new ExternalOffset<TArray<FSourceEffectChainEntry>>(0x0028, false); // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPlayEffectChainTails                                      = new ExternalOffset<char>(0x0038, false);                     // 0x0038(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FSourceEffectChainEntry>                    Chain                                                          => _offChain.GetValue();
	#endregion


}

// Class Engine.SoundGroups
// 0x0010 (0x0038 - 0x0028)
public class USoundGroups : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FSoundGroup>>               _offSoundGroupProfiles                                         = new ExternalOffset<TArray<FSoundGroup>>(0x0028, false);      // 0x0028(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public TArray<FSoundGroup>                                SoundGroupProfiles                                             => _offSoundGroupProfiles.GetValue();
	#endregion


}

// Class Engine.SoundMix
// 0x0060 (0x0088 - 0x0028)
public class USoundMix : UObject
{
	#region Offsets
//	private ExternalOffset<char>                              _offbApplyEQ                                                   = new ExternalOffset<char>(0x0028, false);                     // 0x0028(0x0001) BIT_FIELD (Edit, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offEQPriority                                                 = new ExternalOffset<float>(0x002C);                           // 0x002C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FAudioEQEffect>                    _offEQSettings                                                 = new ExternalOffset<FAudioEQEffect>(0x0030, false);           // 0x0030(0x0038) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FSoundClassAdjuster>>       _offSoundClassEffects                                          = new ExternalOffset<TArray<FSoundClassAdjuster>>(0x0068, false); // 0x0068(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInitialDelay                                               = new ExternalOffset<float>(0x0078);                           // 0x0078(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFadeInTime                                                 = new ExternalOffset<float>(0x007C);                           // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDuration                                                   = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFadeOutTime                                                = new ExternalOffset<float>(0x0084);                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              EQPriority                                                     => _offEQPriority.GetValue();
	public FAudioEQEffect                                     EQSettings                                                     => _offEQSettings.GetValue();
	public TArray<FSoundClassAdjuster>                        SoundClassEffects                                              => _offSoundClassEffects.GetValue();
	public float                                              InitialDelay                                                   => _offInitialDelay.GetValue();
	public float                                              FadeInTime                                                     => _offFadeInTime.GetValue();
	public float                                              Duration                                                       => _offDuration.GetValue();
	public float                                              FadeOutTime                                                    => _offFadeOutTime.GetValue();
	#endregion


}

// Class Engine.SoundNodeAssetReferencer
// 0x0008 (0x0040 - 0x0038)
public class USoundNodeAssetReferencer : USoundNode
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SoundNodeAttenuation
// 0x02F9 (0x0331 - 0x0038)
public class USoundNodeAttenuation : USoundNode
{
	#region Offsets
	private ExternalOffset<USoundAttenuation>                 _offAttenuationSettings                                        = new ExternalOffset<USoundAttenuation>(0x0040, true);         // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoundAttenuationSettings>         _offAttenuationOverrides                                       = new ExternalOffset<FSoundAttenuationSettings>(0x0048, false); // 0x0048(0x02E8) (Edit, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbOverrideAttenuation                                       = new ExternalOffset<char>(0x0330, false);                     // 0x0330(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundAttenuation                                  AttenuationSettings                                            => _offAttenuationSettings.GetValue();
	public FSoundAttenuationSettings                          AttenuationOverrides                                           => _offAttenuationOverrides.GetValue();
	#endregion


}

// Class Engine.SoundNodeBranch
// 0x0010 (0x0048 - 0x0038)
public class USoundNodeBranch : USoundNode
{
	#region Offsets
	private ExternalOffset<FName>                             _offBoolParameterName                                          = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              BoolParameterName                                              => _offBoolParameterName.GetValue();
	#endregion


}

// Class Engine.SoundNodeConcatenator
// 0x0018 (0x0050 - 0x0038)
public class USoundNodeConcatenator : USoundNode
{
	#region Offsets
	private ExternalOffset<TArray<float>>                     _offInputVolume                                                = new ExternalOffset<TArray<float>>(0x0040, false);            // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<float>                                      InputVolume                                                    => _offInputVolume.GetValue();
	#endregion


}

// Class Engine.SoundNodeDelay
// 0x0010 (0x0048 - 0x0038)
public class USoundNodeDelay : USoundNode
{
	#region Offsets
	private ExternalOffset<float>                             _offDelayMin                                                   = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDelayMax                                                   = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              DelayMin                                                       => _offDelayMin.GetValue();
	public float                                              DelayMax                                                       => _offDelayMax.GetValue();
	#endregion


}

// Class Engine.SoundNodeDialoguePlayer
// 0x0029 (0x0061 - 0x0038)
public class USoundNodeDialoguePlayer : USoundNode
{
	#region Offsets
	private ExternalOffset<FDialogueWaveParameter>            _offDialogueWaveParameter                                      = new ExternalOffset<FDialogueWaveParameter>(0x0040, false);   // 0x0040(0x0020) (Edit, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLooping                                                   = new ExternalOffset<char>(0x0060, false);                     // 0x0060(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FDialogueWaveParameter                             DialogueWaveParameter                                          => _offDialogueWaveParameter.GetValue();
	#endregion


}

// Class Engine.SoundNodeDistanceCrossFade
// 0x0018 (0x0050 - 0x0038)
public class USoundNodeDistanceCrossFade : USoundNode
{
	#region Offsets
	private ExternalOffset<TArray<FDistanceDatum>>            _offCrossFadeInput                                             = new ExternalOffset<TArray<FDistanceDatum>>(0x0040, false);   // 0x0040(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FDistanceDatum>                             CrossFadeInput                                                 => _offCrossFadeInput.GetValue();
	#endregion


}

// Class Engine.SoundNodeDoppler
// 0x0014 (0x004C - 0x0038)
public class USoundNodeDoppler : USoundNode
{
	#region Offsets
	private ExternalOffset<float>                             _offDopplerIntensity                                           = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbUseSmoothing                                              = new ExternalOffset<byte/*(bool)*/>(0x0044);                  // 0x0044(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSmoothingInterpSpeed                                       = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              DopplerIntensity                                               => _offDopplerIntensity.GetValue();
	public byte/*(bool)*/                                     bUseSmoothing                                                  => _offbUseSmoothing.GetValue();
	public float                                              SmoothingInterpSpeed                                           => _offSmoothingInterpSpeed.GetValue();
	#endregion


}

// Class Engine.SoundNodeEnveloper
// 0x0150 (0x0188 - 0x0038)
public class USoundNodeEnveloper : USoundNode
{
	#region Offsets
	private ExternalOffset<float>                             _offLoopStart                                                  = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLoopEnd                                                    = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDurationAfterLoop                                          = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offLoopCount                                                  = new ExternalOffset<int>(0x004C);                             // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLoopIndefinitely                                          = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLoop                                                      = new ExternalOffset<char>(0x0050, false);                     // 0x0050(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UDistributionFloatConstantCurve>   _offVolumeInterpCurve                                          = new ExternalOffset<UDistributionFloatConstantCurve>(0x0058, true); // 0x0058(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UDistributionFloatConstantCurve>   _offPitchInterpCurve                                           = new ExternalOffset<UDistributionFloatConstantCurve>(0x0060, true); // 0x0060(0x0008) (ExportObject, ZeroConstructor, InstancedReference, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                _offVolumeCurve                                                = new ExternalOffset<FRuntimeFloatCurve>(0x0068, false);       // 0x0068(0x0088) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                _offPitchCurve                                                 = new ExternalOffset<FRuntimeFloatCurve>(0x00F0, false);       // 0x00F0(0x0088) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitchMin                                                   = new ExternalOffset<float>(0x0178);                           // 0x0178(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitchMax                                                   = new ExternalOffset<float>(0x017C);                           // 0x017C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeMin                                                  = new ExternalOffset<float>(0x0180);                           // 0x0180(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeMax                                                  = new ExternalOffset<float>(0x0184);                           // 0x0184(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              LoopStart                                                      => _offLoopStart.GetValue();
	public float                                              LoopEnd                                                        => _offLoopEnd.GetValue();
	public float                                              DurationAfterLoop                                              => _offDurationAfterLoop.GetValue();
	public int                                                LoopCount                                                      => _offLoopCount.GetValue();
	public UDistributionFloatConstantCurve                    VolumeInterpCurve                                              => _offVolumeInterpCurve.GetValue();
	public UDistributionFloatConstantCurve                    PitchInterpCurve                                               => _offPitchInterpCurve.GetValue();
	public FRuntimeFloatCurve                                 VolumeCurve                                                    => _offVolumeCurve.GetValue();
	public FRuntimeFloatCurve                                 PitchCurve                                                     => _offPitchCurve.GetValue();
	public float                                              PitchMin                                                       => _offPitchMin.GetValue();
	public float                                              PitchMax                                                       => _offPitchMax.GetValue();
	public float                                              VolumeMin                                                      => _offVolumeMin.GetValue();
	public float                                              VolumeMax                                                      => _offVolumeMax.GetValue();
	#endregion


}

// Class Engine.SoundNodeGroupControl
// 0x0018 (0x0050 - 0x0038)
public class USoundNodeGroupControl : USoundNode
{
	#region Offsets
	private ExternalOffset<TArray<int>>                       _offGroupSizes                                                 = new ExternalOffset<TArray<int>>(0x0040, false);              // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<int>                                        GroupSizes                                                     => _offGroupSizes.GetValue();
	#endregion


}

// Class Engine.SoundNodeLooping
// 0x000D (0x0045 - 0x0038)
public class USoundNodeLooping : USoundNode
{
	#region Offsets
	private ExternalOffset<int>                               _offLoopCount                                                  = new ExternalOffset<int>(0x0040);                             // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLoopIndefinitely                                          = new ExternalOffset<char>(0x0044, false);                     // 0x0044(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                LoopCount                                                      => _offLoopCount.GetValue();
	#endregion


}

// Class Engine.SoundNodeMature
// 0x0008 (0x0040 - 0x0038)
public class USoundNodeMature : USoundNode
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SoundNodeMixer
// 0x0018 (0x0050 - 0x0038)
public class USoundNodeMixer : USoundNode
{
	#region Offsets
	private ExternalOffset<TArray<float>>                     _offInputVolume                                                = new ExternalOffset<TArray<float>>(0x0040, false);            // 0x0040(0x0010) (Edit, ExportObject, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<float>                                      InputVolume                                                    => _offInputVolume.GetValue();
	#endregion


}

// Class Engine.SoundNodeModulator
// 0x0018 (0x0050 - 0x0038)
public class USoundNodeModulator : USoundNode
{
	#region Offsets
	private ExternalOffset<float>                             _offPitchMin                                                   = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offPitchMax                                                   = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeMin                                                  = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVolumeMax                                                  = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              PitchMin                                                       => _offPitchMin.GetValue();
	public float                                              PitchMax                                                       => _offPitchMax.GetValue();
	public float                                              VolumeMin                                                      => _offVolumeMin.GetValue();
	public float                                              VolumeMax                                                      => _offVolumeMax.GetValue();
	#endregion


}

// Class Engine.SoundNodeModulatorContinuous
// 0x0048 (0x0080 - 0x0038)
public class USoundNodeModulatorContinuous : USoundNode
{
	#region Offsets
	private ExternalOffset<FModulatorContinuousParams>        _offPitchModulationParams                                      = new ExternalOffset<FModulatorContinuousParams>(0x0040, false); // 0x0040(0x0020) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FModulatorContinuousParams>        _offVolumeModulationParams                                     = new ExternalOffset<FModulatorContinuousParams>(0x0060, false); // 0x0060(0x0020) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FModulatorContinuousParams                         PitchModulationParams                                          => _offPitchModulationParams.GetValue();
	public FModulatorContinuousParams                         VolumeModulationParams                                         => _offVolumeModulationParams.GetValue();
	#endregion


}

// Class Engine.SoundNodeOscillator
// 0x002C (0x0064 - 0x0038)
public class USoundNodeOscillator : USoundNode
{
	#region Offsets
//	private ExternalOffset<char>                              _offbModulateVolume                                            = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbModulatePitch                                             = new ExternalOffset<char>(0x0040, false);                     // 0x0040(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAmplitudeMin                                               = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAmplitudeMax                                               = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFrequencyMin                                               = new ExternalOffset<float>(0x004C);                           // 0x004C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFrequencyMax                                               = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOffsetMin                                                  = new ExternalOffset<float>(0x0054);                           // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOffsetMax                                                  = new ExternalOffset<float>(0x0058);                           // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCenterMin                                                  = new ExternalOffset<float>(0x005C);                           // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCenterMax                                                  = new ExternalOffset<float>(0x0060);                           // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              AmplitudeMin                                                   => _offAmplitudeMin.GetValue();
	public float                                              AmplitudeMax                                                   => _offAmplitudeMax.GetValue();
	public float                                              FrequencyMin                                                   => _offFrequencyMin.GetValue();
	public float                                              FrequencyMax                                                   => _offFrequencyMax.GetValue();
	public float                                              OffsetMin                                                      => _offOffsetMin.GetValue();
	public float                                              OffsetMax                                                      => _offOffsetMax.GetValue();
	public float                                              CenterMin                                                      => _offCenterMin.GetValue();
	public float                                              CenterMax                                                      => _offCenterMax.GetValue();
	#endregion


}

// Class Engine.SoundNodeParamCrossFade
// 0x0008 (0x0058 - 0x0050)
public class USoundNodeParamCrossFade : USoundNodeDistanceCrossFade
{
	#region Offsets
	private ExternalOffset<FName>                             _offParamName                                                  = new ExternalOffset<FName>(0x0050, false);                    // 0x0050(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              ParamName                                                      => _offParamName.GetValue();
	#endregion


}

// Class Engine.SoundNodeQualityLevel
// 0x0008 (0x0040 - 0x0038)
public class USoundNodeQualityLevel : USoundNode
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SoundNodeRandom
// 0x003C (0x0074 - 0x0038)
public class USoundNodeRandom : USoundNode
{
	#region Offsets
	private ExternalOffset<TArray<float>>                     _offWeights                                                    = new ExternalOffset<TArray<float>>(0x0040, false);            // 0x0040(0x0010) (Edit, EditFixedSize, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offPreselectAtLevelLoad                                       = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbShouldExcludeFromBranchCulling                            = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSoundCueExcludedFromBranchCulling                         = new ExternalOffset<char>(0x0054, false);                     // 0x0054(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbRandomizeWithoutReplacement                               = new ExternalOffset<char>(0x0058, false);                     // 0x0058(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<bool>>                      _offHasBeenUsed                                                = new ExternalOffset<TArray<bool>>(0x0060, false);             // 0x0060(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offNumRandomUsed                                              = new ExternalOffset<int>(0x0070);                             // 0x0070(0x0004) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<float>                                      Weights                                                        => _offWeights.GetValue();
	public int                                                PreselectAtLevelLoad                                           => _offPreselectAtLevelLoad.GetValue();
	public TArray<bool>                                       HasBeenUsed                                                    => _offHasBeenUsed.GetValue();
	public int                                                NumRandomUsed                                                  => _offNumRandomUsed.GetValue();
	#endregion


}

// Class Engine.SoundNodeSoundClass
// 0x0010 (0x0048 - 0x0038)
public class USoundNodeSoundClass : USoundNode
{
	#region Offsets
	private ExternalOffset<USoundClass>                       _offSoundClassOverride                                         = new ExternalOffset<USoundClass>(0x0040, true);               // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundClass                                        SoundClassOverride                                             => _offSoundClassOverride.GetValue();
	#endregion


}

// Class Engine.SoundNodeSwitch
// 0x0010 (0x0048 - 0x0038)
public class USoundNodeSwitch : USoundNode
{
	#region Offsets
	private ExternalOffset<FName>                             _offIntParameterName                                           = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              IntParameterName                                               => _offIntParameterName.GetValue();
	#endregion


}

// Class Engine.SoundNodeWaveParam
// 0x0010 (0x0048 - 0x0038)
public class USoundNodeWaveParam : USoundNode
{
	#region Offsets
	private ExternalOffset<FName>                             _offWaveParameterName                                          = new ExternalOffset<FName>(0x0040, false);                    // 0x0040(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              WaveParameterName                                              => _offWaveParameterName.GetValue();
	#endregion


}

// Class Engine.SoundNodeWavePlayer
// 0x0009 (0x0049 - 0x0040)
public class USoundNodeWavePlayer : USoundNodeAssetReferencer
{
	#region Offsets
	private ExternalOffset<USoundWave>                        _offSoundWave                                                  = new ExternalOffset<USoundWave>(0x0068, true);                // 0x0068(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbLooping                                                   = new ExternalOffset<char>(0x0070, false);                     // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public USoundWave                                         SoundWave                                                      => _offSoundWave.GetValue();
	#endregion


}

// Class Engine.SoundSourceBus
// 0x0121 (0x02C9 - 0x01A8)
public class USoundSourceBus : USoundWave
{
	#region Offsets
	private ExternalOffset<ESourceBusChannels>                _offSourceBusChannels                                          = new ExternalOffset<ESourceBusChannels>(0x02C0, false);       // 0x02C0(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSourceBusDuration                                          = new ExternalOffset<float>(0x02C4);                           // 0x02C4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoDeactivateWhenSilent                                  = new ExternalOffset<char>(0x02C8, false);                     // 0x02C8(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public ESourceBusChannels                                 SourceBusChannels                                              => _offSourceBusChannels.GetValue();
	public float                                              SourceBusDuration                                              => _offSourceBusDuration.GetValue();
	#endregion


}

// Class Engine.SoundSubmix
// 0x0058 (0x0080 - 0x0028)
public class USoundSubmix : UObject
{
	#region Offsets
	private ExternalOffset<TArray<USoundSubmix>>              _offChildSubmixes                                              = new ExternalOffset<TArray<USoundSubmix>>(0x0028, false);     // 0x0028(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<USoundSubmix>                      _offParentSubmix                                               = new ExternalOffset<USoundSubmix>(0x0038, true);              // 0x0038(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<ESubmixChannelFormat>              _offChannelFormat                                              = new ExternalOffset<ESubmixChannelFormat>(0x0040, false);     // 0x0040(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMuteWhenBackgrounded                                      = new ExternalOffset<char>(0x0041, false);                     // 0x0041(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<USoundEffectSubmixPreset>>  _offSubmixEffectChain                                          = new ExternalOffset<TArray<USoundEffectSubmixPreset>>(0x0048, false); // 0x0048(0x0010) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<UAmbisonicsSubmixSettingsBase>     _offAmbisonicsPluginSettings                                   = new ExternalOffset<UAmbisonicsSubmixSettingsBase>(0x0058, true); // 0x0058(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offEnvelopeFollowerAttackTime                                 = new ExternalOffset<int>(0x0060);                             // 0x0060(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offEnvelopeFollowerReleaseTime                                = new ExternalOffset<int>(0x0064);                             // 0x0064(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offOutputVolume                                               = new ExternalOffset<float>(0x0068);                           // 0x0068(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FScriptMulticastDelegate>          _offOnSubmixRecordedFileDone                                   = new ExternalOffset<FScriptMulticastDelegate>(0x0070, false); // 0x0070(0x0010) (ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<USoundSubmix>                               ChildSubmixes                                                  => _offChildSubmixes.GetValue();
	public USoundSubmix                                       ParentSubmix                                                   => _offParentSubmix.GetValue();
	public ESubmixChannelFormat                               ChannelFormat                                                  => _offChannelFormat.GetValue();
	public TArray<USoundEffectSubmixPreset>                   SubmixEffectChain                                              => _offSubmixEffectChain.GetValue();
	public UAmbisonicsSubmixSettingsBase                      AmbisonicsPluginSettings                                       => _offAmbisonicsPluginSettings.GetValue();
	public int                                                EnvelopeFollowerAttackTime                                     => _offEnvelopeFollowerAttackTime.GetValue();
	public int                                                EnvelopeFollowerReleaseTime                                    => _offEnvelopeFollowerReleaseTime.GetValue();
	public float                                              OutputVolume                                                   => _offOutputVolume.GetValue();
	public FScriptMulticastDelegate                           OnSubmixRecordedFileDone                                       => _offOnSubmixRecordedFileDone.GetValue();
	#endregion


}

// Class Engine.SpectatorPawnMovement
// 0x0008 (0x0179 - 0x0171)
public class USpectatorPawnMovement : UFloatingPawnMovement
{
	#region Offsets
//	private ExternalOffset<char>                              _offbIgnoreTimeDilation                                        = new ExternalOffset<char>(0x0178, false);                     // 0x0178(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.SphereReflectionCapture
// 0x0008 (0x0258 - 0x0250)
public class ASphereReflectionCapture : AReflectionCapture
{
	#region Offsets
	private ExternalOffset<UDrawSphereComponent>              _offDrawCaptureRadius                                          = new ExternalOffset<UDrawSphereComponent>(0x0250, true);      // 0x0250(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UDrawSphereComponent                               DrawCaptureRadius                                              => _offDrawCaptureRadius.GetValue();
	#endregion


}

// Class Engine.SphereReflectionCaptureComponent
// 0x004C (0x02A0 - 0x0254)
public class USphereReflectionCaptureComponent : UReflectionCaptureComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offInfluenceRadius                                            = new ExternalOffset<float>(0x0290);                           // 0x0290(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCaptureDistanceScale                                       = new ExternalOffset<float>(0x0294);                           // 0x0294(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UDrawSphereComponent>              _offPreviewInfluenceRadius                                     = new ExternalOffset<UDrawSphereComponent>(0x0298, true);      // 0x0298(0x0008) (ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              InfluenceRadius                                                => _offInfluenceRadius.GetValue();
	public float                                              CaptureDistanceScale                                           => _offCaptureDistanceScale.GetValue();
	public UDrawSphereComponent                               PreviewInfluenceRadius                                         => _offPreviewInfluenceRadius.GetValue();
	#endregion


}

// Class Engine.SplineMetadata
// 0x0000 (0x0028 - 0x0028)
public class USplineMetadata : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SplineComponent
// 0x00EF (0x04F4 - 0x0405)
public class USplineComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<FSplineCurves>                     _offSplineCurves                                               = new ExternalOffset<FSplineCurves>(0x0408, false);            // 0x0408(0x0068) (Edit, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpCurveVector>                _offSplineInfo                                                 = new ExternalOffset<FInterpCurveVector>(0x0470, false);       // 0x0470(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpCurveQuat>                  _offSplineRotInfo                                              = new ExternalOffset<FInterpCurveQuat>(0x0488, false);         // 0x0488(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpCurveVector>                _offSplineScaleInfo                                            = new ExternalOffset<FInterpCurveVector>(0x04A0, false);       // 0x04A0(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FInterpCurveFloat>                 _offSplineReparamTable                                         = new ExternalOffset<FInterpCurveFloat>(0x04B8, false);        // 0x04B8(0x0018) (ZeroConstructor, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbAllowSplineEditingPerInstance                             = new ExternalOffset<byte/*(bool)*/>(0x04D0);                  // 0x04D0(0x0001) (ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offReparamStepsPerSegment                                     = new ExternalOffset<int>(0x04D4);                             // 0x04D4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDuration                                                   = new ExternalOffset<float>(0x04D8);                           // 0x04D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbStationaryEndpoints                                       = new ExternalOffset<byte/*(bool)*/>(0x04DC);                  // 0x04DC(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbSplineHasBeenEdited                                       = new ExternalOffset<byte/*(bool)*/>(0x04DD);                  // 0x04DD(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbModifiedByConstructionScript                              = new ExternalOffset<byte/*(bool)*/>(0x04DE);                  // 0x04DE(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbInputSplinePointsToConstructionScript                     = new ExternalOffset<byte/*(bool)*/>(0x04DF);                  // 0x04DF(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbDrawDebug                                                 = new ExternalOffset<byte/*(bool)*/>(0x04E0);                  // 0x04E0(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbClosedLoop                                                = new ExternalOffset<byte/*(bool)*/>(0x04E1);                  // 0x04E1(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<byte/*(bool)*/>                    _offbLoopPositionOverride                                      = new ExternalOffset<byte/*(bool)*/>(0x04E2);                  // 0x04E2(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<float>                             _offLoopPosition                                               = new ExternalOffset<float>(0x04E4);                           // 0x04E4(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FVector>                           _offDefaultUpVector                                            = new ExternalOffset<FVector>(0x04E8, false);                  // 0x04E8(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FSplineCurves                                      SplineCurves                                                   => _offSplineCurves.GetValue();
	public FInterpCurveVector                                 SplineInfo                                                     => _offSplineInfo.GetValue();
	public FInterpCurveQuat                                   SplineRotInfo                                                  => _offSplineRotInfo.GetValue();
	public FInterpCurveVector                                 SplineScaleInfo                                                => _offSplineScaleInfo.GetValue();
	public FInterpCurveFloat                                  SplineReparamTable                                             => _offSplineReparamTable.GetValue();
	public byte/*(bool)*/                                     bAllowSplineEditingPerInstance                                 => _offbAllowSplineEditingPerInstance.GetValue();
	public int                                                ReparamStepsPerSegment                                         => _offReparamStepsPerSegment.GetValue();
	public float                                              Duration                                                       => _offDuration.GetValue();
	public byte/*(bool)*/                                     bStationaryEndpoints                                           => _offbStationaryEndpoints.GetValue();
	public byte/*(bool)*/                                     bSplineHasBeenEdited                                           => _offbSplineHasBeenEdited.GetValue();
	public byte/*(bool)*/                                     bModifiedByConstructionScript                                  => _offbModifiedByConstructionScript.GetValue();
	public byte/*(bool)*/                                     bInputSplinePointsToConstructionScript                         => _offbInputSplinePointsToConstructionScript.GetValue();
	public byte/*(bool)*/                                     bDrawDebug                                                     => _offbDrawDebug.GetValue();
	public byte/*(bool)*/                                     bClosedLoop                                                    => _offbClosedLoop.GetValue();
	public byte/*(bool)*/                                     bLoopPositionOverride                                          => _offbLoopPositionOverride.GetValue();
	public float                                              LoopPosition                                                   => _offLoopPosition.GetValue();
	public FVector                                            DefaultUpVector                                                => _offDefaultUpVector.GetValue();
	#endregion


}

// Class Engine.SplineMeshActor
// 0x0018 (0x0250 - 0x0238)
public class ASplineMeshActor : AActor
{
	#region Offsets
	private ExternalOffset<USplineMeshComponent>              _offSplineMeshComponent                                        = new ExternalOffset<USplineMeshComponent>(0x0248, true);      // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public USplineMeshComponent                               SplineMeshComponent                                            => _offSplineMeshComponent.GetValue();
	#endregion


}

// Class Engine.SplineMeshComponent
// 0x0099 (0x0531 - 0x0498)
public class USplineMeshComponent : UStaticMeshComponent
{
	#region Offsets
	private ExternalOffset<FSplineMeshParams>                 _offSplineParams                                               = new ExternalOffset<FSplineMeshParams>(0x04A0, false);        // 0x04A0(0x0058) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offSplineUpDir                                                = new ExternalOffset<FVector>(0x04F8, false);                  // 0x04F8(0x000C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowSplineEditingPerInstance                             = new ExternalOffset<char>(0x0504, false);                     // 0x0504(0x0001) BIT_FIELD (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSmoothInterpRollScale                                     = new ExternalOffset<char>(0x0504, false);                     // 0x0504(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESplineMeshAxis>>      _offForwardAxis                                                = new ExternalOffset<TEnumAsByte<ESplineMeshAxis>>(0x0508, false); // 0x0508(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSplineBoundaryMin                                          = new ExternalOffset<float>(0x050C);                           // 0x050C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offSplineBoundaryMax                                          = new ExternalOffset<float>(0x0510);                           // 0x0510(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UBodySetup>                        _offBodySetup                                                  = new ExternalOffset<UBodySetup>(0x0518, true);                // 0x0518(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offCachedMeshBodySetupGuid                                    = new ExternalOffset<FGuid>(0x0520, false);                    // 0x0520(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbMeshDirty                                                 = new ExternalOffset<char>(0x0530, false);                     // 0x0530(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FSplineMeshParams                                  SplineParams                                                   => _offSplineParams.GetValue();
	public FVector                                            SplineUpDir                                                    => _offSplineUpDir.GetValue();
	public TEnumAsByte<ESplineMeshAxis>                       ForwardAxis                                                    => _offForwardAxis.GetValue();
	public float                                              SplineBoundaryMin                                              => _offSplineBoundaryMin.GetValue();
	public float                                              SplineBoundaryMax                                              => _offSplineBoundaryMax.GetValue();
	public UBodySetup                                         BodySetup                                                      => _offBodySetup.GetValue();
	public FGuid                                              CachedMeshBodySetupGuid                                        => _offCachedMeshBodySetupGuid.GetValue();
	#endregion


}

// Class Engine.SpotLightComponent
// 0x0010 (0x0394 - 0x0384)
public class USpotLightComponent : UPointLightComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offOuterConeAngle                                             = new ExternalOffset<float>(0x038C);                           // 0x038C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLightShaftConeAngle                                        = new ExternalOffset<float>(0x0390);                           // 0x0390(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              OuterConeAngle                                                 => _offOuterConeAngle.GetValue();
	public float                                              LightShaftConeAngle                                            => _offLightShaftConeAngle.GetValue();
	#endregion


}

// Class Engine.SpringArmComponent
// 0x00D0 (0x0250 - 0x0180)
public class USpringArmComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<FVector>                           _offSocketOffset                                               = new ExternalOffset<FVector>(0x021C, false);                  // 0x021C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offTargetOffset                                               = new ExternalOffset<FVector>(0x0228, false);                  // 0x0228(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offProbeSize                                                  = new ExternalOffset<float>(0x0234);                           // 0x0234(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ECollisionChannel>>    _offProbeChannel                                               = new ExternalOffset<TEnumAsByte<ECollisionChannel>>(0x0238, false); // 0x0238(0x0001) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDoCollisionTest                                           = new ExternalOffset<char>(0x023C, false);                     // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUsePawnControlRotation                                    = new ExternalOffset<char>(0x023C, false);                     // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritPitch                                              = new ExternalOffset<char>(0x023C, false);                     // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritYaw                                                = new ExternalOffset<char>(0x023C, false);                     // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbInheritRoll                                               = new ExternalOffset<char>(0x023C, false);                     // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableCameraLag                                           = new ExternalOffset<char>(0x023C, false);                     // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbEnableCameraRotationLag                                   = new ExternalOffset<char>(0x023C, false);                     // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbUseCameraLagSubstepping                                   = new ExternalOffset<char>(0x023C, false);                     // 0x023C(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbDrawDebugLagMarkers                                       = new ExternalOffset<char>(0x023D, false);                     // 0x023D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCameraLagSpeed                                             = new ExternalOffset<float>(0x0240);                           // 0x0240(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCameraRotationLagSpeed                                     = new ExternalOffset<float>(0x0244);                           // 0x0244(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCameraLagMaxTimeStep                                       = new ExternalOffset<float>(0x0248);                           // 0x0248(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offCameraLagMaxDistance                                       = new ExternalOffset<float>(0x024C);                           // 0x024C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVector                                            SocketOffset                                                   => _offSocketOffset.GetValue();
	public FVector                                            TargetOffset                                                   => _offTargetOffset.GetValue();
	public float                                              ProbeSize                                                      => _offProbeSize.GetValue();
	public TEnumAsByte<ECollisionChannel>                     ProbeChannel                                                   => _offProbeChannel.GetValue();
	public float                                              CameraLagSpeed                                                 => _offCameraLagSpeed.GetValue();
	public float                                              CameraRotationLagSpeed                                         => _offCameraRotationLagSpeed.GetValue();
	public float                                              CameraLagMaxTimeStep                                           => _offCameraLagMaxTimeStep.GetValue();
	public float                                              CameraLagMaxDistance                                           => _offCameraLagMaxDistance.GetValue();
	#endregion


}

// Class Engine.StaticMesh
// 0x0102 (0x0140 - 0x003E)
public class UStaticMesh : UStreamableRenderAsset
{
	#region Offsets
	private ExternalOffset<FPerPlatformInt>                   _offMinLOD                                                     = new ExternalOffset<FPerPlatformInt>(0x0060, false);          // 0x0060(0x0004) (NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLpvBiasMultiplier                                          = new ExternalOffset<float>(0x0064);                           // 0x0064(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FStaticMaterial>>           _offStaticMaterials                                            = new ExternalOffset<TArray<FStaticMaterial>>(0x0068, false);  // 0x0068(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offLightmapUVDensity                                          = new ExternalOffset<float>(0x0078);                           // 0x0078(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offLightMapResolution                                         = new ExternalOffset<int>(0x007C);                             // 0x007C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offLightMapCoordinateIndex                                    = new ExternalOffset<int>(0x0080);                             // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offDistanceFieldSelfShadowBias                                = new ExternalOffset<float>(0x0084);                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UBodySetup>                        _offBodySetup                                                  = new ExternalOffset<UBodySetup>(0x0088, true);                // 0x0088(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offLODForCollision                                            = new ExternalOffset<int>(0x0090);                             // 0x0090(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbGenerateMeshDistanceField                                 = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbStripComplexCollisionForConsole                           = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Deprecated, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHasNavigationData                                         = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportUniformlyDistributedSampling                       = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAllowCPUAccess                                            = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbSupportGpuUniformlyDistributedSampling                    = new ExternalOffset<char>(0x0094, false);                     // 0x0094(0x0001) BIT_FIELD (Edit, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UStaticMeshSocket>>         _offSockets                                                    = new ExternalOffset<TArray<UStaticMeshSocket>>(0x00B8, false); // 0x00B8(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offPositiveBoundsExtension                                    = new ExternalOffset<FVector>(0x00D8, false);                  // 0x00D8(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offNegativeBoundsExtension                                    = new ExternalOffset<FVector>(0x00E4, false);                  // 0x00E4(0x000C) (Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FBoxSphereBounds>                  _offExtendedBounds                                             = new ExternalOffset<FBoxSphereBounds>(0x00F0, false);         // 0x00F0(0x001C) (ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offElementToIgnoreForTexFactor                                = new ExternalOffset<int>(0x010C);                             // 0x010C(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TArray<UAssetUserData>>            _offAssetUserData                                              = new ExternalOffset<TArray<UAssetUserData>>(0x0110, false);   // 0x0110(0x0010) (Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, AdvancedDisplay, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<UObject>                           _offEditableMesh                                               = new ExternalOffset<UObject>(0x0128, true);                   // 0x0128(0x0008) (Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UStaticMesh>                       _offComplexCollisionMesh                                       = new ExternalOffset<UStaticMesh>(0x0130, true);               // 0x0130(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UNavCollisionBase>                 _offNavCollision                                               = new ExternalOffset<UNavCollisionBase>(0x0138, true);         // 0x0138(0x0008) (Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, DuplicateTransient, IsPlainOldData, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FPerPlatformInt                                    MinLOD                                                         => _offMinLOD.GetValue();
	public float                                              LpvBiasMultiplier                                              => _offLpvBiasMultiplier.GetValue();
	public TArray<FStaticMaterial>                            StaticMaterials                                                => _offStaticMaterials.GetValue();
	public float                                              LightmapUVDensity                                              => _offLightmapUVDensity.GetValue();
	public int                                                LightMapResolution                                             => _offLightMapResolution.GetValue();
	public int                                                LightMapCoordinateIndex                                        => _offLightMapCoordinateIndex.GetValue();
	public float                                              DistanceFieldSelfShadowBias                                    => _offDistanceFieldSelfShadowBias.GetValue();
	public UBodySetup                                         BodySetup                                                      => _offBodySetup.GetValue();
	public int                                                LODForCollision                                                => _offLODForCollision.GetValue();
	public TArray<UStaticMeshSocket>                          Sockets                                                        => _offSockets.GetValue();
	public FVector                                            PositiveBoundsExtension                                        => _offPositiveBoundsExtension.GetValue();
	public FVector                                            NegativeBoundsExtension                                        => _offNegativeBoundsExtension.GetValue();
	public FBoxSphereBounds                                   ExtendedBounds                                                 => _offExtendedBounds.GetValue();
	public int                                                ElementToIgnoreForTexFactor                                    => _offElementToIgnoreForTexFactor.GetValue();
	public TArray<UAssetUserData>                             AssetUserData                                                  => _offAssetUserData.GetValue();
	public UObject                                            EditableMesh                                                   => _offEditableMesh.GetValue();
	public UStaticMesh                                        ComplexCollisionMesh                                           => _offComplexCollisionMesh.GetValue();
	public UNavCollisionBase                                  NavCollision                                                   => _offNavCollision.GetValue();
	#endregion


}

// Class Engine.StaticMeshSocket
// 0x0040 (0x0068 - 0x0028)
public class UStaticMeshSocket : UObject
{
	#region Offsets
	private ExternalOffset<FName>                             _offSocketName                                                 = new ExternalOffset<FName>(0x0028, false);                    // 0x0028(0x0008) (BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offRelativeLocation                                           = new ExternalOffset<FVector>(0x0030, false);                  // 0x0030(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRotator>                          _offRelativeRotation                                           = new ExternalOffset<FRotator>(0x003C, false);                 // 0x003C(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector>                           _offRelativeScale                                              = new ExternalOffset<FVector>(0x0048, false);                  // 0x0048(0x000C) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FString>                           _offTag                                                        = new ExternalOffset<FString>(0x0058, false);                  // 0x0058(0x0010) (Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FName                                              SocketName                                                     => _offSocketName.GetValue();
	public FVector                                            RelativeLocation                                               => _offRelativeLocation.GetValue();
	public FRotator                                           RelativeRotation                                               => _offRelativeRotation.GetValue();
	public FVector                                            RelativeScale                                                  => _offRelativeScale.GetValue();
	public FString                                            Tag                                                            => _offTag.GetValue();
	#endregion


}

// Class Engine.StereoLayerComponent
// 0x00E4 (0x0264 - 0x0180)
public class UStereoLayerComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<UTexture>                          _offTexture                                                    = new ExternalOffset<UTexture>(0x0220, true);                  // 0x0220(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<UTexture>                          _offLeftTexture                                                = new ExternalOffset<UTexture>(0x0228, true);                  // 0x0228(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
//	private ExternalOffset<char>                              _offbQuadPreserveTextureRatio                                  = new ExternalOffset<char>(0x0230, false);                     // 0x0230(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FVector2D>                         _offQuadSize                                                   = new ExternalOffset<FVector2D>(0x0234, false);                // 0x0234(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<FBox2D>                            _offUVRect                                                     = new ExternalOffset<FBox2D>(0x023C, false);                   // 0x023C(0x0014) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offCylinderRadius                                             = new ExternalOffset<float>(0x0250);                           // 0x0250(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<float>                             _offCylinderOverlayArc                                         = new ExternalOffset<float>(0x0254);                           // 0x0254(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offCylinderHeight                                             = new ExternalOffset<int>(0x0258);                             // 0x0258(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TEnumAsByte<EStereoLayerType>>     _offStereoLayerType                                            = new ExternalOffset<TEnumAsByte<EStereoLayerType>>(0x025C, false); // 0x025C(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<TEnumAsByte<EStereoLayerShape>>    _offStereoLayerShape                                           = new ExternalOffset<TEnumAsByte<EStereoLayerShape>>(0x025D, false); // 0x025D(0x0001) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	private ExternalOffset<int>                               _offPriority                                                   = new ExternalOffset<int>(0x0260);                             // 0x0260(0x0004) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	#endregion

	#region Props
	public UTexture                                           Texture                                                        => _offTexture.GetValue();
	public UTexture                                           LeftTexture                                                    => _offLeftTexture.GetValue();
	public FVector2D                                          QuadSize                                                       => _offQuadSize.GetValue();
	public FBox2D                                             UVRect                                                         => _offUVRect.GetValue();
	public float                                              CylinderRadius                                                 => _offCylinderRadius.GetValue();
	public float                                              CylinderOverlayArc                                             => _offCylinderOverlayArc.GetValue();
	public int                                                CylinderHeight                                                 => _offCylinderHeight.GetValue();
	public TEnumAsByte<EStereoLayerType>                      StereoLayerType                                                => _offStereoLayerType.GetValue();
	public TEnumAsByte<EStereoLayerShape>                     StereoLayerShape                                               => _offStereoLayerShape.GetValue();
	public int                                                Priority                                                       => _offPriority.GetValue();
	#endregion


}

// Class Engine.StereoLayerFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
public class UStereoLayerFunctionLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.StringTable
// 0x0000 (0x0028 - 0x0028)
public class UStringTable : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SubsurfaceProfile
// 0x0050 (0x0078 - 0x0028)
public class USubsurfaceProfile : UObject
{
	#region Offsets
	private ExternalOffset<FSubsurfaceProfileStruct>          _offSettings                                                   = new ExternalOffset<FSubsurfaceProfileStruct>(0x0028, false); // 0x0028(0x0050) (Edit, NoDestructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FSubsurfaceProfileStruct                           Settings                                                       => _offSettings.GetValue();
	#endregion


}

// Class Engine.SubsystemBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
public class USubsystemBlueprintLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SubUVAnimation
// 0x0018 (0x0040 - 0x0028)
public class USubUVAnimation : UObject
{
	#region Offsets
	private ExternalOffset<UTexture2D>                        _offSubUVTexture                                               = new ExternalOffset<UTexture2D>(0x0028, true);                // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSubImages_Horizontal                                       = new ExternalOffset<int>(0x0030);                             // 0x0030(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSubImages_Vertical                                         = new ExternalOffset<int>(0x0034);                             // 0x0034(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ESubUVBoundingVertexCount>> _offBoundingMode                                               = new ExternalOffset<TEnumAsByte<ESubUVBoundingVertexCount>>(0x0038, false); // 0x0038(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EOpacitySourceMode>>   _offOpacitySourceMode                                          = new ExternalOffset<TEnumAsByte<EOpacitySourceMode>>(0x0039, false); // 0x0039(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offAlphaThreshold                                             = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTexture2D                                         SubUVTexture                                                   => _offSubUVTexture.GetValue();
	public int                                                SubImages_Horizontal                                           => _offSubImages_Horizontal.GetValue();
	public int                                                SubImages_Vertical                                             => _offSubImages_Vertical.GetValue();
	public TEnumAsByte<ESubUVBoundingVertexCount>             BoundingMode                                                   => _offBoundingMode.GetValue();
	public TEnumAsByte<EOpacitySourceMode>                    OpacitySourceMode                                              => _offOpacitySourceMode.GetValue();
	public float                                              AlphaThreshold                                                 => _offAlphaThreshold.GetValue();
	#endregion


}

// Class Engine.TimecodeProvider
// 0x0000 (0x0028 - 0x0028)
public class UTimecodeProvider : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.SystemTimeTimecodeProvider
// 0x0008 (0x0030 - 0x0028)
public class USystemTimeTimecodeProvider : UTimecodeProvider
{
	#region Offsets
	private ExternalOffset<FFrameRate>                        _offFrameRate                                                  = new ExternalOffset<FFrameRate>(0x0028, false);               // 0x0028(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FFrameRate                                         FrameRate                                                      => _offFrameRate.GetValue();
	#endregion


}

// Class Engine.TargetPoint
// 0x0010 (0x0248 - 0x0238)
public class ATargetPoint : AActor
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.TextPropertyTestObject
// 0x0048 (0x0070 - 0x0028)
public class UTextPropertyTestObject : UObject
{
	#region Offsets
	private ExternalOffset<FText>                             _offDefaultedText                                              = new ExternalOffset<FText>(0x0028, false);                    // 0x0028(0x0018) (NativeAccessSpecifierPublic)
	private ExternalOffset<FText>                             _offUndefaultedText                                            = new ExternalOffset<FText>(0x0040, false);                    // 0x0040(0x0018) (NativeAccessSpecifierPublic)
	private ExternalOffset<FText>                             _offTransientText                                              = new ExternalOffset<FText>(0x0058, false);                    // 0x0058(0x0018) (NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FText                                              DefaultedText                                                  => _offDefaultedText.GetValue();
	public FText                                              UndefaultedText                                                => _offUndefaultedText.GetValue();
	public FText                                              TransientText                                                  => _offTransientText.GetValue();
	#endregion


}

// Class Engine.TextRenderActor
// 0x0018 (0x0250 - 0x0238)
public class ATextRenderActor : AActor
{
	#region Offsets
	private ExternalOffset<UTextRenderComponent>              _offTextRender                                                 = new ExternalOffset<UTextRenderComponent>(0x0248, true);      // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UTextRenderComponent                               TextRender                                                     => _offTextRender.GetValue();
	#endregion


}

// Class Engine.TextRenderComponent
// 0x004C (0x0451 - 0x0405)
public class UTextRenderComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<FText>                             _offText                                                       = new ExternalOffset<FText>(0x0408, false);                    // 0x0408(0x0018) (Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	private ExternalOffset<UMaterialInterface>                _offTextMaterial                                               = new ExternalOffset<UMaterialInterface>(0x0420, true);        // 0x0420(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UFont>                             _offFont                                                       = new ExternalOffset<UFont>(0x0428, true);                     // 0x0428(0x0008) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EHorizTextAligment>>   _offHorizontalAlignment                                        = new ExternalOffset<TEnumAsByte<EHorizTextAligment>>(0x0430, false); // 0x0430(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EVerticalTextAligment>> _offVerticalAlignment                                          = new ExternalOffset<TEnumAsByte<EVerticalTextAligment>>(0x0431, false); // 0x0431(0x0001) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FColor>                            _offTextRenderColor                                            = new ExternalOffset<FColor>(0x0434, false);                   // 0x0434(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offXScale                                                     = new ExternalOffset<float>(0x0438);                           // 0x0438(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offYScale                                                     = new ExternalOffset<float>(0x043C);                           // 0x043C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offWorldSize                                                  = new ExternalOffset<float>(0x0440);                           // 0x0440(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInvDefaultSize                                             = new ExternalOffset<float>(0x0444);                           // 0x0444(0x0004) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offHorizSpacingAdjust                                         = new ExternalOffset<float>(0x0448);                           // 0x0448(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offVertSpacingAdjust                                          = new ExternalOffset<float>(0x044C);                           // 0x044C(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAlwaysRenderAsText                                        = new ExternalOffset<char>(0x0450, false);                     // 0x0450(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FText                                              Text                                                           => _offText.GetValue();
	public UMaterialInterface                                 TextMaterial                                                   => _offTextMaterial.GetValue();
	public UFont                                              Font                                                           => _offFont.GetValue();
	public TEnumAsByte<EHorizTextAligment>                    HorizontalAlignment                                            => _offHorizontalAlignment.GetValue();
	public TEnumAsByte<EVerticalTextAligment>                 VerticalAlignment                                              => _offVerticalAlignment.GetValue();
	public FColor                                             TextRenderColor                                                => _offTextRenderColor.GetValue();
	public float                                              XScale                                                         => _offXScale.GetValue();
	public float                                              YScale                                                         => _offYScale.GetValue();
	public float                                              WorldSize                                                      => _offWorldSize.GetValue();
	public float                                              InvDefaultSize                                                 => _offInvDefaultSize.GetValue();
	public float                                              HorizSpacingAdjust                                             => _offHorizSpacingAdjust.GetValue();
	public float                                              VertSpacingAdjust                                              => _offVertSpacingAdjust.GetValue();
	#endregion


}

// Class Engine.Texture2DDynamic
// 0x0061 (0x00D9 - 0x0078)
public class UTexture2DDynamic : UTexture
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EPixelFormat>>         _offFormat                                                     = new ExternalOffset<TEnumAsByte<EPixelFormat>>(0x00D8, false); // 0x00D8(0x0001) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EPixelFormat>                          Format                                                         => _offFormat.GetValue();
	#endregion


}

// Class Engine.TextureLightProfile
// 0x0024 (0x0108 - 0x00E4)
public class UTextureLightProfile : UTexture2D
{
	#region Offsets
	private ExternalOffset<float>                             _offBrightness                                                 = new ExternalOffset<float>(0x0100);                           // 0x0100(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTextureMultiplier                                          = new ExternalOffset<float>(0x0104);                           // 0x0104(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Brightness                                                     => _offBrightness.GetValue();
	public float                                              TextureMultiplier                                              => _offTextureMultiplier.GetValue();
	#endregion


}

// Class Engine.TextureRenderTargetCube
// 0x001A (0x00EE - 0x00D4)
public class UTextureRenderTargetCube : UTextureRenderTarget
{
	#region Offsets
	private ExternalOffset<int>                               _offSizeX                                                      = new ExternalOffset<int>(0x00D8);                             // 0x00D8(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FLinearColor>                      _offClearColor                                                 = new ExternalOffset<FLinearColor>(0x00DC, false);             // 0x00DC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EPixelFormat>>         _offOverrideFormat                                             = new ExternalOffset<TEnumAsByte<EPixelFormat>>(0x00EC, false); // 0x00EC(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbHDR                                                       = new ExternalOffset<char>(0x00ED, false);                     // 0x00ED(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbForceLinearGamma                                          = new ExternalOffset<char>(0x00ED, false);                     // 0x00ED(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                SizeX                                                          => _offSizeX.GetValue();
	public FLinearColor                                       ClearColor                                                     => _offClearColor.GetValue();
	public TEnumAsByte<EPixelFormat>                          OverrideFormat                                                 => _offOverrideFormat.GetValue();
	#endregion


}

// Class Engine.ThumbnailInfo
// 0x0000 (0x0028 - 0x0028)
public class UThumbnailInfo : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.TimelineComponent
// 0x00A9 (0x0171 - 0x00C8)
public class UTimelineComponent : UActorComponent
{
	#region Offsets
	private ExternalOffset<FTimeline>                         _offTheTimeline                                                = new ExternalOffset<FTimeline>(0x00D8, false);                // 0x00D8(0x0098) (Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPrivate)
//	private ExternalOffset<char>                              _offbIgnoreTimeDilation                                        = new ExternalOffset<char>(0x0170, false);                     // 0x0170(0x0001) BIT_FIELD (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public FTimeline                                          TheTimeline                                                    => _offTheTimeline.GetValue();
	#endregion


}

// Class Engine.TimelineTemplate
// 0x0088 (0x00B0 - 0x0028)
public class UTimelineTemplate : UObject
{
	#region Offsets
	private ExternalOffset<float>                             _offTimelineLength                                             = new ExternalOffset<float>(0x0028);                           // 0x0028(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<ETimelineLengthMode>>  _offLengthMode                                                 = new ExternalOffset<TEnumAsByte<ETimelineLengthMode>>(0x002C, false); // 0x002C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbAutoPlay                                                  = new ExternalOffset<char>(0x002D, false);                     // 0x002D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLoop                                                      = new ExternalOffset<char>(0x002D, false);                     // 0x002D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbReplicated                                                = new ExternalOffset<char>(0x002D, false);                     // 0x002D(0x0001) BIT_FIELD (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbIgnoreTimeDilation                                        = new ExternalOffset<char>(0x002D, false);                     // 0x002D(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FTTEventTrack>>             _offEventTracks                                                = new ExternalOffset<TArray<FTTEventTrack>>(0x0030, false);    // 0x0030(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FTTFloatTrack>>             _offFloatTracks                                                = new ExternalOffset<TArray<FTTFloatTrack>>(0x0040, false);    // 0x0040(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FTTVectorTrack>>            _offVectorTracks                                               = new ExternalOffset<TArray<FTTVectorTrack>>(0x0050, false);   // 0x0050(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FTTLinearColorTrack>>       _offLinearColorTracks                                          = new ExternalOffset<TArray<FTTLinearColorTrack>>(0x0060, false); // 0x0060(0x0010) (ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FBPVariableMetaDataEntry>>  _offMetaDataArray                                              = new ExternalOffset<TArray<FBPVariableMetaDataEntry>>(0x0070, false); // 0x0070(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offTimelineGuid                                               = new ExternalOffset<FGuid>(0x0080, false);                    // 0x0080(0x0010) (ZeroConstructor, DuplicateTransient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FName>                             _offVariableName                                               = new ExternalOffset<FName>(0x0090, false);                    // 0x0090(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                             _offDirectionPropertyName                                      = new ExternalOffset<FName>(0x0098, false);                    // 0x0098(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                             _offUpdateFunctionName                                         = new ExternalOffset<FName>(0x00A0, false);                    // 0x00A0(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<FName>                             _offFinishedFunctionName                                       = new ExternalOffset<FName>(0x00A8, false);                    // 0x00A8(0x0008) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public float                                              TimelineLength                                                 => _offTimelineLength.GetValue();
	public TEnumAsByte<ETimelineLengthMode>                   LengthMode                                                     => _offLengthMode.GetValue();
	public TArray<FTTEventTrack>                              EventTracks                                                    => _offEventTracks.GetValue();
	public TArray<FTTFloatTrack>                              FloatTracks                                                    => _offFloatTracks.GetValue();
	public TArray<FTTVectorTrack>                             VectorTracks                                                   => _offVectorTracks.GetValue();
	public TArray<FTTLinearColorTrack>                        LinearColorTracks                                              => _offLinearColorTracks.GetValue();
	public TArray<FBPVariableMetaDataEntry>                   MetaDataArray                                                  => _offMetaDataArray.GetValue();
	public FGuid                                              TimelineGuid                                                   => _offTimelineGuid.GetValue();
	public FName                                              VariableName                                                   => _offVariableName.GetValue();
	public FName                                              DirectionPropertyName                                          => _offDirectionPropertyName.GetValue();
	public FName                                              UpdateFunctionName                                             => _offUpdateFunctionName.GetValue();
	public FName                                              FinishedFunctionName                                           => _offFinishedFunctionName.GetValue();
	#endregion


}

// Class Engine.TireType
// 0x0004 (0x0034 - 0x0030)
public class UTireType : UDataAsset
{
	#region Offsets
	private ExternalOffset<float>                             _offFrictionScale                                              = new ExternalOffset<float>(0x0030);                           // 0x0030(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              FrictionScale                                                  => _offFrictionScale.GetValue();
	#endregion


}

// Class Engine.TouchInterface
// 0x002C (0x0054 - 0x0028)
public class UTouchInterface : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FTouchInputControl>>        _offControls                                                   = new ExternalOffset<TArray<FTouchInputControl>>(0x0028, false); // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offActiveOpacity                                              = new ExternalOffset<float>(0x0038);                           // 0x0038(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offInactiveOpacity                                            = new ExternalOffset<float>(0x003C);                           // 0x003C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTimeUntilDeactive                                          = new ExternalOffset<float>(0x0040);                           // 0x0040(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTimeUntilReset                                             = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offActivationDelay                                            = new ExternalOffset<float>(0x0048);                           // 0x0048(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbPreventRecenter                                           = new ExternalOffset<byte/*(bool)*/>(0x004C);                  // 0x004C(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offStartupDelay                                               = new ExternalOffset<float>(0x0050);                           // 0x0050(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FTouchInputControl>                         Controls                                                       => _offControls.GetValue();
	public float                                              ActiveOpacity                                                  => _offActiveOpacity.GetValue();
	public float                                              InactiveOpacity                                                => _offInactiveOpacity.GetValue();
	public float                                              TimeUntilDeactive                                              => _offTimeUntilDeactive.GetValue();
	public float                                              TimeUntilReset                                                 => _offTimeUntilReset.GetValue();
	public float                                              ActivationDelay                                                => _offActivationDelay.GetValue();
	public byte/*(bool)*/                                     bPreventRecenter                                               => _offbPreventRecenter.GetValue();
	public float                                              StartupDelay                                                   => _offStartupDelay.GetValue();
	#endregion


}

// Class Engine.TriggerCapsule
// 0x0000 (0x0250 - 0x0250)
public class ATriggerCapsule : ATriggerBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.TriggerSphere
// 0x0000 (0x0250 - 0x0250)
public class ATriggerSphere : ATriggerBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.TriggerVolume
// 0x0000 (0x0280 - 0x0280)
public class ATriggerVolume : AVolume
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0038 - 0x0038)
public class UTwitterIntegrationBase : UPlatformInterfaceBase
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.UserDefinedEnum
// 0x0080 (0x00B0 - 0x0030)
public class UUserDefinedEnum : UEnum
{
	#region Offsets
//	private TMap<struct FName, struct FText>                  _offDisplayNameMap                                             = new ExternalOffset<TMap<FText>>(0x0060, false);              // 0x0060(0x0050) (ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	#endregion


}

// Class Engine.UserDefinedStruct
// 0x0024 (0x00BC - 0x0098)
public class UUserDefinedStruct : UScriptStruct
{
	#region Offsets
	private ExternalOffset<TEnumAsByte<EUserDefinedStructureStatus>> _offStatus                                                     = new ExternalOffset<TEnumAsByte<EUserDefinedStructureStatus>>(0x00A8, false); // 0x00A8(0x0001) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FGuid>                             _offGuid                                                       = new ExternalOffset<FGuid>(0x00AC, false);                    // 0x00AC(0x0010) (ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TEnumAsByte<EUserDefinedStructureStatus>           Status                                                         => _offStatus.GetValue();
	public FGuid                                              Guid                                                           => _offGuid.GetValue();
	#endregion


}

// Class Engine.UserInterfaceSettings
// 0x0230 (0x0258 - 0x0028)
public class UUserInterfaceSettings : UDeveloperSettings
{
	#region Offsets
	private ExternalOffset<ERenderFocusRule>                  _offRenderFocusRule                                            = new ExternalOffset<ERenderFocusRule>(0x0038, false);         // 0x0038(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private TMap<TEnumAsByte<EMouseCursor>, struct FHardwareCursorReference> _offHardwareCursors                                            = new ExternalOffset<FHardwareCursorReference>>(0x0040, false); // 0x0040(0x0050) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
//	private TMap<TEnumAsByte<EMouseCursor>, struct FSoftClassPath> _offSoftwareCursors                                            = new ExternalOffset<FSoftClassPath>>(0x0090, false);          // 0x0090(0x0050) (Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offDefaultCursor                                              = new ExternalOffset<FSoftClassPath>(0x00E0, false);           // 0x00E0(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offTextEditBeamCursor                                         = new ExternalOffset<FSoftClassPath>(0x00F8, false);           // 0x00F8(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offCrosshairsCursor                                           = new ExternalOffset<FSoftClassPath>(0x0110, false);           // 0x0110(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offHandCursor                                                 = new ExternalOffset<FSoftClassPath>(0x0128, false);           // 0x0128(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offGrabHandCursor                                             = new ExternalOffset<FSoftClassPath>(0x0140, false);           // 0x0140(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offGrabHandClosedCursor                                       = new ExternalOffset<FSoftClassPath>(0x0158, false);           // 0x0158(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offSlashedCircleCursor                                        = new ExternalOffset<FSoftClassPath>(0x0170, false);           // 0x0170(0x0018) (ZeroConstructor, Config, Deprecated, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offApplicationScale                                           = new ExternalOffset<float>(0x0188);                           // 0x0188(0x0004) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<EUIScalingRule>                    _offUIScaleRule                                                = new ExternalOffset<EUIScalingRule>(0x018C, false);           // 0x018C(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FSoftClassPath>                    _offCustomScalingRuleClass                                     = new ExternalOffset<FSoftClassPath>(0x0190, false);           // 0x0190(0x0018) (Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<FRuntimeFloatCurve>                _offUIScaleCurve                                               = new ExternalOffset<FRuntimeFloatCurve>(0x01A8, false);       // 0x01A8(0x0088) (Edit, Config, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbAllowHighDPIInGameMode                                    = new ExternalOffset<byte/*(bool)*/>(0x0230);                  // 0x0230(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbLoadWidgetsOnDedicatedServer                              = new ExternalOffset<byte/*(bool)*/>(0x0231);                  // 0x0231(0x0001) (Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<UObject>>                   _offCursorClasses                                              = new ExternalOffset<TArray<UObject>>(0x0238, false);          // 0x0238(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	private ExternalOffset<UClass>                            _offCustomScalingRuleClassInstance                             = new ExternalOffset<UClass>(0x0248, true);                    // 0x0248(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	private ExternalOffset<UDPICustomScalingRule>             _offCustomScalingRule                                          = new ExternalOffset<UDPICustomScalingRule>(0x0250, true);     // 0x0250(0x0008) (ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public ERenderFocusRule                                   RenderFocusRule                                                => _offRenderFocusRule.GetValue();
	public FSoftClassPath                                     DefaultCursor                                                  => _offDefaultCursor.GetValue();
	public FSoftClassPath                                     TextEditBeamCursor                                             => _offTextEditBeamCursor.GetValue();
	public FSoftClassPath                                     CrosshairsCursor                                               => _offCrosshairsCursor.GetValue();
	public FSoftClassPath                                     HandCursor                                                     => _offHandCursor.GetValue();
	public FSoftClassPath                                     GrabHandCursor                                                 => _offGrabHandCursor.GetValue();
	public FSoftClassPath                                     GrabHandClosedCursor                                           => _offGrabHandClosedCursor.GetValue();
	public FSoftClassPath                                     SlashedCircleCursor                                            => _offSlashedCircleCursor.GetValue();
	public float                                              ApplicationScale                                               => _offApplicationScale.GetValue();
	public EUIScalingRule                                     UIScaleRule                                                    => _offUIScaleRule.GetValue();
	public FSoftClassPath                                     CustomScalingRuleClass                                         => _offCustomScalingRuleClass.GetValue();
	public FRuntimeFloatCurve                                 UIScaleCurve                                                   => _offUIScaleCurve.GetValue();
	public byte/*(bool)*/                                     bAllowHighDPIInGameMode                                        => _offbAllowHighDPIInGameMode.GetValue();
	public byte/*(bool)*/                                     bLoadWidgetsOnDedicatedServer                                  => _offbLoadWidgetsOnDedicatedServer.GetValue();
	public TArray<UObject>                                    CursorClasses                                                  => _offCursorClasses.GetValue();
	public UClass                                             CustomScalingRuleClassInstance                                 => _offCustomScalingRuleClassInstance.GetValue();
	public UDPICustomScalingRule                              CustomScalingRule                                              => _offCustomScalingRule.GetValue();
	#endregion


}

// Class Engine.VectorField
// 0x0020 (0x0048 - 0x0028)
public class UVectorField : UObject
{
	#region Offsets
	private ExternalOffset<FBox>                              _offBounds                                                     = new ExternalOffset<FBox>(0x0028, false);                     // 0x0028(0x001C) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offIntensity                                                  = new ExternalOffset<float>(0x0044);                           // 0x0044(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FBox                                               Bounds                                                         => _offBounds.GetValue();
	public float                                              Intensity                                                      => _offIntensity.GetValue();
	#endregion


}

// Class Engine.VectorFieldAnimated
// 0x0040 (0x0088 - 0x0048)
public class UVectorFieldAnimated : UVectorField
{
	#region Offsets
	private ExternalOffset<UTexture2D>                        _offTexture                                                    = new ExternalOffset<UTexture2D>(0x0048, true);                // 0x0048(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TEnumAsByte<EVectorFieldConstructionOp>> _offConstructionOp                                             = new ExternalOffset<TEnumAsByte<EVectorFieldConstructionOp>>(0x0050, false); // 0x0050(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offVolumeSizeX                                                = new ExternalOffset<int>(0x0054);                             // 0x0054(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offVolumeSizeY                                                = new ExternalOffset<int>(0x0058);                             // 0x0058(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offVolumeSizeZ                                                = new ExternalOffset<int>(0x005C);                             // 0x005C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSubImagesX                                                 = new ExternalOffset<int>(0x0060);                             // 0x0060(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSubImagesY                                                 = new ExternalOffset<int>(0x0064);                             // 0x0064(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offFrameCount                                                 = new ExternalOffset<int>(0x0068);                             // 0x0068(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offFramesPerSecond                                            = new ExternalOffset<float>(0x006C);                           // 0x006C(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbLoop                                                      = new ExternalOffset<char>(0x0070, false);                     // 0x0070(0x0001) BIT_FIELD (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<UVectorFieldStatic>                _offNoiseField                                                 = new ExternalOffset<UVectorFieldStatic>(0x0078, true);        // 0x0078(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNoiseScale                                                 = new ExternalOffset<float>(0x0080);                           // 0x0080(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offNoiseMax                                                   = new ExternalOffset<float>(0x0084);                           // 0x0084(0x0004) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UTexture2D                                         Texture                                                        => _offTexture.GetValue();
	public TEnumAsByte<EVectorFieldConstructionOp>            ConstructionOp                                                 => _offConstructionOp.GetValue();
	public int                                                VolumeSizeX                                                    => _offVolumeSizeX.GetValue();
	public int                                                VolumeSizeY                                                    => _offVolumeSizeY.GetValue();
	public int                                                VolumeSizeZ                                                    => _offVolumeSizeZ.GetValue();
	public int                                                SubImagesX                                                     => _offSubImagesX.GetValue();
	public int                                                SubImagesY                                                     => _offSubImagesY.GetValue();
	public int                                                FrameCount                                                     => _offFrameCount.GetValue();
	public float                                              FramesPerSecond                                                => _offFramesPerSecond.GetValue();
	public UVectorFieldStatic                                 NoiseField                                                     => _offNoiseField.GetValue();
	public float                                              NoiseScale                                                     => _offNoiseScale.GetValue();
	public float                                              NoiseMax                                                       => _offNoiseMax.GetValue();
	#endregion


}

// Class Engine.VectorFieldComponent
// 0x0014 (0x0419 - 0x0405)
public class UVectorFieldComponent : UPrimitiveComponent
{
	#region Offsets
	private ExternalOffset<UVectorField>                      _offVectorField                                                = new ExternalOffset<UVectorField>(0x0408, true);              // 0x0408(0x0008) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offIntensity                                                  = new ExternalOffset<float>(0x0410);                           // 0x0410(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offTightness                                                  = new ExternalOffset<float>(0x0414);                           // 0x0414(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPreviewVectorField                                        = new ExternalOffset<char>(0x0418, false);                     // 0x0418(0x0001) BIT_FIELD (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public UVectorField                                       VectorField                                                    => _offVectorField.GetValue();
	public float                                              Intensity                                                      => _offIntensity.GetValue();
	public float                                              Tightness                                                      => _offTightness.GetValue();
	#endregion


}

// Class Engine.VectorFieldStatic
// 0x00B8 (0x0100 - 0x0048)
public class UVectorFieldStatic : UVectorField
{
	#region Offsets
	private ExternalOffset<int>                               _offSizeX                                                      = new ExternalOffset<int>(0x0048);                             // 0x0048(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSizeY                                                      = new ExternalOffset<int>(0x004C);                             // 0x004C(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<int>                               _offSizeZ                                                      = new ExternalOffset<int>(0x0050);                             // 0x0050(0x0004) (Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbAllowCPUAccess                                            = new ExternalOffset<byte/*(bool)*/>(0x0054);                  // 0x0054(0x0001) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FVector4>>                  _offCPUData                                                    = new ExternalOffset<TArray<FVector4>>(0x00F0, false);         // 0x00F0(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                SizeX                                                          => _offSizeX.GetValue();
	public int                                                SizeY                                                          => _offSizeY.GetValue();
	public int                                                SizeZ                                                          => _offSizeZ.GetValue();
	public byte/*(bool)*/                                     bAllowCPUAccess                                                => _offbAllowCPUAccess.GetValue();
	public TArray<FVector4>                                   CPUData                                                        => _offCPUData.GetValue();
	#endregion


}

// Class Engine.VectorFieldVolume
// 0x0018 (0x0250 - 0x0238)
public class AVectorFieldVolume : AActor
{
	#region Offsets
	private ExternalOffset<UVectorFieldComponent>             _offVectorFieldComponent                                       = new ExternalOffset<UVectorFieldComponent>(0x0248, true);     // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UVectorFieldComponent                              VectorFieldComponent                                           => _offVectorFieldComponent.GetValue();
	#endregion


}

// Class Engine.VirtualTexture
// 0x0000 (0x0028 - 0x0028)
public class UVirtualTexture : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LightMapVirtualTexture
// 0x0000 (0x0028 - 0x0028)
public class ULightMapVirtualTexture : UVirtualTexture
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.LightMapVirtualTexture2D
// 0x002C (0x0110 - 0x00E4)
public class ULightMapVirtualTexture2D : UTexture2D
{
	#region Offsets
	private ExternalOffset<TArray<int8_t>>                    _offTypeToLayer                                                = new ExternalOffset<TArray<int8_t>>(0x0100, false);           // 0x0100(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<int8_t>                                     TypeToLayer                                                    => _offTypeToLayer.GetValue();
	#endregion


}

// Class Engine.VirtualTexturePoolConfig
// 0x0018 (0x0040 - 0x0028)
public class UVirtualTexturePoolConfig : UObject
{
	#region Offsets
	private ExternalOffset<int>                               _offDefaultSizeInMegabyte                                      = new ExternalOffset<int>(0x0028);                             // 0x0028(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<TArray<FVirtualTextureSpacePoolConfig>> _offPools                                                      = new ExternalOffset<TArray<FVirtualTextureSpacePoolConfig>>(0x0030, false); // 0x0030(0x0010) (ZeroConstructor, Config, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public int                                                DefaultSizeInMegabyte                                          => _offDefaultSizeInMegabyte.GetValue();
	public TArray<FVirtualTextureSpacePoolConfig>             Pools                                                          => _offPools.GetValue();
	#endregion


}

// Class Engine.VisualLoggerAutomationTests
// 0x0000 (0x0028 - 0x0028)
public class UVisualLoggerAutomationTests : UObject
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.VisualLoggerDebugSnapshotInterface
// 0x0000 (0x0028 - 0x0028)
public class UVisualLoggerDebugSnapshotInterface : UInterface
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.VisualLoggerKismetLibrary
// 0x0000 (0x0028 - 0x0028)
public class UVisualLoggerKismetLibrary : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.VOIPTalker
// 0x0028 (0x00F0 - 0x00C8)
public class UVOIPTalker : UActorComponent
{
	#region Offsets
	private ExternalOffset<FVoiceSettings>                    _offSettings                                                   = new ExternalOffset<FVoiceSettings>(0x00D8, false);           // 0x00D8(0x0018) (Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FVoiceSettings                                     Settings                                                       => _offSettings.GetValue();
	#endregion


}

// Class Engine.VOIPStatics
// 0x0000 (0x0028 - 0x0028)
public class UVOIPStatics : UBlueprintFunctionLibrary
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.VolumeTexture
// 0x0058 (0x00D0 - 0x0078)
public class UVolumeTexture : UTexture
{
	#region Offsets
	#endregion

	#region Props
	#endregion


}

// Class Engine.VolumetricLightmapDensityVolume
// 0x0008 (0x0288 - 0x0280)
public class AVolumetricLightmapDensityVolume : AVolume
{
	#region Offsets
	private ExternalOffset<FInt32Interval>                    _offAllowedMipLevelRange                                       = new ExternalOffset<FInt32Interval>(0x0280, false);           // 0x0280(0x0008) (Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public FInt32Interval                                     AllowedMipLevelRange                                           => _offAllowedMipLevelRange.GetValue();
	#endregion


}

// Class Engine.WindDirectionalSource
// 0x0008 (0x0250 - 0x0248)
public class AWindDirectionalSource : AInfo
{
	#region Offsets
	private ExternalOffset<UWindDirectionalSourceComponent>   _offComponent                                                  = new ExternalOffset<UWindDirectionalSourceComponent>(0x0248, true); // 0x0248(0x0008) (Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	#endregion

	#region Props
	public UWindDirectionalSourceComponent                    Component                                                      => _offComponent.GetValue();
	#endregion


}

// Class Engine.WindDirectionalSourceComponent
// 0x00AD (0x022D - 0x0180)
public class UWindDirectionalSourceComponent : USceneComponent
{
	#region Offsets
	private ExternalOffset<float>                             _offSpeed                                                      = new ExternalOffset<float>(0x021C);                           // 0x021C(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMinGustAmount                                              = new ExternalOffset<float>(0x0220);                           // 0x0220(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offMaxGustAmount                                              = new ExternalOffset<float>(0x0224);                           // 0x0224(0x0004) (Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRadius                                                     = new ExternalOffset<float>(0x0228);                           // 0x0228(0x0004) (Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
//	private ExternalOffset<char>                              _offbPointWind                                                 = new ExternalOffset<char>(0x022C, false);                     // 0x022C(0x0001) BIT_FIELD (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public float                                              Speed                                                          => _offSpeed.GetValue();
	public float                                              MinGustAmount                                                  => _offMinGustAmount.GetValue();
	public float                                              MaxGustAmount                                                  => _offMaxGustAmount.GetValue();
	public float                                              Radius                                                         => _offRadius.GetValue();
	#endregion


}

// Class Engine.WorldComposition
// 0x0040 (0x0068 - 0x0028)
public class UWorldComposition : UObject
{
	#region Offsets
	private ExternalOffset<TArray<ULevelStreaming>>           _offTilesStreaming                                             = new ExternalOffset<TArray<ULevelStreaming>>(0x0048, false);  // 0x0048(0x0010) (ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	private ExternalOffset<double>                            _offTilesStreamingTimeThreshold                                = new ExternalOffset<double>(0x0058, false);                   // 0x0058(0x0008) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbLoadAllTilesDuringCinematic                               = new ExternalOffset<byte/*(bool)*/>(0x0060);                  // 0x0060(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<byte/*(bool)*/>                    _offbRebaseOriginIn3DSpace                                     = new ExternalOffset<byte/*(bool)*/>(0x0061);                  // 0x0061(0x0001) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	private ExternalOffset<float>                             _offRebaseOriginDistance                                       = new ExternalOffset<float>(0x0064);                           // 0x0064(0x0004) (ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<ULevelStreaming>                            TilesStreaming                                                 => _offTilesStreaming.GetValue();
	public double                                             TilesStreamingTimeThreshold                                    => _offTilesStreamingTimeThreshold.GetValue();
	public byte/*(bool)*/                                     bLoadAllTilesDuringCinematic                                   => _offbLoadAllTilesDuringCinematic.GetValue();
	public byte/*(bool)*/                                     bRebaseOriginIn3DSpace                                         => _offbRebaseOriginIn3DSpace.GetValue();
	public float                                              RebaseOriginDistance                                           => _offRebaseOriginDistance.GetValue();
	#endregion


}

// Class Engine.HierarchicalLODSetup
// 0x0010 (0x0038 - 0x0028)
public class UHierarchicalLODSetup : UObject
{
	#region Offsets
	private ExternalOffset<TArray<FHierarchicalSimplification>> _offHierarchicalLODSetup                                       = new ExternalOffset<TArray<FHierarchicalSimplification>>(0x0028, false); // 0x0028(0x0010) (Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	#endregion

	#region Props
	public TArray<FHierarchicalSimplification>                HierarchicalLODSetup                                           => _offHierarchicalLODSetup.GetValue();
	#endregion


}


}